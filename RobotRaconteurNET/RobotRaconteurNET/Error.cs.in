// Copyright 2011-2020 Wason Technology, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file is automatically generated. Do not edit.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace RobotRaconteur
{
    /// <summary>
    /// The base class for Robot Raconteur exceptions.  These exception contain a Robot Raconteur error code
    /// </summary>
    public class RobotRaconteurException : Exception
    {
        /// <summary>
        /// Initializes an empty exception
        /// </summary>
        public RobotRaconteurException()
            : base()
        {
        }

        /// <summary>
        /// Initializes a new exception
        /// </summary>
        /// <param name="ErrorCode">The error code</param>
        /// <param name="error">The Robot Raconteur error name</param>
        /// <param name="message">The Robot Raconteur error message</param>
        public RobotRaconteurException(MessageErrorType ErrorCode, string error, string message, string subname = null, object param_ = null)
            : base(message)
        {
            Error = error;
            this.ErrorCode = ErrorCode;
            this.ErrorSubName = subname;
            this.ErrorParam = param_;
        }

        /// <summary>
        /// Initializes a Robot Raconteur exception that contains a C# exception
        /// </summary>
        /// <param name="message">The message</param>
        /// <param name="innerexception">The C# contained by this exception</param>
        public RobotRaconteurException(string message, Exception innerexception)
            : base(message, innerexception)
        {

        }

        /// <summary>
        /// The error code
        /// </summary>
        public MessageErrorType ErrorCode=MessageErrorType.None;

        /// <summary>
        /// The error name
        /// </summary>
        public string Error = "";

        /// <summary>
        /// An optional error sub-name
        /// </summary>
        public string ErrorSubName = null;

        /// <summary>
        /// An optional error parameter
        /// </summary>
        public object ErrorParam = null;

        /// <summary>
        /// Returns a string representation of this exception
        /// </summary>
        /// <returns>The string representation</returns>
        public override string ToString()
        {
            return "RobotRaconteurException: " + Error + ": " + Message;
        }


    }

    @RR_ERRORS_DECL@

    /// <summary>
    /// Helper class for working with RobotRaconteurException
    /// </summary>
    public static class RobotRaconteurExceptionUtil
    {
        /// <summary>
        /// Populates an entry with an exception
        /// </summary>
        /// <param name="exception">The exception to serialize</param>
        /// <param name="entry">The entry to populate</param>
        public static void ExceptionToMessageEntry(Exception exception, MessageEntry entry)
        {
            MessageElementData param2 = null;
            string errorsubname = null;
            RobotRaconteurException rr_exp = exception as RobotRaconteurException;
            if (rr_exp != null)
            {
                if (rr_exp.ErrorSubName != null)
                {
                    errorsubname = rr_exp.ErrorSubName;
                }

                if (rr_exp.ErrorParam != null)
                {
                    try
                    {
                        param2 = (MessageElementData)RobotRaconteurNode.s.PackVarType(rr_exp.ErrorParam);
                    }
                    catch (Exception)
                    {
                        //TODO: log error
                    }
                }
            }
            else
            {
                string errorsubname1 = exception.Data["ErrorSubName"] as string;
                if (errorsubname1 != null)
                {
                    errorsubname = errorsubname1;
                }

                object param3 = exception.Data["ErrorParam"];
                if (param3 != null)
                {
                    try
                    {
                        param2 = (MessageElementData)RobotRaconteurNode.s.PackVarType(param3);

                    }
                    catch (Exception)
                    {
                        //TODO: log error
                    }
                }
            }

			using (param2)
            {

			@RR_ERRORS_CATCH@

            if (rr_exp != null)
            {
                RobotRaconteurException r=rr_exp;
                entry.Error = r.ErrorCode;
                entry.AddElement("errorname", r.Error);
                entry.AddElement("errorstring", r.Message);
                if (r.ErrorSubName != null)
                {
                    entry.AddElement("errorsubname",r.ErrorSubName);
                }

                if (param2 != null)
                {
                    entry.AddElement("errorparam",param2);
                }

            }
            else
            {
                entry.Error = MessageErrorType.RemoteError;
                entry.AddElement("errorname", exception.GetType().ToString());
                entry.AddElement("errorstring", exception.Message);

            }
            }
        }

        public static HandlerErrorInfo ExceptionToErrorInfo(Exception exception)
        {
            MessageElement param2 = null;
            string errorsubname = null;
            RobotRaconteurException rr_exp = exception as RobotRaconteurException;
            HandlerErrorInfo error_info = new HandlerErrorInfo();
            if (rr_exp != null)
            {
                if (rr_exp.ErrorSubName != null)
                {
                    errorsubname = rr_exp.ErrorSubName;
                }

                if (rr_exp.ErrorParam != null)
                {
                    try
                    {
                        param2 = MessageElementUtil.NewMessageElement("errorparam", RobotRaconteurNode.s.PackVarType(rr_exp.ErrorParam));
                    }
                    catch (Exception)
                    {
                        //TODO: log error
                    }
                }
            }
            else
            {
                string errorsubname1 = exception.Data["ErrorSubName"] as string;
                if (errorsubname1 != null)
                {
                    errorsubname = errorsubname1;
                }

                object param3 = exception.Data["ErrorParam"];
                if (param3 != null)
                {
                    try
                    {
                        param2 = MessageElementUtil.NewMessageElement("errorparam", RobotRaconteurNode.s.PackVarType(param3));

                    }
                    catch (Exception)
                    {
                        //TODO: log error
                    }
                }
            }

			using (param2)
            {

			@RR_ERRORS_CATCH2@

            if (rr_exp != null)
            {
                RobotRaconteurException r=rr_exp;
                error_info.error_code = (uint)r.ErrorCode;
                error_info.errorname = r.Error;
                error_info.errormessage = r.Message;
                if (r.ErrorSubName != null)
                {
                    error_info.errorsubname = r.ErrorSubName;
                }

                if (param2 != null)
                {
                    error_info.param_ = param2;
                }

                return error_info;

            }
            else
            {
                error_info.error_code = (uint)MessageErrorType.RemoteError;
                error_info.errorname = exception.GetType().ToString();
                error_info.errormessage = exception.Message;

                return error_info;

            }
            }
        }

        public static Exception ErrorInfoToException(HandlerErrorInfo error_info)
        {
            return ErrorCodeToException((MessageErrorType)error_info.error_code, error_info.errorname, error_info.errormessage, error_info.errorsubname, error_info.param_);
        }

        /// <summary>
        /// Converts a MessageEntry containing an error to the correct exception
        /// </summary>
        /// <param name="entry">The entry containing an error</param>
        /// <returns>An populated exception</returns>
        public static Exception ErrorCodeToException(MessageErrorType error_code, string errorname, string errorstring, string errorsubname, MessageElement param_)
        {
            if (errorsubname == "")
            {
                errorsubname = null;
            }

            object param2 = null;
            if (param_ != null)
            {
                using (param_)
                {
                try
                {
                    param2 = RobotRaconteurNode.s.UnpackVarType(param_);
                }
                catch (Exception)
                {
                    //TODO: log error
                }
                }
            }

            switch (error_code)
            {
				case MessageErrorType.RemoteError:
                    RobotRaconteurException e1= new RobotRaconteurRemoteException(errorname,errorstring,errorsubname,param2);
                    return RobotRaconteurNode.s.DownCastException(e1);
                @RR_ERRORS_CASE@
            }

            return new RobotRaconteurException(error_code,errorname,errorstring,errorsubname,param2);

        }
    }
}
