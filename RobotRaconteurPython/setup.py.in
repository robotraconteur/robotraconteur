from setuptools import setup, Distribution, Extension

# Suggested at https://stackoverflow.com/questions/24071491/how-can-i-make-a-python-wheel-from-an-existing-native-library
class BinaryDistribution(Distribution):
    def is_pure(foo):
        return False
    def has_ext_modules(foo):
        return True

# Suggested at https://stackoverflow.com/questions/51522248/overriding-python-setuptools-default-include-dirs-and-library-dirs
from setuptools.command.build_ext import build_ext as build_ext_orig
class build_ext(build_ext_orig):
    def run(self):
      pass


setup(name='RobotRaconteur',
      version='@ROBOTRACONTEUR_VERSION_PY@',
      description='Robot Raconteur Python Library',
      author='John Wason',
      author_email='wason@wasontech.com',
      url='http://robotraconteur.com/',
      packages=['RobotRaconteur'],
      @ROBOTRACONTEUR_PYTHON3_SETUPPY_EXTRA@
      package_data={'RobotRaconteur': ['_RobotRaconteurPython.pyd', '_RobotRaconteurPython.so']},
	  distclass=BinaryDistribution,
	  license='Apache-2.0',
	  install_requires=['numpy'],
	  long_description='This package contains Python wrappers for the Robot Raconteur communication framework. ' \
	  'See http://robotraconteur.com/documentation for more information.',
      cmdclass={'build_ext': build_ext},
      ext_modules=[
        Extension(
          name='RobotRaconteur._RobotRaconteurPython',
          sources=[]
        )
      ]
    )