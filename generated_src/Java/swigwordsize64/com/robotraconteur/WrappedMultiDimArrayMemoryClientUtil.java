/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.robotraconteur;

public class WrappedMultiDimArrayMemoryClientUtil {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected WrappedMultiDimArrayMemoryClientUtil(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(WrappedMultiDimArrayMemoryClientUtil obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(WrappedMultiDimArrayMemoryClientUtil obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings({"deprecation", "removal"})
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RobotRaconteurJavaJNI.delete_WrappedMultiDimArrayMemoryClientUtil(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public static RRMultiDimArrayUntyped read(MultiDimArrayMemoryBase mem, vector_uint64_t memorypos, vector_uint64_t count) {
    long cPtr = RobotRaconteurJavaJNI.WrappedMultiDimArrayMemoryClientUtil_read(MultiDimArrayMemoryBase.getCPtr(mem), mem, vector_uint64_t.getCPtr(memorypos), memorypos, vector_uint64_t.getCPtr(count), count);
    return (cPtr == 0) ? null : new RRMultiDimArrayUntyped(cPtr, true);
  }

  public static void write(MultiDimArrayMemoryBase mem, vector_uint64_t memorypos, RRMultiDimArrayUntyped buffer, vector_uint64_t bufferpos, vector_uint64_t count) {
    RobotRaconteurJavaJNI.WrappedMultiDimArrayMemoryClientUtil_write(MultiDimArrayMemoryBase.getCPtr(mem), mem, vector_uint64_t.getCPtr(memorypos), memorypos, RRMultiDimArrayUntyped.getCPtr(buffer), buffer, vector_uint64_t.getCPtr(bufferpos), bufferpos, vector_uint64_t.getCPtr(count), count);
  }

  public static MemberDefinition_Direction direction(MultiDimArrayMemoryBase mem) {
    return MemberDefinition_Direction.swigToEnum(RobotRaconteurJavaJNI.WrappedMultiDimArrayMemoryClientUtil_direction(MultiDimArrayMemoryBase.getCPtr(mem), mem));
  }

  public WrappedMultiDimArrayMemoryClientUtil() {
    this(RobotRaconteurJavaJNI.new_WrappedMultiDimArrayMemoryClientUtil(), true);
  }

}
