/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.robotraconteur;

public class vector_usingdefinition extends java.util.AbstractList<UsingDefinition> implements java.util.RandomAccess {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected vector_usingdefinition(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(vector_usingdefinition obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(vector_usingdefinition obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings({"deprecation", "removal"})
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RobotRaconteurJavaJNI.delete_vector_usingdefinition(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public vector_usingdefinition(UsingDefinition[] initialElements) {
    this();
    reserve(initialElements.length);

    for (UsingDefinition element : initialElements) {
      add(element);
    }
  }

  public vector_usingdefinition(Iterable<UsingDefinition> initialElements) {
    this();
    for (UsingDefinition element : initialElements) {
      add(element);
    }
  }

  public UsingDefinition get(int index) {
    return doGet(index);
  }

  public UsingDefinition set(int index, UsingDefinition e) {
    return doSet(index, e);
  }

  public boolean add(UsingDefinition e) {
    modCount++;
    doAdd(e);
    return true;
  }

  public void add(int index, UsingDefinition e) {
    modCount++;
    doAdd(index, e);
  }

  public UsingDefinition remove(int index) {
    modCount++;
    return doRemove(index);
  }

  protected void removeRange(int fromIndex, int toIndex) {
    modCount++;
    doRemoveRange(fromIndex, toIndex);
  }

  public int size() {
    return doSize();
  }

  public int capacity() {
    return doCapacity();
  }

  public void reserve(int n) {
    doReserve(n);
  }

  public vector_usingdefinition() {
    this(RobotRaconteurJavaJNI.new_vector_usingdefinition__SWIG_0(), true);
  }

  public vector_usingdefinition(vector_usingdefinition other) {
    this(RobotRaconteurJavaJNI.new_vector_usingdefinition__SWIG_1(vector_usingdefinition.getCPtr(other), other), true);
  }

  public boolean isEmpty() {
    return RobotRaconteurJavaJNI.vector_usingdefinition_isEmpty(swigCPtr, this);
  }

  public void clear() {
    RobotRaconteurJavaJNI.vector_usingdefinition_clear(swigCPtr, this);
  }

  public vector_usingdefinition(int count, UsingDefinition value) {
    this(RobotRaconteurJavaJNI.new_vector_usingdefinition__SWIG_2(count, UsingDefinition.getCPtr(value), value), true);
  }

  private int doCapacity() {
    return RobotRaconteurJavaJNI.vector_usingdefinition_doCapacity(swigCPtr, this);
  }

  private void doReserve(int n) {
    RobotRaconteurJavaJNI.vector_usingdefinition_doReserve(swigCPtr, this, n);
  }

  private int doSize() {
    return RobotRaconteurJavaJNI.vector_usingdefinition_doSize(swigCPtr, this);
  }

  private void doAdd(UsingDefinition x) {
    RobotRaconteurJavaJNI.vector_usingdefinition_doAdd__SWIG_0(swigCPtr, this, UsingDefinition.getCPtr(x), x);
  }

  private void doAdd(int index, UsingDefinition x) {
    RobotRaconteurJavaJNI.vector_usingdefinition_doAdd__SWIG_1(swigCPtr, this, index, UsingDefinition.getCPtr(x), x);
  }

  private UsingDefinition doRemove(int index) {
    long cPtr = RobotRaconteurJavaJNI.vector_usingdefinition_doRemove(swigCPtr, this, index);
    return (cPtr == 0) ? null : new UsingDefinition(cPtr, true);
  }

  private UsingDefinition doGet(int index) {
    long cPtr = RobotRaconteurJavaJNI.vector_usingdefinition_doGet(swigCPtr, this, index);
    return (cPtr == 0) ? null : new UsingDefinition(cPtr, true);
  }

  private UsingDefinition doSet(int index, UsingDefinition val) {
    long cPtr = RobotRaconteurJavaJNI.vector_usingdefinition_doSet(swigCPtr, this, index, UsingDefinition.getCPtr(val), val);
    return (cPtr == 0) ? null : new UsingDefinition(cPtr, true);
  }

  private void doRemoveRange(int fromIndex, int toIndex) {
    RobotRaconteurJavaJNI.vector_usingdefinition_doRemoveRange(swigCPtr, this, fromIndex, toIndex);
  }

}
