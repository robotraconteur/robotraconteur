/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.robotraconteur;

public class WrappedPipeSubscription {
  private transient long swigCPtr;
  private transient boolean swigCMemOwn;

  protected WrappedPipeSubscription(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(WrappedPipeSubscription obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void swigSetCMemOwn(boolean own) {
    swigCMemOwn = own;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        RobotRaconteurJavaJNI.delete_WrappedPipeSubscription(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public WrappedService_typed_packet receivePacket() {
    return new WrappedService_typed_packet(RobotRaconteurJavaJNI.WrappedPipeSubscription_receivePacket(swigCPtr, this), true);
  }

  public boolean tryReceivePacket(WrappedService_typed_packet packet) {
    return RobotRaconteurJavaJNI.WrappedPipeSubscription_tryReceivePacket(swigCPtr, this, WrappedService_typed_packet.getCPtr(packet), packet);
  }

  public boolean tryReceivePacketWait(WrappedService_typed_packet packet, int timeout, boolean peek) {
    return RobotRaconteurJavaJNI.WrappedPipeSubscription_tryReceivePacketWait__SWIG_0(swigCPtr, this, WrappedService_typed_packet.getCPtr(packet), packet, timeout, peek);
  }

  public boolean tryReceivePacketWait(WrappedService_typed_packet packet, int timeout) {
    return RobotRaconteurJavaJNI.WrappedPipeSubscription_tryReceivePacketWait__SWIG_1(swigCPtr, this, WrappedService_typed_packet.getCPtr(packet), packet, timeout);
  }

  public boolean tryReceivePacketWait(WrappedService_typed_packet packet) {
    return RobotRaconteurJavaJNI.WrappedPipeSubscription_tryReceivePacketWait__SWIG_2(swigCPtr, this, WrappedService_typed_packet.getCPtr(packet), packet);
  }

  public long available() {
    return RobotRaconteurJavaJNI.WrappedPipeSubscription_available(swigCPtr, this);
  }

  public long getActivePipeEndpointCount() {
    return RobotRaconteurJavaJNI.WrappedPipeSubscription_getActivePipeEndpointCount(swigCPtr, this);
  }

  public boolean getIgnoreReceived() {
    return RobotRaconteurJavaJNI.WrappedPipeSubscription_getIgnoreReceived(swigCPtr, this);
  }

  public void setIgnoreReceived(boolean ignore) {
    RobotRaconteurJavaJNI.WrappedPipeSubscription_setIgnoreReceived(swigCPtr, this, ignore);
  }

  public void close() {
    RobotRaconteurJavaJNI.WrappedPipeSubscription_close(swigCPtr, this);
  }

  public void setRRDirector(WrappedPipeSubscriptionDirector director, int id) {
    RobotRaconteurJavaJNI.WrappedPipeSubscription_setRRDirector(swigCPtr, this, WrappedPipeSubscriptionDirector.getCPtr(director), director, id);
  }

  public RobotRaconteurNode getNode() {
    long cPtr = RobotRaconteurJavaJNI.WrappedPipeSubscription_getNode(swigCPtr, this);
    return (cPtr == 0) ? null : new RobotRaconteurNode(cPtr, true);
  }

}
