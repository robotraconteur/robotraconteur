/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION) || defined(DEBUG_DIRECTOR_THREAD_NAME)
#include <iostream>
#endif

#include <exception>

#if defined(SWIG_JAVA_USE_THREAD_NAME)

#if !defined(SWIG_JAVA_GET_THREAD_NAME)
namespace Swig {
  SWIGINTERN int GetThreadName(char *name, size_t len);
}

#if defined(__linux__)

#include <sys/prctl.h>
SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  (void)len;
#if defined(PR_GET_NAME)
  return prctl(PR_GET_NAME, (unsigned long)name, 0, 0, 0);
#else
  (void)name;
  return 1;
#endif
}

#elif defined(__unix__) || defined(__APPLE__)

#include <pthread.h>
SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  return pthread_getname_np(pthread_self(), name, len);
}

#else

SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  (void)len;
  (void)name;
  return 1;
}
#endif

#endif

#endif

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
        JavaVMAttachArgs args;
        args.version = JNI_VERSION_1_2;
        args.group = NULL;
        args.name = NULL;
#if defined(SWIG_JAVA_USE_THREAD_NAME)
        char thread_name[64];  // MAX_TASK_COMM_LEN=16 is hard-coded in the Linux kernel and MacOS has MAXTHREADNAMESIZE=64.
        if (Swig::GetThreadName(thread_name, sizeof(thread_name)) == 0) {
          args.name = thread_name;
#if defined(DEBUG_DIRECTOR_THREAD_NAME)
          std::cout << "JNIEnvWrapper: thread name: " << thread_name << std::endl;
        } else {
          std::cout << "JNIEnvWrapper: Couldn't set Java thread name" << std::endl;
#endif
        }
#endif
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, &args);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, &args);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    // Return a C string of the exception message in the jthrowable passed in the constructor
    // If no message is available, null_string is return instead
    const char *message(const char *null_string = "Could not get exception message in JavaExceptionMessage") const {
      return message_.c_str(null_string);
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : jenv_(jenv), throwable_(throwable), classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message(0));
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : jenv_(0), throwable_(0), classname_(0), msg_(msg ? copystr(msg) : 0) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_ ? msg_ : "Unspecified DirectorException message";
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void throwException(JNIEnv *jenv) const {
      if (jenv) {
        if (jenv == jenv_ && throwable_) {
          // Throw original exception if not already pending
          jthrowable throwable = jenv->ExceptionOccurred();
          if (throwable && jenv->IsSameObject(throwable, throwable_) == JNI_FALSE) {
            jenv->ExceptionClear();
            throwable = 0;
          }
          if (!throwable)
            jenv->Throw(throwable_);
        } else {
          // Try and reconstruct original exception, but original stacktrace is not reconstructed
          jenv->ExceptionClear();

          jmethodID ctorMethodID = 0;
          jclass throwableclass = 0;
          if (classname_) {
            throwableclass = jenv->FindClass(classname_);
            if (throwableclass)
              ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
          }

          if (ctorMethodID) {
            jenv->ThrowNew(throwableclass, what());
          } else {
            SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
          }
        }
      }
    }

    // Deprecated - use throwException
    void raiseJavaException(JNIEnv *jenv) const {
      throwException(jenv);
    }

    // Create and throw the DirectorException
    static void raise(JNIEnv *jenv, jthrowable throwable) {
      throw DirectorException(jenv, throwable);
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    JNIEnv *jenv_;
    jthrowable throwable_;
    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  // Note side effect of clearing any pending exceptions
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}

namespace Swig {
  namespace {
    jclass jclass_RobotRaconteurJavaJNI = NULL;
    jmethodID director_method_ids[88];
  }
}

#if defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-function"
#endif    



#include <RobotRaconteur.h>
#include "RobotRaconteurWrapped.h"
#include <boost/lexical_cast.hpp>
#include <RobotRaconteur/RobotRaconteurServiceIndex_stubskel.h>
#include <boost/foreach.hpp>
using namespace RobotRaconteur;
using namespace std;


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <map>
#include <stdexcept>


#include <stdint.h>		// Use the C99 official header


#define SWIGWORDSIZE64
#ifndef LONG_MAX
#include <limits.h>
#endif
#if (__WORDSIZE == 32) || (LONG_MAX == INT_MAX)
# error "SWIG wrapped code invalid in 32 bit architecture, regenerate code using -DSWIGWORDSIZE32"
#endif


#include <stdio.h>


#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif


#include <boost/filesystem/path.hpp>


template<class T> struct SWIG_intrusive_deleter {
    void operator()(T *p) {
        if (p) 
          intrusive_ptr_release(p);
    }
};


/* Check for overflow converting to Java int (always signed 32-bit) from (unsigned variable-bit) size_t */
SWIGINTERN jint SWIG_JavaIntFromSize_t(size_t size) {
  static const jint JINT_MAX = 0x7FFFFFFF;
  return (size > (size_t)JINT_MAX) ? -1 : (jint)size;
}


SWIGINTERN jint SWIG_VectorSize(size_t size) {
  jint sz = SWIG_JavaIntFromSize_t(size);
  if (sz == -1)
    throw std::out_of_range("vector size is too large to fit into a Java int");
  return sz;
}

SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_2(jint count,std::string const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< std::string >(static_cast<std::vector< std::string >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_std_string_Sg__doSize(std::vector< std::string > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doAdd__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doAdd__SWIG_1(std::vector< std::string > *self,jint index,std::vector< std::string >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__doRemove(std::vector< std::string > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          std::string const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg__doGet(std::vector< std::string > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__doSet(std::vector< std::string > *self,jint index,std::vector< std::string >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          std::string const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__doRemoveRange(std::vector< std::string > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< int32_t > *new_std_vector_Sl_int32_t_Sg___SWIG_2(jint count,int const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< int >(static_cast<std::vector< int >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_int32_t_Sg__doSize(std::vector< int32_t > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_int32_t_Sg__doAdd__SWIG_0(std::vector< int32_t > *self,std::vector< int >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_int32_t_Sg__doAdd__SWIG_1(std::vector< int32_t > *self,jint index,std::vector< int >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< int >::value_type std_vector_Sl_int32_t_Sg__doRemove(std::vector< int32_t > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          int const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< int >::value_type const &std_vector_Sl_int32_t_Sg__doGet(std::vector< int32_t > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< int >::value_type std_vector_Sl_int32_t_Sg__doSet(std::vector< int32_t > *self,jint index,std::vector< int >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          int const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_int32_t_Sg__doRemoveRange(std::vector< int32_t > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< uint32_t > *new_std_vector_Sl_uint32_t_Sg___SWIG_2(jint count,unsigned int const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< unsigned int >(static_cast<std::vector< unsigned int >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_uint32_t_Sg__doSize(std::vector< uint32_t > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_uint32_t_Sg__doAdd__SWIG_0(std::vector< uint32_t > *self,std::vector< unsigned int >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_uint32_t_Sg__doAdd__SWIG_1(std::vector< uint32_t > *self,jint index,std::vector< unsigned int >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< unsigned int >::value_type std_vector_Sl_uint32_t_Sg__doRemove(std::vector< uint32_t > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          unsigned int const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< unsigned int >::value_type const &std_vector_Sl_uint32_t_Sg__doGet(std::vector< uint32_t > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< unsigned int >::value_type std_vector_Sl_uint32_t_Sg__doSet(std::vector< uint32_t > *self,jint index,std::vector< unsigned int >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          unsigned int const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_uint32_t_Sg__doRemoveRange(std::vector< uint32_t > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< int8_t > *new_std_vector_Sl_int8_t_Sg___SWIG_2(jint count,signed char const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< signed char >(static_cast<std::vector< signed char >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_int8_t_Sg__doSize(std::vector< int8_t > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_int8_t_Sg__doAdd__SWIG_0(std::vector< int8_t > *self,std::vector< signed char >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_int8_t_Sg__doAdd__SWIG_1(std::vector< int8_t > *self,jint index,std::vector< signed char >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< signed char >::value_type std_vector_Sl_int8_t_Sg__doRemove(std::vector< int8_t > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          signed char const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< signed char >::value_type const &std_vector_Sl_int8_t_Sg__doGet(std::vector< int8_t > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< signed char >::value_type std_vector_Sl_int8_t_Sg__doSet(std::vector< int8_t > *self,jint index,std::vector< signed char >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          signed char const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_int8_t_Sg__doRemoveRange(std::vector< int8_t > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< uint8_t > *new_std_vector_Sl_uint8_t_Sg___SWIG_2(jint count,unsigned char const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< unsigned char >(static_cast<std::vector< unsigned char >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_uint8_t_Sg__doSize(std::vector< uint8_t > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__doAdd__SWIG_0(std::vector< uint8_t > *self,std::vector< unsigned char >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__doAdd__SWIG_1(std::vector< uint8_t > *self,jint index,std::vector< unsigned char >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< unsigned char >::value_type std_vector_Sl_uint8_t_Sg__doRemove(std::vector< uint8_t > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          unsigned char const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< unsigned char >::value_type const &std_vector_Sl_uint8_t_Sg__doGet(std::vector< uint8_t > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< unsigned char >::value_type std_vector_Sl_uint8_t_Sg__doSet(std::vector< uint8_t > *self,jint index,std::vector< unsigned char >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          unsigned char const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__doRemoveRange(std::vector< uint8_t > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< uint64_t > *new_std_vector_Sl_uint64_t_Sg___SWIG_2(jint count,unsigned long const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< unsigned long >(static_cast<std::vector< unsigned long >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_uint64_t_Sg__doSize(std::vector< uint64_t > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_uint64_t_Sg__doAdd__SWIG_0(std::vector< uint64_t > *self,std::vector< unsigned long >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_uint64_t_Sg__doAdd__SWIG_1(std::vector< uint64_t > *self,jint index,std::vector< unsigned long >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< unsigned long >::value_type std_vector_Sl_uint64_t_Sg__doRemove(std::vector< uint64_t > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          unsigned long const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< unsigned long >::value_type const &std_vector_Sl_uint64_t_Sg__doGet(std::vector< uint64_t > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< unsigned long >::value_type std_vector_Sl_uint64_t_Sg__doSet(std::vector< uint64_t > *self,jint index,std::vector< unsigned long >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          unsigned long const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_uint64_t_Sg__doRemoveRange(std::vector< uint64_t > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::map< std::string,std::string,std::less< std::string > >::iterator std_map_Sl_std_string_Sc_std_string_Sg__iterator_getNextUnchecked(std::map< std::string,std::string >::iterator *self){
          std::map< std::string, std::string, std::less< std::string > >::iterator copy = (*self);
          return ++copy;
        }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__iterator_isNot(std::map< std::string,std::string >::iterator const *self,std::map< std::string,std::string >::iterator other){
          return (*self != other);
        }
SWIGINTERN std::string std_map_Sl_std_string_Sc_std_string_Sg__iterator_getKey(std::map< std::string,std::string >::iterator const *self){
          return (*self)->first;
        }
SWIGINTERN std::string std_map_Sl_std_string_Sc_std_string_Sg__iterator_getValue(std::map< std::string,std::string >::iterator const *self){
          return (*self)->second;
        }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__iterator_setValue(std::map< std::string,std::string >::iterator *self,std::string const &newValue){
          (*self)->second = newValue;
        }

  SWIGINTERN jint SWIG_MapSize(size_t size) {
    jint sz = SWIG_JavaIntFromSize_t(size);
    if (sz == -1) {
      throw std::out_of_range("map size is too large to fit into a Java int");
    }

    return sz;
  }

SWIGINTERN jint std_map_Sl_std_string_Sc_std_string_Sg__sizeImpl(std::map< std::string,std::string > const *self){
        return SWIG_MapSize(self->size());
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__containsImpl(std::map< std::string,std::string > *self,std::string const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__putUnchecked(std::map< std::string,std::string > *self,std::string const &key,std::string const &value){
        (*self)[key] = value;
      }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__removeUnchecked(std::map< std::string,std::string > *self,std::map< std::string,std::string,std::less< std::string > >::iterator const itr){
        self->erase(itr);
      }

struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN

SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *new_std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_TypeDefinition_Sg__Sg___SWIG_2(jint count,boost::shared_ptr< RobotRaconteur::TypeDefinition > const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > >(static_cast<std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_TypeDefinition_Sg__Sg__doSize(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_TypeDefinition_Sg__Sg__doAdd__SWIG_0(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *self,std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_TypeDefinition_Sg__Sg__doAdd__SWIG_1(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *self,jint index,std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > >::value_type std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_TypeDefinition_Sg__Sg__doRemove(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          boost::shared_ptr< RobotRaconteur::TypeDefinition > const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > >::value_type const &std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_TypeDefinition_Sg__Sg__doGet(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > >::value_type std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_TypeDefinition_Sg__Sg__doSet(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *self,jint index,std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          boost::shared_ptr< RobotRaconteur::TypeDefinition > const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_TypeDefinition_Sg__Sg__doRemoveRange(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *new_std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_MemberDefinition_Sg__Sg___SWIG_2(jint count,boost::shared_ptr< RobotRaconteur::MemberDefinition > const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > >(static_cast<std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_MemberDefinition_Sg__Sg__doSize(std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_MemberDefinition_Sg__Sg__doAdd__SWIG_0(std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *self,std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_MemberDefinition_Sg__Sg__doAdd__SWIG_1(std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *self,jint index,std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > >::value_type std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_MemberDefinition_Sg__Sg__doRemove(std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          boost::shared_ptr< RobotRaconteur::MemberDefinition > const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > >::value_type const &std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_MemberDefinition_Sg__Sg__doGet(std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > >::value_type std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_MemberDefinition_Sg__Sg__doSet(std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *self,jint index,std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          boost::shared_ptr< RobotRaconteur::MemberDefinition > const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_MemberDefinition_Sg__Sg__doRemoveRange(std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *new_std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ServiceEntryDefinition_Sg__Sg___SWIG_2(jint count,boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > >(static_cast<std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ServiceEntryDefinition_Sg__Sg__doSize(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ServiceEntryDefinition_Sg__Sg__doAdd__SWIG_0(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *self,std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ServiceEntryDefinition_Sg__Sg__doAdd__SWIG_1(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *self,jint index,std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > >::value_type std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ServiceEntryDefinition_Sg__Sg__doRemove(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > >::value_type const &std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ServiceEntryDefinition_Sg__Sg__doGet(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > >::value_type std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ServiceEntryDefinition_Sg__Sg__doSet(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *self,jint index,std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ServiceEntryDefinition_Sg__Sg__doRemoveRange(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *new_std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ConstantDefinition_Sg__Sg___SWIG_2(jint count,boost::shared_ptr< RobotRaconteur::ConstantDefinition > const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > >(static_cast<std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ConstantDefinition_Sg__Sg__doSize(std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ConstantDefinition_Sg__Sg__doAdd__SWIG_0(std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *self,std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ConstantDefinition_Sg__Sg__doAdd__SWIG_1(std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *self,jint index,std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > >::value_type std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ConstantDefinition_Sg__Sg__doRemove(std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          boost::shared_ptr< RobotRaconteur::ConstantDefinition > const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > >::value_type const &std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ConstantDefinition_Sg__Sg__doGet(std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > >::value_type std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ConstantDefinition_Sg__Sg__doSet(std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *self,jint index,std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          boost::shared_ptr< RobotRaconteur::ConstantDefinition > const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ConstantDefinition_Sg__Sg__doRemoveRange(std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *new_std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_EnumDefinition_Sg__Sg___SWIG_2(jint count,boost::shared_ptr< RobotRaconteur::EnumDefinition > const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > >(static_cast<std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_EnumDefinition_Sg__Sg__doSize(std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_EnumDefinition_Sg__Sg__doAdd__SWIG_0(std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *self,std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_EnumDefinition_Sg__Sg__doAdd__SWIG_1(std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *self,jint index,std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > >::value_type std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_EnumDefinition_Sg__Sg__doRemove(std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          boost::shared_ptr< RobotRaconteur::EnumDefinition > const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > >::value_type const &std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_EnumDefinition_Sg__Sg__doGet(std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > >::value_type std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_EnumDefinition_Sg__Sg__doSet(std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *self,jint index,std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          boost::shared_ptr< RobotRaconteur::EnumDefinition > const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_EnumDefinition_Sg__Sg__doRemoveRange(std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< RobotRaconteur::ConstantDefinition_StructField > *new_std_vector_Sl_RobotRaconteur_ConstantDefinition_StructField_Sg___SWIG_2(jint count,RobotRaconteur::ConstantDefinition_StructField const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< RobotRaconteur::ConstantDefinition_StructField >(static_cast<std::vector< RobotRaconteur::ConstantDefinition_StructField >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_RobotRaconteur_ConstantDefinition_StructField_Sg__doSize(std::vector< RobotRaconteur::ConstantDefinition_StructField > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_RobotRaconteur_ConstantDefinition_StructField_Sg__doAdd__SWIG_0(std::vector< RobotRaconteur::ConstantDefinition_StructField > *self,std::vector< RobotRaconteur::ConstantDefinition_StructField >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_RobotRaconteur_ConstantDefinition_StructField_Sg__doAdd__SWIG_1(std::vector< RobotRaconteur::ConstantDefinition_StructField > *self,jint index,std::vector< RobotRaconteur::ConstantDefinition_StructField >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< RobotRaconteur::ConstantDefinition_StructField >::value_type std_vector_Sl_RobotRaconteur_ConstantDefinition_StructField_Sg__doRemove(std::vector< RobotRaconteur::ConstantDefinition_StructField > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          RobotRaconteur::ConstantDefinition_StructField const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< RobotRaconteur::ConstantDefinition_StructField >::value_type const &std_vector_Sl_RobotRaconteur_ConstantDefinition_StructField_Sg__doGet(std::vector< RobotRaconteur::ConstantDefinition_StructField > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< RobotRaconteur::ConstantDefinition_StructField >::value_type std_vector_Sl_RobotRaconteur_ConstantDefinition_StructField_Sg__doSet(std::vector< RobotRaconteur::ConstantDefinition_StructField > *self,jint index,std::vector< RobotRaconteur::ConstantDefinition_StructField >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          RobotRaconteur::ConstantDefinition_StructField const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_RobotRaconteur_ConstantDefinition_StructField_Sg__doRemoveRange(std::vector< RobotRaconteur::ConstantDefinition_StructField > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< RobotRaconteur::EnumDefinitionValue > *new_std_vector_Sl_RobotRaconteur_EnumDefinitionValue_Sg___SWIG_2(jint count,RobotRaconteur::EnumDefinitionValue const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< RobotRaconteur::EnumDefinitionValue >(static_cast<std::vector< RobotRaconteur::EnumDefinitionValue >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_RobotRaconteur_EnumDefinitionValue_Sg__doSize(std::vector< RobotRaconteur::EnumDefinitionValue > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_RobotRaconteur_EnumDefinitionValue_Sg__doAdd__SWIG_0(std::vector< RobotRaconteur::EnumDefinitionValue > *self,std::vector< RobotRaconteur::EnumDefinitionValue >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_RobotRaconteur_EnumDefinitionValue_Sg__doAdd__SWIG_1(std::vector< RobotRaconteur::EnumDefinitionValue > *self,jint index,std::vector< RobotRaconteur::EnumDefinitionValue >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< RobotRaconteur::EnumDefinitionValue >::value_type std_vector_Sl_RobotRaconteur_EnumDefinitionValue_Sg__doRemove(std::vector< RobotRaconteur::EnumDefinitionValue > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          RobotRaconteur::EnumDefinitionValue const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< RobotRaconteur::EnumDefinitionValue >::value_type const &std_vector_Sl_RobotRaconteur_EnumDefinitionValue_Sg__doGet(std::vector< RobotRaconteur::EnumDefinitionValue > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< RobotRaconteur::EnumDefinitionValue >::value_type std_vector_Sl_RobotRaconteur_EnumDefinitionValue_Sg__doSet(std::vector< RobotRaconteur::EnumDefinitionValue > *self,jint index,std::vector< RobotRaconteur::EnumDefinitionValue >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          RobotRaconteur::EnumDefinitionValue const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_RobotRaconteur_EnumDefinitionValue_Sg__doRemoveRange(std::vector< RobotRaconteur::EnumDefinitionValue > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *new_std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_UsingDefinition_Sg__Sg___SWIG_2(jint count,boost::shared_ptr< RobotRaconteur::UsingDefinition > const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > >(static_cast<std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_UsingDefinition_Sg__Sg__doSize(std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_UsingDefinition_Sg__Sg__doAdd__SWIG_0(std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *self,std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_UsingDefinition_Sg__Sg__doAdd__SWIG_1(std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *self,jint index,std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > >::value_type std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_UsingDefinition_Sg__Sg__doRemove(std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          boost::shared_ptr< RobotRaconteur::UsingDefinition > const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > >::value_type const &std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_UsingDefinition_Sg__Sg__doGet(std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > >::value_type std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_UsingDefinition_Sg__Sg__doSet(std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *self,jint index,std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          boost::shared_ptr< RobotRaconteur::UsingDefinition > const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_UsingDefinition_Sg__Sg__doRemoveRange(std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *new_std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ExceptionDefinition_Sg__Sg___SWIG_2(jint count,boost::shared_ptr< RobotRaconteur::ExceptionDefinition > const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > >(static_cast<std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ExceptionDefinition_Sg__Sg__doSize(std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ExceptionDefinition_Sg__Sg__doAdd__SWIG_0(std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *self,std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ExceptionDefinition_Sg__Sg__doAdd__SWIG_1(std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *self,jint index,std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > >::value_type std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ExceptionDefinition_Sg__Sg__doRemove(std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          boost::shared_ptr< RobotRaconteur::ExceptionDefinition > const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > >::value_type const &std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ExceptionDefinition_Sg__Sg__doGet(std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > >::value_type std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ExceptionDefinition_Sg__Sg__doSet(std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *self,jint index,std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          boost::shared_ptr< RobotRaconteur::ExceptionDefinition > const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ExceptionDefinition_Sg__Sg__doRemoveRange(std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *new_std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ServiceDefinition_Sg__Sg___SWIG_2(jint count,boost::shared_ptr< RobotRaconteur::ServiceDefinition > const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > >(static_cast<std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ServiceDefinition_Sg__Sg__doSize(std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ServiceDefinition_Sg__Sg__doAdd__SWIG_0(std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *self,std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ServiceDefinition_Sg__Sg__doAdd__SWIG_1(std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *self,jint index,std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > >::value_type std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ServiceDefinition_Sg__Sg__doRemove(std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          boost::shared_ptr< RobotRaconteur::ServiceDefinition > const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > >::value_type const &std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ServiceDefinition_Sg__Sg__doGet(std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > >::value_type std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ServiceDefinition_Sg__Sg__doSet(std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *self,jint index,std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          boost::shared_ptr< RobotRaconteur::ServiceDefinition > const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ServiceDefinition_Sg__Sg__doRemoveRange(std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN boost::shared_ptr< RobotRaconteur::ServiceDefinition > RobotRaconteur_ServiceEntryDefinition_GetServiceDefinition(RobotRaconteur::ServiceEntryDefinition *self){
		return self->ServiceDefinition_.lock();
	}
SWIGINTERN void RobotRaconteur_ServiceEntryDefinition_SetServiceDefinition(RobotRaconteur::ServiceEntryDefinition *self,boost::shared_ptr< RobotRaconteur::ServiceDefinition > const &value){
		self->ServiceDefinition_=value;
	}
SWIGINTERN boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > RobotRaconteur_MemberDefinition_GetServiceEntry(RobotRaconteur::MemberDefinition *self){
		return self->ServiceEntry.lock();
	}
SWIGINTERN void RobotRaconteur_MemberDefinition_SetServiceEntry(RobotRaconteur::MemberDefinition *self,boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > const &value){
		self->ServiceEntry=value;
	}
SWIGINTERN boost::shared_ptr< RobotRaconteur::MemberDefinition > RobotRaconteur_TypeDefinition_GetMember(RobotRaconteur::TypeDefinition *self){
		return self->member.lock();
	}
SWIGINTERN void RobotRaconteur_TypeDefinition_SetMember(RobotRaconteur::TypeDefinition *self,boost::shared_ptr< RobotRaconteur::MemberDefinition > const &value){
		self->member=value;
	}
SWIGINTERN boost::shared_ptr< RobotRaconteur::ServiceDefinition > RobotRaconteur_UsingDefinition_GetService(RobotRaconteur::UsingDefinition *self){
			return self->service.lock();
		}
SWIGINTERN void RobotRaconteur_UsingDefinition_SetService(RobotRaconteur::UsingDefinition *self,boost::shared_ptr< RobotRaconteur::ServiceDefinition > const &value){
			self->service=value;
		}
SWIGINTERN boost::shared_ptr< RobotRaconteur::ServiceDefinition > RobotRaconteur_ConstantDefinition_GetService(RobotRaconteur::ConstantDefinition *self){
			return self->service.lock();
		}
SWIGINTERN void RobotRaconteur_ConstantDefinition_SetService(RobotRaconteur::ConstantDefinition *self,boost::shared_ptr< RobotRaconteur::ServiceDefinition > const &value){
			self->service=value;
		}
SWIGINTERN boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > RobotRaconteur_ConstantDefinition_GetServiceEntry(RobotRaconteur::ConstantDefinition *self){
			return self->service_entry.lock();
		}
SWIGINTERN void RobotRaconteur_ConstantDefinition_SetServiceEntry(RobotRaconteur::ConstantDefinition *self,boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > const &value){
			self->service_entry=value;
		}
SWIGINTERN boost::shared_ptr< RobotRaconteur::ServiceDefinition > RobotRaconteur_EnumDefinition_GetService(RobotRaconteur::EnumDefinition *self){
			return self->service.lock();
		}
SWIGINTERN void RobotRaconteur_EnumDefinition_SetService(RobotRaconteur::EnumDefinition *self,boost::shared_ptr< RobotRaconteur::ServiceDefinition > const &value){
			self->service=value;
		}
SWIGINTERN boost::shared_ptr< RobotRaconteur::ServiceDefinition > RobotRaconteur_ExceptionDefinition_GetService(RobotRaconteur::ExceptionDefinition *self){
			return self->service.lock();
		}
SWIGINTERN void RobotRaconteur_ExceptionDefinition_SetService(RobotRaconteur::ExceptionDefinition *self,boost::shared_ptr< RobotRaconteur::ServiceDefinition > const &value){
			self->service=value;
		}


class MemberDefinitionUtil
{
public:
static boost::shared_ptr<RobotRaconteur::PropertyDefinition> ToProperty(const boost::shared_ptr<RobotRaconteur::MemberDefinition>& t) 
{ 
return boost::dynamic_pointer_cast<RobotRaconteur::PropertyDefinition>(t);
}

static boost::shared_ptr<RobotRaconteur::FunctionDefinition> ToFunction(const boost::shared_ptr<RobotRaconteur::MemberDefinition>& t) 
{ 
return boost::dynamic_pointer_cast<RobotRaconteur::FunctionDefinition>(t);
}

static boost::shared_ptr<RobotRaconteur::ObjRefDefinition> ToObjRef(const boost::shared_ptr<RobotRaconteur::MemberDefinition>& t) 
{ 
return boost::dynamic_pointer_cast<RobotRaconteur::ObjRefDefinition>(t);
}

static boost::shared_ptr<RobotRaconteur::EventDefinition> ToEvent(const boost::shared_ptr<RobotRaconteur::MemberDefinition>& t) 
{ 
return boost::dynamic_pointer_cast<RobotRaconteur::EventDefinition>(t);
}

static boost::shared_ptr<RobotRaconteur::PipeDefinition> ToPipe(const boost::shared_ptr<RobotRaconteur::MemberDefinition>& t) 
{ 
return boost::dynamic_pointer_cast<RobotRaconteur::PipeDefinition>(t);
}

static boost::shared_ptr<RobotRaconteur::CallbackDefinition> ToCallback(const boost::shared_ptr<RobotRaconteur::MemberDefinition>& t) 
{ 
return boost::dynamic_pointer_cast<RobotRaconteur::CallbackDefinition>(t);
}

static boost::shared_ptr<RobotRaconteur::WireDefinition> ToWire(const boost::shared_ptr<RobotRaconteur::MemberDefinition>& t) 
{ 
return boost::dynamic_pointer_cast<RobotRaconteur::WireDefinition>(t);
}

static boost::shared_ptr<RobotRaconteur::MemoryDefinition> ToMemory(const boost::shared_ptr<RobotRaconteur::MemberDefinition>& t) 
{ 
return boost::dynamic_pointer_cast<RobotRaconteur::MemoryDefinition>(t);
}

};

SWIGINTERN std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *new_std_vector_Sl_boost_intrusive_ptr_Sl_RobotRaconteur_MessageEntry_Sg__Sg___SWIG_2(jint count,boost::intrusive_ptr< RobotRaconteur::MessageEntry > const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > >(static_cast<std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_boost_intrusive_ptr_Sl_RobotRaconteur_MessageEntry_Sg__Sg__doSize(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_boost_intrusive_ptr_Sl_RobotRaconteur_MessageEntry_Sg__Sg__doAdd__SWIG_0(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *self,std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_boost_intrusive_ptr_Sl_RobotRaconteur_MessageEntry_Sg__Sg__doAdd__SWIG_1(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *self,jint index,std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > >::value_type std_vector_Sl_boost_intrusive_ptr_Sl_RobotRaconteur_MessageEntry_Sg__Sg__doRemove(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          boost::intrusive_ptr< RobotRaconteur::MessageEntry > const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > >::value_type const &std_vector_Sl_boost_intrusive_ptr_Sl_RobotRaconteur_MessageEntry_Sg__Sg__doGet(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > >::value_type std_vector_Sl_boost_intrusive_ptr_Sl_RobotRaconteur_MessageEntry_Sg__Sg__doSet(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *self,jint index,std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          boost::intrusive_ptr< RobotRaconteur::MessageEntry > const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_boost_intrusive_ptr_Sl_RobotRaconteur_MessageEntry_Sg__Sg__doRemoveRange(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *new_std_vector_Sl_boost_intrusive_ptr_Sl_RobotRaconteur_MessageElement_Sg__Sg___SWIG_2(jint count,boost::intrusive_ptr< RobotRaconteur::MessageElement > const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > >(static_cast<std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_boost_intrusive_ptr_Sl_RobotRaconteur_MessageElement_Sg__Sg__doSize(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_boost_intrusive_ptr_Sl_RobotRaconteur_MessageElement_Sg__Sg__doAdd__SWIG_0(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *self,std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_boost_intrusive_ptr_Sl_RobotRaconteur_MessageElement_Sg__Sg__doAdd__SWIG_1(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *self,jint index,std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > >::value_type std_vector_Sl_boost_intrusive_ptr_Sl_RobotRaconteur_MessageElement_Sg__Sg__doRemove(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          boost::intrusive_ptr< RobotRaconteur::MessageElement > const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > >::value_type const &std_vector_Sl_boost_intrusive_ptr_Sl_RobotRaconteur_MessageElement_Sg__Sg__doGet(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > >::value_type std_vector_Sl_boost_intrusive_ptr_Sl_RobotRaconteur_MessageElement_Sg__Sg__doSet(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *self,jint index,std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          boost::intrusive_ptr< RobotRaconteur::MessageElement > const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_boost_intrusive_ptr_Sl_RobotRaconteur_MessageElement_Sg__Sg__doRemoveRange(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }


class MessageElementDataUtil
{
public:
	static boost::intrusive_ptr<RobotRaconteur::RRBaseArray> ToRRBaseArray(const boost::intrusive_ptr<RobotRaconteur::MessageElementData>& m)
	{
		return boost::dynamic_pointer_cast<RRBaseArray>(m);
	}
		
	static boost::intrusive_ptr<RobotRaconteur::MessageElementNestedElementList> ToMessageElementNestedElementList(const boost::intrusive_ptr<RobotRaconteur::MessageElementData>& m)
	{
		return boost::dynamic_pointer_cast<MessageElementNestedElementList>(m);
	}



	static std::string RRBaseArrayToString(const boost::intrusive_ptr<RobotRaconteur::RRBaseArray>& rrarray)
	{
		return RRArrayToString(rr_cast<RRArray<char> >(rrarray));
	}
	
	static void RRBaseArrayToDoubles(const boost::intrusive_ptr<RobotRaconteur::RRBaseArray>& rrarray, double* array_out, int32_t len)
	{
		if (rrarray->GetTypeID()!=DataTypes_double_t) throw InvalidArgumentException("RRArray error");
		if (rrarray->size()!=len) throw InvalidArgumentException("RRArray error");
		memcpy(array_out,rrarray->void_ptr(),len*sizeof(double));
	}
	
	static void RRBaseArrayToFloats(const boost::intrusive_ptr<RobotRaconteur::RRBaseArray>& rrarray, float* array_out, int32_t len)
	{
		if (rrarray->GetTypeID()!=DataTypes_single_t) throw InvalidArgumentException("RRArray error");
		if (rrarray->size()!=len) throw InvalidArgumentException("RRArray error");
		memcpy(array_out,rrarray->void_ptr(),len*sizeof(float));
	}
	
	static void RRBaseArrayToBytes(const boost::intrusive_ptr<RobotRaconteur::RRBaseArray>& rrarray, int8_t* array_out, int32_t len)
	{
		if (rrarray->GetTypeID()!=DataTypes_int8_t && rrarray->GetTypeID()!=DataTypes_uint8_t) throw InvalidArgumentException("RRArray error");
		if (rrarray->size()!=len) throw InvalidArgumentException("RRArray error");
		memcpy(array_out,rrarray->void_ptr(),len*sizeof(int8_t));
		
	}
	
	static void RRBaseArrayToBytes(const boost::intrusive_ptr<RobotRaconteur::RRBaseArray>& rrarray, uint8_t* array_out, int32_t len)
	{
		if (rrarray->GetTypeID()!=DataTypes_uint8_t) throw InvalidArgumentException("RRArray error");
		if (rrarray->size()!=len) throw InvalidArgumentException("RRArray error");
		memcpy(array_out,rrarray->void_ptr(),len*sizeof(uint8_t));		
	}
	
	static void RRBaseArrayToShorts(const boost::intrusive_ptr<RobotRaconteur::RRBaseArray>& rrarray, int16_t* array_out, int32_t len)
	{
		if (rrarray->GetTypeID()!=DataTypes_int16_t && rrarray->GetTypeID()!=DataTypes_uint16_t) throw InvalidArgumentException("RRArray error");
		if (rrarray->size()!=len) throw InvalidArgumentException("RRArray error");
		memcpy(array_out,rrarray->void_ptr(),len*sizeof(int16_t));
	}
	
	static void RRBaseArrayToShorts(const boost::intrusive_ptr<RobotRaconteur::RRBaseArray>& rrarray, uint16_t* array_out, int32_t len)
	{
		if (rrarray->GetTypeID()!=DataTypes_uint16_t) throw InvalidArgumentException("RRArray error");
		if (rrarray->size()!=len) throw InvalidArgumentException("RRArray error");
		memcpy(array_out,rrarray->void_ptr(),len*sizeof(uint16_t));
	}
	
	static void RRBaseArrayToInts(const boost::intrusive_ptr<RobotRaconteur::RRBaseArray>& rrarray, int32_t* array_out, int32_t len)
	{
		if (rrarray->GetTypeID()!=DataTypes_int32_t && rrarray->GetTypeID()!=DataTypes_uint32_t) throw InvalidArgumentException("RRArray error");
		if (rrarray->size()!=len) throw InvalidArgumentException("RRArray error");
		memcpy(array_out,rrarray->void_ptr(),len*sizeof(int32_t));
	}
	
	static void RRBaseArrayToInts(const boost::intrusive_ptr<RobotRaconteur::RRBaseArray>& rrarray, uint32_t* array_out, int32_t len)
	{
		if (rrarray->GetTypeID()!=DataTypes_uint32_t) throw InvalidArgumentException("RRArray error");
		if (rrarray->size()!=len) throw InvalidArgumentException("RRArray error");
		memcpy(array_out,rrarray->void_ptr(),len*sizeof(uint32_t));
	}
	
	static void RRBaseArrayToLongs(const boost::intrusive_ptr<RobotRaconteur::RRBaseArray>& rrarray, int64_t* array_out, int32_t len)
	{
		if (rrarray->GetTypeID()!=DataTypes_int64_t && rrarray->GetTypeID()!=DataTypes_uint64_t) throw InvalidArgumentException("RRArray error");
		if (rrarray->size()!=len) throw InvalidArgumentException("RRArray error");
		memcpy(array_out,rrarray->void_ptr(),len*sizeof(int64_t));
	}
	








	static void RRBaseArrayComplexToDoubles(const boost::intrusive_ptr<RobotRaconteur::RRBaseArray>& rrarray, double* array_out, int32_t len)
	{
		if (rrarray->GetTypeID()!=DataTypes_cdouble_t) throw InvalidArgumentException("RRArray error");
		if (rrarray->size()!=len/2) throw InvalidArgumentException("RRArray error");
		memcpy(array_out,rrarray->void_ptr(),len*sizeof(double));
	}
	
	static void RRBaseArrayComplexToFloats(const boost::intrusive_ptr<RobotRaconteur::RRBaseArray>& rrarray, float* array_out, int32_t len)
	{
		if (rrarray->GetTypeID()!=DataTypes_csingle_t) throw InvalidArgumentException("RRArray error");
		if (rrarray->size()!=len/2) throw InvalidArgumentException("RRArray error");
		memcpy(array_out,rrarray->void_ptr(),len*sizeof(float));
	}
	
	static void RRBaseArrayBoolToBytes(const boost::intrusive_ptr<RobotRaconteur::RRBaseArray>& rrarray, uint8_t* array_out, int32_t len)
	{
		if (rrarray->GetTypeID()!=DataTypes_bool_t) throw InvalidArgumentException("RRArray error");
		if (rrarray->size()!=len) throw InvalidArgumentException("RRArray error");
		memcpy(array_out,rrarray->void_ptr(),len*sizeof(uint8_t));
	}
	
	static void RRBaseArrayBoolToBytes(const boost::intrusive_ptr<RobotRaconteur::RRBaseArray>& rrarray, int8_t* array_out, int32_t len)
	{
		if (rrarray->GetTypeID()!=DataTypes_bool_t) throw InvalidArgumentException("RRArray error");
		if (rrarray->size()!=len) throw InvalidArgumentException("RRArray error");
		memcpy(array_out,rrarray->void_ptr(),len*sizeof(int8_t));
	}
	
	static boost::intrusive_ptr<RobotRaconteur::RRBaseArray> stringToRRBaseArray(const std::string& str)
	{
		return stringToRRArray(str);
	}
	
	static boost::intrusive_ptr<RobotRaconteur::RRBaseArray> DoublesToRRBaseArray(double* array_in, int32_t len)
	{
		return AttachRRArrayCopy(array_in,len);
	}
	
	static boost::intrusive_ptr<RobotRaconteur::RRBaseArray> FloatsToRRBaseArray(float* array_in, int32_t len)
	{
		return AttachRRArrayCopy(array_in,len);
	}
	
	static boost::intrusive_ptr<RobotRaconteur::RRBaseArray>  BytesToRRBaseArray( int8_t* array_in, int32_t len, RobotRaconteur::DataTypes type)
	{
		if (type == DataTypes_int8_t) return AttachRRArrayCopy(array_in,len);
		if (type == DataTypes_uint8_t) return AttachRRArrayCopy((uint8_t*)array_in,len);
		throw DataTypeException("Invalid data type");
				
	}
	
	static boost::intrusive_ptr<RobotRaconteur::RRBaseArray>  BytesToRRBaseArray( uint8_t* array_in, int32_t len)
	{
		return AttachRRArrayCopy(array_in,len);				
	}
	
	static boost::intrusive_ptr<RobotRaconteur::RRBaseArray>  ShortsToRRBaseArray( int16_t* array_in, int32_t len, RobotRaconteur::DataTypes type)
	{
		if (type == DataTypes_int16_t) return AttachRRArrayCopy(array_in,len);
		if (type == DataTypes_uint16_t) return AttachRRArrayCopy((uint16_t*)array_in,len);
		throw DataTypeException("Invalid data type");				
	}
	
	static boost::intrusive_ptr<RobotRaconteur::RRBaseArray>  ShortsToRRBaseArray( uint16_t* array_in, int32_t len)
	{
		return AttachRRArrayCopy(array_in,len);						
	}
	
	static boost::intrusive_ptr<RobotRaconteur::RRBaseArray>  IntsToRRBaseArray( int32_t* array_in, int32_t len, RobotRaconteur::DataTypes type)
	{
		if (type == DataTypes_int32_t) return AttachRRArrayCopy(array_in,len);
		if (type == DataTypes_uint32_t) return AttachRRArrayCopy((uint32_t*)array_in,len);
		throw DataTypeException("Invalid data type");
				
	}
	
	static boost::intrusive_ptr<RobotRaconteur::RRBaseArray>  IntsToRRBaseArray( uint32_t* array_in, int32_t len)
	{
		return AttachRRArrayCopy(array_in,len);				
	}
	
	static boost::intrusive_ptr<RobotRaconteur::RRBaseArray>  LongsToRRBaseArray( int64_t* array_in, int32_t len, RobotRaconteur::DataTypes type)
	{
		if (type == DataTypes_int64_t) return AttachRRArrayCopy(array_in,len);
		if (type == DataTypes_uint64_t) return AttachRRArrayCopy((uint64_t*)array_in,len);
		throw DataTypeException("Invalid data type");
				
	}







	static boost::intrusive_ptr<RobotRaconteur::RRBaseArray> DoublesToComplexRRBaseArray(double* array_in, int32_t len)
	{
		if (len %2 != 0) throw InvalidArgumentException("Array must be even length");
		return AttachRRArrayCopy((cdouble*)array_in,len/2);
	}
	
	static boost::intrusive_ptr<RobotRaconteur::RRBaseArray> FloatsToComplexRRBaseArray(float* array_in, int32_t len)
	{
		if (len %2 != 0) throw InvalidArgumentException("Array must be even length");
		return AttachRRArrayCopy((cfloat*)array_in,len/2);
	}
	
	static boost::intrusive_ptr<RobotRaconteur::RRBaseArray> BytesToBoolRRBaseArray(uint8_t* array_in, int32_t len)
	{
		return AttachRRArrayCopy((rr_bool*)array_in,len);
	}
	
	static boost::intrusive_ptr<RobotRaconteur::RRBaseArray> BytesToBoolRRBaseArray(int8_t* array_in, int32_t len)
	{
		return AttachRRArrayCopy((rr_bool*)array_in,len);
	}
			
	static void DoublesToRRBaseArray(double* array_in, int32_t len,const boost::intrusive_ptr<RobotRaconteur::RRBaseArray>& rrarray)
	{
		if (rrarray->GetTypeID()!=DataTypes_double_t) throw InvalidArgumentException("RRArray error");
		if (rrarray->size()!=len) throw InvalidArgumentException("RRArray error");
		memcpy(rrarray->void_ptr(),array_in,len*sizeof(double));
	}
	
	static void FloatsToRRBaseArray(float* array_in, int32_t len,const boost::intrusive_ptr<RobotRaconteur::RRBaseArray>& rrarray)
	{
		if (rrarray->GetTypeID()!=DataTypes_single_t) throw InvalidArgumentException("RRArray error");
		if (rrarray->size()!=len) throw InvalidArgumentException("RRArray error");
		memcpy(rrarray->void_ptr(),array_in,len*sizeof(float));
	}
	
	static  void BytesToRRBaseArray( int8_t* array_in, int32_t len,const boost::intrusive_ptr<RobotRaconteur::RRBaseArray>& rrarray)
	{
		if (rrarray->GetTypeID()!=DataTypes_int8_t && rrarray->GetTypeID()!=DataTypes_uint8_t) throw InvalidArgumentException("RRArray error");
		if (rrarray->size()!=len) throw InvalidArgumentException("RRArray error");
		memcpy(rrarray->void_ptr(),array_in,len*sizeof(int8_t));
				
	}
	
	static  void BytesToRRBaseArray( uint8_t* array_in, int32_t len,const boost::intrusive_ptr<RobotRaconteur::RRBaseArray>& rrarray)
	{
		if (rrarray->GetTypeID()!=DataTypes_uint8_t) throw InvalidArgumentException("RRArray error");
		if (rrarray->size()!=len) throw InvalidArgumentException("RRArray error");
		memcpy(rrarray->void_ptr(),array_in,len*sizeof(uint8_t));				
	}
	
	
	static  void ShortsToRRBaseArray( int16_t* array_in, int32_t len,const boost::intrusive_ptr<RobotRaconteur::RRBaseArray>& rrarray)
	{
		if (rrarray->GetTypeID()!=DataTypes_int16_t && rrarray->GetTypeID()!=DataTypes_uint16_t) throw InvalidArgumentException("RRArray error");
		if (rrarray->size()!=len) throw InvalidArgumentException("RRArray error");
		memcpy(rrarray->void_ptr(),array_in,len*sizeof(int16_t));
				
	}
	
	static  void ShortsToRRBaseArray( uint16_t* array_in, int32_t len,const boost::intrusive_ptr<RobotRaconteur::RRBaseArray>& rrarray)
	{
		if (rrarray->GetTypeID()!=DataTypes_uint16_t) throw InvalidArgumentException("RRArray error");
		if (rrarray->size()!=len) throw InvalidArgumentException("RRArray error");
		memcpy(rrarray->void_ptr(),array_in,len*sizeof(uint16_t));
				
	}
	
	static void  IntsToRRBaseArray( int32_t* array_in, int32_t len,const boost::intrusive_ptr<RobotRaconteur::RRBaseArray>& rrarray)
	{
		if (rrarray->GetTypeID()!=DataTypes_int32_t && rrarray->GetTypeID()!=DataTypes_uint32_t) throw InvalidArgumentException("RRArray error");
		if (rrarray->size()!=len) throw InvalidArgumentException("RRArray error");
		memcpy(rrarray->void_ptr(),array_in,len*sizeof(int32_t));
				
	}
	
	static void  IntsToRRBaseArray( uint32_t* array_in, int32_t len,const boost::intrusive_ptr<RobotRaconteur::RRBaseArray>& rrarray)
	{
		if (rrarray->GetTypeID()!=DataTypes_uint32_t) throw InvalidArgumentException("RRArray error");
		if (rrarray->size()!=len) throw InvalidArgumentException("RRArray error");
		memcpy(rrarray->void_ptr(),array_in,len*sizeof(uint32_t));
				
	}
	
	static void LongsToRRBaseArray( int64_t* array_in, int32_t len,const boost::intrusive_ptr<RobotRaconteur::RRBaseArray>& rrarray)
	{
		if (rrarray->GetTypeID()!=DataTypes_int64_t && rrarray->GetTypeID()!=DataTypes_uint64_t) throw InvalidArgumentException("RRArray error");
		if (rrarray->size()!=len) throw InvalidArgumentException("RRArray error");
		memcpy(rrarray->void_ptr(),array_in,len*sizeof(int64_t));
				
	}









	static void DoublesToComplexRRBaseArray(double* array_in, int32_t len,const boost::intrusive_ptr<RobotRaconteur::RRBaseArray>& rrarray)
	{
		if (rrarray->GetTypeID()!=DataTypes_cdouble_t) throw InvalidArgumentException("RRArray error");
		if (rrarray->size()!=len/2) throw InvalidArgumentException("RRArray error");
		memcpy(rrarray->void_ptr(),array_in,len*sizeof(double));
	}
	
	static void FloatsToComplexRRBaseArray(float* array_in, int32_t len,const boost::intrusive_ptr<RobotRaconteur::RRBaseArray>& rrarray)
	{
		if (rrarray->GetTypeID()!=DataTypes_csingle_t) throw InvalidArgumentException("RRArray error");
		if (rrarray->size()!=len/2) throw InvalidArgumentException("RRArray error");
		memcpy(rrarray->void_ptr(),array_in,len*sizeof(float));
	}
	
	static  void BytesToBoolRRBaseArray( int8_t* array_in, int32_t len,const boost::intrusive_ptr<RobotRaconteur::RRBaseArray>& rrarray)
	{
		if (rrarray->GetTypeID()!=DataTypes_bool_t) throw InvalidArgumentException("RRArray error");
		if (rrarray->size()!=len) throw InvalidArgumentException("RRArray error");
		memcpy((rr_bool*)rrarray->void_ptr(),array_in,len*sizeof(int8_t));				
	}
	
	static  void BytesToBoolRRBaseArray( uint8_t* array_in, int32_t len,const boost::intrusive_ptr<RobotRaconteur::RRBaseArray>& rrarray)
	{
		if (rrarray->GetTypeID()!=DataTypes_bool_t) throw InvalidArgumentException("RRArray error");
		if (rrarray->size()!=len) throw InvalidArgumentException("RRArray error");
		memcpy((rr_bool*)rrarray->void_ptr(),array_in,len*sizeof(uint8_t));				
	}
	

};


SWIGINTERN std::vector< std::string > RobotRaconteur_TcpTransport_GetLocalAdapterIPAddresses(){
		std::vector<std::string> o;
		std::vector<boost::asio::ip::address> addr;
		RobotRaconteur::TcpTransport::GetLocalAdapterIPAddresses(addr);
		for (size_t i=0; i<addr.size(); i++)
		{
			o.push_back(boost::lexical_cast<std::string>(addr[i]));
		}
		return o;
	}

struct WallTimer_initstruct
{
	RobotRaconteur::AsyncTimerEventReturnDirector* handler;
	int32_t id;
};


SWIGINTERN RobotRaconteur::WallTimer *new_RobotRaconteur_WallTimer(boost::posix_time::time_duration const &period,bool oneshot,boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &node,WallTimer_initstruct init){
	boost::shared_ptr<AsyncTimerEventReturnDirector> sphandler(init.handler,boost::bind(&ReleaseDirector<AsyncTimerEventReturnDirector>,RR_BOOST_PLACEHOLDERS(_1),init.id));
	return new WallTimer(period,boost::bind(&TimerHandlerFunc,RR_BOOST_PLACEHOLDERS(_1),sphandler),oneshot,node);
}
SWIGINTERN boost::shared_ptr< RobotRaconteur::WrappedServiceStub > RobotRaconteur_WrappedServiceStub_FindObjRef__SWIG_0(RobotRaconteur::WrappedServiceStub *self,std::string const &n){
		return rr_cast<WrappedServiceStub>(self->FindObjRef(n));
	}
SWIGINTERN boost::shared_ptr< RobotRaconteur::WrappedServiceStub > RobotRaconteur_WrappedServiceStub_FindObjRef__SWIG_1(RobotRaconteur::WrappedServiceStub *self,std::string const &n,std::string const &i){
		return rr_cast<WrappedServiceStub>(self->FindObjRef(n,i));
	}
SWIGINTERN boost::shared_ptr< RobotRaconteur::WrappedServiceStub > RobotRaconteur_WrappedServiceStub_FindObjRefTyped__SWIG_0(RobotRaconteur::WrappedServiceStub *self,std::string const &n,std::string const &objecttype){
		return rr_cast<WrappedServiceStub>(self->FindObjRefTyped(n,objecttype));
	}
SWIGINTERN boost::shared_ptr< RobotRaconteur::WrappedServiceStub > RobotRaconteur_WrappedServiceStub_FindObjRefTyped__SWIG_1(RobotRaconteur::WrappedServiceStub *self,std::string const &n,std::string const &i,std::string const &objecttype){
		return rr_cast<WrappedServiceStub>(self->FindObjRefTyped(n,i,objecttype));
	}

class ServerServiceListenerDirector
{
public:
	
	int32_t objectheapid;
	
	ServerServiceListenerDirector()
	{
		objectheapid=0;
	}
	
	void OuterCallback(const boost::shared_ptr<ServerContext>& c,ServerServiceListenerEventType code,const boost::shared_ptr<void>& p)
	{
		if (code==ServerServiceListenerEventType_ClientConnected || code==ServerServiceListenerEventType_ClientDisconnected)
		{
			boost::shared_ptr<uint32_t> p2=boost::static_pointer_cast<uint32_t>(p);
			
			DIRECTOR_CALL2(Callback(code,*p2));
		}
		else
		{
			
			DIRECTOR_CALL2(Callback(code,0));
		}
	}
	virtual void Callback(int32_t code, uint32_t endpoint) {};
	
	
	
	virtual ~ServerServiceListenerDirector()
	{
		
	}
	
};

SWIGINTERN void RobotRaconteur_ServerContext_AddServerServiceListener(RobotRaconteur::ServerContext *self,ServerServiceListenerDirector *listener){
		boost::shared_ptr<ServerServiceListenerDirector> listener2=boost::shared_ptr<ServerServiceListenerDirector>(listener,boost::bind(&ReleaseDirector<ServerServiceListenerDirector>, RR_BOOST_PLACEHOLDERS(_1), listener->objectheapid));
		self->ServerServiceListener.connect(boost::bind(&ServerServiceListenerDirector::OuterCallback,listener2,RR_BOOST_PLACEHOLDERS(_1),RR_BOOST_PLACEHOLDERS(_2),RR_BOOST_PLACEHOLDERS(_3)));
		
	}
SWIGINTERN void RobotRaconteur_ServerContext_SetServiceAttributes(RobotRaconteur::ServerContext *self,boost::intrusive_ptr< RobotRaconteur::MessageElement > const &attributes){
		boost::intrusive_ptr<RRMap<std::string,RRValue> > mmap=rr_cast<RRMap<std::string,RRValue> >(RobotRaconteur::detail::packing::UnpackMapType<std::string,RRValue>(attributes->CastData<MessageElementNestedElementList >(),NULL));
		self->SetAttributes(mmap->GetStorageContainer());		
		
	}
SWIGINTERN uint32_t RobotRaconteur_ServerEndpoint_GetCurrentEndpoint(){
			return ServerEndpoint::GetCurrentEndpoint()->GetLocalEndpoint();
		}
SWIGINTERN boost::shared_ptr< RobotRaconteur::AuthenticatedUser > RobotRaconteur_UserAuthenticator_AuthenticateUser(RobotRaconteur::UserAuthenticator *self,std::string const &username,boost::intrusive_ptr< RobotRaconteur::MessageElement > const &credentials,boost::shared_ptr< RobotRaconteur::ServerContext > const &context){
		if (!context) throw InvalidArgumentException("Context cannot be null");
		if (!credentials) throw InvalidArgumentException("Credentials cannot be null");
		boost::intrusive_ptr<RRMap<std::string,RRValue> > r=rr_cast<RRMap<std::string,RRValue> >(context->GetNode()->UnpackMapType<std::string,RRValue>(credentials->CastData<MessageElementNestedElementList >()));
		return self->AuthenticateUser(username,r->GetStorageContainer(),context,RR_SHARED_PTR<RobotRaconteur::ITransportConnection>());
	}
SWIGINTERN std::vector< RobotRaconteur::ServiceInfo2Wrapped > *new_std_vector_Sl_RobotRaconteur_ServiceInfo2Wrapped_Sg___SWIG_2(jint count,RobotRaconteur::ServiceInfo2Wrapped const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< RobotRaconteur::ServiceInfo2Wrapped >(static_cast<std::vector< RobotRaconteur::ServiceInfo2Wrapped >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_RobotRaconteur_ServiceInfo2Wrapped_Sg__doSize(std::vector< RobotRaconteur::ServiceInfo2Wrapped > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_RobotRaconteur_ServiceInfo2Wrapped_Sg__doAdd__SWIG_0(std::vector< RobotRaconteur::ServiceInfo2Wrapped > *self,std::vector< RobotRaconteur::ServiceInfo2Wrapped >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_RobotRaconteur_ServiceInfo2Wrapped_Sg__doAdd__SWIG_1(std::vector< RobotRaconteur::ServiceInfo2Wrapped > *self,jint index,std::vector< RobotRaconteur::ServiceInfo2Wrapped >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< RobotRaconteur::ServiceInfo2Wrapped >::value_type std_vector_Sl_RobotRaconteur_ServiceInfo2Wrapped_Sg__doRemove(std::vector< RobotRaconteur::ServiceInfo2Wrapped > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          RobotRaconteur::ServiceInfo2Wrapped const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< RobotRaconteur::ServiceInfo2Wrapped >::value_type const &std_vector_Sl_RobotRaconteur_ServiceInfo2Wrapped_Sg__doGet(std::vector< RobotRaconteur::ServiceInfo2Wrapped > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< RobotRaconteur::ServiceInfo2Wrapped >::value_type std_vector_Sl_RobotRaconteur_ServiceInfo2Wrapped_Sg__doSet(std::vector< RobotRaconteur::ServiceInfo2Wrapped > *self,jint index,std::vector< RobotRaconteur::ServiceInfo2Wrapped >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          RobotRaconteur::ServiceInfo2Wrapped const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_RobotRaconteur_ServiceInfo2Wrapped_Sg__doRemoveRange(std::vector< RobotRaconteur::ServiceInfo2Wrapped > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< RobotRaconteur::NodeInfo2 > *new_std_vector_Sl_RobotRaconteur_NodeInfo2_Sg___SWIG_2(jint count,RobotRaconteur::NodeInfo2 const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< RobotRaconteur::NodeInfo2 >(static_cast<std::vector< RobotRaconteur::NodeInfo2 >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_RobotRaconteur_NodeInfo2_Sg__doSize(std::vector< RobotRaconteur::NodeInfo2 > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_RobotRaconteur_NodeInfo2_Sg__doAdd__SWIG_0(std::vector< RobotRaconteur::NodeInfo2 > *self,std::vector< RobotRaconteur::NodeInfo2 >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_RobotRaconteur_NodeInfo2_Sg__doAdd__SWIG_1(std::vector< RobotRaconteur::NodeInfo2 > *self,jint index,std::vector< RobotRaconteur::NodeInfo2 >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< RobotRaconteur::NodeInfo2 >::value_type std_vector_Sl_RobotRaconteur_NodeInfo2_Sg__doRemove(std::vector< RobotRaconteur::NodeInfo2 > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          RobotRaconteur::NodeInfo2 const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< RobotRaconteur::NodeInfo2 >::value_type const &std_vector_Sl_RobotRaconteur_NodeInfo2_Sg__doGet(std::vector< RobotRaconteur::NodeInfo2 > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< RobotRaconteur::NodeInfo2 >::value_type std_vector_Sl_RobotRaconteur_NodeInfo2_Sg__doSet(std::vector< RobotRaconteur::NodeInfo2 > *self,jint index,std::vector< RobotRaconteur::NodeInfo2 >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          RobotRaconteur::NodeInfo2 const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_RobotRaconteur_NodeInfo2_Sg__doRemoveRange(std::vector< RobotRaconteur::NodeInfo2 > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped,std::less< RobotRaconteur::ServiceSubscriptionClientID > >::iterator std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_RobotRaconteur_ServiceInfo2Wrapped_Sg__iterator_getNextUnchecked(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator *self){
          std::map< RobotRaconteur::ServiceSubscriptionClientID, RobotRaconteur::ServiceInfo2Wrapped, std::less< RobotRaconteur::ServiceSubscriptionClientID > >::iterator copy = (*self);
          return ++copy;
        }
SWIGINTERN bool std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_RobotRaconteur_ServiceInfo2Wrapped_Sg__iterator_isNot(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator const *self,std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator other){
          return (*self != other);
        }
SWIGINTERN RobotRaconteur::ServiceSubscriptionClientID std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_RobotRaconteur_ServiceInfo2Wrapped_Sg__iterator_getKey(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator const *self){
          return (*self)->first;
        }
SWIGINTERN RobotRaconteur::ServiceInfo2Wrapped std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_RobotRaconteur_ServiceInfo2Wrapped_Sg__iterator_getValue(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator const *self){
          return (*self)->second;
        }
SWIGINTERN void std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_RobotRaconteur_ServiceInfo2Wrapped_Sg__iterator_setValue(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator *self,RobotRaconteur::ServiceInfo2Wrapped const &newValue){
          (*self)->second = newValue;
        }
SWIGINTERN jint std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_RobotRaconteur_ServiceInfo2Wrapped_Sg__sizeImpl(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > const *self){
        return SWIG_MapSize(self->size());
      }
SWIGINTERN bool std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_RobotRaconteur_ServiceInfo2Wrapped_Sg__containsImpl(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > *self,RobotRaconteur::ServiceSubscriptionClientID const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN void std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_RobotRaconteur_ServiceInfo2Wrapped_Sg__putUnchecked(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > *self,RobotRaconteur::ServiceSubscriptionClientID const &key,RobotRaconteur::ServiceInfo2Wrapped const &value){
        (*self)[key] = value;
      }
SWIGINTERN void std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_RobotRaconteur_ServiceInfo2Wrapped_Sg__removeUnchecked(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > *self,std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped,std::less< RobotRaconteur::ServiceSubscriptionClientID > >::iterator const itr){
        self->erase(itr);
      }
SWIGINTERN std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub >,std::less< RobotRaconteur::ServiceSubscriptionClientID > >::iterator std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_boost_shared_ptr_Sl_RobotRaconteur_WrappedServiceStub_Sg__Sg__iterator_getNextUnchecked(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator *self){
          std::map< RobotRaconteur::ServiceSubscriptionClientID, boost::shared_ptr< RobotRaconteur::WrappedServiceStub >, std::less< RobotRaconteur::ServiceSubscriptionClientID > >::iterator copy = (*self);
          return ++copy;
        }
SWIGINTERN bool std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_boost_shared_ptr_Sl_RobotRaconteur_WrappedServiceStub_Sg__Sg__iterator_isNot(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator const *self,std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator other){
          return (*self != other);
        }
SWIGINTERN RobotRaconteur::ServiceSubscriptionClientID std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_boost_shared_ptr_Sl_RobotRaconteur_WrappedServiceStub_Sg__Sg__iterator_getKey(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator const *self){
          return (*self)->first;
        }
SWIGINTERN boost::shared_ptr< RobotRaconteur::WrappedServiceStub > std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_boost_shared_ptr_Sl_RobotRaconteur_WrappedServiceStub_Sg__Sg__iterator_getValue(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator const *self){
          return (*self)->second;
        }
SWIGINTERN void std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_boost_shared_ptr_Sl_RobotRaconteur_WrappedServiceStub_Sg__Sg__iterator_setValue(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator *self,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &newValue){
          (*self)->second = newValue;
        }
SWIGINTERN jint std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_boost_shared_ptr_Sl_RobotRaconteur_WrappedServiceStub_Sg__Sg__sizeImpl(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > const *self){
        return SWIG_MapSize(self->size());
      }
SWIGINTERN bool std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_boost_shared_ptr_Sl_RobotRaconteur_WrappedServiceStub_Sg__Sg__containsImpl(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > *self,RobotRaconteur::ServiceSubscriptionClientID const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN void std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_boost_shared_ptr_Sl_RobotRaconteur_WrappedServiceStub_Sg__Sg__putUnchecked(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > *self,RobotRaconteur::ServiceSubscriptionClientID const &key,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &value){
        (*self)[key] = value;
      }
SWIGINTERN void std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_boost_shared_ptr_Sl_RobotRaconteur_WrappedServiceStub_Sg__Sg__removeUnchecked(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > *self,std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub >,std::less< RobotRaconteur::ServiceSubscriptionClientID > >::iterator const itr){
        self->erase(itr);
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *new_std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_WrappedServiceSubscriptionFilterNode_Sg__Sg___SWIG_2(jint count,boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > >(static_cast<std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_WrappedServiceSubscriptionFilterNode_Sg__Sg__doSize(std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_WrappedServiceSubscriptionFilterNode_Sg__Sg__doAdd__SWIG_0(std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *self,std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_WrappedServiceSubscriptionFilterNode_Sg__Sg__doAdd__SWIG_1(std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *self,jint index,std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > >::value_type std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_WrappedServiceSubscriptionFilterNode_Sg__Sg__doRemove(std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > >::value_type const &std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_WrappedServiceSubscriptionFilterNode_Sg__Sg__doGet(std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > >::value_type std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_WrappedServiceSubscriptionFilterNode_Sg__Sg__doSet(std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *self,jint index,std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_WrappedServiceSubscriptionFilterNode_Sg__Sg__doRemoveRange(std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< RobotRaconteur::ServiceSubscriptionClientID > *new_std_vector_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sg___SWIG_2(jint count,RobotRaconteur::ServiceSubscriptionClientID const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< RobotRaconteur::ServiceSubscriptionClientID >(static_cast<std::vector< RobotRaconteur::ServiceSubscriptionClientID >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sg__doSize(std::vector< RobotRaconteur::ServiceSubscriptionClientID > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sg__doAdd__SWIG_0(std::vector< RobotRaconteur::ServiceSubscriptionClientID > *self,std::vector< RobotRaconteur::ServiceSubscriptionClientID >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sg__doAdd__SWIG_1(std::vector< RobotRaconteur::ServiceSubscriptionClientID > *self,jint index,std::vector< RobotRaconteur::ServiceSubscriptionClientID >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< RobotRaconteur::ServiceSubscriptionClientID >::value_type std_vector_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sg__doRemove(std::vector< RobotRaconteur::ServiceSubscriptionClientID > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          RobotRaconteur::ServiceSubscriptionClientID const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< RobotRaconteur::ServiceSubscriptionClientID >::value_type const &std_vector_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sg__doGet(std::vector< RobotRaconteur::ServiceSubscriptionClientID > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< RobotRaconteur::ServiceSubscriptionClientID >::value_type std_vector_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sg__doSet(std::vector< RobotRaconteur::ServiceSubscriptionClientID > *self,jint index,std::vector< RobotRaconteur::ServiceSubscriptionClientID >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          RobotRaconteur::ServiceSubscriptionClientID const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sg__doRemoveRange(std::vector< RobotRaconteur::ServiceSubscriptionClientID > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *new_std_vector_Sl_RobotRaconteur_ServiceSubscriptionFilterAttribute_Sg___SWIG_2(jint count,RobotRaconteur::ServiceSubscriptionFilterAttribute const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute >(static_cast<std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_RobotRaconteur_ServiceSubscriptionFilterAttribute_Sg__doSize(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_RobotRaconteur_ServiceSubscriptionFilterAttribute_Sg__doAdd__SWIG_0(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *self,std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_RobotRaconteur_ServiceSubscriptionFilterAttribute_Sg__doAdd__SWIG_1(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *self,jint index,std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute >::value_type std_vector_Sl_RobotRaconteur_ServiceSubscriptionFilterAttribute_Sg__doRemove(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          RobotRaconteur::ServiceSubscriptionFilterAttribute const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute >::value_type const &std_vector_Sl_RobotRaconteur_ServiceSubscriptionFilterAttribute_Sg__doGet(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute >::value_type std_vector_Sl_RobotRaconteur_ServiceSubscriptionFilterAttribute_Sg__doSet(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *self,jint index,std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          RobotRaconteur::ServiceSubscriptionFilterAttribute const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_RobotRaconteur_ServiceSubscriptionFilterAttribute_Sg__doRemoveRange(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute,std::less< std::string > >::iterator std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttribute_Sg__iterator_getNextUnchecked(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator *self){
          std::map< std::string, RobotRaconteur::ServiceSubscriptionFilterAttribute, std::less< std::string > >::iterator copy = (*self);
          return ++copy;
        }
SWIGINTERN bool std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttribute_Sg__iterator_isNot(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator const *self,std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator other){
          return (*self != other);
        }
SWIGINTERN std::string std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttribute_Sg__iterator_getKey(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator const *self){
          return (*self)->first;
        }
SWIGINTERN RobotRaconteur::ServiceSubscriptionFilterAttribute std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttribute_Sg__iterator_getValue(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator const *self){
          return (*self)->second;
        }
SWIGINTERN void std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttribute_Sg__iterator_setValue(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator *self,RobotRaconteur::ServiceSubscriptionFilterAttribute const &newValue){
          (*self)->second = newValue;
        }
SWIGINTERN jint std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttribute_Sg__sizeImpl(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > const *self){
        return SWIG_MapSize(self->size());
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttribute_Sg__containsImpl(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > *self,std::string const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN void std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttribute_Sg__putUnchecked(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > *self,std::string const &key,RobotRaconteur::ServiceSubscriptionFilterAttribute const &value){
        (*self)[key] = value;
      }
SWIGINTERN void std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttribute_Sg__removeUnchecked(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > *self,std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute,std::less< std::string > >::iterator const itr){
        self->erase(itr);
      }
SWIGINTERN std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup,std::less< std::string > >::iterator std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttributeGroup_Sg__iterator_getNextUnchecked(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator *self){
          std::map< std::string, RobotRaconteur::ServiceSubscriptionFilterAttributeGroup, std::less< std::string > >::iterator copy = (*self);
          return ++copy;
        }
SWIGINTERN bool std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttributeGroup_Sg__iterator_isNot(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator const *self,std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator other){
          return (*self != other);
        }
SWIGINTERN std::string std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttributeGroup_Sg__iterator_getKey(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator const *self){
          return (*self)->first;
        }
SWIGINTERN RobotRaconteur::ServiceSubscriptionFilterAttributeGroup std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttributeGroup_Sg__iterator_getValue(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator const *self){
          return (*self)->second;
        }
SWIGINTERN void std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttributeGroup_Sg__iterator_setValue(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator *self,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup const &newValue){
          (*self)->second = newValue;
        }
SWIGINTERN jint std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttributeGroup_Sg__sizeImpl(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > const *self){
        return SWIG_MapSize(self->size());
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttributeGroup_Sg__containsImpl(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > *self,std::string const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN void std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttributeGroup_Sg__putUnchecked(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > *self,std::string const &key,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup const &value){
        (*self)[key] = value;
      }
SWIGINTERN void std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttributeGroup_Sg__removeUnchecked(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > *self,std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup,std::less< std::string > >::iterator const itr){
        self->erase(itr);
      }
SWIGINTERN boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > RobotRaconteur_RRLogRecord_GetNode(RobotRaconteur::RRLogRecord *self){
                return self->Node.lock();
            }
SWIGINTERN void RobotRaconteur_RRLogRecord_SetNode(RobotRaconteur::RRLogRecord *self,boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &node){
                self->Node = node;
            }
SWIGINTERN std::string RobotRaconteur_RRLogRecord_ToString(RobotRaconteur::RRLogRecord *self){
                std::stringstream ss;
                ss << *self;
                return ss.str();
            }
SWIGINTERN RobotRaconteur::RobotRaconteurNodeSetup *new_RobotRaconteur_RobotRaconteurNodeSetup__SWIG_0(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &node,std::string const &node_name,uint16_t tcp_port,uint32_t flags){
				std::vector<RR_SHARED_PTR<ServiceFactory> > s;
				RobotRaconteurNodeSetup* n = new RobotRaconteurNodeSetup(node, s, node_name, tcp_port, flags);
				return n;
			}
SWIGINTERN RobotRaconteur::RobotRaconteurNodeSetup *new_RobotRaconteur_RobotRaconteurNodeSetup__SWIG_1(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &node,boost::shared_ptr< RobotRaconteur::CommandLineConfigParser > const &config){
				std::vector<RR_SHARED_PTR<ServiceFactory> > s;
				RobotRaconteurNodeSetup* n = new RobotRaconteurNodeSetup(node, s, config);
				return n;
			}
SWIGINTERN RobotRaconteur::RobotRaconteurNodeSetup *new_RobotRaconteur_RobotRaconteurNodeSetup__SWIG_2(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &node,std::string const &node_name,uint16_t tcp_port,uint32_t flags,uint32_t allowed_overrides,std::vector< std::string > const &args){
				std::vector<RR_SHARED_PTR<ServiceFactory> > s;
				RobotRaconteurNodeSetup* n = new RobotRaconteurNodeSetup(node, s, node_name, tcp_port, flags, allowed_overrides, args);
				return n;
			}


class RRMonitor
{
boost::recursive_timed_mutex mlock;
public:
	void lock()
	{
		mlock.lock();
	}
	
	bool tryLock(int timeout)
	{
		if (timeout==-1)
		{
			lock();
			return true;
		}
		return mlock.timed_lock(boost::posix_time::milliseconds(timeout));
	}
	
	void unlock()
	{
	mlock.unlock();
	}

};




class ClientServiceListenerDirector
{
public:
	
	int32_t objectheapid;
	
	ClientServiceListenerDirector()
	{
		objectheapid=0;
	}
	
	void OuterCallback(const boost::shared_ptr<RobotRaconteur::ClientContext>& c,ClientServiceListenerEventType code,const boost::shared_ptr<void>& p)
	{
		if (code == ClientServiceListenerEventType_ServicePathReleased)
		{
			std::string p1 = *RR_STATIC_POINTER_CAST<std::string>(p);
			DIRECTOR_CALL2(Callback2(code,p1));
		}
		else
		{		
			DIRECTOR_CALL2(Callback(code));
		}
	}
	virtual void Callback(int32_t code) {};
	virtual void Callback2(int32_t code, const std::string& p) {};
		
	virtual ~ClientServiceListenerDirector()
	{
		
	}
	
};

SWIGINTERN boost::shared_ptr< RobotRaconteur::WrappedServiceStub > RobotRaconteur_RobotRaconteurNode_ConnectService__SWIG_0(RobotRaconteur::RobotRaconteurNode *self,std::string const &url,std::string const &username="",boost::intrusive_ptr< RobotRaconteur::MessageElementData > credentials=boost::intrusive_ptr< RobotRaconteur::MessageElementData >(),ClientServiceListenerDirector *listener=0,std::string const &objecttype=""){
		boost::shared_ptr<ClientServiceListenerDirector> listenerptr;
		if (listener)
		{
			listenerptr=boost::shared_ptr<ClientServiceListenerDirector>(listener,boost::bind(&ReleaseDirector<ClientServiceListenerDirector>,RR_BOOST_PLACEHOLDERS(_1),listener->objectheapid));
		}
	
		boost::intrusive_ptr<RRMap<std::string,RRValue> > credentials2;
		if (credentials) credentials2=rr_cast<RRMap<std::string,RRValue> >(self->UnpackMapType<std::string,RRValue>(rr_cast<MessageElementNestedElementList>(credentials)));
		boost::shared_ptr<WrappedServiceStub> stub;
		if (listener==0)
		{
			stub=rr_cast<WrappedServiceStub>(self->ConnectService(url,username,credentials2,RR_NULL_FN,objecttype));
		}
		else
		{
			
			stub=rr_cast<WrappedServiceStub>(self->ConnectService(url,username,credentials2,boost::bind(&ClientServiceListenerDirector::OuterCallback,listenerptr,RR_BOOST_PLACEHOLDERS(_1),RR_BOOST_PLACEHOLDERS(_2),RR_BOOST_PLACEHOLDERS(_3)),objecttype));
		}
		
		return stub;

	}
SWIGINTERN boost::shared_ptr< RobotRaconteur::WrappedServiceStub > RobotRaconteur_RobotRaconteurNode_ConnectService__SWIG_5(RobotRaconteur::RobotRaconteurNode *self,std::vector< std::string > const &url,std::string const &username="",boost::intrusive_ptr< RobotRaconteur::MessageElementData > credentials=boost::intrusive_ptr< RobotRaconteur::MessageElementData >(),ClientServiceListenerDirector *listener=0,std::string const &objecttype=""){
	
		boost::shared_ptr<ClientServiceListenerDirector> listenerptr;
		if (listener)
		{
			listenerptr=boost::shared_ptr<ClientServiceListenerDirector>(listener,boost::bind(&ReleaseDirector<ClientServiceListenerDirector>,RR_BOOST_PLACEHOLDERS(_1),listener->objectheapid));
		}
	
		boost::intrusive_ptr<RRMap<std::string,RRValue> > credentials2;
		if (credentials) credentials2=rr_cast<RRMap<std::string,RRValue> >(self->UnpackMapType<std::string,RRValue>(rr_cast<MessageElementNestedElementList >(credentials)));
		boost::shared_ptr<WrappedServiceStub> stub;
		if (listener==0)
		{
			stub=rr_cast<WrappedServiceStub>(self->ConnectService(url,username,credentials2,RR_NULL_FN,objecttype));
		}
		else
		{
			
			stub=rr_cast<WrappedServiceStub>(self->ConnectService(url,username,credentials2,boost::bind(&ClientServiceListenerDirector::OuterCallback,listenerptr,RR_BOOST_PLACEHOLDERS(_1),RR_BOOST_PLACEHOLDERS(_2),RR_BOOST_PLACEHOLDERS(_3)),objecttype));
		}
		return stub;

	}
SWIGINTERN void RobotRaconteur_RobotRaconteurNode_AsyncConnectService__SWIG_0(RobotRaconteur::RobotRaconteurNode *self,std::string const &url,std::string const &username,boost::intrusive_ptr< RobotRaconteur::MessageElementData > const &credentials,ClientServiceListenerDirector *listener,std::string const &objecttype,int32_t timeout,RobotRaconteur::AsyncStubReturnDirector *handler,int32_t id){
		
		boost::shared_ptr<AsyncStubReturnDirector> sphandler(handler,boost::bind(&ReleaseDirector<AsyncStubReturnDirector>,RR_BOOST_PLACEHOLDERS(_1),id));
	
		boost::intrusive_ptr<RRMap<std::string,RRValue> > credentials2;
		if (credentials) credentials2=rr_cast<RRMap<std::string,RRValue> >(self->UnpackMapType<std::string,RRValue>(rr_cast<MessageElementNestedElementList >(credentials)));
		
		if (listener==0)
		{
			self->AsyncConnectService(url,username,credentials2,RR_NULL_FN,objecttype,boost::bind(&AsyncStubReturn_handler,RR_BOOST_PLACEHOLDERS(_1),RR_BOOST_PLACEHOLDERS(_2),sphandler),timeout);
		}
		else
		{
			boost::shared_ptr<ClientServiceListenerDirector> listenerptr=boost::shared_ptr<ClientServiceListenerDirector>(listener);
			self->AsyncConnectService(url,username,credentials2,boost::bind(&ClientServiceListenerDirector::OuterCallback,listenerptr,RR_BOOST_PLACEHOLDERS(_1),RR_BOOST_PLACEHOLDERS(_2),RR_BOOST_PLACEHOLDERS(_3)),objecttype,boost::bind(&AsyncStubReturn_handler,RR_BOOST_PLACEHOLDERS(_1),RR_BOOST_PLACEHOLDERS(_2),sphandler),timeout);
		}		
	}
SWIGINTERN void RobotRaconteur_RobotRaconteurNode_AsyncConnectService__SWIG_1(RobotRaconteur::RobotRaconteurNode *self,std::vector< std::string > const &url,std::string const &username,boost::intrusive_ptr< RobotRaconteur::MessageElementData > const &credentials,ClientServiceListenerDirector *listener,std::string const &objecttype,int32_t timeout,RobotRaconteur::AsyncStubReturnDirector *handler,int32_t id){
	
		boost::shared_ptr<AsyncStubReturnDirector> sphandler(handler,boost::bind(&ReleaseDirector<AsyncStubReturnDirector>,RR_BOOST_PLACEHOLDERS(_1),id));
	
		boost::intrusive_ptr<RRMap<std::string,RRValue> > credentials2;
		if (credentials) credentials2=rr_cast<RRMap<std::string,RRValue> >(self->UnpackMapType<std::string,RRValue>(rr_cast<MessageElementNestedElementList >(credentials)));
		
		if (listener==0)
		{
			self->AsyncConnectService(url,username,credentials2,RR_NULL_FN,objecttype,boost::bind(&AsyncStubReturn_handler,RR_BOOST_PLACEHOLDERS(_1),RR_BOOST_PLACEHOLDERS(_2),sphandler),timeout);
		}
		else
		{
			boost::shared_ptr<ClientServiceListenerDirector> listenerptr=boost::shared_ptr<ClientServiceListenerDirector>(listener);
			self->AsyncConnectService(url,username,credentials2,boost::bind(&ClientServiceListenerDirector::OuterCallback,listenerptr,RR_BOOST_PLACEHOLDERS(_1),RR_BOOST_PLACEHOLDERS(_2),RR_BOOST_PLACEHOLDERS(_3)),objecttype,boost::bind(&AsyncStubReturn_handler,RR_BOOST_PLACEHOLDERS(_1),RR_BOOST_PLACEHOLDERS(_2),sphandler),timeout);
		}
	}
SWIGINTERN void RobotRaconteur_RobotRaconteurNode_DisconnectService(RobotRaconteur::RobotRaconteurNode *self,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &obj){
		self->DisconnectService(obj);
	}
SWIGINTERN void RobotRaconteur_RobotRaconteurNode_AsyncDisconnectService(RobotRaconteur::RobotRaconteurNode *self,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &obj,RobotRaconteur::AsyncVoidNoErrReturnDirector *handler,int32_t id){
		boost::shared_ptr<AsyncVoidNoErrReturnDirector> sphandler(handler,boost::bind(&ReleaseDirector<AsyncVoidNoErrReturnDirector>,RR_BOOST_PLACEHOLDERS(_1),id));
		self->AsyncDisconnectService(obj,boost::bind(&AsyncVoidNoErrReturn_handler,sphandler));
	}
SWIGINTERN void RobotRaconteur_RobotRaconteurNode_RegisterServiceType(RobotRaconteur::RobotRaconteurNode *self,boost::shared_ptr< RobotRaconteur::ServiceDefinition > const &def){











		self->RegisterServiceType(boost::make_shared<WrappedServiceFactory>(def));
	}
SWIGINTERN void RobotRaconteur_RobotRaconteurNode_RegisterServiceTypes(RobotRaconteur::RobotRaconteurNode *self,std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > const &defs){














		BOOST_FOREACH(const boost::shared_ptr<RobotRaconteur::ServiceDefinition>& def, defs)
		{
			self->RegisterServiceType(boost::make_shared<WrappedServiceFactory>(def));
		}
	}
SWIGINTERN boost::shared_ptr< RobotRaconteur::ServiceDefinition > RobotRaconteur_RobotRaconteurNode_GetServiceType(RobotRaconteur::RobotRaconteurNode *self,std::string const &servicename){
		return rr_cast<WrappedServiceFactory>(self->GetServiceType(servicename))->ServiceDef();
	}
SWIGINTERN boost::shared_ptr< RobotRaconteur::ServiceDefinition > RobotRaconteur_RobotRaconteurNode_GetPulledServiceType(RobotRaconteur::RobotRaconteurNode *self,boost::shared_ptr< RobotRaconteur::RRObject > const &obj,std::string const &servicename){
		return rr_cast<WrappedServiceFactory>(self->GetPulledServiceType(obj,servicename))->ServiceDef();
	}
SWIGINTERN std::string RobotRaconteur_RobotRaconteurNode_RequestObjectLock(RobotRaconteur::RobotRaconteurNode *self,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &obj,RobotRaconteur::RobotRaconteurObjectLockFlags flags){
		return self->RequestObjectLock(obj,flags);
	}
SWIGINTERN std::string RobotRaconteur_RobotRaconteurNode_ReleaseObjectLock(RobotRaconteur::RobotRaconteurNode *self,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &obj){
		return self->ReleaseObjectLock(obj);
	}
SWIGINTERN void RobotRaconteur_RobotRaconteurNode_MonitorEnter__SWIG_0(RobotRaconteur::RobotRaconteurNode *self,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &obj,int32_t timeout=-1){
		self->MonitorEnter(obj,timeout);
	}
SWIGINTERN void RobotRaconteur_RobotRaconteurNode_MonitorExit(RobotRaconteur::RobotRaconteurNode *self,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &obj){
		self->MonitorExit(obj);
	}
SWIGINTERN void RobotRaconteur_RobotRaconteurNode_AsyncRequestObjectLock(RobotRaconteur::RobotRaconteurNode *self,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &obj,RobotRaconteur::RobotRaconteurObjectLockFlags flags,int32_t timeout,RobotRaconteur::AsyncStringReturnDirector *handler,int32_t id){
		boost::shared_ptr<AsyncStringReturnDirector> sphandler(handler,boost::bind(&ReleaseDirector<AsyncStringReturnDirector>,RR_BOOST_PLACEHOLDERS(_1),id));
		return self->AsyncRequestObjectLock(obj,flags,boost::bind(&AsyncStringReturn_handler,RR_BOOST_PLACEHOLDERS(_1),RR_BOOST_PLACEHOLDERS(_2),sphandler),timeout);
	}
SWIGINTERN void RobotRaconteur_RobotRaconteurNode_AsyncReleaseObjectLock(RobotRaconteur::RobotRaconteurNode *self,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &obj,int32_t timeout,RobotRaconteur::AsyncStringReturnDirector *handler,int32_t id){
		boost::shared_ptr<AsyncStringReturnDirector> sphandler(handler,boost::bind(&ReleaseDirector<AsyncStringReturnDirector>,RR_BOOST_PLACEHOLDERS(_1),id));
		return self->AsyncReleaseObjectLock(obj,boost::bind(&AsyncStringReturn_handler,RR_BOOST_PLACEHOLDERS(_1),RR_BOOST_PLACEHOLDERS(_2),sphandler),timeout);
	}
SWIGINTERN boost::intrusive_ptr< RobotRaconteur::MessageElement > RobotRaconteur_RobotRaconteurNode_GetServiceAttributes(RobotRaconteur::RobotRaconteurNode *self,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &obj){
			boost::intrusive_ptr<RRMap<std::string,RRValue> > map=AllocateEmptyRRMap<std::string,RRValue>();
			map->GetStorageContainer()=self->GetServiceAttributes(obj);
			boost::intrusive_ptr<MessageElementNestedElementList > mmap=self->PackMapType<std::string,RRValue>(map);
			return CreateMessageElement("value",mmap);
		}
SWIGINTERN RobotRaconteur::NodeID RobotRaconteur_RobotRaconteurNode_GetServiceNodeID(RobotRaconteur::RobotRaconteurNode *self,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &obj){		
		return self->GetServiceNodeID(obj);		
	}
SWIGINTERN std::string RobotRaconteur_RobotRaconteurNode_GetServiceNodeName(RobotRaconteur::RobotRaconteurNode *self,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &obj){		
		return self->GetServiceNodeName(obj);		
	}
SWIGINTERN std::string RobotRaconteur_RobotRaconteurNode_GetServiceName(RobotRaconteur::RobotRaconteurNode *self,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &obj){		
		return self->GetServiceName(obj);		
	}
SWIGINTERN std::string RobotRaconteur_RobotRaconteurNode_GetObjectServicePath(RobotRaconteur::RobotRaconteurNode *self,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &obj){		
		return self->GetObjectServicePath(obj);		
	}
SWIGINTERN std::string RobotRaconteur_RobotRaconteurNode_GetObjectType(RobotRaconteur::RobotRaconteurNode *self,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &obj){		
		return self->GetObjectType(obj);		
	}
SWIGINTERN void RobotRaconteur_RobotRaconteurNode_AsyncFindObjectType__SWIG_0(RobotRaconteur::RobotRaconteurNode *self,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &obj,std::string const &n,int32_t timeout,RobotRaconteur::AsyncStringReturnDirector *handler,int32_t id){
		boost::shared_ptr<AsyncStringReturnDirector> sphandler(handler,boost::bind(&ReleaseDirector<AsyncStringReturnDirector>,RR_BOOST_PLACEHOLDERS(_1),id));
		return self->AsyncFindObjectType(obj,n,boost::bind(&AsyncStringReturn_handler,RR_BOOST_PLACEHOLDERS(_1),RR_BOOST_PLACEHOLDERS(_2),sphandler),timeout);
	}
SWIGINTERN void RobotRaconteur_RobotRaconteurNode_AsyncFindObjectType__SWIG_1(RobotRaconteur::RobotRaconteurNode *self,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &obj,std::string const &n,std::string const &i,int32_t timeout,RobotRaconteur::AsyncStringReturnDirector *handler,int32_t id){
		boost::shared_ptr<AsyncStringReturnDirector> sphandler(handler,boost::bind(&ReleaseDirector<AsyncStringReturnDirector>,RR_BOOST_PLACEHOLDERS(_1),id));
		return self->AsyncFindObjectType(obj,n,i,boost::bind(&AsyncStringReturn_handler,RR_BOOST_PLACEHOLDERS(_1),RR_BOOST_PLACEHOLDERS(_2),sphandler),timeout);
	}
SWIGINTERN void RobotRaconteur_RobotRaconteurNode_SetExceptionHandler(RobotRaconteur::RobotRaconteurNode *self,RobotRaconteur::AsyncVoidReturnDirector *handler,int32_t id){
		RR_SHARED_PTR<AsyncVoidReturnDirector> sphandler(handler,boost::bind(&ReleaseDirector<AsyncVoidReturnDirector>,RR_BOOST_PLACEHOLDERS(_1),id));
		self->SetExceptionHandler(boost::bind(&WrappedExceptionHandler,RR_BOOST_PLACEHOLDERS(_1),sphandler));
	}
SWIGINTERN void RobotRaconteur_RobotRaconteurNode_ClearExceptionHandler(RobotRaconteur::RobotRaconteurNode *self){
		self->SetExceptionHandler(RR_NULL_FN);
	}
SWIGINTERN boost::shared_ptr< RobotRaconteur::Timer > RobotRaconteur_RobotRaconteurNode_CreateTimer(RobotRaconteur::RobotRaconteurNode *self,boost::posix_time::time_duration const &period,bool oneshot,RobotRaconteur::AsyncTimerEventReturnDirector *handler,int32_t id){		
		boost::shared_ptr<AsyncTimerEventReturnDirector> sphandler(handler,boost::bind(&ReleaseDirector<AsyncTimerEventReturnDirector>,RR_BOOST_PLACEHOLDERS(_1),id));
		return self->CreateTimer(period,boost::bind(&TimerHandlerFunc,RR_BOOST_PLACEHOLDERS(_1),sphandler),oneshot);
	}
SWIGINTERN void RobotRaconteur_RobotRaconteurNode_PostToThreadPool(RobotRaconteur::RobotRaconteurNode *self,RobotRaconteur::AsyncVoidNoErrReturnDirector *handler,int32_t id){
		boost::shared_ptr<AsyncVoidNoErrReturnDirector> sphandler(handler,boost::bind(&ReleaseDirector<AsyncVoidNoErrReturnDirector>,RR_BOOST_PLACEHOLDERS(_1),id));
		self->GetThreadPool()->Post(boost::bind(&AsyncVoidNoErrReturn_handler,sphandler));
	}


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "RobotRaconteurJavaJAVA_wrap.h"

SwigDirector_AsyncRequestDirector::SwigDirector_AsyncRequestDirector(JNIEnv *jenv) : RobotRaconteur::AsyncRequestDirector(), Swig::Director(jenv) {
}

SwigDirector_AsyncRequestDirector::~SwigDirector_AsyncRequestDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_AsyncRequestDirector::handler(boost::intrusive_ptr< RobotRaconteur::MessageElement > ret, RobotRaconteur::HandlerErrorInfo &error) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jret  ;
  jlong jerror = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::AsyncRequestDirector::handler.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    //jret = ret ? new SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< RobotRaconteur::MessageElement >(ret) : 0; 
    if (ret) {
      intrusive_ptr_add_ref((&ret)->get());
      *(boost::shared_ptr< RobotRaconteur::MessageElement > **)&jret = new boost::shared_ptr< RobotRaconteur::MessageElement >((&ret)->get(), SWIG_intrusive_deleter< RobotRaconteur::MessageElement >());
    } else {
      *(boost::shared_ptr< RobotRaconteur::MessageElement > **)&jret = 0;
    }
    
    *(RobotRaconteur::HandlerErrorInfo **)&jerror = (RobotRaconteur::HandlerErrorInfo *) &error; 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[0], swigjobj, jret, jerror);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::AsyncRequestDirector::handler ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_AsyncRequestDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "handler", "(Lcom/robotraconteur/MessageElement;Lcom/robotraconteur/HandlerErrorInfo;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/AsyncRequestDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_AsyncVoidReturnDirector::SwigDirector_AsyncVoidReturnDirector(JNIEnv *jenv) : RobotRaconteur::AsyncVoidReturnDirector(), Swig::Director(jenv) {
}

SwigDirector_AsyncVoidReturnDirector::~SwigDirector_AsyncVoidReturnDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_AsyncVoidReturnDirector::handler(RobotRaconteur::HandlerErrorInfo &error) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jerror = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::AsyncVoidReturnDirector::handler.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(RobotRaconteur::HandlerErrorInfo **)&jerror = (RobotRaconteur::HandlerErrorInfo *) &error; 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[1], swigjobj, jerror);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::AsyncVoidReturnDirector::handler ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_AsyncVoidReturnDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "handler", "(Lcom/robotraconteur/HandlerErrorInfo;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/AsyncVoidReturnDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_AsyncVoidNoErrReturnDirector::SwigDirector_AsyncVoidNoErrReturnDirector(JNIEnv *jenv) : RobotRaconteur::AsyncVoidNoErrReturnDirector(), Swig::Director(jenv) {
}

SwigDirector_AsyncVoidNoErrReturnDirector::~SwigDirector_AsyncVoidNoErrReturnDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_AsyncVoidNoErrReturnDirector::handler() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::AsyncVoidNoErrReturnDirector::handler.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[2], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::AsyncVoidNoErrReturnDirector::handler ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_AsyncVoidNoErrReturnDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "handler", "()V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/AsyncVoidNoErrReturnDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_AsyncStringReturnDirector::SwigDirector_AsyncStringReturnDirector(JNIEnv *jenv) : RobotRaconteur::AsyncStringReturnDirector(), Swig::Director(jenv) {
}

SwigDirector_AsyncStringReturnDirector::~SwigDirector_AsyncStringReturnDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_AsyncStringReturnDirector::handler(std::string const &ret, RobotRaconteur::HandlerErrorInfo &error) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jret = 0 ;
  jlong jerror = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::AsyncStringReturnDirector::handler.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jret = jenv->NewStringUTF((&ret)->c_str());
    Swig::LocalRefGuard ret_refguard(jenv, jret); 
    *(RobotRaconteur::HandlerErrorInfo **)&jerror = (RobotRaconteur::HandlerErrorInfo *) &error; 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[3], swigjobj, jret, jerror);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::AsyncStringReturnDirector::handler ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_AsyncStringReturnDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "handler", "(Ljava/lang/String;Lcom/robotraconteur/HandlerErrorInfo;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/AsyncStringReturnDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_AsyncUInt32ReturnDirector::SwigDirector_AsyncUInt32ReturnDirector(JNIEnv *jenv) : RobotRaconteur::AsyncUInt32ReturnDirector(), Swig::Director(jenv) {
}

SwigDirector_AsyncUInt32ReturnDirector::~SwigDirector_AsyncUInt32ReturnDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_AsyncUInt32ReturnDirector::handler(uint32_t ret, RobotRaconteur::HandlerErrorInfo &error) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jret  ;
  jlong jerror = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::AsyncUInt32ReturnDirector::handler.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jret = (jlong) ret;
    *(RobotRaconteur::HandlerErrorInfo **)&jerror = (RobotRaconteur::HandlerErrorInfo *) &error; 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[4], swigjobj, jret, jerror);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::AsyncUInt32ReturnDirector::handler ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_AsyncUInt32ReturnDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "handler", "(JLcom/robotraconteur/HandlerErrorInfo;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/AsyncUInt32ReturnDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_AsyncTimerEventReturnDirector::SwigDirector_AsyncTimerEventReturnDirector(JNIEnv *jenv) : RobotRaconteur::AsyncTimerEventReturnDirector(), Swig::Director(jenv) {
}

SwigDirector_AsyncTimerEventReturnDirector::~SwigDirector_AsyncTimerEventReturnDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_AsyncTimerEventReturnDirector::handler(RobotRaconteur::TimerEvent const &ret, RobotRaconteur::HandlerErrorInfo &error) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jret = 0 ;
  jlong jerror = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::AsyncTimerEventReturnDirector::handler.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(RobotRaconteur::TimerEvent **)&jret = (RobotRaconteur::TimerEvent *) &ret; 
    *(RobotRaconteur::HandlerErrorInfo **)&jerror = (RobotRaconteur::HandlerErrorInfo *) &error; 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[5], swigjobj, jret, jerror);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::AsyncTimerEventReturnDirector::handler ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_AsyncTimerEventReturnDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "handler", "(Lcom/robotraconteur/TimerEvent;Lcom/robotraconteur/HandlerErrorInfo;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/AsyncTimerEventReturnDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_WrappedPipeEndpointDirector::SwigDirector_WrappedPipeEndpointDirector(JNIEnv *jenv) : RobotRaconteur::WrappedPipeEndpointDirector(), Swig::Director(jenv) {
}

SwigDirector_WrappedPipeEndpointDirector::~SwigDirector_WrappedPipeEndpointDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_WrappedPipeEndpointDirector::PipeEndpointClosedCallback() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedPipeEndpointDirector::PipeEndpointClosedCallback.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[6], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedPipeEndpointDirector::PipeEndpointClosedCallback ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_WrappedPipeEndpointDirector::PacketReceivedEvent() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedPipeEndpointDirector::PacketReceivedEvent.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[7], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedPipeEndpointDirector::PacketReceivedEvent ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_WrappedPipeEndpointDirector::PacketAckReceivedEvent(uint32_t packetnum) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpacketnum  ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedPipeEndpointDirector::PacketAckReceivedEvent.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jpacketnum = (jlong) packetnum;
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[8], swigjobj, jpacketnum);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedPipeEndpointDirector::PacketAckReceivedEvent ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_WrappedPipeEndpointDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "pipeEndpointClosedCallback", "()V", NULL 
    },
    {
      "packetReceivedEvent", "()V", NULL 
    },
    {
      "packetAckReceivedEvent", "(J)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/WrappedPipeEndpointDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_AsyncPipeEndpointReturnDirector::SwigDirector_AsyncPipeEndpointReturnDirector(JNIEnv *jenv) : RobotRaconteur::AsyncPipeEndpointReturnDirector(), Swig::Director(jenv) {
}

SwigDirector_AsyncPipeEndpointReturnDirector::~SwigDirector_AsyncPipeEndpointReturnDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_AsyncPipeEndpointReturnDirector::handler(boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > const &ep, RobotRaconteur::HandlerErrorInfo &error) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jep = 0 ;
  jlong jerror = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::AsyncPipeEndpointReturnDirector::handler.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jep = 0;
    if (ep) {
      *((boost::shared_ptr<  RobotRaconteur::WrappedPipeEndpoint > **)&jep) = new boost::shared_ptr<  RobotRaconteur::WrappedPipeEndpoint >(ep);
    } 
    *(RobotRaconteur::HandlerErrorInfo **)&jerror = (RobotRaconteur::HandlerErrorInfo *) &error; 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[9], swigjobj, jep, jerror);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::AsyncPipeEndpointReturnDirector::handler ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_AsyncPipeEndpointReturnDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "handler", "(Lcom/robotraconteur/WrappedPipeEndpoint;Lcom/robotraconteur/HandlerErrorInfo;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/AsyncPipeEndpointReturnDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_WrappedPipeServerConnectDirector::SwigDirector_WrappedPipeServerConnectDirector(JNIEnv *jenv) : RobotRaconteur::WrappedPipeServerConnectDirector(), Swig::Director(jenv) {
}

SwigDirector_WrappedPipeServerConnectDirector::~SwigDirector_WrappedPipeServerConnectDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_WrappedPipeServerConnectDirector::PipeConnectCallback(boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > const &pipeendpoint) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpipeendpoint = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedPipeServerConnectDirector::PipeConnectCallback.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jpipeendpoint = 0;
    if (pipeendpoint) {
      *((boost::shared_ptr<  RobotRaconteur::WrappedPipeEndpoint > **)&jpipeendpoint) = new boost::shared_ptr<  RobotRaconteur::WrappedPipeEndpoint >(pipeendpoint);
    } 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[10], swigjobj, jpipeendpoint);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedPipeServerConnectDirector::PipeConnectCallback ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_WrappedPipeServerConnectDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "pipeConnectCallback", "(Lcom/robotraconteur/WrappedPipeEndpoint;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/WrappedPipeServerConnectDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_WrappedPipeBroadcasterPredicateDirector::SwigDirector_WrappedPipeBroadcasterPredicateDirector(JNIEnv *jenv) : RobotRaconteur::WrappedPipeBroadcasterPredicateDirector(), Swig::Director(jenv) {
}

bool SwigDirector_WrappedPipeBroadcasterPredicateDirector::Predicate(uint32_t client_endpoint, int32_t index) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jclient_endpoint  ;
  jint jindex  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedPipeBroadcasterPredicateDirector::Predicate.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jclient_endpoint = (jlong) client_endpoint;
    jindex = (jint) index;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[11], swigjobj, jclient_endpoint, jindex);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedPipeBroadcasterPredicateDirector::Predicate ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

SwigDirector_WrappedPipeBroadcasterPredicateDirector::~SwigDirector_WrappedPipeBroadcasterPredicateDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_WrappedPipeBroadcasterPredicateDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "predicate", "(JI)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/WrappedPipeBroadcasterPredicateDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_WrappedWireConnectionDirector::SwigDirector_WrappedWireConnectionDirector(JNIEnv *jenv) : RobotRaconteur::WrappedWireConnectionDirector(), Swig::Director(jenv) {
}

SwigDirector_WrappedWireConnectionDirector::~SwigDirector_WrappedWireConnectionDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_WrappedWireConnectionDirector::WireValueChanged(boost::intrusive_ptr< RobotRaconteur::MessageElement > value, RobotRaconteur::TimeSpec const &time) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jvalue  ;
  jlong jtime = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedWireConnectionDirector::WireValueChanged.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    //jvalue = value ? new SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< RobotRaconteur::MessageElement >(value) : 0; 
    if (value) {
      intrusive_ptr_add_ref((&value)->get());
      *(boost::shared_ptr< RobotRaconteur::MessageElement > **)&jvalue = new boost::shared_ptr< RobotRaconteur::MessageElement >((&value)->get(), SWIG_intrusive_deleter< RobotRaconteur::MessageElement >());
    } else {
      *(boost::shared_ptr< RobotRaconteur::MessageElement > **)&jvalue = 0;
    }
    
    *(RobotRaconteur::TimeSpec **)&jtime = (RobotRaconteur::TimeSpec *) &time; 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[12], swigjobj, jvalue, jtime);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedWireConnectionDirector::WireValueChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_WrappedWireConnectionDirector::WireConnectionClosedCallback() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedWireConnectionDirector::WireConnectionClosedCallback.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[13], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedWireConnectionDirector::WireConnectionClosedCallback ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_WrappedWireConnectionDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "wireValueChanged", "(Lcom/robotraconteur/MessageElement;Lcom/robotraconteur/TimeSpec;)V", NULL 
    },
    {
      "wireConnectionClosedCallback", "()V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/WrappedWireConnectionDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_AsyncWireConnectionReturnDirector::SwigDirector_AsyncWireConnectionReturnDirector(JNIEnv *jenv) : RobotRaconteur::AsyncWireConnectionReturnDirector(), Swig::Director(jenv) {
}

SwigDirector_AsyncWireConnectionReturnDirector::~SwigDirector_AsyncWireConnectionReturnDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_AsyncWireConnectionReturnDirector::handler(boost::shared_ptr< RobotRaconteur::WrappedWireConnection > const &ep, RobotRaconteur::HandlerErrorInfo &error) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jep = 0 ;
  jlong jerror = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::AsyncWireConnectionReturnDirector::handler.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jep = 0;
    if (ep) {
      *((boost::shared_ptr<  RobotRaconteur::WrappedWireConnection > **)&jep) = new boost::shared_ptr<  RobotRaconteur::WrappedWireConnection >(ep);
    } 
    *(RobotRaconteur::HandlerErrorInfo **)&jerror = (RobotRaconteur::HandlerErrorInfo *) &error; 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[14], swigjobj, jep, jerror);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::AsyncWireConnectionReturnDirector::handler ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_AsyncWireConnectionReturnDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "handler", "(Lcom/robotraconteur/WrappedWireConnection;Lcom/robotraconteur/HandlerErrorInfo;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/AsyncWireConnectionReturnDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_AsyncWirePeekReturnDirector::SwigDirector_AsyncWirePeekReturnDirector(JNIEnv *jenv) : RobotRaconteur::AsyncWirePeekReturnDirector(), Swig::Director(jenv) {
}

SwigDirector_AsyncWirePeekReturnDirector::~SwigDirector_AsyncWirePeekReturnDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_AsyncWirePeekReturnDirector::handler(boost::intrusive_ptr< RobotRaconteur::MessageElement > value, RobotRaconteur::TimeSpec const &ts, RobotRaconteur::HandlerErrorInfo &error) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jvalue  ;
  jlong jts = 0 ;
  jlong jerror = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::AsyncWirePeekReturnDirector::handler.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    //jvalue = value ? new SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< RobotRaconteur::MessageElement >(value) : 0; 
    if (value) {
      intrusive_ptr_add_ref((&value)->get());
      *(boost::shared_ptr< RobotRaconteur::MessageElement > **)&jvalue = new boost::shared_ptr< RobotRaconteur::MessageElement >((&value)->get(), SWIG_intrusive_deleter< RobotRaconteur::MessageElement >());
    } else {
      *(boost::shared_ptr< RobotRaconteur::MessageElement > **)&jvalue = 0;
    }
    
    *(RobotRaconteur::TimeSpec **)&jts = (RobotRaconteur::TimeSpec *) &ts; 
    *(RobotRaconteur::HandlerErrorInfo **)&jerror = (RobotRaconteur::HandlerErrorInfo *) &error; 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[15], swigjobj, jvalue, jts, jerror);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::AsyncWirePeekReturnDirector::handler ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_AsyncWirePeekReturnDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "handler", "(Lcom/robotraconteur/MessageElement;Lcom/robotraconteur/TimeSpec;Lcom/robotraconteur/HandlerErrorInfo;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/AsyncWirePeekReturnDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_WrappedWireServerConnectDirector::SwigDirector_WrappedWireServerConnectDirector(JNIEnv *jenv) : RobotRaconteur::WrappedWireServerConnectDirector(), Swig::Director(jenv) {
}

SwigDirector_WrappedWireServerConnectDirector::~SwigDirector_WrappedWireServerConnectDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_WrappedWireServerConnectDirector::WireConnectCallback(boost::shared_ptr< RobotRaconteur::WrappedWireConnection > const &c) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jc = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedWireServerConnectDirector::WireConnectCallback.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jc = 0;
    if (c) {
      *((boost::shared_ptr<  RobotRaconteur::WrappedWireConnection > **)&jc) = new boost::shared_ptr<  RobotRaconteur::WrappedWireConnection >(c);
    } 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[16], swigjobj, jc);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedWireServerConnectDirector::WireConnectCallback ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_WrappedWireServerConnectDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "wireConnectCallback", "(Lcom/robotraconteur/WrappedWireConnection;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/WrappedWireServerConnectDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_WrappedWireServerPeekValueDirector::SwigDirector_WrappedWireServerPeekValueDirector(JNIEnv *jenv) : RobotRaconteur::WrappedWireServerPeekValueDirector(), Swig::Director(jenv) {
}

SwigDirector_WrappedWireServerPeekValueDirector::~SwigDirector_WrappedWireServerPeekValueDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


boost::intrusive_ptr< RobotRaconteur::MessageElement > SwigDirector_WrappedWireServerPeekValueDirector::PeekValue(uint32_t const &ep) {
  boost::intrusive_ptr< RobotRaconteur::MessageElement > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jep = 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedWireServerPeekValueDirector::PeekValue.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jep = (jlong)ep;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[17], swigjobj, jep);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    
    //if (jresult) {
    //    SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< CONST RobotRaconteur::MessageElement > *smartarg = (SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< CONST RobotRaconteur::MessageElement > *)jresult;
    //    c_result = *smartarg;
    //  }
    smartarg = *(boost::shared_ptr< RobotRaconteur::MessageElement >**)&jresult;
    if (smartarg) {
      c_result = boost::intrusive_ptr< RobotRaconteur::MessageElement >(smartarg->get(), true);
    }
    
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedWireServerPeekValueDirector::PeekValue ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_WrappedWireServerPeekValueDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "peekValue", "(J)Lcom/robotraconteur/MessageElement;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/WrappedWireServerPeekValueDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_WrappedWireServerPokeValueDirector::SwigDirector_WrappedWireServerPokeValueDirector(JNIEnv *jenv) : RobotRaconteur::WrappedWireServerPokeValueDirector(), Swig::Director(jenv) {
}

SwigDirector_WrappedWireServerPokeValueDirector::~SwigDirector_WrappedWireServerPokeValueDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_WrappedWireServerPokeValueDirector::PokeValue(boost::intrusive_ptr< RobotRaconteur::MessageElement > value, RobotRaconteur::TimeSpec const &ts, uint32_t const &ep) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jvalue  ;
  jlong jts = 0 ;
  jlong jep = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedWireServerPokeValueDirector::PokeValue.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    //jvalue = value ? new SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< RobotRaconteur::MessageElement >(value) : 0; 
    if (value) {
      intrusive_ptr_add_ref((&value)->get());
      *(boost::shared_ptr< RobotRaconteur::MessageElement > **)&jvalue = new boost::shared_ptr< RobotRaconteur::MessageElement >((&value)->get(), SWIG_intrusive_deleter< RobotRaconteur::MessageElement >());
    } else {
      *(boost::shared_ptr< RobotRaconteur::MessageElement > **)&jvalue = 0;
    }
    
    *(RobotRaconteur::TimeSpec **)&jts = (RobotRaconteur::TimeSpec *) &ts; 
    jep = (jlong)ep;
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[18], swigjobj, jvalue, jts, jep);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedWireServerPokeValueDirector::PokeValue ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_WrappedWireServerPokeValueDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "pokeValue", "(Lcom/robotraconteur/MessageElement;Lcom/robotraconteur/TimeSpec;J)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/WrappedWireServerPokeValueDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_WrappedWireBroadcasterPredicateDirector::SwigDirector_WrappedWireBroadcasterPredicateDirector(JNIEnv *jenv) : RobotRaconteur::WrappedWireBroadcasterPredicateDirector(), Swig::Director(jenv) {
}

bool SwigDirector_WrappedWireBroadcasterPredicateDirector::Predicate(uint32_t client_endpoint) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jclient_endpoint  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedWireBroadcasterPredicateDirector::Predicate.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jclient_endpoint = (jlong) client_endpoint;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[19], swigjobj, jclient_endpoint);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedWireBroadcasterPredicateDirector::Predicate ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

SwigDirector_WrappedWireBroadcasterPredicateDirector::~SwigDirector_WrappedWireBroadcasterPredicateDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_WrappedWireBroadcasterPredicateDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "predicate", "(J)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/WrappedWireBroadcasterPredicateDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_WrappedPodArrayMemoryClientBuffer::SwigDirector_WrappedPodArrayMemoryClientBuffer(JNIEnv *jenv) : RobotRaconteur::WrappedPodArrayMemoryClientBuffer(), Swig::Director(jenv) {
}

void SwigDirector_WrappedPodArrayMemoryClientBuffer::UnpackReadResult(boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > res, uint64_t bufferpos, uint64_t count) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jres  ;
  jlong jbufferpos  ;
  jlong jcount  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedPodArrayMemoryClientBuffer::UnpackReadResult.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    //jres = res ? new SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< RobotRaconteur::MessageElementNestedElementList >(res) : 0; 
    if (res) {
      intrusive_ptr_add_ref((&res)->get());
      *(boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > **)&jres = new boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList >((&res)->get(), SWIG_intrusive_deleter< RobotRaconteur::MessageElementNestedElementList >());
    } else {
      *(boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > **)&jres = 0;
    }
    
    jbufferpos = (jlong) bufferpos;
    jcount = (jlong) count;
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[20], swigjobj, jres, jbufferpos, jcount);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedPodArrayMemoryClientBuffer::UnpackReadResult ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > SwigDirector_WrappedPodArrayMemoryClientBuffer::PackWriteRequest(uint64_t bufferpos, uint64_t count) {
  boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jbufferpos  ;
  jlong jcount  ;
  boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > *smartarg ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedPodArrayMemoryClientBuffer::PackWriteRequest.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbufferpos = (jlong) bufferpos;
    jcount = (jlong) count;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[21], swigjobj, jbufferpos, jcount);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    
    //if (jresult) {
    //    SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< CONST RobotRaconteur::MessageElementNestedElementList > *smartarg = (SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< CONST RobotRaconteur::MessageElementNestedElementList > *)jresult;
    //    c_result = *smartarg;
    //  }
    smartarg = *(boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList >**)&jresult;
    if (smartarg) {
      c_result = boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList >(smartarg->get(), true);
    }
    
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedPodArrayMemoryClientBuffer::PackWriteRequest ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

uint64_t SwigDirector_WrappedPodArrayMemoryClientBuffer::GetBufferLength() {
  uint64_t c_result = SwigValueInit< uint64_t >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedPodArrayMemoryClientBuffer::GetBufferLength.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[22], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = (uint64_t)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedPodArrayMemoryClientBuffer::GetBufferLength ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

SwigDirector_WrappedPodArrayMemoryClientBuffer::~SwigDirector_WrappedPodArrayMemoryClientBuffer() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_WrappedPodArrayMemoryClientBuffer::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "unpackReadResult", "(Lcom/robotraconteur/MessageElementNestedElementList;JJ)V", NULL 
    },
    {
      "packWriteRequest", "(JJ)Lcom/robotraconteur/MessageElementNestedElementList;", NULL 
    },
    {
      "getBufferLength", "()J", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/WrappedPodArrayMemoryClientBuffer");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_WrappedPodMultiDimArrayMemoryClientBuffer::SwigDirector_WrappedPodMultiDimArrayMemoryClientBuffer(JNIEnv *jenv) : RobotRaconteur::WrappedPodMultiDimArrayMemoryClientBuffer(), Swig::Director(jenv) {
}

void SwigDirector_WrappedPodMultiDimArrayMemoryClientBuffer::UnpackReadResult(boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > res, std::vector< uint64_t > const &bufferpos, std::vector< uint64_t > const &count) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jres  ;
  jlong jbufferpos = 0 ;
  jlong jcount = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedPodMultiDimArrayMemoryClientBuffer::UnpackReadResult.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    //jres = res ? new SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< RobotRaconteur::MessageElementNestedElementList >(res) : 0; 
    if (res) {
      intrusive_ptr_add_ref((&res)->get());
      *(boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > **)&jres = new boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList >((&res)->get(), SWIG_intrusive_deleter< RobotRaconteur::MessageElementNestedElementList >());
    } else {
      *(boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > **)&jres = 0;
    }
    
    *(std::vector< uint64_t > **)&jbufferpos = (std::vector< uint64_t > *) &bufferpos; 
    *(std::vector< uint64_t > **)&jcount = (std::vector< uint64_t > *) &count; 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[23], swigjobj, jres, jbufferpos, jcount);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedPodMultiDimArrayMemoryClientBuffer::UnpackReadResult ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > SwigDirector_WrappedPodMultiDimArrayMemoryClientBuffer::PackWriteRequest(std::vector< uint64_t > const &bufferpos, std::vector< uint64_t > const &count) {
  boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jbufferpos = 0 ;
  jlong jcount = 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > *smartarg ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedPodMultiDimArrayMemoryClientBuffer::PackWriteRequest.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(std::vector< uint64_t > **)&jbufferpos = (std::vector< uint64_t > *) &bufferpos; 
    *(std::vector< uint64_t > **)&jcount = (std::vector< uint64_t > *) &count; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[24], swigjobj, jbufferpos, jcount);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    
    //if (jresult) {
    //    SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< CONST RobotRaconteur::MessageElementNestedElementList > *smartarg = (SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< CONST RobotRaconteur::MessageElementNestedElementList > *)jresult;
    //    c_result = *smartarg;
    //  }
    smartarg = *(boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList >**)&jresult;
    if (smartarg) {
      c_result = boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList >(smartarg->get(), true);
    }
    
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedPodMultiDimArrayMemoryClientBuffer::PackWriteRequest ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

SwigDirector_WrappedPodMultiDimArrayMemoryClientBuffer::~SwigDirector_WrappedPodMultiDimArrayMemoryClientBuffer() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_WrappedPodMultiDimArrayMemoryClientBuffer::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "unpackReadResult", "(Lcom/robotraconteur/MessageElementNestedElementList;Lcom/robotraconteur/vector_uint64_t;Lcom/robotraconteur/vector_uint64_t;)V", NULL 
    },
    {
      "packWriteRequest", "(Lcom/robotraconteur/vector_uint64_t;Lcom/robotraconteur/vector_uint64_t;)Lcom/robotraconteur/MessageElementNestedElementList;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/WrappedPodMultiDimArrayMemoryClientBuffer");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_WrappedArrayMemoryDirector::SwigDirector_WrappedArrayMemoryDirector(JNIEnv *jenv) : RobotRaconteur::WrappedArrayMemoryDirector(), Swig::Director(jenv) {
}

SwigDirector_WrappedArrayMemoryDirector::~SwigDirector_WrappedArrayMemoryDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


uint64_t SwigDirector_WrappedArrayMemoryDirector::Length() {
  uint64_t c_result = SwigValueInit< uint64_t >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedArrayMemoryDirector::Length.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[25], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = (uint64_t)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedArrayMemoryDirector::Length ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_WrappedArrayMemoryDirector::Read(uint64_t memorypos, boost::intrusive_ptr< RobotRaconteur::RRBaseArray > buffer, uint64_t bufferpos, uint64_t count) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jmemorypos  ;
  jlong jbuffer  ;
  jlong jbufferpos  ;
  jlong jcount  ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedArrayMemoryDirector::Read.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jmemorypos = (jlong) memorypos;
    
    //jbuffer = buffer ? new SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< RobotRaconteur::RRBaseArray >(buffer) : 0; 
    if (buffer) {
      intrusive_ptr_add_ref((&buffer)->get());
      *(boost::shared_ptr< RobotRaconteur::RRBaseArray > **)&jbuffer = new boost::shared_ptr< RobotRaconteur::RRBaseArray >((&buffer)->get(), SWIG_intrusive_deleter< RobotRaconteur::RRBaseArray >());
    } else {
      *(boost::shared_ptr< RobotRaconteur::RRBaseArray > **)&jbuffer = 0;
    }
    
    jbufferpos = (jlong) bufferpos;
    jcount = (jlong) count;
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[26], swigjobj, jmemorypos, jbuffer, jbufferpos, jcount);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedArrayMemoryDirector::Read ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_WrappedArrayMemoryDirector::Write(uint64_t memorypos, boost::intrusive_ptr< RobotRaconteur::RRBaseArray > buffer, uint64_t bufferpos, uint64_t count) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jmemorypos  ;
  jlong jbuffer  ;
  jlong jbufferpos  ;
  jlong jcount  ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedArrayMemoryDirector::Write.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jmemorypos = (jlong) memorypos;
    
    //jbuffer = buffer ? new SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< RobotRaconteur::RRBaseArray >(buffer) : 0; 
    if (buffer) {
      intrusive_ptr_add_ref((&buffer)->get());
      *(boost::shared_ptr< RobotRaconteur::RRBaseArray > **)&jbuffer = new boost::shared_ptr< RobotRaconteur::RRBaseArray >((&buffer)->get(), SWIG_intrusive_deleter< RobotRaconteur::RRBaseArray >());
    } else {
      *(boost::shared_ptr< RobotRaconteur::RRBaseArray > **)&jbuffer = 0;
    }
    
    jbufferpos = (jlong) bufferpos;
    jcount = (jlong) count;
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[27], swigjobj, jmemorypos, jbuffer, jbufferpos, jcount);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedArrayMemoryDirector::Write ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_WrappedArrayMemoryDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "length", "()J", NULL 
    },
    {
      "read", "(JLcom/robotraconteur/RRBaseArray;JJ)V", NULL 
    },
    {
      "write", "(JLcom/robotraconteur/RRBaseArray;JJ)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/WrappedArrayMemoryDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_WrappedMultiDimArrayMemoryDirector::SwigDirector_WrappedMultiDimArrayMemoryDirector(JNIEnv *jenv) : RobotRaconteur::WrappedMultiDimArrayMemoryDirector(), Swig::Director(jenv) {
}

SwigDirector_WrappedMultiDimArrayMemoryDirector::~SwigDirector_WrappedMultiDimArrayMemoryDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::vector< uint64_t > SwigDirector_WrappedMultiDimArrayMemoryDirector::Dimensions() {
  std::vector< uint64_t > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::vector< uint64_t > *argp ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedMultiDimArrayMemoryDirector::Dimensions.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[28], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    argp = *(std::vector< uint64_t > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::vector< uint64_t >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedMultiDimArrayMemoryDirector::Dimensions ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

uint64_t SwigDirector_WrappedMultiDimArrayMemoryDirector::DimCount() {
  uint64_t c_result = SwigValueInit< uint64_t >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedMultiDimArrayMemoryDirector::DimCount.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[29], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = (uint64_t)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedMultiDimArrayMemoryDirector::DimCount ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_WrappedMultiDimArrayMemoryDirector::Read(RobotRaconteur::WrappedMultiDimArrayMemoryParams *p) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jp = 0 ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedMultiDimArrayMemoryDirector::Read.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((RobotRaconteur::WrappedMultiDimArrayMemoryParams **)&jp) = (RobotRaconteur::WrappedMultiDimArrayMemoryParams *) p; 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[30], swigjobj, jp);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedMultiDimArrayMemoryDirector::Read ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_WrappedMultiDimArrayMemoryDirector::Write(RobotRaconteur::WrappedMultiDimArrayMemoryParams *p) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jp = 0 ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedMultiDimArrayMemoryDirector::Write.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((RobotRaconteur::WrappedMultiDimArrayMemoryParams **)&jp) = (RobotRaconteur::WrappedMultiDimArrayMemoryParams *) p; 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[31], swigjobj, jp);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedMultiDimArrayMemoryDirector::Write ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_WrappedMultiDimArrayMemoryDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "dimensions", "()Lcom/robotraconteur/vector_uint64_t;", NULL 
    },
    {
      "dimCount", "()J", NULL 
    },
    {
      "read", "(Lcom/robotraconteur/WrappedMultiDimArrayMemoryParams;)V", NULL 
    },
    {
      "write", "(Lcom/robotraconteur/WrappedMultiDimArrayMemoryParams;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/WrappedMultiDimArrayMemoryDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_WrappedPodArrayMemoryDirector::SwigDirector_WrappedPodArrayMemoryDirector(JNIEnv *jenv) : RobotRaconteur::WrappedPodArrayMemoryDirector(), Swig::Director(jenv) {
}

SwigDirector_WrappedPodArrayMemoryDirector::~SwigDirector_WrappedPodArrayMemoryDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


uint64_t SwigDirector_WrappedPodArrayMemoryDirector::Length() {
  uint64_t c_result = SwigValueInit< uint64_t >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedPodArrayMemoryDirector::Length.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[32], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = (uint64_t)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedPodArrayMemoryDirector::Length ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > SwigDirector_WrappedPodArrayMemoryDirector::Read(uint64_t memorypos, uint64_t bufferpos, uint64_t count) {
  boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jmemorypos  ;
  jlong jbufferpos  ;
  jlong jcount  ;
  boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > *smartarg ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedPodArrayMemoryDirector::Read.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jmemorypos = (jlong) memorypos;
    jbufferpos = (jlong) bufferpos;
    jcount = (jlong) count;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[33], swigjobj, jmemorypos, jbufferpos, jcount);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    
    //if (jresult) {
    //    SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< CONST RobotRaconteur::MessageElementNestedElementList > *smartarg = (SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< CONST RobotRaconteur::MessageElementNestedElementList > *)jresult;
    //    c_result = *smartarg;
    //  }
    smartarg = *(boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList >**)&jresult;
    if (smartarg) {
      c_result = boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList >(smartarg->get(), true);
    }
    
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedPodArrayMemoryDirector::Read ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_WrappedPodArrayMemoryDirector::Write(uint64_t memorypos, boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > buffer, uint64_t bufferpos, uint64_t count) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jmemorypos  ;
  jlong jbuffer  ;
  jlong jbufferpos  ;
  jlong jcount  ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedPodArrayMemoryDirector::Write.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jmemorypos = (jlong) memorypos;
    
    //jbuffer = buffer ? new SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< RobotRaconteur::MessageElementNestedElementList >(buffer) : 0; 
    if (buffer) {
      intrusive_ptr_add_ref((&buffer)->get());
      *(boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > **)&jbuffer = new boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList >((&buffer)->get(), SWIG_intrusive_deleter< RobotRaconteur::MessageElementNestedElementList >());
    } else {
      *(boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > **)&jbuffer = 0;
    }
    
    jbufferpos = (jlong) bufferpos;
    jcount = (jlong) count;
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[34], swigjobj, jmemorypos, jbuffer, jbufferpos, jcount);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedPodArrayMemoryDirector::Write ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_WrappedPodArrayMemoryDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "length", "()J", NULL 
    },
    {
      "read", "(JJJ)Lcom/robotraconteur/MessageElementNestedElementList;", NULL 
    },
    {
      "write", "(JLcom/robotraconteur/MessageElementNestedElementList;JJ)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/WrappedPodArrayMemoryDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_WrappedPodMultiDimArrayMemoryDirector::SwigDirector_WrappedPodMultiDimArrayMemoryDirector(JNIEnv *jenv) : RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector(), Swig::Director(jenv) {
}

SwigDirector_WrappedPodMultiDimArrayMemoryDirector::~SwigDirector_WrappedPodMultiDimArrayMemoryDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::vector< uint64_t > SwigDirector_WrappedPodMultiDimArrayMemoryDirector::Dimensions() {
  std::vector< uint64_t > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::vector< uint64_t > *argp ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector::Dimensions.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[35], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    argp = *(std::vector< uint64_t > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::vector< uint64_t >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector::Dimensions ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

uint64_t SwigDirector_WrappedPodMultiDimArrayMemoryDirector::DimCount() {
  uint64_t c_result = SwigValueInit< uint64_t >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector::DimCount.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[36], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = (uint64_t)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector::DimCount ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > SwigDirector_WrappedPodMultiDimArrayMemoryDirector::Read(std::vector< uint64_t > const &memorypos, std::vector< uint64_t > const &bufferpos, std::vector< uint64_t > const &count) {
  boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jmemorypos = 0 ;
  jlong jbufferpos = 0 ;
  jlong jcount = 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > *smartarg ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector::Read.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(std::vector< uint64_t > **)&jmemorypos = (std::vector< uint64_t > *) &memorypos; 
    *(std::vector< uint64_t > **)&jbufferpos = (std::vector< uint64_t > *) &bufferpos; 
    *(std::vector< uint64_t > **)&jcount = (std::vector< uint64_t > *) &count; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[37], swigjobj, jmemorypos, jbufferpos, jcount);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    
    //if (jresult) {
    //    SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< CONST RobotRaconteur::MessageElementNestedElementList > *smartarg = (SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< CONST RobotRaconteur::MessageElementNestedElementList > *)jresult;
    //    c_result = *smartarg;
    //  }
    smartarg = *(boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList >**)&jresult;
    if (smartarg) {
      c_result = boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList >(smartarg->get(), true);
    }
    
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector::Read ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_WrappedPodMultiDimArrayMemoryDirector::Write(std::vector< uint64_t > const &memorypos, boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > buffer, std::vector< uint64_t > const &bufferpos, std::vector< uint64_t > const &count) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jmemorypos = 0 ;
  jlong jbuffer  ;
  jlong jbufferpos = 0 ;
  jlong jcount = 0 ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector::Write.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(std::vector< uint64_t > **)&jmemorypos = (std::vector< uint64_t > *) &memorypos; 
    
    //jbuffer = buffer ? new SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< RobotRaconteur::MessageElementNestedElementList >(buffer) : 0; 
    if (buffer) {
      intrusive_ptr_add_ref((&buffer)->get());
      *(boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > **)&jbuffer = new boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList >((&buffer)->get(), SWIG_intrusive_deleter< RobotRaconteur::MessageElementNestedElementList >());
    } else {
      *(boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > **)&jbuffer = 0;
    }
    
    *(std::vector< uint64_t > **)&jbufferpos = (std::vector< uint64_t > *) &bufferpos; 
    *(std::vector< uint64_t > **)&jcount = (std::vector< uint64_t > *) &count; 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[38], swigjobj, jmemorypos, jbuffer, jbufferpos, jcount);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector::Write ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_WrappedPodMultiDimArrayMemoryDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "dimensions", "()Lcom/robotraconteur/vector_uint64_t;", NULL 
    },
    {
      "dimCount", "()J", NULL 
    },
    {
      "read", "(Lcom/robotraconteur/vector_uint64_t;Lcom/robotraconteur/vector_uint64_t;Lcom/robotraconteur/vector_uint64_t;)Lcom/robotraconteur/MessageElementNestedElementList;", NULL 
    },
    {
      "write", "(Lcom/robotraconteur/vector_uint64_t;Lcom/robotraconteur/MessageElementNestedElementList;Lcom/robotraconteur/vector_uint64_t;Lcom/robotraconteur/vector_uint64_t;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/WrappedPodMultiDimArrayMemoryDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_WrappedNamedArrayMemoryClientBuffer::SwigDirector_WrappedNamedArrayMemoryClientBuffer(JNIEnv *jenv) : RobotRaconteur::WrappedNamedArrayMemoryClientBuffer(), Swig::Director(jenv) {
}

void SwigDirector_WrappedNamedArrayMemoryClientBuffer::UnpackReadResult(boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > res, uint64_t bufferpos, uint64_t count) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jres  ;
  jlong jbufferpos  ;
  jlong jcount  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedNamedArrayMemoryClientBuffer::UnpackReadResult.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    //jres = res ? new SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< RobotRaconteur::MessageElementNestedElementList >(res) : 0; 
    if (res) {
      intrusive_ptr_add_ref((&res)->get());
      *(boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > **)&jres = new boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList >((&res)->get(), SWIG_intrusive_deleter< RobotRaconteur::MessageElementNestedElementList >());
    } else {
      *(boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > **)&jres = 0;
    }
    
    jbufferpos = (jlong) bufferpos;
    jcount = (jlong) count;
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[39], swigjobj, jres, jbufferpos, jcount);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedNamedArrayMemoryClientBuffer::UnpackReadResult ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > SwigDirector_WrappedNamedArrayMemoryClientBuffer::PackWriteRequest(uint64_t bufferpos, uint64_t count) {
  boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jbufferpos  ;
  jlong jcount  ;
  boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > *smartarg ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedNamedArrayMemoryClientBuffer::PackWriteRequest.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jbufferpos = (jlong) bufferpos;
    jcount = (jlong) count;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[40], swigjobj, jbufferpos, jcount);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    
    //if (jresult) {
    //    SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< CONST RobotRaconteur::MessageElementNestedElementList > *smartarg = (SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< CONST RobotRaconteur::MessageElementNestedElementList > *)jresult;
    //    c_result = *smartarg;
    //  }
    smartarg = *(boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList >**)&jresult;
    if (smartarg) {
      c_result = boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList >(smartarg->get(), true);
    }
    
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedNamedArrayMemoryClientBuffer::PackWriteRequest ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

uint64_t SwigDirector_WrappedNamedArrayMemoryClientBuffer::GetBufferLength() {
  uint64_t c_result = SwigValueInit< uint64_t >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedNamedArrayMemoryClientBuffer::GetBufferLength.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[41], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = (uint64_t)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedNamedArrayMemoryClientBuffer::GetBufferLength ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

SwigDirector_WrappedNamedArrayMemoryClientBuffer::~SwigDirector_WrappedNamedArrayMemoryClientBuffer() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_WrappedNamedArrayMemoryClientBuffer::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "unpackReadResult", "(Lcom/robotraconteur/MessageElementNestedElementList;JJ)V", NULL 
    },
    {
      "packWriteRequest", "(JJ)Lcom/robotraconteur/MessageElementNestedElementList;", NULL 
    },
    {
      "getBufferLength", "()J", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/WrappedNamedArrayMemoryClientBuffer");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_WrappedNamedMultiDimArrayMemoryClientBuffer::SwigDirector_WrappedNamedMultiDimArrayMemoryClientBuffer(JNIEnv *jenv) : RobotRaconteur::WrappedNamedMultiDimArrayMemoryClientBuffer(), Swig::Director(jenv) {
}

void SwigDirector_WrappedNamedMultiDimArrayMemoryClientBuffer::UnpackReadResult(boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > res, std::vector< uint64_t > const &bufferpos, std::vector< uint64_t > const &count) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jres  ;
  jlong jbufferpos = 0 ;
  jlong jcount = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedNamedMultiDimArrayMemoryClientBuffer::UnpackReadResult.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    //jres = res ? new SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< RobotRaconteur::MessageElementNestedElementList >(res) : 0; 
    if (res) {
      intrusive_ptr_add_ref((&res)->get());
      *(boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > **)&jres = new boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList >((&res)->get(), SWIG_intrusive_deleter< RobotRaconteur::MessageElementNestedElementList >());
    } else {
      *(boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > **)&jres = 0;
    }
    
    *(std::vector< uint64_t > **)&jbufferpos = (std::vector< uint64_t > *) &bufferpos; 
    *(std::vector< uint64_t > **)&jcount = (std::vector< uint64_t > *) &count; 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[42], swigjobj, jres, jbufferpos, jcount);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedNamedMultiDimArrayMemoryClientBuffer::UnpackReadResult ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > SwigDirector_WrappedNamedMultiDimArrayMemoryClientBuffer::PackWriteRequest(std::vector< uint64_t > const &bufferpos, std::vector< uint64_t > const &count) {
  boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jbufferpos = 0 ;
  jlong jcount = 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > *smartarg ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedNamedMultiDimArrayMemoryClientBuffer::PackWriteRequest.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(std::vector< uint64_t > **)&jbufferpos = (std::vector< uint64_t > *) &bufferpos; 
    *(std::vector< uint64_t > **)&jcount = (std::vector< uint64_t > *) &count; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[43], swigjobj, jbufferpos, jcount);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    
    //if (jresult) {
    //    SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< CONST RobotRaconteur::MessageElementNestedElementList > *smartarg = (SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< CONST RobotRaconteur::MessageElementNestedElementList > *)jresult;
    //    c_result = *smartarg;
    //  }
    smartarg = *(boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList >**)&jresult;
    if (smartarg) {
      c_result = boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList >(smartarg->get(), true);
    }
    
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedNamedMultiDimArrayMemoryClientBuffer::PackWriteRequest ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

SwigDirector_WrappedNamedMultiDimArrayMemoryClientBuffer::~SwigDirector_WrappedNamedMultiDimArrayMemoryClientBuffer() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_WrappedNamedMultiDimArrayMemoryClientBuffer::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "unpackReadResult", "(Lcom/robotraconteur/MessageElementNestedElementList;Lcom/robotraconteur/vector_uint64_t;Lcom/robotraconteur/vector_uint64_t;)V", NULL 
    },
    {
      "packWriteRequest", "(Lcom/robotraconteur/vector_uint64_t;Lcom/robotraconteur/vector_uint64_t;)Lcom/robotraconteur/MessageElementNestedElementList;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/WrappedNamedMultiDimArrayMemoryClientBuffer");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_WrappedNamedArrayMemoryDirector::SwigDirector_WrappedNamedArrayMemoryDirector(JNIEnv *jenv) : RobotRaconteur::WrappedNamedArrayMemoryDirector(), Swig::Director(jenv) {
}

SwigDirector_WrappedNamedArrayMemoryDirector::~SwigDirector_WrappedNamedArrayMemoryDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


uint64_t SwigDirector_WrappedNamedArrayMemoryDirector::Length() {
  uint64_t c_result = SwigValueInit< uint64_t >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedNamedArrayMemoryDirector::Length.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[44], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = (uint64_t)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedNamedArrayMemoryDirector::Length ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > SwigDirector_WrappedNamedArrayMemoryDirector::Read(uint64_t memorypos, uint64_t bufferpos, uint64_t count) {
  boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jmemorypos  ;
  jlong jbufferpos  ;
  jlong jcount  ;
  boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > *smartarg ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedNamedArrayMemoryDirector::Read.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jmemorypos = (jlong) memorypos;
    jbufferpos = (jlong) bufferpos;
    jcount = (jlong) count;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[45], swigjobj, jmemorypos, jbufferpos, jcount);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    
    //if (jresult) {
    //    SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< CONST RobotRaconteur::MessageElementNestedElementList > *smartarg = (SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< CONST RobotRaconteur::MessageElementNestedElementList > *)jresult;
    //    c_result = *smartarg;
    //  }
    smartarg = *(boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList >**)&jresult;
    if (smartarg) {
      c_result = boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList >(smartarg->get(), true);
    }
    
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedNamedArrayMemoryDirector::Read ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_WrappedNamedArrayMemoryDirector::Write(uint64_t memorypos, boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > buffer, uint64_t bufferpos, uint64_t count) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jmemorypos  ;
  jlong jbuffer  ;
  jlong jbufferpos  ;
  jlong jcount  ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedNamedArrayMemoryDirector::Write.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jmemorypos = (jlong) memorypos;
    
    //jbuffer = buffer ? new SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< RobotRaconteur::MessageElementNestedElementList >(buffer) : 0; 
    if (buffer) {
      intrusive_ptr_add_ref((&buffer)->get());
      *(boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > **)&jbuffer = new boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList >((&buffer)->get(), SWIG_intrusive_deleter< RobotRaconteur::MessageElementNestedElementList >());
    } else {
      *(boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > **)&jbuffer = 0;
    }
    
    jbufferpos = (jlong) bufferpos;
    jcount = (jlong) count;
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[46], swigjobj, jmemorypos, jbuffer, jbufferpos, jcount);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedNamedArrayMemoryDirector::Write ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_WrappedNamedArrayMemoryDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "length", "()J", NULL 
    },
    {
      "read", "(JJJ)Lcom/robotraconteur/MessageElementNestedElementList;", NULL 
    },
    {
      "write", "(JLcom/robotraconteur/MessageElementNestedElementList;JJ)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/WrappedNamedArrayMemoryDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_WrappedNamedMultiDimArrayMemoryDirector::SwigDirector_WrappedNamedMultiDimArrayMemoryDirector(JNIEnv *jenv) : RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector(), Swig::Director(jenv) {
}

SwigDirector_WrappedNamedMultiDimArrayMemoryDirector::~SwigDirector_WrappedNamedMultiDimArrayMemoryDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::vector< uint64_t > SwigDirector_WrappedNamedMultiDimArrayMemoryDirector::Dimensions() {
  std::vector< uint64_t > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::vector< uint64_t > *argp ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector::Dimensions.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[47], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    argp = *(std::vector< uint64_t > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::vector< uint64_t >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector::Dimensions ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

uint64_t SwigDirector_WrappedNamedMultiDimArrayMemoryDirector::DimCount() {
  uint64_t c_result = SwigValueInit< uint64_t >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector::DimCount.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[48], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = (uint64_t)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector::DimCount ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > SwigDirector_WrappedNamedMultiDimArrayMemoryDirector::Read(std::vector< uint64_t > const &memorypos, std::vector< uint64_t > const &bufferpos, std::vector< uint64_t > const &count) {
  boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jmemorypos = 0 ;
  jlong jbufferpos = 0 ;
  jlong jcount = 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > *smartarg ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector::Read.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(std::vector< uint64_t > **)&jmemorypos = (std::vector< uint64_t > *) &memorypos; 
    *(std::vector< uint64_t > **)&jbufferpos = (std::vector< uint64_t > *) &bufferpos; 
    *(std::vector< uint64_t > **)&jcount = (std::vector< uint64_t > *) &count; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[49], swigjobj, jmemorypos, jbufferpos, jcount);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    
    //if (jresult) {
    //    SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< CONST RobotRaconteur::MessageElementNestedElementList > *smartarg = (SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< CONST RobotRaconteur::MessageElementNestedElementList > *)jresult;
    //    c_result = *smartarg;
    //  }
    smartarg = *(boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList >**)&jresult;
    if (smartarg) {
      c_result = boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList >(smartarg->get(), true);
    }
    
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector::Read ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_WrappedNamedMultiDimArrayMemoryDirector::Write(std::vector< uint64_t > const &memorypos, boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > buffer, std::vector< uint64_t > const &bufferpos, std::vector< uint64_t > const &count) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jmemorypos = 0 ;
  jlong jbuffer  ;
  jlong jbufferpos = 0 ;
  jlong jcount = 0 ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector::Write.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(std::vector< uint64_t > **)&jmemorypos = (std::vector< uint64_t > *) &memorypos; 
    
    //jbuffer = buffer ? new SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< RobotRaconteur::MessageElementNestedElementList >(buffer) : 0; 
    if (buffer) {
      intrusive_ptr_add_ref((&buffer)->get());
      *(boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > **)&jbuffer = new boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList >((&buffer)->get(), SWIG_intrusive_deleter< RobotRaconteur::MessageElementNestedElementList >());
    } else {
      *(boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > **)&jbuffer = 0;
    }
    
    *(std::vector< uint64_t > **)&jbufferpos = (std::vector< uint64_t > *) &bufferpos; 
    *(std::vector< uint64_t > **)&jcount = (std::vector< uint64_t > *) &count; 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[50], swigjobj, jmemorypos, jbuffer, jbufferpos, jcount);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector::Write ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_WrappedNamedMultiDimArrayMemoryDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "dimensions", "()Lcom/robotraconteur/vector_uint64_t;", NULL 
    },
    {
      "dimCount", "()J", NULL 
    },
    {
      "read", "(Lcom/robotraconteur/vector_uint64_t;Lcom/robotraconteur/vector_uint64_t;Lcom/robotraconteur/vector_uint64_t;)Lcom/robotraconteur/MessageElementNestedElementList;", NULL 
    },
    {
      "write", "(Lcom/robotraconteur/vector_uint64_t;Lcom/robotraconteur/MessageElementNestedElementList;Lcom/robotraconteur/vector_uint64_t;Lcom/robotraconteur/vector_uint64_t;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/WrappedNamedMultiDimArrayMemoryDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_AsyncGeneratorClientReturnDirector::SwigDirector_AsyncGeneratorClientReturnDirector(JNIEnv *jenv) : RobotRaconteur::AsyncGeneratorClientReturnDirector(), Swig::Director(jenv) {
}

SwigDirector_AsyncGeneratorClientReturnDirector::~SwigDirector_AsyncGeneratorClientReturnDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_AsyncGeneratorClientReturnDirector::handler(boost::shared_ptr< RobotRaconteur::WrappedGeneratorClient > const &ret, RobotRaconteur::HandlerErrorInfo &error) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jret = 0 ;
  jlong jerror = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::AsyncGeneratorClientReturnDirector::handler.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jret = 0;
    if (ret) {
      *((boost::shared_ptr<  RobotRaconteur::WrappedGeneratorClient > **)&jret) = new boost::shared_ptr<  RobotRaconteur::WrappedGeneratorClient >(ret);
    } 
    *(RobotRaconteur::HandlerErrorInfo **)&jerror = (RobotRaconteur::HandlerErrorInfo *) &error; 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[51], swigjobj, jret, jerror);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::AsyncGeneratorClientReturnDirector::handler ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_AsyncGeneratorClientReturnDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "handler", "(Lcom/robotraconteur/WrappedGeneratorClient;Lcom/robotraconteur/HandlerErrorInfo;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/AsyncGeneratorClientReturnDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_WrappedGeneratorServerDirector::SwigDirector_WrappedGeneratorServerDirector(JNIEnv *jenv) : RobotRaconteur::WrappedGeneratorServerDirector(), Swig::Director(jenv) {
}

SwigDirector_WrappedGeneratorServerDirector::~SwigDirector_WrappedGeneratorServerDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


boost::intrusive_ptr< RobotRaconteur::MessageElement > SwigDirector_WrappedGeneratorServerDirector::Next(boost::intrusive_ptr< RobotRaconteur::MessageElement > m, boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > const &async_adaptor) {
  boost::intrusive_ptr< RobotRaconteur::MessageElement > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jm  ;
  jlong jasync_adaptor = 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedGeneratorServerDirector::Next.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    //jm = m ? new SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< RobotRaconteur::MessageElement >(m) : 0; 
    if (m) {
      intrusive_ptr_add_ref((&m)->get());
      *(boost::shared_ptr< RobotRaconteur::MessageElement > **)&jm = new boost::shared_ptr< RobotRaconteur::MessageElement >((&m)->get(), SWIG_intrusive_deleter< RobotRaconteur::MessageElement >());
    } else {
      *(boost::shared_ptr< RobotRaconteur::MessageElement > **)&jm = 0;
    }
    
    jasync_adaptor = 0;
    if (async_adaptor) {
      *((boost::shared_ptr<  RobotRaconteur::WrappedServiceSkelAsyncAdapter > **)&jasync_adaptor) = new boost::shared_ptr<  RobotRaconteur::WrappedServiceSkelAsyncAdapter >(async_adaptor);
    } 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[52], swigjobj, jm, jasync_adaptor);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    
    //if (jresult) {
    //    SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< CONST RobotRaconteur::MessageElement > *smartarg = (SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< CONST RobotRaconteur::MessageElement > *)jresult;
    //    c_result = *smartarg;
    //  }
    smartarg = *(boost::shared_ptr< RobotRaconteur::MessageElement >**)&jresult;
    if (smartarg) {
      c_result = boost::intrusive_ptr< RobotRaconteur::MessageElement >(smartarg->get(), true);
    }
    
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedGeneratorServerDirector::Next ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_WrappedGeneratorServerDirector::Abort(boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > const &async_adapter) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jasync_adapter = 0 ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedGeneratorServerDirector::Abort.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jasync_adapter = 0;
    if (async_adapter) {
      *((boost::shared_ptr<  RobotRaconteur::WrappedServiceSkelAsyncAdapter > **)&jasync_adapter) = new boost::shared_ptr<  RobotRaconteur::WrappedServiceSkelAsyncAdapter >(async_adapter);
    } 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[53], swigjobj, jasync_adapter);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedGeneratorServerDirector::Abort ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_WrappedGeneratorServerDirector::Close(boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > const &async_adapter) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jasync_adapter = 0 ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedGeneratorServerDirector::Close.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jasync_adapter = 0;
    if (async_adapter) {
      *((boost::shared_ptr<  RobotRaconteur::WrappedServiceSkelAsyncAdapter > **)&jasync_adapter) = new boost::shared_ptr<  RobotRaconteur::WrappedServiceSkelAsyncAdapter >(async_adapter);
    } 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[54], swigjobj, jasync_adapter);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedGeneratorServerDirector::Close ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_WrappedGeneratorServerDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "next", "(Lcom/robotraconteur/MessageElement;Lcom/robotraconteur/WrappedServiceSkelAsyncAdapter;)Lcom/robotraconteur/MessageElement;", NULL 
    },
    {
      "abort", "(Lcom/robotraconteur/WrappedServiceSkelAsyncAdapter;)V", NULL 
    },
    {
      "close", "(Lcom/robotraconteur/WrappedServiceSkelAsyncAdapter;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/WrappedGeneratorServerDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_WrappedServiceStubDirector::SwigDirector_WrappedServiceStubDirector(JNIEnv *jenv) : RobotRaconteur::WrappedServiceStubDirector(), Swig::Director(jenv) {
}

SwigDirector_WrappedServiceStubDirector::~SwigDirector_WrappedServiceStubDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_WrappedServiceStubDirector::DispatchEvent(std::string const &EventName, std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > args) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jEventName = 0 ;
  jlong jargs  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedServiceStubDirector::DispatchEvent.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jEventName = jenv->NewStringUTF((&EventName)->c_str());
    Swig::LocalRefGuard EventName_refguard(jenv, jEventName); 
    jargs = 0;
    *((std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jargs) = new std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > >((const std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > &)args); 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[55], swigjobj, jEventName, jargs);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedServiceStubDirector::DispatchEvent ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

boost::intrusive_ptr< RobotRaconteur::MessageElement > SwigDirector_WrappedServiceStubDirector::CallbackCall(std::string const &CallbackName, std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > args) {
  boost::intrusive_ptr< RobotRaconteur::MessageElement > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jCallbackName = 0 ;
  jlong jargs  ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedServiceStubDirector::CallbackCall.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jCallbackName = jenv->NewStringUTF((&CallbackName)->c_str());
    Swig::LocalRefGuard CallbackName_refguard(jenv, jCallbackName); 
    jargs = 0;
    *((std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jargs) = new std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > >((const std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > &)args); 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[56], swigjobj, jCallbackName, jargs);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    
    //if (jresult) {
    //    SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< CONST RobotRaconteur::MessageElement > *smartarg = (SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< CONST RobotRaconteur::MessageElement > *)jresult;
    //    c_result = *smartarg;
    //  }
    smartarg = *(boost::shared_ptr< RobotRaconteur::MessageElement >**)&jresult;
    if (smartarg) {
      c_result = boost::intrusive_ptr< RobotRaconteur::MessageElement >(smartarg->get(), true);
    }
    
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedServiceStubDirector::CallbackCall ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_WrappedServiceStubDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "dispatchEvent", "(Ljava/lang/String;Lcom/robotraconteur/vectorptr_messageelement;)V", NULL 
    },
    {
      "callbackCall", "(Ljava/lang/String;Lcom/robotraconteur/vectorptr_messageelement;)Lcom/robotraconteur/MessageElement;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/WrappedServiceStubDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_AsyncStubReturnDirector::SwigDirector_AsyncStubReturnDirector(JNIEnv *jenv) : RobotRaconteur::AsyncStubReturnDirector(), Swig::Director(jenv) {
}

SwigDirector_AsyncStubReturnDirector::~SwigDirector_AsyncStubReturnDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_AsyncStubReturnDirector::handler(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &stub, RobotRaconteur::HandlerErrorInfo &error) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jstub = 0 ;
  jlong jerror = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::AsyncStubReturnDirector::handler.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jstub = 0;
    if (stub) {
      *((boost::shared_ptr<  RobotRaconteur::WrappedServiceStub > **)&jstub) = new boost::shared_ptr<  RobotRaconteur::WrappedServiceStub >(stub);
    } 
    *(RobotRaconteur::HandlerErrorInfo **)&jerror = (RobotRaconteur::HandlerErrorInfo *) &error; 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[57], swigjobj, jstub, jerror);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::AsyncStubReturnDirector::handler ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_AsyncStubReturnDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "handler", "(Lcom/robotraconteur/WrappedServiceStub;Lcom/robotraconteur/HandlerErrorInfo;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/AsyncStubReturnDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_WrappedServiceSkelDirector::SwigDirector_WrappedServiceSkelDirector(JNIEnv *jenv) : RobotRaconteur::WrappedServiceSkelDirector(), Swig::Director(jenv) {
}

SwigDirector_WrappedServiceSkelDirector::~SwigDirector_WrappedServiceSkelDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_WrappedServiceSkelDirector::Init(boost::shared_ptr< RobotRaconteur::WrappedServiceSkel > const &skel) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jskel = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedServiceSkelDirector::Init.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jskel = 0;
    if (skel) {
      *((boost::shared_ptr<  RobotRaconteur::WrappedServiceSkel > **)&jskel) = new boost::shared_ptr<  RobotRaconteur::WrappedServiceSkel >(skel);
    } 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[58], swigjobj, jskel);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedServiceSkelDirector::Init ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

boost::intrusive_ptr< RobotRaconteur::MessageElement > SwigDirector_WrappedServiceSkelDirector::CallGetProperty(std::string const &name, boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > const &async_adaptor) {
  boost::intrusive_ptr< RobotRaconteur::MessageElement > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  jlong jasync_adaptor = 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedServiceSkelDirector::CallGetProperty.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = jenv->NewStringUTF((&name)->c_str());
    Swig::LocalRefGuard name_refguard(jenv, jname); 
    jasync_adaptor = 0;
    if (async_adaptor) {
      *((boost::shared_ptr<  RobotRaconteur::WrappedServiceSkelAsyncAdapter > **)&jasync_adaptor) = new boost::shared_ptr<  RobotRaconteur::WrappedServiceSkelAsyncAdapter >(async_adaptor);
    } 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[59], swigjobj, jname, jasync_adaptor);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    
    //if (jresult) {
    //    SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< CONST RobotRaconteur::MessageElement > *smartarg = (SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< CONST RobotRaconteur::MessageElement > *)jresult;
    //    c_result = *smartarg;
    //  }
    smartarg = *(boost::shared_ptr< RobotRaconteur::MessageElement >**)&jresult;
    if (smartarg) {
      c_result = boost::intrusive_ptr< RobotRaconteur::MessageElement >(smartarg->get(), true);
    }
    
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedServiceSkelDirector::CallGetProperty ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_WrappedServiceSkelDirector::CallSetProperty(std::string const &name, boost::intrusive_ptr< RobotRaconteur::MessageElement > m, boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > const &async_adaptor) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  jlong jm  ;
  jlong jasync_adaptor = 0 ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedServiceSkelDirector::CallSetProperty.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = jenv->NewStringUTF((&name)->c_str());
    Swig::LocalRefGuard name_refguard(jenv, jname); 
    
    //jm = m ? new SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< RobotRaconteur::MessageElement >(m) : 0; 
    if (m) {
      intrusive_ptr_add_ref((&m)->get());
      *(boost::shared_ptr< RobotRaconteur::MessageElement > **)&jm = new boost::shared_ptr< RobotRaconteur::MessageElement >((&m)->get(), SWIG_intrusive_deleter< RobotRaconteur::MessageElement >());
    } else {
      *(boost::shared_ptr< RobotRaconteur::MessageElement > **)&jm = 0;
    }
    
    jasync_adaptor = 0;
    if (async_adaptor) {
      *((boost::shared_ptr<  RobotRaconteur::WrappedServiceSkelAsyncAdapter > **)&jasync_adaptor) = new boost::shared_ptr<  RobotRaconteur::WrappedServiceSkelAsyncAdapter >(async_adaptor);
    } 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[60], swigjobj, jname, jm, jasync_adaptor);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedServiceSkelDirector::CallSetProperty ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

boost::intrusive_ptr< RobotRaconteur::MessageElement > SwigDirector_WrappedServiceSkelDirector::CallFunction(std::string const &name, std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > const &m, boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > const &async_adaptor) {
  boost::intrusive_ptr< RobotRaconteur::MessageElement > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  jlong jm = 0 ;
  jlong jasync_adaptor = 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedServiceSkelDirector::CallFunction.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = jenv->NewStringUTF((&name)->c_str());
    Swig::LocalRefGuard name_refguard(jenv, jname); 
    *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jm = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *) &m; 
    jasync_adaptor = 0;
    if (async_adaptor) {
      *((boost::shared_ptr<  RobotRaconteur::WrappedServiceSkelAsyncAdapter > **)&jasync_adaptor) = new boost::shared_ptr<  RobotRaconteur::WrappedServiceSkelAsyncAdapter >(async_adaptor);
    } 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[61], swigjobj, jname, jm, jasync_adaptor);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    
    //if (jresult) {
    //    SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< CONST RobotRaconteur::MessageElement > *smartarg = (SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< CONST RobotRaconteur::MessageElement > *)jresult;
    //    c_result = *smartarg;
    //  }
    smartarg = *(boost::shared_ptr< RobotRaconteur::MessageElement >**)&jresult;
    if (smartarg) {
      c_result = boost::intrusive_ptr< RobotRaconteur::MessageElement >(smartarg->get(), true);
    }
    
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedServiceSkelDirector::CallFunction ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

boost::shared_ptr< RobotRaconteur::WrappedRRObject > SwigDirector_WrappedServiceSkelDirector::GetSubObj(std::string const &name, std::string const &index) {
  boost::shared_ptr< RobotRaconteur::WrappedRRObject > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  jstring jindex = 0 ;
  
  if (!swig_override[4]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedServiceSkelDirector::GetSubObj.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = jenv->NewStringUTF((&name)->c_str());
    Swig::LocalRefGuard name_refguard(jenv, jname); 
    jindex = jenv->NewStringUTF((&index)->c_str());
    Swig::LocalRefGuard index_refguard(jenv, jindex); 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[62], swigjobj, jname, jindex);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if (jresult) {
      boost::shared_ptr< RobotRaconteur::WrappedRRObject > * smartarg = *(boost::shared_ptr<  RobotRaconteur::WrappedRRObject > **)&jresult;
      c_result = *smartarg;
    } 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedServiceSkelDirector::GetSubObj ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

RobotRaconteur::WrappedArrayMemoryDirector *SwigDirector_WrappedServiceSkelDirector::GetArrayMemory(std::string const &name) {
  RobotRaconteur::WrappedArrayMemoryDirector *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  
  if (!swig_override[5]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedServiceSkelDirector::GetArrayMemory.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = jenv->NewStringUTF((&name)->c_str());
    Swig::LocalRefGuard name_refguard(jenv, jname); 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[63], swigjobj, jname);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = *(RobotRaconteur::WrappedArrayMemoryDirector **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedServiceSkelDirector::GetArrayMemory ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

RobotRaconteur::WrappedMultiDimArrayMemoryDirector *SwigDirector_WrappedServiceSkelDirector::GetMultiDimArrayMemory(std::string const &name) {
  RobotRaconteur::WrappedMultiDimArrayMemoryDirector *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  
  if (!swig_override[6]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedServiceSkelDirector::GetMultiDimArrayMemory.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = jenv->NewStringUTF((&name)->c_str());
    Swig::LocalRefGuard name_refguard(jenv, jname); 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[64], swigjobj, jname);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = *(RobotRaconteur::WrappedMultiDimArrayMemoryDirector **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedServiceSkelDirector::GetMultiDimArrayMemory ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

RobotRaconteur::WrappedPodArrayMemoryDirector *SwigDirector_WrappedServiceSkelDirector::GetPodArrayMemory(std::string const &name) {
  RobotRaconteur::WrappedPodArrayMemoryDirector *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  
  if (!swig_override[7]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedServiceSkelDirector::GetPodArrayMemory.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = jenv->NewStringUTF((&name)->c_str());
    Swig::LocalRefGuard name_refguard(jenv, jname); 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[65], swigjobj, jname);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = *(RobotRaconteur::WrappedPodArrayMemoryDirector **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedServiceSkelDirector::GetPodArrayMemory ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector *SwigDirector_WrappedServiceSkelDirector::GetPodMultiDimArrayMemory(std::string const &name) {
  RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  
  if (!swig_override[8]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedServiceSkelDirector::GetPodMultiDimArrayMemory.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = jenv->NewStringUTF((&name)->c_str());
    Swig::LocalRefGuard name_refguard(jenv, jname); 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[66], swigjobj, jname);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = *(RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedServiceSkelDirector::GetPodMultiDimArrayMemory ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

RobotRaconteur::WrappedNamedArrayMemoryDirector *SwigDirector_WrappedServiceSkelDirector::GetNamedArrayMemory(std::string const &name) {
  RobotRaconteur::WrappedNamedArrayMemoryDirector *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  
  if (!swig_override[9]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedServiceSkelDirector::GetNamedArrayMemory.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = jenv->NewStringUTF((&name)->c_str());
    Swig::LocalRefGuard name_refguard(jenv, jname); 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[67], swigjobj, jname);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = *(RobotRaconteur::WrappedNamedArrayMemoryDirector **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedServiceSkelDirector::GetNamedArrayMemory ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector *SwigDirector_WrappedServiceSkelDirector::GetNamedMultiDimArrayMemory(std::string const &name) {
  RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector *c_result = 0 ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  
  if (!swig_override[10]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedServiceSkelDirector::GetNamedMultiDimArrayMemory.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = jenv->NewStringUTF((&name)->c_str());
    Swig::LocalRefGuard name_refguard(jenv, jname); 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[68], swigjobj, jname);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = *(RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector **)&jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedServiceSkelDirector::GetNamedMultiDimArrayMemory ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_WrappedServiceSkelDirector::MonitorEnter(int32_t timeout) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jtimeout  ;
  
  if (!swig_override[11]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedServiceSkelDirector::MonitorEnter.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtimeout = (jint) timeout;
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[69], swigjobj, jtimeout);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedServiceSkelDirector::MonitorEnter ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_WrappedServiceSkelDirector::MonitorExit() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[12]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedServiceSkelDirector::MonitorExit.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[70], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedServiceSkelDirector::MonitorExit ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_WrappedServiceSkelDirector::ReleaseCastObject() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[13]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedServiceSkelDirector::ReleaseCastObject.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[71], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedServiceSkelDirector::ReleaseCastObject ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_WrappedServiceSkelDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "init", "(Lcom/robotraconteur/WrappedServiceSkel;)V", NULL 
    },
    {
      "_CallGetProperty", "(Ljava/lang/String;Lcom/robotraconteur/WrappedServiceSkelAsyncAdapter;)Lcom/robotraconteur/MessageElement;", NULL 
    },
    {
      "_CallSetProperty", "(Ljava/lang/String;Lcom/robotraconteur/MessageElement;Lcom/robotraconteur/WrappedServiceSkelAsyncAdapter;)V", NULL 
    },
    {
      "_CallFunction", "(Ljava/lang/String;Lcom/robotraconteur/vectorptr_messageelement;Lcom/robotraconteur/WrappedServiceSkelAsyncAdapter;)Lcom/robotraconteur/MessageElement;", NULL 
    },
    {
      "_GetSubObj", "(Ljava/lang/String;Ljava/lang/String;)Lcom/robotraconteur/WrappedRRObject;", NULL 
    },
    {
      "_GetArrayMemory", "(Ljava/lang/String;)Lcom/robotraconteur/WrappedArrayMemoryDirector;", NULL 
    },
    {
      "_GetMultiDimArrayMemory", "(Ljava/lang/String;)Lcom/robotraconteur/WrappedMultiDimArrayMemoryDirector;", NULL 
    },
    {
      "_GetPodArrayMemory", "(Ljava/lang/String;)Lcom/robotraconteur/WrappedPodArrayMemoryDirector;", NULL 
    },
    {
      "_GetPodMultiDimArrayMemory", "(Ljava/lang/String;)Lcom/robotraconteur/WrappedPodMultiDimArrayMemoryDirector;", NULL 
    },
    {
      "_GetNamedArrayMemory", "(Ljava/lang/String;)Lcom/robotraconteur/WrappedNamedArrayMemoryDirector;", NULL 
    },
    {
      "_GetNamedMultiDimArrayMemory", "(Ljava/lang/String;)Lcom/robotraconteur/WrappedNamedMultiDimArrayMemoryDirector;", NULL 
    },
    {
      "monitorEnter", "(I)V", NULL 
    },
    {
      "monitorExit", "()V", NULL 
    },
    {
      "releaseCastObject", "()V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/WrappedServiceSkelDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 14; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ServerServiceListenerDirector::SwigDirector_ServerServiceListenerDirector(JNIEnv *jenv) : ServerServiceListenerDirector(), Swig::Director(jenv) {
}

void SwigDirector_ServerServiceListenerDirector::Callback(int32_t code, uint32_t endpoint) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jcode  ;
  jlong jendpoint  ;
  
  if (!swig_override[0]) {
    ServerServiceListenerDirector::Callback(code,endpoint);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcode = (jint) code;
    jendpoint = (jlong) endpoint;
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[72], swigjobj, jcode, jendpoint);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ServerServiceListenerDirector::Callback ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

SwigDirector_ServerServiceListenerDirector::~SwigDirector_ServerServiceListenerDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ServerServiceListenerDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "callback", "(IJ)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/ServerServiceListenerDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_WrappedUserAuthenticatorDirector::SwigDirector_WrappedUserAuthenticatorDirector(JNIEnv *jenv) : RobotRaconteur::WrappedUserAuthenticatorDirector(), Swig::Director(jenv) {
}

SwigDirector_WrappedUserAuthenticatorDirector::~SwigDirector_WrappedUserAuthenticatorDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


boost::shared_ptr< RobotRaconteur::AuthenticatedUser > SwigDirector_WrappedUserAuthenticatorDirector::AuthenticateUser(std::string const &username, boost::intrusive_ptr< RobotRaconteur::MessageElement > credentials, boost::shared_ptr< RobotRaconteur::ServerContext > const &context) {
  boost::shared_ptr< RobotRaconteur::AuthenticatedUser > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jusername = 0 ;
  jlong jcredentials  ;
  jlong jcontext = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedUserAuthenticatorDirector::AuthenticateUser.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jusername = jenv->NewStringUTF((&username)->c_str());
    Swig::LocalRefGuard username_refguard(jenv, jusername); 
    
    //jcredentials = credentials ? new SWIG_SHARED_PTR_QNAMESPACE::shared_ptr< RobotRaconteur::MessageElement >(credentials) : 0; 
    if (credentials) {
      intrusive_ptr_add_ref((&credentials)->get());
      *(boost::shared_ptr< RobotRaconteur::MessageElement > **)&jcredentials = new boost::shared_ptr< RobotRaconteur::MessageElement >((&credentials)->get(), SWIG_intrusive_deleter< RobotRaconteur::MessageElement >());
    } else {
      *(boost::shared_ptr< RobotRaconteur::MessageElement > **)&jcredentials = 0;
    }
    
    jcontext = 0;
    if (context) {
      *((boost::shared_ptr<  RobotRaconteur::ServerContext > **)&jcontext) = new boost::shared_ptr<  RobotRaconteur::ServerContext >(context);
    } 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[73], swigjobj, jusername, jcredentials, jcontext);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    if (jresult) {
      boost::shared_ptr< RobotRaconteur::AuthenticatedUser > * smartarg = *(boost::shared_ptr<  RobotRaconteur::AuthenticatedUser > **)&jresult;
      c_result = *smartarg;
    } 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedUserAuthenticatorDirector::AuthenticateUser ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_WrappedUserAuthenticatorDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "authenticateUser", "(Ljava/lang/String;Lcom/robotraconteur/MessageElement;Lcom/robotraconteur/ServerContext;)Lcom/robotraconteur/AuthenticatedUser;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/WrappedUserAuthenticatorDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_AsyncServiceInfo2VectorReturnDirector::SwigDirector_AsyncServiceInfo2VectorReturnDirector(JNIEnv *jenv) : RobotRaconteur::AsyncServiceInfo2VectorReturnDirector(), Swig::Director(jenv) {
}

SwigDirector_AsyncServiceInfo2VectorReturnDirector::~SwigDirector_AsyncServiceInfo2VectorReturnDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_AsyncServiceInfo2VectorReturnDirector::handler(std::vector< RobotRaconteur::ServiceInfo2Wrapped > const &ret) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jret = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::AsyncServiceInfo2VectorReturnDirector::handler.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(std::vector< RobotRaconteur::ServiceInfo2Wrapped > **)&jret = (std::vector< RobotRaconteur::ServiceInfo2Wrapped > *) &ret; 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[74], swigjobj, jret);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::AsyncServiceInfo2VectorReturnDirector::handler ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_AsyncServiceInfo2VectorReturnDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "handler", "(Lcom/robotraconteur/vectorserviceinfo2wrapped;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/AsyncServiceInfo2VectorReturnDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_AsyncNodeInfo2VectorReturnDirector::SwigDirector_AsyncNodeInfo2VectorReturnDirector(JNIEnv *jenv) : RobotRaconteur::AsyncNodeInfo2VectorReturnDirector(), Swig::Director(jenv) {
}

SwigDirector_AsyncNodeInfo2VectorReturnDirector::~SwigDirector_AsyncNodeInfo2VectorReturnDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_AsyncNodeInfo2VectorReturnDirector::handler(std::vector< RobotRaconteur::NodeInfo2 > const &ret) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jret = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::AsyncNodeInfo2VectorReturnDirector::handler.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(std::vector< RobotRaconteur::NodeInfo2 > **)&jret = (std::vector< RobotRaconteur::NodeInfo2 > *) &ret; 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[75], swigjobj, jret);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::AsyncNodeInfo2VectorReturnDirector::handler ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_AsyncNodeInfo2VectorReturnDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "handler", "(Lcom/robotraconteur/vectornodeinfo2;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/AsyncNodeInfo2VectorReturnDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_WrappedServiceSubscriptionFilterPredicateDirector::SwigDirector_WrappedServiceSubscriptionFilterPredicateDirector(JNIEnv *jenv) : RobotRaconteur::WrappedServiceSubscriptionFilterPredicateDirector(), Swig::Director(jenv) {
}

bool SwigDirector_WrappedServiceSubscriptionFilterPredicateDirector::Predicate(RobotRaconteur::ServiceInfo2Wrapped const &info) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jinfo = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedServiceSubscriptionFilterPredicateDirector::Predicate.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(RobotRaconteur::ServiceInfo2Wrapped **)&jinfo = (RobotRaconteur::ServiceInfo2Wrapped *) &info; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[76], swigjobj, jinfo);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedServiceSubscriptionFilterPredicateDirector::Predicate ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

SwigDirector_WrappedServiceSubscriptionFilterPredicateDirector::~SwigDirector_WrappedServiceSubscriptionFilterPredicateDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_WrappedServiceSubscriptionFilterPredicateDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "predicate", "(Lcom/robotraconteur/ServiceInfo2Wrapped;)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/WrappedServiceSubscriptionFilterPredicateDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_WrappedServiceInfo2SubscriptionDirector::SwigDirector_WrappedServiceInfo2SubscriptionDirector(JNIEnv *jenv) : RobotRaconteur::WrappedServiceInfo2SubscriptionDirector(), Swig::Director(jenv) {
}

void SwigDirector_WrappedServiceInfo2SubscriptionDirector::ServiceDetected(boost::shared_ptr< RobotRaconteur::WrappedServiceInfo2Subscription > const &subscription, RobotRaconteur::ServiceSubscriptionClientID const &id, RobotRaconteur::ServiceInfo2Wrapped const &service) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsubscription = 0 ;
  jlong jid = 0 ;
  jlong jservice = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedServiceInfo2SubscriptionDirector::ServiceDetected.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsubscription = 0;
    if (subscription) {
      *((boost::shared_ptr<  RobotRaconteur::WrappedServiceInfo2Subscription > **)&jsubscription) = new boost::shared_ptr<  RobotRaconteur::WrappedServiceInfo2Subscription >(subscription);
    } 
    *(RobotRaconteur::ServiceSubscriptionClientID **)&jid = (RobotRaconteur::ServiceSubscriptionClientID *) &id; 
    *(RobotRaconteur::ServiceInfo2Wrapped **)&jservice = (RobotRaconteur::ServiceInfo2Wrapped *) &service; 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[77], swigjobj, jsubscription, jid, jservice);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedServiceInfo2SubscriptionDirector::ServiceDetected ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_WrappedServiceInfo2SubscriptionDirector::ServiceLost(boost::shared_ptr< RobotRaconteur::WrappedServiceInfo2Subscription > const &subscription, RobotRaconteur::ServiceSubscriptionClientID const &id, RobotRaconteur::ServiceInfo2Wrapped const &service) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsubscription = 0 ;
  jlong jid = 0 ;
  jlong jservice = 0 ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedServiceInfo2SubscriptionDirector::ServiceLost.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsubscription = 0;
    if (subscription) {
      *((boost::shared_ptr<  RobotRaconteur::WrappedServiceInfo2Subscription > **)&jsubscription) = new boost::shared_ptr<  RobotRaconteur::WrappedServiceInfo2Subscription >(subscription);
    } 
    *(RobotRaconteur::ServiceSubscriptionClientID **)&jid = (RobotRaconteur::ServiceSubscriptionClientID *) &id; 
    *(RobotRaconteur::ServiceInfo2Wrapped **)&jservice = (RobotRaconteur::ServiceInfo2Wrapped *) &service; 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[78], swigjobj, jsubscription, jid, jservice);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedServiceInfo2SubscriptionDirector::ServiceLost ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

SwigDirector_WrappedServiceInfo2SubscriptionDirector::~SwigDirector_WrappedServiceInfo2SubscriptionDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_WrappedServiceInfo2SubscriptionDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "serviceDetected", "(Lcom/robotraconteur/WrappedServiceInfo2Subscription;Lcom/robotraconteur/WrappedServiceSubscriptionClientID;Lcom/robotraconteur/ServiceInfo2Wrapped;)V", NULL 
    },
    {
      "serviceLost", "(Lcom/robotraconteur/WrappedServiceInfo2Subscription;Lcom/robotraconteur/WrappedServiceSubscriptionClientID;Lcom/robotraconteur/ServiceInfo2Wrapped;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/WrappedServiceInfo2SubscriptionDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_WrappedServiceSubscriptionDirector::SwigDirector_WrappedServiceSubscriptionDirector(JNIEnv *jenv) : RobotRaconteur::WrappedServiceSubscriptionDirector(), Swig::Director(jenv) {
}

void SwigDirector_WrappedServiceSubscriptionDirector::ClientConnected(boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > const &subscription, RobotRaconteur::ServiceSubscriptionClientID const &id, boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &slient) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsubscription = 0 ;
  jlong jid = 0 ;
  jlong jslient = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedServiceSubscriptionDirector::ClientConnected.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsubscription = 0;
    if (subscription) {
      *((boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jsubscription) = new boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription >(subscription);
    } 
    *(RobotRaconteur::ServiceSubscriptionClientID **)&jid = (RobotRaconteur::ServiceSubscriptionClientID *) &id; 
    jslient = 0;
    if (slient) {
      *((boost::shared_ptr<  RobotRaconteur::WrappedServiceStub > **)&jslient) = new boost::shared_ptr<  RobotRaconteur::WrappedServiceStub >(slient);
    } 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[79], swigjobj, jsubscription, jid, jslient);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedServiceSubscriptionDirector::ClientConnected ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_WrappedServiceSubscriptionDirector::ClientDisconnected(boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > const &subscription, RobotRaconteur::ServiceSubscriptionClientID const &id, boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &slient) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsubscription = 0 ;
  jlong jid = 0 ;
  jlong jslient = 0 ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedServiceSubscriptionDirector::ClientDisconnected.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsubscription = 0;
    if (subscription) {
      *((boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jsubscription) = new boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription >(subscription);
    } 
    *(RobotRaconteur::ServiceSubscriptionClientID **)&jid = (RobotRaconteur::ServiceSubscriptionClientID *) &id; 
    jslient = 0;
    if (slient) {
      *((boost::shared_ptr<  RobotRaconteur::WrappedServiceStub > **)&jslient) = new boost::shared_ptr<  RobotRaconteur::WrappedServiceStub >(slient);
    } 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[80], swigjobj, jsubscription, jid, jslient);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedServiceSubscriptionDirector::ClientDisconnected ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_WrappedServiceSubscriptionDirector::ClientConnectFailed(boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > const &subscription, RobotRaconteur::ServiceSubscriptionClientID const &id, std::vector< std::string > const &url, RobotRaconteur::HandlerErrorInfo &error) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jsubscription = 0 ;
  jlong jid = 0 ;
  jlong jurl = 0 ;
  jlong jerror = 0 ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedServiceSubscriptionDirector::ClientConnectFailed.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsubscription = 0;
    if (subscription) {
      *((boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jsubscription) = new boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription >(subscription);
    } 
    *(RobotRaconteur::ServiceSubscriptionClientID **)&jid = (RobotRaconteur::ServiceSubscriptionClientID *) &id; 
    *(std::vector< std::string > **)&jurl = (std::vector< std::string > *) &url; 
    *(RobotRaconteur::HandlerErrorInfo **)&jerror = (RobotRaconteur::HandlerErrorInfo *) &error; 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[81], swigjobj, jsubscription, jid, jurl, jerror);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedServiceSubscriptionDirector::ClientConnectFailed ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

SwigDirector_WrappedServiceSubscriptionDirector::~SwigDirector_WrappedServiceSubscriptionDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_WrappedServiceSubscriptionDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "clientConnected", "(Lcom/robotraconteur/WrappedServiceSubscription;Lcom/robotraconteur/WrappedServiceSubscriptionClientID;Lcom/robotraconteur/WrappedServiceStub;)V", NULL 
    },
    {
      "clientDisconnected", "(Lcom/robotraconteur/WrappedServiceSubscription;Lcom/robotraconteur/WrappedServiceSubscriptionClientID;Lcom/robotraconteur/WrappedServiceStub;)V", NULL 
    },
    {
      "clientConnectFailed", "(Lcom/robotraconteur/WrappedServiceSubscription;Lcom/robotraconteur/WrappedServiceSubscriptionClientID;Lcom/robotraconteur/vectorstring;Lcom/robotraconteur/HandlerErrorInfo;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/WrappedServiceSubscriptionDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_WrappedWireSubscriptionDirector::SwigDirector_WrappedWireSubscriptionDirector(JNIEnv *jenv) : RobotRaconteur::WrappedWireSubscriptionDirector(), Swig::Director(jenv) {
}

void SwigDirector_WrappedWireSubscriptionDirector::WireValueChanged(boost::shared_ptr< RobotRaconteur::WrappedWireSubscription > const &wire_subscription, RobotRaconteur::WrappedService_typed_packet &value, RobotRaconteur::TimeSpec const &time) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jwire_subscription = 0 ;
  jlong jvalue = 0 ;
  jlong jtime = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedWireSubscriptionDirector::WireValueChanged.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jwire_subscription = 0;
    if (wire_subscription) {
      *((boost::shared_ptr<  RobotRaconteur::WrappedWireSubscription > **)&jwire_subscription) = new boost::shared_ptr<  RobotRaconteur::WrappedWireSubscription >(wire_subscription);
    } 
    *(RobotRaconteur::WrappedService_typed_packet **)&jvalue = (RobotRaconteur::WrappedService_typed_packet *) &value; 
    *(RobotRaconteur::TimeSpec **)&jtime = (RobotRaconteur::TimeSpec *) &time; 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[82], swigjobj, jwire_subscription, jvalue, jtime);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedWireSubscriptionDirector::WireValueChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

SwigDirector_WrappedWireSubscriptionDirector::~SwigDirector_WrappedWireSubscriptionDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_WrappedWireSubscriptionDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "wireValueChanged", "(Lcom/robotraconteur/WrappedWireSubscription;Lcom/robotraconteur/WrappedService_typed_packet;Lcom/robotraconteur/TimeSpec;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/WrappedWireSubscriptionDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_WrappedPipeSubscriptionDirector::SwigDirector_WrappedPipeSubscriptionDirector(JNIEnv *jenv) : RobotRaconteur::WrappedPipeSubscriptionDirector(), Swig::Director(jenv) {
}

void SwigDirector_WrappedPipeSubscriptionDirector::PipePacketReceived(boost::shared_ptr< RobotRaconteur::WrappedPipeSubscription > const &pipe_subscription) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpipe_subscription = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::WrappedPipeSubscriptionDirector::PipePacketReceived.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jpipe_subscription = 0;
    if (pipe_subscription) {
      *((boost::shared_ptr<  RobotRaconteur::WrappedPipeSubscription > **)&jpipe_subscription) = new boost::shared_ptr<  RobotRaconteur::WrappedPipeSubscription >(pipe_subscription);
    } 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[83], swigjobj, jpipe_subscription);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::WrappedPipeSubscriptionDirector::PipePacketReceived ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

SwigDirector_WrappedPipeSubscriptionDirector::~SwigDirector_WrappedPipeSubscriptionDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_WrappedPipeSubscriptionDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "pipePacketReceived", "(Lcom/robotraconteur/WrappedPipeSubscription;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/WrappedPipeSubscriptionDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_UserLogRecordHandlerDirector::SwigDirector_UserLogRecordHandlerDirector(JNIEnv *jenv) : RobotRaconteur::UserLogRecordHandlerDirector(), Swig::Director(jenv) {
}

void SwigDirector_UserLogRecordHandlerDirector::HandleLogRecord(RobotRaconteur::RRLogRecord const &record) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jrecord = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::UserLogRecordHandlerDirector::HandleLogRecord.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(RobotRaconteur::RRLogRecord **)&jrecord = (RobotRaconteur::RRLogRecord *) &record; 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[84], swigjobj, jrecord);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::UserLogRecordHandlerDirector::HandleLogRecord ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

SwigDirector_UserLogRecordHandlerDirector::~SwigDirector_UserLogRecordHandlerDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_UserLogRecordHandlerDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "handleLogRecord", "(Lcom/robotraconteur/RRLogRecord;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/UserLogRecordHandlerDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_RRNativeObjectHeapSupport::SwigDirector_RRNativeObjectHeapSupport(JNIEnv *jenv) : RobotRaconteur::RRNativeObjectHeapSupport(), Swig::Director(jenv) {
}

void SwigDirector_RRNativeObjectHeapSupport::DeleteObject_i(int32_t id) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jid  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method RobotRaconteur::RRNativeObjectHeapSupport::DeleteObject_i.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jid = (jint) id;
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[85], swigjobj, jid);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in RobotRaconteur::RRNativeObjectHeapSupport::DeleteObject_i ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

SwigDirector_RRNativeObjectHeapSupport::~SwigDirector_RRNativeObjectHeapSupport() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_RRNativeObjectHeapSupport::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "deleteObject_i", "(I)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/RRNativeObjectHeapSupport");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ClientServiceListenerDirector::SwigDirector_ClientServiceListenerDirector(JNIEnv *jenv) : ClientServiceListenerDirector(), Swig::Director(jenv) {
}

void SwigDirector_ClientServiceListenerDirector::Callback(int32_t code) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jcode  ;
  
  if (!swig_override[0]) {
    ClientServiceListenerDirector::Callback(code);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcode = (jint) code;
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[86], swigjobj, jcode);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ClientServiceListenerDirector::Callback ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ClientServiceListenerDirector::Callback2(int32_t code, std::string const &p) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jcode  ;
  jstring jp = 0 ;
  
  if (!swig_override[1]) {
    ClientServiceListenerDirector::Callback2(code,p);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcode = (jint) code;
    jp = jenv->NewStringUTF((&p)->c_str());
    Swig::LocalRefGuard p_refguard(jenv, jp); 
    jenv->CallStaticVoidMethod(Swig::jclass_RobotRaconteurJavaJNI, Swig::director_method_ids[87], swigjobj, jcode, jp);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ClientServiceListenerDirector::Callback2 ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

SwigDirector_ClientServiceListenerDirector::~SwigDirector_ClientServiceListenerDirector() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ClientServiceListenerDirector::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "callback", "(I)V", NULL 
    },
    {
      "callback2", "(ILjava/lang/String;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/robotraconteur/ClientServiceListenerDirector");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jshort JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageFlags_1ROUTING_1INFO_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint8_t)(uint8_t)RobotRaconteur::MessageFlags_ROUTING_INFO;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageFlags_1ENDPOINT_1INFO_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint8_t)(uint8_t)RobotRaconteur::MessageFlags_ENDPOINT_INFO;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageFlags_1PRIORITY_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint8_t)(uint8_t)RobotRaconteur::MessageFlags_PRIORITY;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageFlags_1UNRELIABLE_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint8_t)(uint8_t)RobotRaconteur::MessageFlags_UNRELIABLE;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageFlags_1META_1INFO_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint8_t)(uint8_t)RobotRaconteur::MessageFlags_META_INFO;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageFlags_1STRING_1TABLE_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint8_t)(uint8_t)RobotRaconteur::MessageFlags_STRING_TABLE;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageFlags_1MULTIPLE_1ENTRIES_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint8_t)(uint8_t)RobotRaconteur::MessageFlags_MULTIPLE_ENTRIES;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageFlags_1EXTENDED_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint8_t)(uint8_t)RobotRaconteur::MessageFlags_EXTENDED;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageFlags_1Version2Compat_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint8_t)(uint8_t)RobotRaconteur::MessageFlags_Version2Compat;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntryFlags_1SERVICE_1PATH_1STR_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint8_t)(uint8_t)RobotRaconteur::MessageEntryFlags_SERVICE_PATH_STR;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntryFlags_1SERVICE_1PATH_1CODE_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint8_t)(uint8_t)RobotRaconteur::MessageEntryFlags_SERVICE_PATH_CODE;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntryFlags_1MEMBER_1NAME_1STR_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint8_t)(uint8_t)RobotRaconteur::MessageEntryFlags_MEMBER_NAME_STR;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntryFlags_1MEMBER_1NAME_1CODE_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint8_t)(uint8_t)RobotRaconteur::MessageEntryFlags_MEMBER_NAME_CODE;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntryFlags_1REQUEST_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint8_t)(uint8_t)RobotRaconteur::MessageEntryFlags_REQUEST_ID;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntryFlags_1ERROR_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint8_t)(uint8_t)RobotRaconteur::MessageEntryFlags_ERROR;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntryFlags_1META_1INFO_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint8_t)(uint8_t)RobotRaconteur::MessageEntryFlags_META_INFO;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntryFlags_1EXTENDED_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint8_t)(uint8_t)RobotRaconteur::MessageEntryFlags_EXTENDED;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntryFlags_1Version2Compat_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint8_t)(uint8_t)RobotRaconteur::MessageEntryFlags_Version2Compat;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementFlags_1ELEMENT_1NAME_1STR_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint8_t)(uint8_t)RobotRaconteur::MessageElementFlags_ELEMENT_NAME_STR;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementFlags_1ELEMENT_1NAME_1CODE_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint8_t)(uint8_t)RobotRaconteur::MessageElementFlags_ELEMENT_NAME_CODE;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementFlags_1ELEMENT_1NUMBER_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint8_t)(uint8_t)RobotRaconteur::MessageElementFlags_ELEMENT_NUMBER;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementFlags_1ELEMENT_1TYPE_1NAME_1STR_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint8_t)(uint8_t)RobotRaconteur::MessageElementFlags_ELEMENT_TYPE_NAME_STR;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementFlags_1ELEMENT_1TYPE_1NAME_1CODE_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint8_t)(uint8_t)RobotRaconteur::MessageElementFlags_ELEMENT_TYPE_NAME_CODE;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementFlags_1META_1INFO_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint8_t)(uint8_t)RobotRaconteur::MessageElementFlags_META_INFO;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementFlags_1EXTENDED_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint8_t)(uint8_t)RobotRaconteur::MessageElementFlags_EXTENDED;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementFlags_1Version2Compat_1get(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint8_t)(uint8_t)RobotRaconteur::MessageElementFlags_Version2Compat;
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TranspartCapabilityCode_1PAGE_1MASK_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint32_t)(uint32_t)RobotRaconteur::TranspartCapabilityCode_PAGE_MASK;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TransportCapabilityCode_1MESSAGE2_1BASIC_1PAGE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint32_t)(uint32_t)RobotRaconteur::TransportCapabilityCode_MESSAGE2_BASIC_PAGE;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TransportCapabilityCode_1MESSAGE2_1BASIC_1ENABLE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint32_t)(uint32_t)RobotRaconteur::TransportCapabilityCode_MESSAGE2_BASIC_ENABLE;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TransportCapabilityCode_1MESSAGE2_1BASIC_1CONNECTCOMBINED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint32_t)(uint32_t)RobotRaconteur::TransportCapabilityCode_MESSAGE2_BASIC_CONNECTCOMBINED;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TransportCapabilityCode_1MESSAGE4_1BASIC_1PAGE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint32_t)(uint32_t)RobotRaconteur::TransportCapabilityCode_MESSAGE4_BASIC_PAGE;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TransportCapabilityCode_1MESSAGE4_1BASIC_1ENABLE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint32_t)(uint32_t)RobotRaconteur::TransportCapabilityCode_MESSAGE4_BASIC_ENABLE;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TransportCapabilityCode_1MESSAGE4_1BASIC_1CONNECTCOMBINED_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint32_t)(uint32_t)RobotRaconteur::TransportCapabilityCode_MESSAGE4_BASIC_CONNECTCOMBINED;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TransportCapabilityCode_1MESSAGE4_1STRINGTABLE_1PAGE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint32_t)(uint32_t)RobotRaconteur::TransportCapabilityCode_MESSAGE4_STRINGTABLE_PAGE;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TransportCapabilityCode_1MESSAGE4_1STRINGTABLE_1ENABLE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint32_t)(uint32_t)RobotRaconteur::TransportCapabilityCode_MESSAGE4_STRINGTABLE_ENABLE;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TransportCapabilityCode_1MESSAGE4_1STRINGTABLE_1MESSAGE_1LOCAL_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint32_t)(uint32_t)RobotRaconteur::TransportCapabilityCode_MESSAGE4_STRINGTABLE_MESSAGE_LOCAL;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TransportCapabilityCode_1MESSAGE4_1STRINGTABLE_1STANDARD_1TABLE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint32_t)(uint32_t)RobotRaconteur::TransportCapabilityCode_MESSAGE4_STRINGTABLE_STANDARD_TABLE;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1FilesystemPath(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  boost::filesystem::path *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (boost::filesystem::path *)new boost::filesystem::path((std::string const &)*arg1);
  *(boost::filesystem::path **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_FilesystemPath_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  boost::filesystem::path *arg1 = (boost::filesystem::path *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::filesystem::path **)&jarg1; 
  result = (arg1)->string();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1FilesystemPath(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  boost::filesystem::path *arg1 = (boost::filesystem::path *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(boost::filesystem::path **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRDirectorExceptionHelper_1reset(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  {
    try
    {
      RobotRaconteur::RRDirectorExceptionHelper::Reset();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRDirectorExceptionHelper_1setError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  boost::intrusive_ptr< RobotRaconteur::MessageEntry > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageEntry > tempnull1 ;
  boost::intrusive_ptr< RobotRaconteur::MessageEntry > temp1 ;
  boost::shared_ptr< RobotRaconteur::MessageEntry > *smartarg1 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // intrusive_ptr by reference
  if ( jarg1 ) {
    smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageEntry >**)&jarg1;
    temp1 = boost::intrusive_ptr<  RobotRaconteur::MessageEntry >(smartarg1->get(), true);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      RobotRaconteur::RRDirectorExceptionHelper::SetError((boost::intrusive_ptr< RobotRaconteur::MessageEntry > const &)*arg1,(std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRDirectorExceptionHelper_1isErrorPending(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (bool)RobotRaconteur::RRDirectorExceptionHelper::IsErrorPending();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRDirectorExceptionHelper_1getError(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageEntry > result;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = RobotRaconteur::RRDirectorExceptionHelper::GetError();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageEntry >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageEntry >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1RRDirectorExceptionHelper(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::RRDirectorExceptionHelper *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::RRDirectorExceptionHelper *)new RobotRaconteur::RRDirectorExceptionHelper();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::RRDirectorExceptionHelper **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1RRDirectorExceptionHelper(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::RRDirectorExceptionHelper *arg1 = (RobotRaconteur::RRDirectorExceptionHelper *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::RRDirectorExceptionHelper **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorstring_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (std::vector< std::string > *)new std::vector< std::string >();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorstring_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorstring_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try
    {
      result = ((std::vector< std::string > const *)arg1)->capacity();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorstring_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  {
    try
    {
      try {
        (arg1)->reserve(arg2);
      } catch(std::length_error &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorstring_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try
    {
      result = (bool)((std::vector< std::string > const *)arg1)->empty();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorstring_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorstring_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      try {
        result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_2(arg1,(std::string const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorstring_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try
    {
      try {
        result = std_vector_Sl_std_string_Sg__doSize((std::vector< std::string > const *)arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorstring_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      std_vector_Sl_std_string_Sg__doAdd__SWIG_0(arg1,(std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorstring_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try
    {
      try {
        std_vector_Sl_std_string_Sg__doAdd__SWIG_1(arg1,arg2,(std::string const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorstring_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = std_vector_Sl_std_string_Sg__doRemove(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorstring_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__doGet(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorstring_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  std::vector< std::string >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try
    {
      try {
        result = std_vector_Sl_std_string_Sg__doSet(arg1,arg2,(std::string const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorstring_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_std_string_Sg__doRemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1vectorstring(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorint32_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int32_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (std::vector< int32_t > *)new std::vector< int32_t >();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< int32_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorint32_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int32_t > *arg1 = 0 ;
  std::vector< int32_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int32_t > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (std::vector< int32_t > *)new std::vector< int32_t >((std::vector< int32_t > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< int32_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorint32_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  {
    try
    {
      result = ((std::vector< int32_t > const *)arg1)->capacity();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorint32_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  {
    try
    {
      try {
        (arg1)->reserve(arg2);
      } catch(std::length_error &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorint32_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  {
    try
    {
      result = (bool)((std::vector< int32_t > const *)arg1)->empty();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorint32_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorint32_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  int *arg2 = 0 ;
  int temp2 ;
  std::vector< int32_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try
    {
      try {
        result = (std::vector< int32_t > *)new_std_vector_Sl_int32_t_Sg___SWIG_2(arg1,(int const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< int32_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorint32_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  {
    try
    {
      try {
        result = std_vector_Sl_int32_t_Sg__doSize((std::vector< int > const *)arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorint32_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try
    {
      std_vector_Sl_int32_t_Sg__doAdd__SWIG_0(arg1,(int const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorint32_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  jint arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try
    {
      try {
        std_vector_Sl_int32_t_Sg__doAdd__SWIG_1(arg1,arg2,(int const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorint32_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  jint arg2 ;
  std::vector< int >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = (std::vector< int >::value_type)std_vector_Sl_int32_t_Sg__doRemove(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorint32_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  jint arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = (std::vector< int >::value_type *) &std_vector_Sl_int32_t_Sg__doGet(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorint32_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  jint arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  std::vector< int >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try
    {
      try {
        result = (std::vector< int >::value_type)std_vector_Sl_int32_t_Sg__doSet(arg1,arg2,(int const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorint32_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_int32_t_Sg__doRemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1vectorint32(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectoruint32_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< uint32_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (std::vector< uint32_t > *)new std::vector< uint32_t >();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< uint32_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectoruint32_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint32_t > *arg1 = 0 ;
  std::vector< uint32_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint32_t > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (std::vector< uint32_t > *)new std::vector< uint32_t >((std::vector< uint32_t > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< uint32_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectoruint32_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  {
    try
    {
      result = ((std::vector< uint32_t > const *)arg1)->capacity();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectoruint32_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  arg2 = (std::vector< unsigned int >::size_type)jarg2; 
  {
    try
    {
      try {
        (arg1)->reserve(arg2);
      } catch(std::length_error &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectoruint32_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  {
    try
    {
      result = (bool)((std::vector< uint32_t > const *)arg1)->empty();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectoruint32_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectoruint32_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  std::vector< uint32_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  {
    try
    {
      try {
        result = (std::vector< uint32_t > *)new_std_vector_Sl_uint32_t_Sg___SWIG_2(arg1,(unsigned int const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< uint32_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectoruint32_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  {
    try
    {
      try {
        result = std_vector_Sl_uint32_t_Sg__doSize((std::vector< unsigned int > const *)arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectoruint32_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::value_type *arg2 = 0 ;
  std::vector< unsigned int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  temp2 = (std::vector< unsigned int >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try
    {
      std_vector_Sl_uint32_t_Sg__doAdd__SWIG_0(arg1,(unsigned int const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectoruint32_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned int >::value_type *arg3 = 0 ;
  std::vector< unsigned int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< unsigned int >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try
    {
      try {
        std_vector_Sl_uint32_t_Sg__doAdd__SWIG_1(arg1,arg2,(unsigned int const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectoruint32_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned int >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = (std::vector< unsigned int >::value_type)std_vector_Sl_uint32_t_Sg__doRemove(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectoruint32_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = (std::vector< unsigned int >::value_type *) &std_vector_Sl_uint32_t_Sg__doGet(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectoruint32_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned int >::value_type *arg3 = 0 ;
  std::vector< unsigned int >::value_type temp3 ;
  std::vector< unsigned int >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< unsigned int >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try
    {
      try {
        result = (std::vector< unsigned int >::value_type)std_vector_Sl_uint32_t_Sg__doSet(arg1,arg2,(unsigned int const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectoruint32_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_uint32_t_Sg__doRemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1vectoruint32(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vector_1int8_1t_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (std::vector< int8_t > *)new std::vector< int8_t >();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< int8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vector_1int8_1t_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int8_t > *arg1 = 0 ;
  std::vector< int8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int8_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< int8_t > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (std::vector< int8_t > *)new std::vector< int8_t >((std::vector< int8_t > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< int8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1int8_1t_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int8_t > *arg1 = (std::vector< int8_t > *) 0 ;
  std::vector< signed char >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int8_t > **)&jarg1; 
  {
    try
    {
      result = ((std::vector< int8_t > const *)arg1)->capacity();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1int8_1t_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int8_t > *arg1 = (std::vector< int8_t > *) 0 ;
  std::vector< signed char >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int8_t > **)&jarg1; 
  arg2 = (std::vector< signed char >::size_type)jarg2; 
  {
    try
    {
      try {
        (arg1)->reserve(arg2);
      } catch(std::length_error &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1int8_1t_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< int8_t > *arg1 = (std::vector< int8_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int8_t > **)&jarg1; 
  {
    try
    {
      result = (bool)((std::vector< int8_t > const *)arg1)->empty();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1int8_1t_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< int8_t > *arg1 = (std::vector< int8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int8_t > **)&jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vector_1int8_1t_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jbyte jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  std::vector< int8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  temp2 = (signed char)jarg2; 
  arg2 = &temp2; 
  {
    try
    {
      try {
        result = (std::vector< int8_t > *)new_std_vector_Sl_int8_t_Sg___SWIG_2(arg1,(signed char const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< int8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1int8_1t_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< int8_t > *arg1 = (std::vector< int8_t > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int8_t > **)&jarg1; 
  {
    try
    {
      try {
        result = std_vector_Sl_int8_t_Sg__doSize((std::vector< signed char > const *)arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1int8_1t_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyte jarg2) {
  std::vector< int8_t > *arg1 = (std::vector< int8_t > *) 0 ;
  std::vector< signed char >::value_type *arg2 = 0 ;
  std::vector< signed char >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int8_t > **)&jarg1; 
  temp2 = (std::vector< signed char >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try
    {
      std_vector_Sl_int8_t_Sg__doAdd__SWIG_0(arg1,(signed char const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1int8_1t_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jbyte jarg3) {
  std::vector< int8_t > *arg1 = (std::vector< int8_t > *) 0 ;
  jint arg2 ;
  std::vector< signed char >::value_type *arg3 = 0 ;
  std::vector< signed char >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int8_t > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< signed char >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try
    {
      try {
        std_vector_Sl_int8_t_Sg__doAdd__SWIG_1(arg1,arg2,(signed char const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jbyte JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1int8_1t_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jbyte jresult = 0 ;
  std::vector< int8_t > *arg1 = (std::vector< int8_t > *) 0 ;
  jint arg2 ;
  std::vector< signed char >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int8_t > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = (std::vector< signed char >::value_type)std_vector_Sl_int8_t_Sg__doRemove(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT jbyte JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1int8_1t_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jbyte jresult = 0 ;
  std::vector< int8_t > *arg1 = (std::vector< int8_t > *) 0 ;
  jint arg2 ;
  std::vector< signed char >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int8_t > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = (std::vector< signed char >::value_type *) &std_vector_Sl_int8_t_Sg__doGet(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jbyte)*result; 
  return jresult;
}


SWIGEXPORT jbyte JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1int8_1t_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jbyte jarg3) {
  jbyte jresult = 0 ;
  std::vector< int8_t > *arg1 = (std::vector< int8_t > *) 0 ;
  jint arg2 ;
  std::vector< signed char >::value_type *arg3 = 0 ;
  std::vector< signed char >::value_type temp3 ;
  std::vector< signed char >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int8_t > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< signed char >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try
    {
      try {
        result = (std::vector< signed char >::value_type)std_vector_Sl_int8_t_Sg__doSet(arg1,arg2,(signed char const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jbyte)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1int8_1t_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int8_t > *arg1 = (std::vector< int8_t > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int8_t > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_int8_t_Sg__doRemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1vector_1int8_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< int8_t > *arg1 = (std::vector< int8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< int8_t > **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vector_1uint8_1t_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (std::vector< uint8_t > *)new std::vector< uint8_t >();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vector_1uint8_1t_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint8_t > *arg1 = 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint8_t > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (std::vector< uint8_t > *)new std::vector< uint8_t >((std::vector< uint8_t > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1uint8_1t_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  {
    try
    {
      result = ((std::vector< uint8_t > const *)arg1)->capacity();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1uint8_1t_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = (std::vector< unsigned char >::size_type)jarg2; 
  {
    try
    {
      try {
        (arg1)->reserve(arg2);
      } catch(std::length_error &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1uint8_1t_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  {
    try
    {
      result = (bool)((std::vector< uint8_t > const *)arg1)->empty();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1uint8_1t_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vector_1uint8_1t_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jshort jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  {
    try
    {
      try {
        result = (std::vector< uint8_t > *)new_std_vector_Sl_uint8_t_Sg___SWIG_2(arg1,(unsigned char const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1uint8_1t_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  {
    try
    {
      try {
        result = std_vector_Sl_uint8_t_Sg__doSize((std::vector< unsigned char > const *)arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1uint8_1t_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::value_type *arg2 = 0 ;
  std::vector< unsigned char >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  temp2 = (std::vector< unsigned char >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try
    {
      std_vector_Sl_uint8_t_Sg__doAdd__SWIG_0(arg1,(unsigned char const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1uint8_1t_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned char >::value_type *arg3 = 0 ;
  std::vector< unsigned char >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< unsigned char >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try
    {
      try {
        std_vector_Sl_uint8_t_Sg__doAdd__SWIG_1(arg1,arg2,(unsigned char const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jshort JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1uint8_1t_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned char >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = (std::vector< unsigned char >::value_type)std_vector_Sl_uint8_t_Sg__doRemove(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1uint8_1t_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned char >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = (std::vector< unsigned char >::value_type *) &std_vector_Sl_uint8_t_Sg__doGet(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jshort)*result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1uint8_1t_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  jshort jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned char >::value_type *arg3 = 0 ;
  std::vector< unsigned char >::value_type temp3 ;
  std::vector< unsigned char >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< unsigned char >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try
    {
      try {
        result = (std::vector< unsigned char >::value_type)std_vector_Sl_uint8_t_Sg__doSet(arg1,arg2,(unsigned char const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1uint8_1t_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_uint8_t_Sg__doRemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1vector_1uint8_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vector_1uint64_1t_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< uint64_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (std::vector< uint64_t > *)new std::vector< uint64_t >();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< uint64_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vector_1uint64_1t_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint64_t > *arg1 = 0 ;
  std::vector< uint64_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint64_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint64_t > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (std::vector< uint64_t > *)new std::vector< uint64_t >((std::vector< uint64_t > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< uint64_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1uint64_1t_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  std::vector< unsigned long >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint64_t > **)&jarg1; 
  {
    try
    {
      result = ((std::vector< uint64_t > const *)arg1)->capacity();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1uint64_1t_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  std::vector< unsigned long >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint64_t > **)&jarg1; 
  arg2 = (std::vector< unsigned long >::size_type)jarg2; 
  {
    try
    {
      try {
        (arg1)->reserve(arg2);
      } catch(std::length_error &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1uint64_1t_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint64_t > **)&jarg1; 
  {
    try
    {
      result = (bool)((std::vector< uint64_t > const *)arg1)->empty();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1uint64_1t_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint64_t > **)&jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vector_1uint64_1t_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  unsigned long *arg2 = 0 ;
  unsigned long temp2 ;
  std::vector< uint64_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  temp2 = (unsigned long)jarg2; 
  arg2 = &temp2; 
  {
    try
    {
      try {
        result = (std::vector< uint64_t > *)new_std_vector_Sl_uint64_t_Sg___SWIG_2(arg1,(unsigned long const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< uint64_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1uint64_1t_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint64_t > **)&jarg1; 
  {
    try
    {
      try {
        result = std_vector_Sl_uint64_t_Sg__doSize((std::vector< unsigned long > const *)arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1uint64_1t_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  std::vector< unsigned long >::value_type *arg2 = 0 ;
  std::vector< unsigned long >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint64_t > **)&jarg1; 
  temp2 = (std::vector< unsigned long >::value_type)jarg2; 
  arg2 = &temp2; 
  {
    try
    {
      std_vector_Sl_uint64_t_Sg__doAdd__SWIG_0(arg1,(unsigned long const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1uint64_1t_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned long >::value_type *arg3 = 0 ;
  std::vector< unsigned long >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint64_t > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< unsigned long >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try
    {
      try {
        std_vector_Sl_uint64_t_Sg__doAdd__SWIG_1(arg1,arg2,(unsigned long const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1uint64_1t_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned long >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint64_t > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = (std::vector< unsigned long >::value_type)std_vector_Sl_uint64_t_Sg__doRemove(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1uint64_1t_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned long >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint64_t > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = (std::vector< unsigned long >::value_type *) &std_vector_Sl_uint64_t_Sg__doGet(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1uint64_1t_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned long >::value_type *arg3 = 0 ;
  std::vector< unsigned long >::value_type temp3 ;
  std::vector< unsigned long >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint64_t > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< unsigned long >::value_type)jarg3; 
  arg3 = &temp3; 
  {
    try
    {
      try {
        result = (std::vector< unsigned long >::value_type)std_vector_Sl_uint64_t_Sg__doSet(arg1,arg2,(unsigned long const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1uint64_1t_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint64_t > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_uint64_t_Sg__doRemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1vector_1uint64_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< uint64_t > *arg1 = (std::vector< uint64_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< uint64_t > **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1map_1strstr_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::map< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1map_1strstr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >((std::map< std::string,std::string > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::map< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1strstr_1Iterator_1getNextUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string >::iterator *arg1 = (std::map< std::string,std::string >::iterator *) 0 ;
  std::map< std::string,std::string,std::less< std::string > >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string >::iterator **)&jarg1; 
  {
    try
    {
      result = std_map_Sl_std_string_Sc_std_string_Sg__iterator_getNextUnchecked(arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::map< std::string,std::string,std::less< std::string > >::iterator **)&jresult = new std::map< std::string,std::string,std::less< std::string > >::iterator((const std::map< std::string,std::string,std::less< std::string > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1strstr_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::map< std::string,std::string >::iterator *arg1 = (std::map< std::string,std::string >::iterator *) 0 ;
  std::map< std::string,std::string >::iterator arg2 ;
  std::map< std::string,std::string >::iterator *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< std::string,std::string >::iterator **)&jarg1; 
  argp2 = *(std::map< std::string,std::string >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< std::string,std::string >::iterator");
    return 0;
  }
  arg2 = *argp2; 
  {
    try
    {
      result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__iterator_isNot((std::map< std::string,std::string >::iterator const *)arg1,arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1strstr_1Iterator_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::map< std::string,std::string >::iterator *arg1 = (std::map< std::string,std::string >::iterator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string >::iterator **)&jarg1; 
  {
    try
    {
      result = std_map_Sl_std_string_Sc_std_string_Sg__iterator_getKey((std::map< std::string,std::string >::iterator const *)arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1strstr_1Iterator_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::map< std::string,std::string >::iterator *arg1 = (std::map< std::string,std::string >::iterator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string >::iterator **)&jarg1; 
  {
    try
    {
      result = std_map_Sl_std_string_Sc_std_string_Sg__iterator_getValue((std::map< std::string,std::string >::iterator const *)arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1strstr_1Iterator_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::map< std::string,std::string >::iterator *arg1 = (std::map< std::string,std::string >::iterator *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string >::iterator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      std_map_Sl_std_string_Sc_std_string_Sg__iterator_setValue(arg1,(std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1map_1strstr_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,std::string >::iterator *arg1 = (std::map< std::string,std::string >::iterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,std::string >::iterator **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1strstr_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  {
    try
    {
      result = (bool)((std::map< std::string,std::string > const *)arg1)->empty();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1strstr_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1strstr_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,std::string >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (arg1)->find((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::map< std::string,std::string >::iterator **)&jresult = new std::map< std::string,std::string >::iterator((const std::map< std::string,std::string >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1strstr_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  {
    try
    {
      result = (arg1)->begin();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::map< std::string,std::string >::iterator **)&jresult = new std::map< std::string,std::string >::iterator((const std::map< std::string,std::string >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1strstr_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  {
    try
    {
      result = (arg1)->end();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::map< std::string,std::string >::iterator **)&jresult = new std::map< std::string,std::string >::iterator((const std::map< std::string,std::string >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1strstr_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  {
    try
    {
      try {
        result = std_map_Sl_std_string_Sc_std_string_Sg__sizeImpl((std::map< std::string,std::string > const *)arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1strstr_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__containsImpl(arg1,(std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1strstr_1putUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try
    {
      std_map_Sl_std_string_Sc_std_string_Sg__putUnchecked(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1strstr_1removeUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string,std::less< std::string > >::iterator arg2 ;
  std::map< std::string,std::string,std::less< std::string > >::iterator const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  argp2 = *(std::map< std::string,std::string,std::less< std::string > >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< std::string,std::string,std::less< std::string > >::iterator const");
    return ;
  }
  arg2 = *argp2; 
  {
    try
    {
      std_map_Sl_std_string_Sc_std_string_Sg__removeUnchecked(arg1,arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1map_1strstr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_getRRDataTypeString(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  RobotRaconteur::DataTypes arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (RobotRaconteur::DataTypes)jarg1; 
  {
    try
    {
      result = RobotRaconteur::GetRRDataTypeString(arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_isTypeRRArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  RobotRaconteur::DataTypes arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (RobotRaconteur::DataTypes)jarg1; 
  {
    try
    {
      result = (bool)RobotRaconteur::IsTypeRRArray(arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_isTypeNumeric(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  RobotRaconteur::DataTypes arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (RobotRaconteur::DataTypes)jarg1; 
  {
    try
    {
      result = (bool)RobotRaconteur::IsTypeNumeric(arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1RRObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::RRObject *arg1 = (RobotRaconteur::RRObject *) 0 ;
  boost::shared_ptr< RobotRaconteur::RRObject > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RRObject > **)&jarg1;
  arg1 = (RobotRaconteur::RRObject *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1RRValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::RRValue *arg1 = (RobotRaconteur::RRValue *) 0 ;
  boost::shared_ptr< RobotRaconteur::RRValue > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RRValue > **)&jarg1;
  arg1 = (RobotRaconteur::RRValue *)(smartarg1 ? smartarg1->get() : 0);
  
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementData_1getTypeString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::MessageElementData *arg1 = (RobotRaconteur::MessageElementData *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElementData > *smartarg1 = 0 ;
  RobotRaconteur::MessageStringPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElementData > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElementData *)(smartarg1 ? smartarg1->get() : 0);
  
  {
    try
    {
      result = (arg1)->GetTypeString();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  std::string temp_ret1 = (&result)->str().to_string(); jresult = jenv->NewStringUTF(temp_ret1.c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementData_1getTypeID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::MessageElementData *arg1 = (RobotRaconteur::MessageElementData *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElementData > *smartarg1 = 0 ;
  RobotRaconteur::DataTypes result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElementData > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElementData *)(smartarg1 ? smartarg1->get() : 0);
  
  {
    try
    {
      result = (RobotRaconteur::DataTypes)(arg1)->GetTypeID();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1MessageElementData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::MessageElementData *arg1 = (RobotRaconteur::MessageElementData *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElementData > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElementData > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElementData *)(smartarg1 ? smartarg1->get() : 0);
  
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRBaseArray_1getTypeString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::RRBaseArray *arg1 = (RobotRaconteur::RRBaseArray *) 0 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg1 = 0 ;
  RobotRaconteur::MessageStringPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jarg1;
  arg1 = (RobotRaconteur::RRBaseArray *)(smartarg1 ? smartarg1->get() : 0);
  
  {
    try
    {
      result = (arg1)->GetTypeString();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  std::string temp_ret1 = (&result)->str().to_string(); jresult = jenv->NewStringUTF(temp_ret1.c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRBaseArray_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::RRBaseArray *arg1 = (RobotRaconteur::RRBaseArray *) 0 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jarg1;
  arg1 = (RobotRaconteur::RRBaseArray *)(smartarg1 ? smartarg1->get() : 0);
  
  {
    try
    {
      result = (arg1)->size();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRBaseArray_1void_1ptr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::RRBaseArray *arg1 = (RobotRaconteur::RRBaseArray *) 0 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg1 = 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jarg1;
  arg1 = (RobotRaconteur::RRBaseArray *)(smartarg1 ? smartarg1->get() : 0);
  
  {
    try
    {
      result = (void *)(arg1)->void_ptr();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRBaseArray_1elementSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::RRBaseArray *arg1 = (RobotRaconteur::RRBaseArray *) 0 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jarg1;
  arg1 = (RobotRaconteur::RRBaseArray *)(smartarg1 ? smartarg1->get() : 0);
  
  {
    try
    {
      result = (arg1)->ElementSize();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRBaseArray_1getTypeID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::RRBaseArray *arg1 = (RobotRaconteur::RRBaseArray *) 0 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg1 = 0 ;
  RobotRaconteur::DataTypes result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jarg1;
  arg1 = (RobotRaconteur::RRBaseArray *)(smartarg1 ? smartarg1->get() : 0);
  
  {
    try
    {
      result = (RobotRaconteur::DataTypes)(arg1)->GetTypeID();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1RRBaseArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::RRBaseArray *arg1 = (RobotRaconteur::RRBaseArray *) 0 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jarg1;
  arg1 = (RobotRaconteur::RRBaseArray *)(smartarg1 ? smartarg1->get() : 0);
  
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_allocateRRArrayByType(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  RobotRaconteur::DataTypes arg1 ;
  size_t arg2 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (RobotRaconteur::DataTypes)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try
    {
      result = RobotRaconteur::AllocateRRArrayByType(arg1,arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = new boost::shared_ptr<  RobotRaconteur::RRBaseArray >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::RRBaseArray >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRMultiDimArrayUntyped_1Dims_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::RRMultiDimArrayUntyped *arg1 = (RobotRaconteur::RRMultiDimArrayUntyped *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RRMultiDimArrayUntyped > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > tempnull2 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > temp2 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RRMultiDimArrayUntyped > **)&jarg1;
  arg1 = (RobotRaconteur::RRMultiDimArrayUntyped *)(smartarg1 ? smartarg1->get() : 0); 
  
  // intrusive_ptr by reference
  if ( jarg2 ) {
    smartarg2 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray >**)&jarg2;
    temp2 = boost::intrusive_ptr<  RobotRaconteur::RRBaseArray >(smartarg2->get(), true);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  if (arg1) (arg1)->Dims = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRMultiDimArrayUntyped_1Dims_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::RRMultiDimArrayUntyped *arg1 = (RobotRaconteur::RRMultiDimArrayUntyped *) 0 ;
  boost::shared_ptr< RobotRaconteur::RRMultiDimArrayUntyped > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RRMultiDimArrayUntyped > **)&jarg1;
  arg1 = (RobotRaconteur::RRMultiDimArrayUntyped *)(smartarg1 ? smartarg1->get() : 0); 
  result = (boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *) & ((arg1)->Dims);
  
  if (*result) {
    intrusive_ptr_add_ref(result->get());
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = new boost::shared_ptr<  RobotRaconteur::RRBaseArray >(result->get(), SWIG_intrusive_deleter<  RobotRaconteur::RRBaseArray >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRMultiDimArrayUntyped_1Array_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::RRMultiDimArrayUntyped *arg1 = (RobotRaconteur::RRMultiDimArrayUntyped *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RRMultiDimArrayUntyped > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > tempnull2 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > temp2 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RRMultiDimArrayUntyped > **)&jarg1;
  arg1 = (RobotRaconteur::RRMultiDimArrayUntyped *)(smartarg1 ? smartarg1->get() : 0); 
  
  // intrusive_ptr by reference
  if ( jarg2 ) {
    smartarg2 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray >**)&jarg2;
    temp2 = boost::intrusive_ptr<  RobotRaconteur::RRBaseArray >(smartarg2->get(), true);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  if (arg1) (arg1)->Array = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRMultiDimArrayUntyped_1Array_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::RRMultiDimArrayUntyped *arg1 = (RobotRaconteur::RRMultiDimArrayUntyped *) 0 ;
  boost::shared_ptr< RobotRaconteur::RRMultiDimArrayUntyped > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RRMultiDimArrayUntyped > **)&jarg1;
  arg1 = (RobotRaconteur::RRMultiDimArrayUntyped *)(smartarg1 ? smartarg1->get() : 0); 
  result = (boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *) & ((arg1)->Array);
  
  if (*result) {
    intrusive_ptr_add_ref(result->get());
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = new boost::shared_ptr<  RobotRaconteur::RRBaseArray >(result->get(), SWIG_intrusive_deleter<  RobotRaconteur::RRBaseArray >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1RRMultiDimArrayUntyped(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::RRMultiDimArrayUntyped *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::RRMultiDimArrayUntyped *)new RobotRaconteur::RRMultiDimArrayUntyped();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::RRMultiDimArrayUntyped > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::RRMultiDimArrayUntyped >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1RRMultiDimArrayUntyped(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::RRMultiDimArrayUntyped *arg1 = (RobotRaconteur::RRMultiDimArrayUntyped *) 0 ;
  boost::shared_ptr< RobotRaconteur::RRMultiDimArrayUntyped > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RRMultiDimArrayUntyped > **)&jarg1;
  arg1 = (RobotRaconteur::RRMultiDimArrayUntyped *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MultiDimArray_1CalculateCopyIndicesIter_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2, jlongArray jarg3, jlongArray jarg4) {
  jboolean jresult = 0 ;
  RobotRaconteur::detail::MultiDimArray_CalculateCopyIndicesIter *arg1 = (RobotRaconteur::detail::MultiDimArray_CalculateCopyIndicesIter *) 0 ;
  uint32_t *arg2 = 0 ;
  uint32_t *arg3 = 0 ;
  uint32_t *arg4 = 0 ;
  boost::shared_ptr< RobotRaconteur::detail::MultiDimArray_CalculateCopyIndicesIter > *smartarg1 = 0 ;
  uint32_t temp2 ;
  uint32_t temp3 ;
  uint32_t temp4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::detail::MultiDimArray_CalculateCopyIndicesIter > **)&jarg1;
  arg1 = (RobotRaconteur::detail::MultiDimArray_CalculateCopyIndicesIter *)(smartarg1 ? smartarg1->get() : 0); 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (uint32_t)0;
    arg2 = &temp2; 
  }
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp3 = (uint32_t)0;
    arg3 = &temp3; 
  }
  {
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg4) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp4 = (uint32_t)0;
    arg4 = &temp4; 
  }
  {
    try
    {
      result = (bool)(arg1)->Next(*arg2,*arg3,*arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  {
    jlong jvalue = (jlong)temp2;
    jenv->SetLongArrayRegion(jarg2, 0, 1, &jvalue);
  }
  {
    jlong jvalue = (jlong)temp3;
    jenv->SetLongArrayRegion(jarg3, 0, 1, &jvalue);
  }
  {
    jlong jvalue = (jlong)temp4;
    jenv->SetLongArrayRegion(jarg4, 0, 1, &jvalue);
  }
  
  
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1MultiDimArray_1CalculateCopyIndicesIter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::detail::MultiDimArray_CalculateCopyIndicesIter *arg1 = (RobotRaconteur::detail::MultiDimArray_CalculateCopyIndicesIter *) 0 ;
  boost::shared_ptr< RobotRaconteur::detail::MultiDimArray_CalculateCopyIndicesIter > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::detail::MultiDimArray_CalculateCopyIndicesIter > **)&jarg1;
  arg1 = (RobotRaconteur::detail::MultiDimArray_CalculateCopyIndicesIter *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_multiDimArray_1CalculateCopyIndicesBeginIter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  std::vector< uint32_t > *arg1 = 0 ;
  std::vector< uint32_t > *arg2 = 0 ;
  std::vector< uint32_t > *arg3 = 0 ;
  std::vector< uint32_t > *arg4 = 0 ;
  std::vector< uint32_t > *arg5 = 0 ;
  boost::shared_ptr< RobotRaconteur::detail::MultiDimArray_CalculateCopyIndicesIter > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(std::vector< uint32_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint32_t > const & reference is null");
    return 0;
  } 
  arg2 = *(std::vector< uint32_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint32_t > const & reference is null");
    return 0;
  } 
  arg3 = *(std::vector< uint32_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint32_t > const & reference is null");
    return 0;
  } 
  arg4 = *(std::vector< uint32_t > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint32_t > const & reference is null");
    return 0;
  } 
  arg5 = *(std::vector< uint32_t > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint32_t > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = RobotRaconteur::detail::MultiDimArray_CalculateCopyIndicesBeginIter((std::vector< unsigned int > const &)*arg1,(std::vector< unsigned int > const &)*arg2,(std::vector< unsigned int > const &)*arg3,(std::vector< unsigned int > const &)*arg4,(std::vector< unsigned int > const &)*arg5);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::detail::MultiDimArray_CalculateCopyIndicesIter > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::detail::MultiDimArray_CalculateCopyIndicesIter >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorptr_1typedefinition_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *)new std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > >();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorptr_1typedefinition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *arg1 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *)new std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > >((std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1typedefinition_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > **)&jarg1; 
  {
    try
    {
      result = ((std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > const *)arg1)->capacity();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1typedefinition_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > **)&jarg1; 
  arg2 = (std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > >::size_type)jarg2; 
  {
    try
    {
      try {
        (arg1)->reserve(arg2);
      } catch(std::length_error &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1typedefinition_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > **)&jarg1; 
  {
    try
    {
      result = (bool)((std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > const *)arg1)->empty();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1typedefinition_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > **)&jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorptr_1typedefinition_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > tempnull2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::TypeDefinition > **)&jarg2 : &tempnull2; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *)new_std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_TypeDefinition_Sg__Sg___SWIG_2(arg1,(boost::shared_ptr< RobotRaconteur::TypeDefinition > const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1typedefinition_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > **)&jarg1; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_TypeDefinition_Sg__Sg__doSize((std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > const *)arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1typedefinition_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > >::value_type *arg2 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > >::value_type **)&jarg2 : &tempnull2; 
  {
    try
    {
      std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_TypeDefinition_Sg__Sg__doAdd__SWIG_0(arg1,(boost::shared_ptr< RobotRaconteur::TypeDefinition > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1typedefinition_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > >::value_type *arg3 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? *(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > >::value_type **)&jarg3 : &tempnull3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_TypeDefinition_Sg__Sg__doAdd__SWIG_1(arg1,arg2,(boost::shared_ptr< RobotRaconteur::TypeDefinition > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1typedefinition_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_TypeDefinition_Sg__Sg__doRemove(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > >::value_type **)&jresult = result ? new std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > >::value_type(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1typedefinition_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > >::value_type *) &std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_TypeDefinition_Sg__Sg__doGet(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > >::value_type **)&jresult = *result ? new std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > >::value_type(*result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1typedefinition_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > >::value_type *arg3 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > >::value_type tempnull3 ;
  std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? *(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > >::value_type **)&jarg3 : &tempnull3; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_TypeDefinition_Sg__Sg__doSet(arg1,arg2,(boost::shared_ptr< RobotRaconteur::TypeDefinition > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > >::value_type **)&jresult = result ? new std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > >::value_type(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1typedefinition_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_TypeDefinition_Sg__Sg__doRemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1vectorptr_1typedefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorptr_1memberdefinition_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *)new std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > >();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorptr_1memberdefinition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *arg1 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *)new std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > >((std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1memberdefinition_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > **)&jarg1; 
  {
    try
    {
      result = ((std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > const *)arg1)->capacity();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1memberdefinition_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > **)&jarg1; 
  arg2 = (std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > >::size_type)jarg2; 
  {
    try
    {
      try {
        (arg1)->reserve(arg2);
      } catch(std::length_error &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1memberdefinition_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > **)&jarg1; 
  {
    try
    {
      result = (bool)((std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > const *)arg1)->empty();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1memberdefinition_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > **)&jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorptr_1memberdefinition_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > tempnull2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::MemberDefinition > **)&jarg2 : &tempnull2; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *)new_std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_MemberDefinition_Sg__Sg___SWIG_2(arg1,(boost::shared_ptr< RobotRaconteur::MemberDefinition > const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1memberdefinition_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > **)&jarg1; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_MemberDefinition_Sg__Sg__doSize((std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > const *)arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1memberdefinition_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > >::value_type *arg2 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > >::value_type **)&jarg2 : &tempnull2; 
  {
    try
    {
      std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_MemberDefinition_Sg__Sg__doAdd__SWIG_0(arg1,(boost::shared_ptr< RobotRaconteur::MemberDefinition > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1memberdefinition_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > >::value_type *arg3 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? *(std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > >::value_type **)&jarg3 : &tempnull3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_MemberDefinition_Sg__Sg__doAdd__SWIG_1(arg1,arg2,(boost::shared_ptr< RobotRaconteur::MemberDefinition > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1memberdefinition_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_MemberDefinition_Sg__Sg__doRemove(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > >::value_type **)&jresult = result ? new std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > >::value_type(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1memberdefinition_1_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > >::value_type *) &std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_MemberDefinition_Sg__Sg__doGet(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > >::value_type **)&jresult = *result ? new std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > >::value_type(*result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1memberdefinition_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > >::value_type *arg3 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > >::value_type tempnull3 ;
  std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? *(std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > >::value_type **)&jarg3 : &tempnull3; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_MemberDefinition_Sg__Sg__doSet(arg1,arg2,(boost::shared_ptr< RobotRaconteur::MemberDefinition > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > >::value_type **)&jresult = result ? new std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > >::value_type(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1memberdefinition_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_MemberDefinition_Sg__Sg__doRemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1vectorptr_1memberdefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorptr_1serviceentrydefinition_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *)new std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > >();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorptr_1serviceentrydefinition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *arg1 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *)new std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > >((std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1serviceentrydefinition_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > **)&jarg1; 
  {
    try
    {
      result = ((std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > const *)arg1)->capacity();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1serviceentrydefinition_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > **)&jarg1; 
  arg2 = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > >::size_type)jarg2; 
  {
    try
    {
      try {
        (arg1)->reserve(arg2);
      } catch(std::length_error &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1serviceentrydefinition_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > **)&jarg1; 
  {
    try
    {
      result = (bool)((std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > const *)arg1)->empty();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1serviceentrydefinition_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > **)&jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorptr_1serviceentrydefinition_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > tempnull2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > **)&jarg2 : &tempnull2; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *)new_std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ServiceEntryDefinition_Sg__Sg___SWIG_2(arg1,(boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1serviceentrydefinition_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > **)&jarg1; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ServiceEntryDefinition_Sg__Sg__doSize((std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > const *)arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1serviceentrydefinition_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > >::value_type *arg2 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > >::value_type **)&jarg2 : &tempnull2; 
  {
    try
    {
      std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ServiceEntryDefinition_Sg__Sg__doAdd__SWIG_0(arg1,(boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1serviceentrydefinition_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > >::value_type *arg3 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > >::value_type **)&jarg3 : &tempnull3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ServiceEntryDefinition_Sg__Sg__doAdd__SWIG_1(arg1,arg2,(boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1serviceentrydefinition_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ServiceEntryDefinition_Sg__Sg__doRemove(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > >::value_type **)&jresult = result ? new std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > >::value_type(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1serviceentrydefinition_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > >::value_type *) &std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ServiceEntryDefinition_Sg__Sg__doGet(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > >::value_type **)&jresult = *result ? new std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > >::value_type(*result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1serviceentrydefinition_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > >::value_type *arg3 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > >::value_type tempnull3 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > >::value_type **)&jarg3 : &tempnull3; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ServiceEntryDefinition_Sg__Sg__doSet(arg1,arg2,(boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > >::value_type **)&jresult = result ? new std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > >::value_type(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1serviceentrydefinition_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ServiceEntryDefinition_Sg__Sg__doRemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1vectorptr_1serviceentrydefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorptr_1constantdefinition_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *)new std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > >();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorptr_1constantdefinition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *arg1 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *)new std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > >((std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1constantdefinition_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > **)&jarg1; 
  {
    try
    {
      result = ((std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > const *)arg1)->capacity();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1constantdefinition_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > **)&jarg1; 
  arg2 = (std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > >::size_type)jarg2; 
  {
    try
    {
      try {
        (arg1)->reserve(arg2);
      } catch(std::length_error &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1constantdefinition_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > **)&jarg1; 
  {
    try
    {
      result = (bool)((std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > const *)arg1)->empty();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1constantdefinition_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > **)&jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorptr_1constantdefinition_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  boost::shared_ptr< RobotRaconteur::ConstantDefinition > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::ConstantDefinition > tempnull2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::ConstantDefinition > **)&jarg2 : &tempnull2; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *)new_std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ConstantDefinition_Sg__Sg___SWIG_2(arg1,(boost::shared_ptr< RobotRaconteur::ConstantDefinition > const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1constantdefinition_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > **)&jarg1; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ConstantDefinition_Sg__Sg__doSize((std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > const *)arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1constantdefinition_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > >::value_type *arg2 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > >::value_type **)&jarg2 : &tempnull2; 
  {
    try
    {
      std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ConstantDefinition_Sg__Sg__doAdd__SWIG_0(arg1,(boost::shared_ptr< RobotRaconteur::ConstantDefinition > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1constantdefinition_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > >::value_type *arg3 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? *(std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > >::value_type **)&jarg3 : &tempnull3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ConstantDefinition_Sg__Sg__doAdd__SWIG_1(arg1,arg2,(boost::shared_ptr< RobotRaconteur::ConstantDefinition > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1constantdefinition_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ConstantDefinition_Sg__Sg__doRemove(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > >::value_type **)&jresult = result ? new std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > >::value_type(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1constantdefinition_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > >::value_type *) &std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ConstantDefinition_Sg__Sg__doGet(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > >::value_type **)&jresult = *result ? new std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > >::value_type(*result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1constantdefinition_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > >::value_type *arg3 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > >::value_type tempnull3 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? *(std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > >::value_type **)&jarg3 : &tempnull3; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ConstantDefinition_Sg__Sg__doSet(arg1,arg2,(boost::shared_ptr< RobotRaconteur::ConstantDefinition > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > >::value_type **)&jresult = result ? new std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > >::value_type(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1constantdefinition_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ConstantDefinition_Sg__Sg__doRemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1vectorptr_1constantdefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorptr_1enumdefinition_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *)new std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > >();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorptr_1enumdefinition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *arg1 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *)new std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > >((std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1enumdefinition_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > **)&jarg1; 
  {
    try
    {
      result = ((std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > const *)arg1)->capacity();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1enumdefinition_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > **)&jarg1; 
  arg2 = (std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > >::size_type)jarg2; 
  {
    try
    {
      try {
        (arg1)->reserve(arg2);
      } catch(std::length_error &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1enumdefinition_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > **)&jarg1; 
  {
    try
    {
      result = (bool)((std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > const *)arg1)->empty();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1enumdefinition_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > **)&jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorptr_1enumdefinition_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  boost::shared_ptr< RobotRaconteur::EnumDefinition > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::EnumDefinition > tempnull2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::EnumDefinition > **)&jarg2 : &tempnull2; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *)new_std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_EnumDefinition_Sg__Sg___SWIG_2(arg1,(boost::shared_ptr< RobotRaconteur::EnumDefinition > const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1enumdefinition_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > **)&jarg1; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_EnumDefinition_Sg__Sg__doSize((std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > const *)arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1enumdefinition_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > >::value_type *arg2 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > >::value_type **)&jarg2 : &tempnull2; 
  {
    try
    {
      std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_EnumDefinition_Sg__Sg__doAdd__SWIG_0(arg1,(boost::shared_ptr< RobotRaconteur::EnumDefinition > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1enumdefinition_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > >::value_type *arg3 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? *(std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > >::value_type **)&jarg3 : &tempnull3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_EnumDefinition_Sg__Sg__doAdd__SWIG_1(arg1,arg2,(boost::shared_ptr< RobotRaconteur::EnumDefinition > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1enumdefinition_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_EnumDefinition_Sg__Sg__doRemove(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > >::value_type **)&jresult = result ? new std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > >::value_type(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1enumdefinition_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > >::value_type *) &std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_EnumDefinition_Sg__Sg__doGet(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > >::value_type **)&jresult = *result ? new std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > >::value_type(*result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1enumdefinition_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > >::value_type *arg3 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > >::value_type tempnull3 ;
  std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? *(std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > >::value_type **)&jarg3 : &tempnull3; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_EnumDefinition_Sg__Sg__doSet(arg1,arg2,(boost::shared_ptr< RobotRaconteur::EnumDefinition > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > >::value_type **)&jresult = result ? new std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > >::value_type(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1enumdefinition_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_EnumDefinition_Sg__Sg__doRemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1vectorptr_1enumdefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vector_1constantdefinition_1structfield_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::ConstantDefinition_StructField > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (std::vector< RobotRaconteur::ConstantDefinition_StructField > *)new std::vector< RobotRaconteur::ConstantDefinition_StructField >();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::ConstantDefinition_StructField > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vector_1constantdefinition_1structfield_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::ConstantDefinition_StructField > *arg1 = 0 ;
  std::vector< RobotRaconteur::ConstantDefinition_StructField > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ConstantDefinition_StructField > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< RobotRaconteur::ConstantDefinition_StructField > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (std::vector< RobotRaconteur::ConstantDefinition_StructField > *)new std::vector< RobotRaconteur::ConstantDefinition_StructField >((std::vector< RobotRaconteur::ConstantDefinition_StructField > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::ConstantDefinition_StructField > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1constantdefinition_1structfield_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::ConstantDefinition_StructField > *arg1 = (std::vector< RobotRaconteur::ConstantDefinition_StructField > *) 0 ;
  std::vector< RobotRaconteur::ConstantDefinition_StructField >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ConstantDefinition_StructField > **)&jarg1; 
  {
    try
    {
      result = ((std::vector< RobotRaconteur::ConstantDefinition_StructField > const *)arg1)->capacity();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1constantdefinition_1structfield_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< RobotRaconteur::ConstantDefinition_StructField > *arg1 = (std::vector< RobotRaconteur::ConstantDefinition_StructField > *) 0 ;
  std::vector< RobotRaconteur::ConstantDefinition_StructField >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ConstantDefinition_StructField > **)&jarg1; 
  arg2 = (std::vector< RobotRaconteur::ConstantDefinition_StructField >::size_type)jarg2; 
  {
    try
    {
      try {
        (arg1)->reserve(arg2);
      } catch(std::length_error &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1constantdefinition_1structfield_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< RobotRaconteur::ConstantDefinition_StructField > *arg1 = (std::vector< RobotRaconteur::ConstantDefinition_StructField > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ConstantDefinition_StructField > **)&jarg1; 
  {
    try
    {
      result = (bool)((std::vector< RobotRaconteur::ConstantDefinition_StructField > const *)arg1)->empty();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1constantdefinition_1structfield_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< RobotRaconteur::ConstantDefinition_StructField > *arg1 = (std::vector< RobotRaconteur::ConstantDefinition_StructField > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ConstantDefinition_StructField > **)&jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vector_1constantdefinition_1structfield_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  RobotRaconteur::ConstantDefinition_StructField *arg2 = 0 ;
  std::vector< RobotRaconteur::ConstantDefinition_StructField > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(RobotRaconteur::ConstantDefinition_StructField **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::ConstantDefinition_StructField const & reference is null");
    return 0;
  } 
  {
    try
    {
      try {
        result = (std::vector< RobotRaconteur::ConstantDefinition_StructField > *)new_std_vector_Sl_RobotRaconteur_ConstantDefinition_StructField_Sg___SWIG_2(arg1,(RobotRaconteur::ConstantDefinition_StructField const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::ConstantDefinition_StructField > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1constantdefinition_1structfield_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< RobotRaconteur::ConstantDefinition_StructField > *arg1 = (std::vector< RobotRaconteur::ConstantDefinition_StructField > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ConstantDefinition_StructField > **)&jarg1; 
  {
    try
    {
      try {
        result = std_vector_Sl_RobotRaconteur_ConstantDefinition_StructField_Sg__doSize((std::vector< RobotRaconteur::ConstantDefinition_StructField > const *)arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1constantdefinition_1structfield_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< RobotRaconteur::ConstantDefinition_StructField > *arg1 = (std::vector< RobotRaconteur::ConstantDefinition_StructField > *) 0 ;
  std::vector< RobotRaconteur::ConstantDefinition_StructField >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< RobotRaconteur::ConstantDefinition_StructField > **)&jarg1; 
  arg2 = *(std::vector< RobotRaconteur::ConstantDefinition_StructField >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< RobotRaconteur::ConstantDefinition_StructField >::value_type const & reference is null");
    return ;
  } 
  {
    try
    {
      std_vector_Sl_RobotRaconteur_ConstantDefinition_StructField_Sg__doAdd__SWIG_0(arg1,(RobotRaconteur::ConstantDefinition_StructField const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1constantdefinition_1structfield_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< RobotRaconteur::ConstantDefinition_StructField > *arg1 = (std::vector< RobotRaconteur::ConstantDefinition_StructField > *) 0 ;
  jint arg2 ;
  std::vector< RobotRaconteur::ConstantDefinition_StructField >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< RobotRaconteur::ConstantDefinition_StructField > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< RobotRaconteur::ConstantDefinition_StructField >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< RobotRaconteur::ConstantDefinition_StructField >::value_type const & reference is null");
    return ;
  } 
  {
    try
    {
      try {
        std_vector_Sl_RobotRaconteur_ConstantDefinition_StructField_Sg__doAdd__SWIG_1(arg1,arg2,(RobotRaconteur::ConstantDefinition_StructField const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1constantdefinition_1structfield_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::ConstantDefinition_StructField > *arg1 = (std::vector< RobotRaconteur::ConstantDefinition_StructField > *) 0 ;
  jint arg2 ;
  std::vector< RobotRaconteur::ConstantDefinition_StructField >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ConstantDefinition_StructField > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = std_vector_Sl_RobotRaconteur_ConstantDefinition_StructField_Sg__doRemove(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::ConstantDefinition_StructField >::value_type **)&jresult = new std::vector< RobotRaconteur::ConstantDefinition_StructField >::value_type((const std::vector< RobotRaconteur::ConstantDefinition_StructField >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1constantdefinition_1structfield_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::ConstantDefinition_StructField > *arg1 = (std::vector< RobotRaconteur::ConstantDefinition_StructField > *) 0 ;
  jint arg2 ;
  std::vector< RobotRaconteur::ConstantDefinition_StructField >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ConstantDefinition_StructField > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = (std::vector< RobotRaconteur::ConstantDefinition_StructField >::value_type *) &std_vector_Sl_RobotRaconteur_ConstantDefinition_StructField_Sg__doGet(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::ConstantDefinition_StructField >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1constantdefinition_1structfield_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::ConstantDefinition_StructField > *arg1 = (std::vector< RobotRaconteur::ConstantDefinition_StructField > *) 0 ;
  jint arg2 ;
  std::vector< RobotRaconteur::ConstantDefinition_StructField >::value_type *arg3 = 0 ;
  std::vector< RobotRaconteur::ConstantDefinition_StructField >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< RobotRaconteur::ConstantDefinition_StructField > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< RobotRaconteur::ConstantDefinition_StructField >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< RobotRaconteur::ConstantDefinition_StructField >::value_type const & reference is null");
    return 0;
  } 
  {
    try
    {
      try {
        result = std_vector_Sl_RobotRaconteur_ConstantDefinition_StructField_Sg__doSet(arg1,arg2,(RobotRaconteur::ConstantDefinition_StructField const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::ConstantDefinition_StructField >::value_type **)&jresult = new std::vector< RobotRaconteur::ConstantDefinition_StructField >::value_type((const std::vector< RobotRaconteur::ConstantDefinition_StructField >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1constantdefinition_1structfield_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< RobotRaconteur::ConstantDefinition_StructField > *arg1 = (std::vector< RobotRaconteur::ConstantDefinition_StructField > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ConstantDefinition_StructField > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_RobotRaconteur_ConstantDefinition_StructField_Sg__doRemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1vector_1constantdefinition_1structfield(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< RobotRaconteur::ConstantDefinition_StructField > *arg1 = (std::vector< RobotRaconteur::ConstantDefinition_StructField > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< RobotRaconteur::ConstantDefinition_StructField > **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vector_1enumdefinitionvalues_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::EnumDefinitionValue > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (std::vector< RobotRaconteur::EnumDefinitionValue > *)new std::vector< RobotRaconteur::EnumDefinitionValue >();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::EnumDefinitionValue > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vector_1enumdefinitionvalues_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::EnumDefinitionValue > *arg1 = 0 ;
  std::vector< RobotRaconteur::EnumDefinitionValue > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::EnumDefinitionValue > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< RobotRaconteur::EnumDefinitionValue > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (std::vector< RobotRaconteur::EnumDefinitionValue > *)new std::vector< RobotRaconteur::EnumDefinitionValue >((std::vector< RobotRaconteur::EnumDefinitionValue > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::EnumDefinitionValue > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1enumdefinitionvalues_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::EnumDefinitionValue > *arg1 = (std::vector< RobotRaconteur::EnumDefinitionValue > *) 0 ;
  std::vector< RobotRaconteur::EnumDefinitionValue >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::EnumDefinitionValue > **)&jarg1; 
  {
    try
    {
      result = ((std::vector< RobotRaconteur::EnumDefinitionValue > const *)arg1)->capacity();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1enumdefinitionvalues_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< RobotRaconteur::EnumDefinitionValue > *arg1 = (std::vector< RobotRaconteur::EnumDefinitionValue > *) 0 ;
  std::vector< RobotRaconteur::EnumDefinitionValue >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::EnumDefinitionValue > **)&jarg1; 
  arg2 = (std::vector< RobotRaconteur::EnumDefinitionValue >::size_type)jarg2; 
  {
    try
    {
      try {
        (arg1)->reserve(arg2);
      } catch(std::length_error &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1enumdefinitionvalues_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< RobotRaconteur::EnumDefinitionValue > *arg1 = (std::vector< RobotRaconteur::EnumDefinitionValue > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::EnumDefinitionValue > **)&jarg1; 
  {
    try
    {
      result = (bool)((std::vector< RobotRaconteur::EnumDefinitionValue > const *)arg1)->empty();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1enumdefinitionvalues_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< RobotRaconteur::EnumDefinitionValue > *arg1 = (std::vector< RobotRaconteur::EnumDefinitionValue > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::EnumDefinitionValue > **)&jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vector_1enumdefinitionvalues_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  RobotRaconteur::EnumDefinitionValue *arg2 = 0 ;
  std::vector< RobotRaconteur::EnumDefinitionValue > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(RobotRaconteur::EnumDefinitionValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::EnumDefinitionValue const & reference is null");
    return 0;
  } 
  {
    try
    {
      try {
        result = (std::vector< RobotRaconteur::EnumDefinitionValue > *)new_std_vector_Sl_RobotRaconteur_EnumDefinitionValue_Sg___SWIG_2(arg1,(RobotRaconteur::EnumDefinitionValue const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::EnumDefinitionValue > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1enumdefinitionvalues_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< RobotRaconteur::EnumDefinitionValue > *arg1 = (std::vector< RobotRaconteur::EnumDefinitionValue > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::EnumDefinitionValue > **)&jarg1; 
  {
    try
    {
      try {
        result = std_vector_Sl_RobotRaconteur_EnumDefinitionValue_Sg__doSize((std::vector< RobotRaconteur::EnumDefinitionValue > const *)arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1enumdefinitionvalues_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< RobotRaconteur::EnumDefinitionValue > *arg1 = (std::vector< RobotRaconteur::EnumDefinitionValue > *) 0 ;
  std::vector< RobotRaconteur::EnumDefinitionValue >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< RobotRaconteur::EnumDefinitionValue > **)&jarg1; 
  arg2 = *(std::vector< RobotRaconteur::EnumDefinitionValue >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< RobotRaconteur::EnumDefinitionValue >::value_type const & reference is null");
    return ;
  } 
  {
    try
    {
      std_vector_Sl_RobotRaconteur_EnumDefinitionValue_Sg__doAdd__SWIG_0(arg1,(RobotRaconteur::EnumDefinitionValue const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1enumdefinitionvalues_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< RobotRaconteur::EnumDefinitionValue > *arg1 = (std::vector< RobotRaconteur::EnumDefinitionValue > *) 0 ;
  jint arg2 ;
  std::vector< RobotRaconteur::EnumDefinitionValue >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< RobotRaconteur::EnumDefinitionValue > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< RobotRaconteur::EnumDefinitionValue >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< RobotRaconteur::EnumDefinitionValue >::value_type const & reference is null");
    return ;
  } 
  {
    try
    {
      try {
        std_vector_Sl_RobotRaconteur_EnumDefinitionValue_Sg__doAdd__SWIG_1(arg1,arg2,(RobotRaconteur::EnumDefinitionValue const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1enumdefinitionvalues_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::EnumDefinitionValue > *arg1 = (std::vector< RobotRaconteur::EnumDefinitionValue > *) 0 ;
  jint arg2 ;
  std::vector< RobotRaconteur::EnumDefinitionValue >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::EnumDefinitionValue > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = std_vector_Sl_RobotRaconteur_EnumDefinitionValue_Sg__doRemove(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::EnumDefinitionValue >::value_type **)&jresult = new std::vector< RobotRaconteur::EnumDefinitionValue >::value_type((const std::vector< RobotRaconteur::EnumDefinitionValue >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1enumdefinitionvalues_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::EnumDefinitionValue > *arg1 = (std::vector< RobotRaconteur::EnumDefinitionValue > *) 0 ;
  jint arg2 ;
  std::vector< RobotRaconteur::EnumDefinitionValue >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::EnumDefinitionValue > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = (std::vector< RobotRaconteur::EnumDefinitionValue >::value_type *) &std_vector_Sl_RobotRaconteur_EnumDefinitionValue_Sg__doGet(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::EnumDefinitionValue >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1enumdefinitionvalues_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::EnumDefinitionValue > *arg1 = (std::vector< RobotRaconteur::EnumDefinitionValue > *) 0 ;
  jint arg2 ;
  std::vector< RobotRaconteur::EnumDefinitionValue >::value_type *arg3 = 0 ;
  std::vector< RobotRaconteur::EnumDefinitionValue >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< RobotRaconteur::EnumDefinitionValue > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< RobotRaconteur::EnumDefinitionValue >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< RobotRaconteur::EnumDefinitionValue >::value_type const & reference is null");
    return 0;
  } 
  {
    try
    {
      try {
        result = std_vector_Sl_RobotRaconteur_EnumDefinitionValue_Sg__doSet(arg1,arg2,(RobotRaconteur::EnumDefinitionValue const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::EnumDefinitionValue >::value_type **)&jresult = new std::vector< RobotRaconteur::EnumDefinitionValue >::value_type((const std::vector< RobotRaconteur::EnumDefinitionValue >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1enumdefinitionvalues_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< RobotRaconteur::EnumDefinitionValue > *arg1 = (std::vector< RobotRaconteur::EnumDefinitionValue > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::EnumDefinitionValue > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_RobotRaconteur_EnumDefinitionValue_Sg__doRemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1vector_1enumdefinitionvalues(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< RobotRaconteur::EnumDefinitionValue > *arg1 = (std::vector< RobotRaconteur::EnumDefinitionValue > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< RobotRaconteur::EnumDefinitionValue > **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vector_1usingdefinition_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *)new std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > >();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vector_1usingdefinition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *arg1 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *)new std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > >((std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1usingdefinition_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > **)&jarg1; 
  {
    try
    {
      result = ((std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > const *)arg1)->capacity();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1usingdefinition_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > **)&jarg1; 
  arg2 = (std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > >::size_type)jarg2; 
  {
    try
    {
      try {
        (arg1)->reserve(arg2);
      } catch(std::length_error &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1usingdefinition_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > **)&jarg1; 
  {
    try
    {
      result = (bool)((std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > const *)arg1)->empty();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1usingdefinition_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > **)&jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vector_1usingdefinition_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  boost::shared_ptr< RobotRaconteur::UsingDefinition > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::UsingDefinition > tempnull2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::UsingDefinition > **)&jarg2 : &tempnull2; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *)new_std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_UsingDefinition_Sg__Sg___SWIG_2(arg1,(boost::shared_ptr< RobotRaconteur::UsingDefinition > const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1usingdefinition_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > **)&jarg1; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_UsingDefinition_Sg__Sg__doSize((std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > const *)arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1usingdefinition_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > >::value_type *arg2 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > >::value_type **)&jarg2 : &tempnull2; 
  {
    try
    {
      std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_UsingDefinition_Sg__Sg__doAdd__SWIG_0(arg1,(boost::shared_ptr< RobotRaconteur::UsingDefinition > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1usingdefinition_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > >::value_type *arg3 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? *(std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > >::value_type **)&jarg3 : &tempnull3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_UsingDefinition_Sg__Sg__doAdd__SWIG_1(arg1,arg2,(boost::shared_ptr< RobotRaconteur::UsingDefinition > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1usingdefinition_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_UsingDefinition_Sg__Sg__doRemove(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > >::value_type **)&jresult = result ? new std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > >::value_type(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1usingdefinition_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > >::value_type *) &std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_UsingDefinition_Sg__Sg__doGet(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > >::value_type **)&jresult = *result ? new std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > >::value_type(*result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1usingdefinition_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > >::value_type *arg3 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > >::value_type tempnull3 ;
  std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? *(std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > >::value_type **)&jarg3 : &tempnull3; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_UsingDefinition_Sg__Sg__doSet(arg1,arg2,(boost::shared_ptr< RobotRaconteur::UsingDefinition > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > >::value_type **)&jresult = result ? new std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > >::value_type(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1usingdefinition_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_UsingDefinition_Sg__Sg__doRemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1vector_1usingdefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorptr_1exceptiondefinition_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *)new std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > >();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorptr_1exceptiondefinition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *arg1 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *)new std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > >((std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1exceptiondefinition_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > **)&jarg1; 
  {
    try
    {
      result = ((std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > const *)arg1)->capacity();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1exceptiondefinition_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > **)&jarg1; 
  arg2 = (std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > >::size_type)jarg2; 
  {
    try
    {
      try {
        (arg1)->reserve(arg2);
      } catch(std::length_error &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1exceptiondefinition_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > **)&jarg1; 
  {
    try
    {
      result = (bool)((std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > const *)arg1)->empty();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1exceptiondefinition_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > **)&jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorptr_1exceptiondefinition_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  boost::shared_ptr< RobotRaconteur::ExceptionDefinition > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::ExceptionDefinition > tempnull2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::ExceptionDefinition > **)&jarg2 : &tempnull2; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *)new_std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ExceptionDefinition_Sg__Sg___SWIG_2(arg1,(boost::shared_ptr< RobotRaconteur::ExceptionDefinition > const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1exceptiondefinition_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > **)&jarg1; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ExceptionDefinition_Sg__Sg__doSize((std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > const *)arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1exceptiondefinition_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > >::value_type *arg2 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > >::value_type **)&jarg2 : &tempnull2; 
  {
    try
    {
      std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ExceptionDefinition_Sg__Sg__doAdd__SWIG_0(arg1,(boost::shared_ptr< RobotRaconteur::ExceptionDefinition > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1exceptiondefinition_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > >::value_type *arg3 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? *(std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > >::value_type **)&jarg3 : &tempnull3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ExceptionDefinition_Sg__Sg__doAdd__SWIG_1(arg1,arg2,(boost::shared_ptr< RobotRaconteur::ExceptionDefinition > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1exceptiondefinition_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ExceptionDefinition_Sg__Sg__doRemove(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > >::value_type **)&jresult = result ? new std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > >::value_type(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1exceptiondefinition_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > >::value_type *) &std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ExceptionDefinition_Sg__Sg__doGet(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > >::value_type **)&jresult = *result ? new std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > >::value_type(*result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1exceptiondefinition_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > >::value_type *arg3 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > >::value_type tempnull3 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? *(std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > >::value_type **)&jarg3 : &tempnull3; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ExceptionDefinition_Sg__Sg__doSet(arg1,arg2,(boost::shared_ptr< RobotRaconteur::ExceptionDefinition > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > >::value_type **)&jresult = result ? new std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > >::value_type(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1exceptiondefinition_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ExceptionDefinition_Sg__Sg__doRemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1vectorptr_1exceptiondefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorptr_1servicedefinition_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *)new std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > >();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorptr_1servicedefinition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *arg1 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *)new std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > >((std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1servicedefinition_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > **)&jarg1; 
  {
    try
    {
      result = ((std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > const *)arg1)->capacity();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1servicedefinition_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > **)&jarg1; 
  arg2 = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > >::size_type)jarg2; 
  {
    try
    {
      try {
        (arg1)->reserve(arg2);
      } catch(std::length_error &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1servicedefinition_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > **)&jarg1; 
  {
    try
    {
      result = (bool)((std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > const *)arg1)->empty();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1servicedefinition_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > **)&jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorptr_1servicedefinition_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > tempnull2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::ServiceDefinition > **)&jarg2 : &tempnull2; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *)new_std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ServiceDefinition_Sg__Sg___SWIG_2(arg1,(boost::shared_ptr< RobotRaconteur::ServiceDefinition > const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1servicedefinition_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > **)&jarg1; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ServiceDefinition_Sg__Sg__doSize((std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > const *)arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1servicedefinition_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > >::value_type *arg2 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > >::value_type **)&jarg2 : &tempnull2; 
  {
    try
    {
      std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ServiceDefinition_Sg__Sg__doAdd__SWIG_0(arg1,(boost::shared_ptr< RobotRaconteur::ServiceDefinition > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1servicedefinition_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > >::value_type *arg3 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > >::value_type **)&jarg3 : &tempnull3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ServiceDefinition_Sg__Sg__doAdd__SWIG_1(arg1,arg2,(boost::shared_ptr< RobotRaconteur::ServiceDefinition > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1servicedefinition_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ServiceDefinition_Sg__Sg__doRemove(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > >::value_type **)&jresult = result ? new std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > >::value_type(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1servicedefinition_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > >::value_type *) &std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ServiceDefinition_Sg__Sg__doGet(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > >::value_type **)&jresult = *result ? new std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > >::value_type(*result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1servicedefinition_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > >::value_type *arg3 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > >::value_type tempnull3 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > >::value_type **)&jarg3 : &tempnull3; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ServiceDefinition_Sg__Sg__doSet(arg1,arg2,(boost::shared_ptr< RobotRaconteur::ServiceDefinition > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > >::value_type **)&jresult = result ? new std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > >::value_type(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1servicedefinition_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_ServiceDefinition_Sg__Sg__doRemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1vectorptr_1servicedefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinitionParseInfo_1ServiceName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::ServiceDefinitionParseInfo *arg1 = (RobotRaconteur::ServiceDefinitionParseInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceDefinitionParseInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->ServiceName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinitionParseInfo_1ServiceName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *arg1 = (RobotRaconteur::ServiceDefinitionParseInfo *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceDefinitionParseInfo **)&jarg1; 
  result = (std::string *) & ((arg1)->ServiceName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinitionParseInfo_1RobDefFilePath_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::ServiceDefinitionParseInfo *arg1 = (RobotRaconteur::ServiceDefinitionParseInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceDefinitionParseInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->RobDefFilePath = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinitionParseInfo_1RobDefFilePath_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *arg1 = (RobotRaconteur::ServiceDefinitionParseInfo *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceDefinitionParseInfo **)&jarg1; 
  result = (std::string *) & ((arg1)->RobDefFilePath);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinitionParseInfo_1Line_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::ServiceDefinitionParseInfo *arg1 = (RobotRaconteur::ServiceDefinitionParseInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceDefinitionParseInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Line = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinitionParseInfo_1Line_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *arg1 = (RobotRaconteur::ServiceDefinitionParseInfo *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceDefinitionParseInfo **)&jarg1; 
  result = (std::string *) & ((arg1)->Line);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinitionParseInfo_1LineNumber_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::ServiceDefinitionParseInfo *arg1 = (RobotRaconteur::ServiceDefinitionParseInfo *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceDefinitionParseInfo **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->LineNumber = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinitionParseInfo_1LineNumber_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *arg1 = (RobotRaconteur::ServiceDefinitionParseInfo *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceDefinitionParseInfo **)&jarg1; 
  result = (int32_t) ((arg1)->LineNumber);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1ServiceDefinitionParseInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::ServiceDefinitionParseInfo *)new RobotRaconteur::ServiceDefinitionParseInfo();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::ServiceDefinitionParseInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinitionParseInfo_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::ServiceDefinitionParseInfo *arg1 = (RobotRaconteur::ServiceDefinitionParseInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceDefinitionParseInfo **)&jarg1; 
  {
    try
    {
      (arg1)->Reset();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1ServiceDefinitionParseInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::ServiceDefinitionParseInfo *arg1 = (RobotRaconteur::ServiceDefinitionParseInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::ServiceDefinitionParseInfo **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1RobotRaconteurVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurVersion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::RobotRaconteurVersion *)new RobotRaconteur::RobotRaconteurVersion();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::RobotRaconteurVersion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1RobotRaconteurVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  RobotRaconteur::RobotRaconteurVersion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint32_t)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = (uint32_t)jarg4; 
  {
    try
    {
      result = (RobotRaconteur::RobotRaconteurVersion *)new RobotRaconteur::RobotRaconteurVersion(arg1,arg2,arg3,arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::RobotRaconteurVersion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1RobotRaconteurVersion_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  RobotRaconteur::RobotRaconteurVersion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint32_t)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (uint32_t)jarg3; 
  {
    try
    {
      result = (RobotRaconteur::RobotRaconteurVersion *)new RobotRaconteur::RobotRaconteurVersion(arg1,arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::RobotRaconteurVersion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1RobotRaconteurVersion_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  uint32_t arg1 ;
  uint32_t arg2 ;
  RobotRaconteur::RobotRaconteurVersion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint32_t)jarg1; 
  arg2 = (uint32_t)jarg2; 
  {
    try
    {
      result = (RobotRaconteur::RobotRaconteurVersion *)new RobotRaconteur::RobotRaconteurVersion(arg1,arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::RobotRaconteurVersion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1RobotRaconteurVersion_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  RobotRaconteur::RobotRaconteurVersion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try
    {
      result = (RobotRaconteur::RobotRaconteurVersion *)new RobotRaconteur::RobotRaconteurVersion((std::string const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::RobotRaconteurVersion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurVersion_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::RobotRaconteurVersion *arg1 = (RobotRaconteur::RobotRaconteurVersion *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RobotRaconteurVersion **)&jarg1; 
  {
    try
    {
      result = ((RobotRaconteur::RobotRaconteurVersion const *)arg1)->ToString();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurVersion_1fromString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  RobotRaconteur::RobotRaconteurVersion *arg1 = (RobotRaconteur::RobotRaconteurVersion *) 0 ;
  std::string *arg2 = 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *arg3 = (RobotRaconteur::ServiceDefinitionParseInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(RobotRaconteur::RobotRaconteurVersion **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(RobotRaconteur::ServiceDefinitionParseInfo **)&jarg3; 
  {
    try
    {
      (arg1)->FromString((std::string const &)*arg2,(RobotRaconteur::ServiceDefinitionParseInfo const *)arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurVersion_1fromString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::RobotRaconteurVersion *arg1 = (RobotRaconteur::RobotRaconteurVersion *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RobotRaconteurVersion **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      (arg1)->FromString((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurVersion_1major_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RobotRaconteur::RobotRaconteurVersion *arg1 = (RobotRaconteur::RobotRaconteurVersion *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RobotRaconteurVersion **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->major = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurVersion_1major_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurVersion *arg1 = (RobotRaconteur::RobotRaconteurVersion *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RobotRaconteurVersion **)&jarg1; 
  result = (uint32_t) ((arg1)->major);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurVersion_1minor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RobotRaconteur::RobotRaconteurVersion *arg1 = (RobotRaconteur::RobotRaconteurVersion *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RobotRaconteurVersion **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->minor = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurVersion_1minor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurVersion *arg1 = (RobotRaconteur::RobotRaconteurVersion *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RobotRaconteurVersion **)&jarg1; 
  result = (uint32_t) ((arg1)->minor);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurVersion_1patch_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RobotRaconteur::RobotRaconteurVersion *arg1 = (RobotRaconteur::RobotRaconteurVersion *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RobotRaconteurVersion **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->patch = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurVersion_1patch_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurVersion *arg1 = (RobotRaconteur::RobotRaconteurVersion *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RobotRaconteurVersion **)&jarg1; 
  result = (uint32_t) ((arg1)->patch);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurVersion_1tweak_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RobotRaconteur::RobotRaconteurVersion *arg1 = (RobotRaconteur::RobotRaconteurVersion *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RobotRaconteurVersion **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->tweak = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurVersion_1tweak_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurVersion *arg1 = (RobotRaconteur::RobotRaconteurVersion *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RobotRaconteurVersion **)&jarg1; 
  result = (uint32_t) ((arg1)->tweak);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurVersion_1ParseInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::RobotRaconteurVersion *arg1 = (RobotRaconteur::RobotRaconteurVersion *) 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *arg2 = (RobotRaconteur::ServiceDefinitionParseInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::RobotRaconteurVersion **)&jarg1; 
  arg2 = *(RobotRaconteur::ServiceDefinitionParseInfo **)&jarg2; 
  if (arg1) (arg1)->ParseInfo = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurVersion_1ParseInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurVersion *arg1 = (RobotRaconteur::RobotRaconteurVersion *) 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RobotRaconteurVersion **)&jarg1; 
  result = (RobotRaconteur::ServiceDefinitionParseInfo *)& ((arg1)->ParseInfo);
  *(RobotRaconteur::ServiceDefinitionParseInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1RobotRaconteurVersion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::RobotRaconteurVersion *arg1 = (RobotRaconteur::RobotRaconteurVersion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::RobotRaconteurVersion **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurVersion_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  RobotRaconteur::RobotRaconteurVersion *arg1 = 0 ;
  RobotRaconteur::RobotRaconteurVersion *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::RobotRaconteurVersion **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::RobotRaconteurVersion const & reference is null");
    return 0;
  } 
  arg2 = *(RobotRaconteur::RobotRaconteurVersion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::RobotRaconteurVersion const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (bool)operator ==((RobotRaconteur::RobotRaconteurVersion const &)*arg1,(RobotRaconteur::RobotRaconteurVersion const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurVersion_1ne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  RobotRaconteur::RobotRaconteurVersion *arg1 = 0 ;
  RobotRaconteur::RobotRaconteurVersion *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::RobotRaconteurVersion **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::RobotRaconteurVersion const & reference is null");
    return 0;
  } 
  arg2 = *(RobotRaconteur::RobotRaconteurVersion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::RobotRaconteurVersion const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (bool)operator !=((RobotRaconteur::RobotRaconteurVersion const &)*arg1,(RobotRaconteur::RobotRaconteurVersion const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurVersion_1gt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  RobotRaconteur::RobotRaconteurVersion *arg1 = 0 ;
  RobotRaconteur::RobotRaconteurVersion *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::RobotRaconteurVersion **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::RobotRaconteurVersion const & reference is null");
    return 0;
  } 
  arg2 = *(RobotRaconteur::RobotRaconteurVersion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::RobotRaconteurVersion const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (bool)operator >((RobotRaconteur::RobotRaconteurVersion const &)*arg1,(RobotRaconteur::RobotRaconteurVersion const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurVersion_1ge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  RobotRaconteur::RobotRaconteurVersion *arg1 = 0 ;
  RobotRaconteur::RobotRaconteurVersion *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::RobotRaconteurVersion **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::RobotRaconteurVersion const & reference is null");
    return 0;
  } 
  arg2 = *(RobotRaconteur::RobotRaconteurVersion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::RobotRaconteurVersion const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (bool)operator >=((RobotRaconteur::RobotRaconteurVersion const &)*arg1,(RobotRaconteur::RobotRaconteurVersion const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurVersion_1lt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  RobotRaconteur::RobotRaconteurVersion *arg1 = 0 ;
  RobotRaconteur::RobotRaconteurVersion *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::RobotRaconteurVersion **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::RobotRaconteurVersion const & reference is null");
    return 0;
  } 
  arg2 = *(RobotRaconteur::RobotRaconteurVersion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::RobotRaconteurVersion const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (bool)operator <((RobotRaconteur::RobotRaconteurVersion const &)*arg1,(RobotRaconteur::RobotRaconteurVersion const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurVersion_1le(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  RobotRaconteur::RobotRaconteurVersion *arg1 = 0 ;
  RobotRaconteur::RobotRaconteurVersion *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::RobotRaconteurVersion **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::RobotRaconteurVersion const & reference is null");
    return 0;
  } 
  arg2 = *(RobotRaconteur::RobotRaconteurVersion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::RobotRaconteurVersion const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (bool)operator <=((RobotRaconteur::RobotRaconteurVersion const &)*arg1,(RobotRaconteur::RobotRaconteurVersion const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinition_1Name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::ServiceDefinition *arg1 = (RobotRaconteur::ServiceDefinition *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinition_1Name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::ServiceDefinition *arg1 = (RobotRaconteur::ServiceDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->Name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinition_1NamedArrays_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::ServiceDefinition *arg1 = (RobotRaconteur::ServiceDefinition *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *arg2 = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > **)&jarg2; 
  if (arg1) (arg1)->NamedArrays = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinition_1NamedArrays_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ServiceDefinition *arg1 = (RobotRaconteur::ServiceDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *smartarg1 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *)& ((arg1)->NamedArrays);
  *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinition_1Pods_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::ServiceDefinition *arg1 = (RobotRaconteur::ServiceDefinition *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *arg2 = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > **)&jarg2; 
  if (arg1) (arg1)->Pods = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinition_1Pods_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ServiceDefinition *arg1 = (RobotRaconteur::ServiceDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *smartarg1 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *)& ((arg1)->Pods);
  *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinition_1Structures_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::ServiceDefinition *arg1 = (RobotRaconteur::ServiceDefinition *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *arg2 = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > **)&jarg2; 
  if (arg1) (arg1)->Structures = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinition_1Structures_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ServiceDefinition *arg1 = (RobotRaconteur::ServiceDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *smartarg1 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *)& ((arg1)->Structures);
  *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinition_1Objects_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::ServiceDefinition *arg1 = (RobotRaconteur::ServiceDefinition *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *arg2 = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > **)&jarg2; 
  if (arg1) (arg1)->Objects = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinition_1Objects_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ServiceDefinition *arg1 = (RobotRaconteur::ServiceDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *smartarg1 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > *)& ((arg1)->Objects);
  *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinition_1Options_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::ServiceDefinition *arg1 = (RobotRaconteur::ServiceDefinition *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->Options = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinition_1Options_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ServiceDefinition *arg1 = (RobotRaconteur::ServiceDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *smartarg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< std::string > *)& ((arg1)->Options);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinition_1Imports_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::ServiceDefinition *arg1 = (RobotRaconteur::ServiceDefinition *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->Imports = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinition_1Imports_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ServiceDefinition *arg1 = (RobotRaconteur::ServiceDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *smartarg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< std::string > *)& ((arg1)->Imports);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinition_1Exceptions_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::ServiceDefinition *arg1 = (RobotRaconteur::ServiceDefinition *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *arg2 = (std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > **)&jarg2; 
  if (arg1) (arg1)->Exceptions = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinition_1Exceptions_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ServiceDefinition *arg1 = (RobotRaconteur::ServiceDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *smartarg1 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > *)& ((arg1)->Exceptions);
  *(std::vector< boost::shared_ptr< RobotRaconteur::ExceptionDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinition_1Using_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::ServiceDefinition *arg1 = (RobotRaconteur::ServiceDefinition *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *arg2 = (std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > **)&jarg2; 
  if (arg1) (arg1)->Using = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinition_1Using_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ServiceDefinition *arg1 = (RobotRaconteur::ServiceDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *smartarg1 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > *)& ((arg1)->Using);
  *(std::vector< boost::shared_ptr< RobotRaconteur::UsingDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinition_1Constants_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::ServiceDefinition *arg1 = (RobotRaconteur::ServiceDefinition *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *arg2 = (std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > **)&jarg2; 
  if (arg1) (arg1)->Constants = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinition_1Constants_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ServiceDefinition *arg1 = (RobotRaconteur::ServiceDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *smartarg1 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *)& ((arg1)->Constants);
  *(std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinition_1Enums_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::ServiceDefinition *arg1 = (RobotRaconteur::ServiceDefinition *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *arg2 = (std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > **)&jarg2; 
  if (arg1) (arg1)->Enums = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinition_1Enums_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ServiceDefinition *arg1 = (RobotRaconteur::ServiceDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *smartarg1 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > *)& ((arg1)->Enums);
  *(std::vector< boost::shared_ptr< RobotRaconteur::EnumDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinition_1StdVer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::ServiceDefinition *arg1 = (RobotRaconteur::ServiceDefinition *) 0 ;
  RobotRaconteur::RobotRaconteurVersion *arg2 = (RobotRaconteur::RobotRaconteurVersion *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::RobotRaconteurVersion **)&jarg2; 
  if (arg1) (arg1)->StdVer = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinition_1StdVer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ServiceDefinition *arg1 = (RobotRaconteur::ServiceDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *smartarg1 = 0 ;
  RobotRaconteur::RobotRaconteurVersion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (RobotRaconteur::RobotRaconteurVersion *)& ((arg1)->StdVer);
  *(RobotRaconteur::RobotRaconteurVersion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinition_1ParseInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::ServiceDefinition *arg1 = (RobotRaconteur::ServiceDefinition *) 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *arg2 = (RobotRaconteur::ServiceDefinitionParseInfo *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::ServiceDefinitionParseInfo **)&jarg2; 
  if (arg1) (arg1)->ParseInfo = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinition_1ParseInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ServiceDefinition *arg1 = (RobotRaconteur::ServiceDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *smartarg1 = 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (RobotRaconteur::ServiceDefinitionParseInfo *)& ((arg1)->ParseInfo);
  *(RobotRaconteur::ServiceDefinitionParseInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinition_1DocString_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::ServiceDefinition *arg1 = (RobotRaconteur::ServiceDefinition *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->DocString = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinition_1DocString_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::ServiceDefinition *arg1 = (RobotRaconteur::ServiceDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->DocString);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinition_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::ServiceDefinition *arg1 = (RobotRaconteur::ServiceDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->ToString();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinition_1fromString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  RobotRaconteur::ServiceDefinition *arg1 = (RobotRaconteur::ServiceDefinition *) 0 ;
  std::string *arg2 = 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *arg3 = (RobotRaconteur::ServiceDefinitionParseInfo *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(RobotRaconteur::ServiceDefinitionParseInfo **)&jarg3; 
  {
    try
    {
      (arg1)->FromString((std::string const &)*arg2,(RobotRaconteur::ServiceDefinitionParseInfo const *)arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinition_1fromString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::ServiceDefinition *arg1 = (RobotRaconteur::ServiceDefinition *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      (arg1)->FromString((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1ServiceDefinition(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::ServiceDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::ServiceDefinition *)new RobotRaconteur::ServiceDefinition();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::ServiceDefinition > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::ServiceDefinition >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceDefinition_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::ServiceDefinition *arg1 = (RobotRaconteur::ServiceDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->Reset();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1ServiceDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::ServiceDefinition *arg1 = (RobotRaconteur::ServiceDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceEntryDefinition_1Name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::ServiceEntryDefinition *arg1 = (RobotRaconteur::ServiceEntryDefinition *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceEntryDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceEntryDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceEntryDefinition_1Name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::ServiceEntryDefinition *arg1 = (RobotRaconteur::ServiceEntryDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceEntryDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceEntryDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->Name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceEntryDefinition_1Members_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::ServiceEntryDefinition *arg1 = (RobotRaconteur::ServiceEntryDefinition *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *arg2 = (std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceEntryDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceEntryDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > **)&jarg2; 
  if (arg1) (arg1)->Members = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceEntryDefinition_1Members_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ServiceEntryDefinition *arg1 = (RobotRaconteur::ServiceEntryDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *smartarg1 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceEntryDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceEntryDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > *)& ((arg1)->Members);
  *(std::vector< boost::shared_ptr< RobotRaconteur::MemberDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceEntryDefinition_1EntryType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::ServiceEntryDefinition *arg1 = (RobotRaconteur::ServiceEntryDefinition *) 0 ;
  RobotRaconteur::DataTypes arg2 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceEntryDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceEntryDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (RobotRaconteur::DataTypes)jarg2; 
  if (arg1) (arg1)->EntryType = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceEntryDefinition_1EntryType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::ServiceEntryDefinition *arg1 = (RobotRaconteur::ServiceEntryDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *smartarg1 = 0 ;
  RobotRaconteur::DataTypes result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceEntryDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceEntryDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (RobotRaconteur::DataTypes) ((arg1)->EntryType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceEntryDefinition_1Implements_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::ServiceEntryDefinition *arg1 = (RobotRaconteur::ServiceEntryDefinition *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceEntryDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceEntryDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->Implements = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceEntryDefinition_1Implements_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ServiceEntryDefinition *arg1 = (RobotRaconteur::ServiceEntryDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *smartarg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceEntryDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceEntryDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< std::string > *)& ((arg1)->Implements);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceEntryDefinition_1Options_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::ServiceEntryDefinition *arg1 = (RobotRaconteur::ServiceEntryDefinition *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceEntryDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceEntryDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->Options = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceEntryDefinition_1Options_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ServiceEntryDefinition *arg1 = (RobotRaconteur::ServiceEntryDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *smartarg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceEntryDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceEntryDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< std::string > *)& ((arg1)->Options);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceEntryDefinition_1Constants_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::ServiceEntryDefinition *arg1 = (RobotRaconteur::ServiceEntryDefinition *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *arg2 = (std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceEntryDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceEntryDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > **)&jarg2; 
  if (arg1) (arg1)->Constants = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceEntryDefinition_1Constants_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ServiceEntryDefinition *arg1 = (RobotRaconteur::ServiceEntryDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *smartarg1 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceEntryDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceEntryDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > *)& ((arg1)->Constants);
  *(std::vector< boost::shared_ptr< RobotRaconteur::ConstantDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceEntryDefinition_1ParseInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::ServiceEntryDefinition *arg1 = (RobotRaconteur::ServiceEntryDefinition *) 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *arg2 = (RobotRaconteur::ServiceDefinitionParseInfo *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceEntryDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceEntryDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::ServiceDefinitionParseInfo **)&jarg2; 
  if (arg1) (arg1)->ParseInfo = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceEntryDefinition_1ParseInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ServiceEntryDefinition *arg1 = (RobotRaconteur::ServiceEntryDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *smartarg1 = 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceEntryDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceEntryDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (RobotRaconteur::ServiceDefinitionParseInfo *)& ((arg1)->ParseInfo);
  *(RobotRaconteur::ServiceDefinitionParseInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceEntryDefinition_1DocString_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::ServiceEntryDefinition *arg1 = (RobotRaconteur::ServiceEntryDefinition *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceEntryDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceEntryDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->DocString = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceEntryDefinition_1DocString_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::ServiceEntryDefinition *arg1 = (RobotRaconteur::ServiceEntryDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceEntryDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceEntryDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->DocString);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1ServiceEntryDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *arg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > tempnull1 ;
  RobotRaconteur::ServiceEntryDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::ServiceDefinition > **)&jarg1 : &tempnull1; 
  {
    try
    {
      result = (RobotRaconteur::ServiceEntryDefinition *)new RobotRaconteur::ServiceEntryDefinition((boost::shared_ptr< RobotRaconteur::ServiceDefinition > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::ServiceEntryDefinition > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::ServiceEntryDefinition >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceEntryDefinition_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::ServiceEntryDefinition *arg1 = (RobotRaconteur::ServiceEntryDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceEntryDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceEntryDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->ToString();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceEntryDefinition_1fromString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  RobotRaconteur::ServiceEntryDefinition *arg1 = (RobotRaconteur::ServiceEntryDefinition *) 0 ;
  std::string *arg2 = 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *arg3 = (RobotRaconteur::ServiceDefinitionParseInfo *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceEntryDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceEntryDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(RobotRaconteur::ServiceDefinitionParseInfo **)&jarg3; 
  {
    try
    {
      (arg1)->FromString((std::string const &)*arg2,(RobotRaconteur::ServiceDefinitionParseInfo const *)arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceEntryDefinition_1fromString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::ServiceEntryDefinition *arg1 = (RobotRaconteur::ServiceEntryDefinition *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceEntryDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceEntryDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      (arg1)->FromString((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceEntryDefinition_1getServiceDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ServiceEntryDefinition *arg1 = (RobotRaconteur::ServiceEntryDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceEntryDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceEntryDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = RobotRaconteur_ServiceEntryDefinition_GetServiceDefinition(arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::ServiceDefinition > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::ServiceDefinition >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceEntryDefinition_1setServiceDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::ServiceEntryDefinition *arg1 = (RobotRaconteur::ServiceEntryDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceEntryDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceEntryDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::ServiceDefinition > **)&jarg2 : &tempnull2; 
  {
    try
    {
      RobotRaconteur_ServiceEntryDefinition_SetServiceDefinition(arg1,(boost::shared_ptr< RobotRaconteur::ServiceDefinition > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceEntryDefinition_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::ServiceEntryDefinition *arg1 = (RobotRaconteur::ServiceEntryDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceEntryDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceEntryDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->Reset();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1ServiceEntryDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::ServiceEntryDefinition *arg1 = (RobotRaconteur::ServiceEntryDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceEntryDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceEntryDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MemberDefinition_1Name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::MemberDefinition *arg1 = (RobotRaconteur::MemberDefinition *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MemberDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::MemberDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MemberDefinition_1Name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::MemberDefinition *arg1 = (RobotRaconteur::MemberDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MemberDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::MemberDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->Name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MemberDefinition_1DocString_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::MemberDefinition *arg1 = (RobotRaconteur::MemberDefinition *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MemberDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::MemberDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->DocString = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MemberDefinition_1DocString_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::MemberDefinition *arg1 = (RobotRaconteur::MemberDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MemberDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::MemberDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->DocString);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1MemberDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *arg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > tempnull1 ;
  RobotRaconteur::MemberDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > **)&jarg1 : &tempnull1; 
  {
    try
    {
      result = (RobotRaconteur::MemberDefinition *)new RobotRaconteur::MemberDefinition((boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::MemberDefinition > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::MemberDefinition >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MemberDefinition_1noLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::MemberDefinition *arg1 = (RobotRaconteur::MemberDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > *smartarg1 = 0 ;
  RobotRaconteur::MemberDefinition_NoLock result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MemberDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::MemberDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (RobotRaconteur::MemberDefinition_NoLock)(arg1)->NoLock();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MemberDefinition_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::MemberDefinition *arg1 = (RobotRaconteur::MemberDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MemberDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::MemberDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->ToString();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MemberDefinition_1getServiceEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::MemberDefinition *arg1 = (RobotRaconteur::MemberDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MemberDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::MemberDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = RobotRaconteur_MemberDefinition_GetServiceEntry(arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MemberDefinition_1setServiceEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::MemberDefinition *arg1 = (RobotRaconteur::MemberDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MemberDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::MemberDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > **)&jarg2 : &tempnull2; 
  {
    try
    {
      RobotRaconteur_MemberDefinition_SetServiceEntry(arg1,(boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MemberDefinition_1Modifiers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::MemberDefinition *arg1 = (RobotRaconteur::MemberDefinition *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MemberDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::MemberDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->Modifiers = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MemberDefinition_1Modifiers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::MemberDefinition *arg1 = (RobotRaconteur::MemberDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > *smartarg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MemberDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::MemberDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< std::string > *)& ((arg1)->Modifiers);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MemberDefinition_1ParseInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::MemberDefinition *arg1 = (RobotRaconteur::MemberDefinition *) 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *arg2 = (RobotRaconteur::ServiceDefinitionParseInfo *) 0 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MemberDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::MemberDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::ServiceDefinitionParseInfo **)&jarg2; 
  if (arg1) (arg1)->ParseInfo = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MemberDefinition_1ParseInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::MemberDefinition *arg1 = (RobotRaconteur::MemberDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > *smartarg1 = 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MemberDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::MemberDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (RobotRaconteur::ServiceDefinitionParseInfo *)& ((arg1)->ParseInfo);
  *(RobotRaconteur::ServiceDefinitionParseInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MemberDefinition_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::MemberDefinition *arg1 = (RobotRaconteur::MemberDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MemberDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::MemberDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->Reset();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1MemberDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::MemberDefinition *arg1 = (RobotRaconteur::MemberDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MemberDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::MemberDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_PropertyDefinition_1Type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::PropertyDefinition *arg1 = (RobotRaconteur::PropertyDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::PropertyDefinition > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::PropertyDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::PropertyDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::TypeDefinition > **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->Type = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_PropertyDefinition_1Type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::PropertyDefinition *arg1 = (RobotRaconteur::PropertyDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::PropertyDefinition > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::PropertyDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::PropertyDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (boost::shared_ptr< RobotRaconteur::TypeDefinition > *) & ((arg1)->Type);
  *(boost::shared_ptr< RobotRaconteur::TypeDefinition > **)&jresult = *result ? new boost::shared_ptr< RobotRaconteur::TypeDefinition >(*result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1PropertyDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *arg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > tempnull1 ;
  RobotRaconteur::PropertyDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > **)&jarg1 : &tempnull1; 
  {
    try
    {
      result = (RobotRaconteur::PropertyDefinition *)new RobotRaconteur::PropertyDefinition((boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::PropertyDefinition > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::PropertyDefinition >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_PropertyDefinition_1toString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::PropertyDefinition *arg1 = (RobotRaconteur::PropertyDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::PropertyDefinition > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::PropertyDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::PropertyDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->ToString();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_PropertyDefinition_1toString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jstring jresult = 0 ;
  RobotRaconteur::PropertyDefinition *arg1 = (RobotRaconteur::PropertyDefinition *) 0 ;
  bool arg2 ;
  boost::shared_ptr< RobotRaconteur::PropertyDefinition > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::PropertyDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::PropertyDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      result = (arg1)->ToString(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_PropertyDefinition_1fromString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  RobotRaconteur::PropertyDefinition *arg1 = (RobotRaconteur::PropertyDefinition *) 0 ;
  std::string *arg2 = 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *arg3 = (RobotRaconteur::ServiceDefinitionParseInfo *) 0 ;
  boost::shared_ptr< RobotRaconteur::PropertyDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::PropertyDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::PropertyDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(RobotRaconteur::ServiceDefinitionParseInfo **)&jarg3; 
  {
    try
    {
      (arg1)->FromString((std::string const &)*arg2,(RobotRaconteur::ServiceDefinitionParseInfo const *)arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_PropertyDefinition_1fromString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::PropertyDefinition *arg1 = (RobotRaconteur::PropertyDefinition *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::PropertyDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::PropertyDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::PropertyDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      (arg1)->FromString((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1PropertyDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::PropertyDefinition *arg1 = (RobotRaconteur::PropertyDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::PropertyDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::PropertyDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::PropertyDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_FunctionDefinition_1ReturnType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::FunctionDefinition *arg1 = (RobotRaconteur::FunctionDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::FunctionDefinition > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::FunctionDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::FunctionDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::TypeDefinition > **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->ReturnType = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_FunctionDefinition_1ReturnType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::FunctionDefinition *arg1 = (RobotRaconteur::FunctionDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::FunctionDefinition > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::FunctionDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::FunctionDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (boost::shared_ptr< RobotRaconteur::TypeDefinition > *) & ((arg1)->ReturnType);
  *(boost::shared_ptr< RobotRaconteur::TypeDefinition > **)&jresult = *result ? new boost::shared_ptr< RobotRaconteur::TypeDefinition >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_FunctionDefinition_1Parameters_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::FunctionDefinition *arg1 = (RobotRaconteur::FunctionDefinition *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *arg2 = (std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *) 0 ;
  boost::shared_ptr< RobotRaconteur::FunctionDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::FunctionDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::FunctionDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > **)&jarg2; 
  if (arg1) (arg1)->Parameters = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_FunctionDefinition_1Parameters_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::FunctionDefinition *arg1 = (RobotRaconteur::FunctionDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::FunctionDefinition > *smartarg1 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::FunctionDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::FunctionDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *)& ((arg1)->Parameters);
  *(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1FunctionDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *arg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > tempnull1 ;
  RobotRaconteur::FunctionDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > **)&jarg1 : &tempnull1; 
  {
    try
    {
      result = (RobotRaconteur::FunctionDefinition *)new RobotRaconteur::FunctionDefinition((boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::FunctionDefinition > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::FunctionDefinition >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_FunctionDefinition_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::FunctionDefinition *arg1 = (RobotRaconteur::FunctionDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::FunctionDefinition > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::FunctionDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::FunctionDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->ToString();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_FunctionDefinition_1fromString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  RobotRaconteur::FunctionDefinition *arg1 = (RobotRaconteur::FunctionDefinition *) 0 ;
  std::string *arg2 = 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *arg3 = (RobotRaconteur::ServiceDefinitionParseInfo *) 0 ;
  boost::shared_ptr< RobotRaconteur::FunctionDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::FunctionDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::FunctionDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(RobotRaconteur::ServiceDefinitionParseInfo **)&jarg3; 
  {
    try
    {
      (arg1)->FromString((std::string const &)*arg2,(RobotRaconteur::ServiceDefinitionParseInfo const *)arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_FunctionDefinition_1fromString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::FunctionDefinition *arg1 = (RobotRaconteur::FunctionDefinition *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::FunctionDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::FunctionDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::FunctionDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      (arg1)->FromString((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_FunctionDefinition_1isGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::FunctionDefinition *arg1 = (RobotRaconteur::FunctionDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::FunctionDefinition > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::FunctionDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::FunctionDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)(arg1)->IsGenerator();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1FunctionDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::FunctionDefinition *arg1 = (RobotRaconteur::FunctionDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::FunctionDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::FunctionDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::FunctionDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_EventDefinition_1Parameters_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::EventDefinition *arg1 = (RobotRaconteur::EventDefinition *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *arg2 = (std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *) 0 ;
  boost::shared_ptr< RobotRaconteur::EventDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::EventDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::EventDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > **)&jarg2; 
  if (arg1) (arg1)->Parameters = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_EventDefinition_1Parameters_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::EventDefinition *arg1 = (RobotRaconteur::EventDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::EventDefinition > *smartarg1 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::EventDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::EventDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *)& ((arg1)->Parameters);
  *(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1EventDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *arg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > tempnull1 ;
  RobotRaconteur::EventDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > **)&jarg1 : &tempnull1; 
  {
    try
    {
      result = (RobotRaconteur::EventDefinition *)new RobotRaconteur::EventDefinition((boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::EventDefinition > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::EventDefinition >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_EventDefinition_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::EventDefinition *arg1 = (RobotRaconteur::EventDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::EventDefinition > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::EventDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::EventDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->ToString();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_EventDefinition_1fromString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  RobotRaconteur::EventDefinition *arg1 = (RobotRaconteur::EventDefinition *) 0 ;
  std::string *arg2 = 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *arg3 = (RobotRaconteur::ServiceDefinitionParseInfo *) 0 ;
  boost::shared_ptr< RobotRaconteur::EventDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::EventDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::EventDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(RobotRaconteur::ServiceDefinitionParseInfo **)&jarg3; 
  {
    try
    {
      (arg1)->FromString((std::string const &)*arg2,(RobotRaconteur::ServiceDefinitionParseInfo const *)arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_EventDefinition_1fromString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::EventDefinition *arg1 = (RobotRaconteur::EventDefinition *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::EventDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::EventDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::EventDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      (arg1)->FromString((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1EventDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::EventDefinition *arg1 = (RobotRaconteur::EventDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::EventDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::EventDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::EventDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ObjRefDefinition_1ObjectType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::ObjRefDefinition *arg1 = (RobotRaconteur::ObjRefDefinition *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::ObjRefDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ObjRefDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ObjRefDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->ObjectType = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ObjRefDefinition_1ObjectType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::ObjRefDefinition *arg1 = (RobotRaconteur::ObjRefDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ObjRefDefinition > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ObjRefDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ObjRefDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->ObjectType);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ObjRefDefinition_1ArrayType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::ObjRefDefinition *arg1 = (RobotRaconteur::ObjRefDefinition *) 0 ;
  RobotRaconteur::DataTypes_ArrayTypes arg2 ;
  boost::shared_ptr< RobotRaconteur::ObjRefDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ObjRefDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ObjRefDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (RobotRaconteur::DataTypes_ArrayTypes)jarg2; 
  if (arg1) (arg1)->ArrayType = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ObjRefDefinition_1ArrayType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::ObjRefDefinition *arg1 = (RobotRaconteur::ObjRefDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ObjRefDefinition > *smartarg1 = 0 ;
  RobotRaconteur::DataTypes_ArrayTypes result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ObjRefDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ObjRefDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (RobotRaconteur::DataTypes_ArrayTypes) ((arg1)->ArrayType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ObjRefDefinition_1ContainerType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::ObjRefDefinition *arg1 = (RobotRaconteur::ObjRefDefinition *) 0 ;
  RobotRaconteur::DataTypes_ContainerTypes arg2 ;
  boost::shared_ptr< RobotRaconteur::ObjRefDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ObjRefDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ObjRefDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (RobotRaconteur::DataTypes_ContainerTypes)jarg2; 
  if (arg1) (arg1)->ContainerType = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ObjRefDefinition_1ContainerType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::ObjRefDefinition *arg1 = (RobotRaconteur::ObjRefDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ObjRefDefinition > *smartarg1 = 0 ;
  RobotRaconteur::DataTypes_ContainerTypes result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ObjRefDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ObjRefDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (RobotRaconteur::DataTypes_ContainerTypes) ((arg1)->ContainerType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1ObjRefDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *arg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > tempnull1 ;
  RobotRaconteur::ObjRefDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > **)&jarg1 : &tempnull1; 
  {
    try
    {
      result = (RobotRaconteur::ObjRefDefinition *)new RobotRaconteur::ObjRefDefinition((boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::ObjRefDefinition > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::ObjRefDefinition >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ObjRefDefinition_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::ObjRefDefinition *arg1 = (RobotRaconteur::ObjRefDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ObjRefDefinition > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ObjRefDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ObjRefDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->ToString();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ObjRefDefinition_1fromString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  RobotRaconteur::ObjRefDefinition *arg1 = (RobotRaconteur::ObjRefDefinition *) 0 ;
  std::string *arg2 = 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *arg3 = (RobotRaconteur::ServiceDefinitionParseInfo *) 0 ;
  boost::shared_ptr< RobotRaconteur::ObjRefDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ObjRefDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ObjRefDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(RobotRaconteur::ServiceDefinitionParseInfo **)&jarg3; 
  {
    try
    {
      (arg1)->FromString((std::string const &)*arg2,(RobotRaconteur::ServiceDefinitionParseInfo const *)arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ObjRefDefinition_1fromString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::ObjRefDefinition *arg1 = (RobotRaconteur::ObjRefDefinition *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::ObjRefDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ObjRefDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ObjRefDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      (arg1)->FromString((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1ObjRefDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::ObjRefDefinition *arg1 = (RobotRaconteur::ObjRefDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ObjRefDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ObjRefDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ObjRefDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_PipeDefinition_1Type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::PipeDefinition *arg1 = (RobotRaconteur::PipeDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::PipeDefinition > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::PipeDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::PipeDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::TypeDefinition > **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->Type = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_PipeDefinition_1Type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::PipeDefinition *arg1 = (RobotRaconteur::PipeDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::PipeDefinition > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::PipeDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::PipeDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (boost::shared_ptr< RobotRaconteur::TypeDefinition > *) & ((arg1)->Type);
  *(boost::shared_ptr< RobotRaconteur::TypeDefinition > **)&jresult = *result ? new boost::shared_ptr< RobotRaconteur::TypeDefinition >(*result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1PipeDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *arg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > tempnull1 ;
  RobotRaconteur::PipeDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > **)&jarg1 : &tempnull1; 
  {
    try
    {
      result = (RobotRaconteur::PipeDefinition *)new RobotRaconteur::PipeDefinition((boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::PipeDefinition > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::PipeDefinition >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_PipeDefinition_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::PipeDefinition *arg1 = (RobotRaconteur::PipeDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::PipeDefinition > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::PipeDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::PipeDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->ToString();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_PipeDefinition_1fromString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  RobotRaconteur::PipeDefinition *arg1 = (RobotRaconteur::PipeDefinition *) 0 ;
  std::string *arg2 = 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *arg3 = (RobotRaconteur::ServiceDefinitionParseInfo *) 0 ;
  boost::shared_ptr< RobotRaconteur::PipeDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::PipeDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::PipeDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(RobotRaconteur::ServiceDefinitionParseInfo **)&jarg3; 
  {
    try
    {
      (arg1)->FromString((std::string const &)*arg2,(RobotRaconteur::ServiceDefinitionParseInfo const *)arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_PipeDefinition_1fromString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::PipeDefinition *arg1 = (RobotRaconteur::PipeDefinition *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::PipeDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::PipeDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::PipeDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      (arg1)->FromString((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1PipeDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::PipeDefinition *arg1 = (RobotRaconteur::PipeDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::PipeDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::PipeDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::PipeDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_CallbackDefinition_1ReturnType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::CallbackDefinition *arg1 = (RobotRaconteur::CallbackDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::CallbackDefinition > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::CallbackDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::CallbackDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::TypeDefinition > **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->ReturnType = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_CallbackDefinition_1ReturnType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::CallbackDefinition *arg1 = (RobotRaconteur::CallbackDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::CallbackDefinition > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::CallbackDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::CallbackDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (boost::shared_ptr< RobotRaconteur::TypeDefinition > *) & ((arg1)->ReturnType);
  *(boost::shared_ptr< RobotRaconteur::TypeDefinition > **)&jresult = *result ? new boost::shared_ptr< RobotRaconteur::TypeDefinition >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_CallbackDefinition_1Parameters_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::CallbackDefinition *arg1 = (RobotRaconteur::CallbackDefinition *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *arg2 = (std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *) 0 ;
  boost::shared_ptr< RobotRaconteur::CallbackDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::CallbackDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::CallbackDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > **)&jarg2; 
  if (arg1) (arg1)->Parameters = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_CallbackDefinition_1Parameters_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::CallbackDefinition *arg1 = (RobotRaconteur::CallbackDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::CallbackDefinition > *smartarg1 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::CallbackDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::CallbackDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > *)& ((arg1)->Parameters);
  *(std::vector< boost::shared_ptr< RobotRaconteur::TypeDefinition > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1CallbackDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *arg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > tempnull1 ;
  RobotRaconteur::CallbackDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > **)&jarg1 : &tempnull1; 
  {
    try
    {
      result = (RobotRaconteur::CallbackDefinition *)new RobotRaconteur::CallbackDefinition((boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::CallbackDefinition > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::CallbackDefinition >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_CallbackDefinition_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::CallbackDefinition *arg1 = (RobotRaconteur::CallbackDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::CallbackDefinition > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::CallbackDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::CallbackDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->ToString();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_CallbackDefinition_1fromString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  RobotRaconteur::CallbackDefinition *arg1 = (RobotRaconteur::CallbackDefinition *) 0 ;
  std::string *arg2 = 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *arg3 = (RobotRaconteur::ServiceDefinitionParseInfo *) 0 ;
  boost::shared_ptr< RobotRaconteur::CallbackDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::CallbackDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::CallbackDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(RobotRaconteur::ServiceDefinitionParseInfo **)&jarg3; 
  {
    try
    {
      (arg1)->FromString((std::string const &)*arg2,(RobotRaconteur::ServiceDefinitionParseInfo const *)arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_CallbackDefinition_1fromString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::CallbackDefinition *arg1 = (RobotRaconteur::CallbackDefinition *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::CallbackDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::CallbackDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::CallbackDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      (arg1)->FromString((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1CallbackDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::CallbackDefinition *arg1 = (RobotRaconteur::CallbackDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::CallbackDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::CallbackDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::CallbackDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WireDefinition_1Type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WireDefinition *arg1 = (RobotRaconteur::WireDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WireDefinition > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WireDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::WireDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::TypeDefinition > **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->Type = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WireDefinition_1Type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WireDefinition *arg1 = (RobotRaconteur::WireDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::WireDefinition > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WireDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::WireDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (boost::shared_ptr< RobotRaconteur::TypeDefinition > *) & ((arg1)->Type);
  *(boost::shared_ptr< RobotRaconteur::TypeDefinition > **)&jresult = *result ? new boost::shared_ptr< RobotRaconteur::TypeDefinition >(*result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WireDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *arg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > tempnull1 ;
  RobotRaconteur::WireDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > **)&jarg1 : &tempnull1; 
  {
    try
    {
      result = (RobotRaconteur::WireDefinition *)new RobotRaconteur::WireDefinition((boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::WireDefinition > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::WireDefinition >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WireDefinition_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::WireDefinition *arg1 = (RobotRaconteur::WireDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::WireDefinition > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WireDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::WireDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->ToString();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WireDefinition_1fromString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  RobotRaconteur::WireDefinition *arg1 = (RobotRaconteur::WireDefinition *) 0 ;
  std::string *arg2 = 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *arg3 = (RobotRaconteur::ServiceDefinitionParseInfo *) 0 ;
  boost::shared_ptr< RobotRaconteur::WireDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WireDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::WireDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(RobotRaconteur::ServiceDefinitionParseInfo **)&jarg3; 
  {
    try
    {
      (arg1)->FromString((std::string const &)*arg2,(RobotRaconteur::ServiceDefinitionParseInfo const *)arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WireDefinition_1fromString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::WireDefinition *arg1 = (RobotRaconteur::WireDefinition *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WireDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WireDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::WireDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      (arg1)->FromString((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WireDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WireDefinition *arg1 = (RobotRaconteur::WireDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::WireDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WireDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::WireDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MemoryDefinition_1Type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::MemoryDefinition *arg1 = (RobotRaconteur::MemoryDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::MemoryDefinition > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MemoryDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::MemoryDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::TypeDefinition > **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->Type = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MemoryDefinition_1Type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::MemoryDefinition *arg1 = (RobotRaconteur::MemoryDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::MemoryDefinition > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MemoryDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::MemoryDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (boost::shared_ptr< RobotRaconteur::TypeDefinition > *) & ((arg1)->Type);
  *(boost::shared_ptr< RobotRaconteur::TypeDefinition > **)&jresult = *result ? new boost::shared_ptr< RobotRaconteur::TypeDefinition >(*result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1MemoryDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *arg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > tempnull1 ;
  RobotRaconteur::MemoryDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > **)&jarg1 : &tempnull1; 
  {
    try
    {
      result = (RobotRaconteur::MemoryDefinition *)new RobotRaconteur::MemoryDefinition((boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::MemoryDefinition > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::MemoryDefinition >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MemoryDefinition_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::MemoryDefinition *arg1 = (RobotRaconteur::MemoryDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::MemoryDefinition > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MemoryDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::MemoryDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->ToString();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MemoryDefinition_1fromString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  RobotRaconteur::MemoryDefinition *arg1 = (RobotRaconteur::MemoryDefinition *) 0 ;
  std::string *arg2 = 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *arg3 = (RobotRaconteur::ServiceDefinitionParseInfo *) 0 ;
  boost::shared_ptr< RobotRaconteur::MemoryDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MemoryDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::MemoryDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(RobotRaconteur::ServiceDefinitionParseInfo **)&jarg3; 
  {
    try
    {
      (arg1)->FromString((std::string const &)*arg2,(RobotRaconteur::ServiceDefinitionParseInfo const *)arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MemoryDefinition_1fromString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::MemoryDefinition *arg1 = (RobotRaconteur::MemoryDefinition *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::MemoryDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MemoryDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::MemoryDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      (arg1)->FromString((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1MemoryDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::MemoryDefinition *arg1 = (RobotRaconteur::MemoryDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::MemoryDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MemoryDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::MemoryDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TypeDefinition_1Name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::TypeDefinition *arg1 = (RobotRaconteur::TypeDefinition *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TypeDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::TypeDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TypeDefinition_1Name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::TypeDefinition *arg1 = (RobotRaconteur::TypeDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TypeDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::TypeDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->Name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TypeDefinition_1Type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::TypeDefinition *arg1 = (RobotRaconteur::TypeDefinition *) 0 ;
  RobotRaconteur::DataTypes arg2 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TypeDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::TypeDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (RobotRaconteur::DataTypes)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TypeDefinition_1Type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::TypeDefinition *arg1 = (RobotRaconteur::TypeDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *smartarg1 = 0 ;
  RobotRaconteur::DataTypes result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TypeDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::TypeDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (RobotRaconteur::DataTypes) ((arg1)->Type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TypeDefinition_1TypeString_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::TypeDefinition *arg1 = (RobotRaconteur::TypeDefinition *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TypeDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::TypeDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->TypeString = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TypeDefinition_1TypeString_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::TypeDefinition *arg1 = (RobotRaconteur::TypeDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TypeDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::TypeDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->TypeString);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TypeDefinition_1ArrayType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::TypeDefinition *arg1 = (RobotRaconteur::TypeDefinition *) 0 ;
  RobotRaconteur::DataTypes_ArrayTypes arg2 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TypeDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::TypeDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (RobotRaconteur::DataTypes_ArrayTypes)jarg2; 
  if (arg1) (arg1)->ArrayType = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TypeDefinition_1ArrayType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::TypeDefinition *arg1 = (RobotRaconteur::TypeDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *smartarg1 = 0 ;
  RobotRaconteur::DataTypes_ArrayTypes result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TypeDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::TypeDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (RobotRaconteur::DataTypes_ArrayTypes) ((arg1)->ArrayType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TypeDefinition_1ArrayVarLength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RobotRaconteur::TypeDefinition *arg1 = (RobotRaconteur::TypeDefinition *) 0 ;
  bool arg2 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TypeDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::TypeDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ArrayVarLength = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TypeDefinition_1ArrayVarLength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::TypeDefinition *arg1 = (RobotRaconteur::TypeDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TypeDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::TypeDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool) ((arg1)->ArrayVarLength);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TypeDefinition_1ArrayLength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::TypeDefinition *arg1 = (RobotRaconteur::TypeDefinition *) 0 ;
  std::vector< int32_t > *arg2 = (std::vector< int32_t > *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TypeDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::TypeDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< int32_t > **)&jarg2; 
  if (arg1) (arg1)->ArrayLength = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TypeDefinition_1ArrayLength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::TypeDefinition *arg1 = (RobotRaconteur::TypeDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *smartarg1 = 0 ;
  std::vector< int32_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TypeDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::TypeDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< int32_t > *)& ((arg1)->ArrayLength);
  *(std::vector< int32_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TypeDefinition_1ContainerType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::TypeDefinition *arg1 = (RobotRaconteur::TypeDefinition *) 0 ;
  RobotRaconteur::DataTypes_ContainerTypes arg2 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TypeDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::TypeDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (RobotRaconteur::DataTypes_ContainerTypes)jarg2; 
  if (arg1) (arg1)->ContainerType = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TypeDefinition_1ContainerType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::TypeDefinition *arg1 = (RobotRaconteur::TypeDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *smartarg1 = 0 ;
  RobotRaconteur::DataTypes_ContainerTypes result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TypeDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::TypeDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (RobotRaconteur::DataTypes_ContainerTypes) ((arg1)->ContainerType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1TypeDefinition_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::TypeDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::TypeDefinition *)new RobotRaconteur::TypeDefinition();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::TypeDefinition > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::TypeDefinition >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TypeDefinition_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::TypeDefinition *arg1 = (RobotRaconteur::TypeDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TypeDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::TypeDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->ToString();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TypeDefinition_1fromString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  RobotRaconteur::TypeDefinition *arg1 = (RobotRaconteur::TypeDefinition *) 0 ;
  std::string *arg2 = 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *arg3 = (RobotRaconteur::ServiceDefinitionParseInfo *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TypeDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::TypeDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(RobotRaconteur::ServiceDefinitionParseInfo **)&jarg3; 
  {
    try
    {
      (arg1)->FromString((std::string const &)*arg2,(RobotRaconteur::ServiceDefinitionParseInfo const *)arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TypeDefinition_1fromString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::TypeDefinition *arg1 = (RobotRaconteur::TypeDefinition *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TypeDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::TypeDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      (arg1)->FromString((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TypeDefinition_1dataTypeFromString(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  RobotRaconteur::DataTypes result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try
    {
      result = (RobotRaconteur::DataTypes)RobotRaconteur::TypeDefinition::DataTypeFromString((std::string const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TypeDefinition_1stringFromDataType(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  RobotRaconteur::DataTypes arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (RobotRaconteur::DataTypes)jarg1; 
  {
    try
    {
      result = RobotRaconteur::TypeDefinition::StringFromDataType(arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TypeDefinition_1getMember(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::TypeDefinition *arg1 = (RobotRaconteur::TypeDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TypeDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::TypeDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = RobotRaconteur_TypeDefinition_GetMember(arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::MemberDefinition > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::MemberDefinition >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TypeDefinition_1setMember(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::TypeDefinition *arg1 = (RobotRaconteur::TypeDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TypeDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::TypeDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::MemberDefinition > **)&jarg2 : &tempnull2; 
  {
    try
    {
      RobotRaconteur_TypeDefinition_SetMember(arg1,(boost::shared_ptr< RobotRaconteur::MemberDefinition > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TypeDefinition_1copyTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::TypeDefinition *arg1 = (RobotRaconteur::TypeDefinition *) 0 ;
  RobotRaconteur::TypeDefinition *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition const > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr< const RobotRaconteur::TypeDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::TypeDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (RobotRaconteur::TypeDefinition *)((*(boost::shared_ptr<  RobotRaconteur::TypeDefinition > **)&jarg2) ? (*(boost::shared_ptr<  RobotRaconteur::TypeDefinition > **)&jarg2)->get() : 0);
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::TypeDefinition & reference is null");
    return ;
  } 
  {
    try
    {
      ((RobotRaconteur::TypeDefinition const *)arg1)->CopyTo(*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TypeDefinition_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::TypeDefinition *arg1 = (RobotRaconteur::TypeDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition const > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const RobotRaconteur::TypeDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::TypeDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = ((RobotRaconteur::TypeDefinition const *)arg1)->Clone();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::TypeDefinition > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::TypeDefinition >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TypeDefinition_1rename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::TypeDefinition *arg1 = (RobotRaconteur::TypeDefinition *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TypeDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::TypeDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      (arg1)->Rename((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TypeDefinition_1removeContainers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::TypeDefinition *arg1 = (RobotRaconteur::TypeDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TypeDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::TypeDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->RemoveContainers();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TypeDefinition_1removeArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::TypeDefinition *arg1 = (RobotRaconteur::TypeDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TypeDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::TypeDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->RemoveArray();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TypeDefinition_1qualifyTypeStringWithUsing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::TypeDefinition *arg1 = (RobotRaconteur::TypeDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TypeDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::TypeDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->QualifyTypeStringWithUsing();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TypeDefinition_1unqualifyTypeStringWithUsing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::TypeDefinition *arg1 = (RobotRaconteur::TypeDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TypeDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::TypeDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->UnqualifyTypeStringWithUsing();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TypeDefinition_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::TypeDefinition *arg1 = (RobotRaconteur::TypeDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TypeDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::TypeDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->Reset();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1TypeDefinition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::TypeDefinition *arg1 = 0 ;
  RobotRaconteur::TypeDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  arg1 = (RobotRaconteur::TypeDefinition *)((*(boost::shared_ptr< const RobotRaconteur::TypeDefinition > **)&jarg1) ? (*(boost::shared_ptr< const RobotRaconteur::TypeDefinition > **)&jarg1)->get() : 0);
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::TypeDefinition const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (RobotRaconteur::TypeDefinition *)new RobotRaconteur::TypeDefinition((RobotRaconteur::TypeDefinition const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::TypeDefinition > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::TypeDefinition >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1TypeDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::TypeDefinition *arg1 = (RobotRaconteur::TypeDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TypeDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::TypeDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1UsingDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::UsingDefinition *arg1 = (RobotRaconteur::UsingDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::UsingDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::UsingDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::UsingDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_UsingDefinition_1QualifiedName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::UsingDefinition *arg1 = (RobotRaconteur::UsingDefinition *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::UsingDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::UsingDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::UsingDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->QualifiedName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_UsingDefinition_1QualifiedName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::UsingDefinition *arg1 = (RobotRaconteur::UsingDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::UsingDefinition > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::UsingDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::UsingDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->QualifiedName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_UsingDefinition_1UnqualifiedName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::UsingDefinition *arg1 = (RobotRaconteur::UsingDefinition *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::UsingDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::UsingDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::UsingDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->UnqualifiedName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_UsingDefinition_1UnqualifiedName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::UsingDefinition *arg1 = (RobotRaconteur::UsingDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::UsingDefinition > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::UsingDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::UsingDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->UnqualifiedName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_UsingDefinition_1ParseInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::UsingDefinition *arg1 = (RobotRaconteur::UsingDefinition *) 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *arg2 = (RobotRaconteur::ServiceDefinitionParseInfo *) 0 ;
  boost::shared_ptr< RobotRaconteur::UsingDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::UsingDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::UsingDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::ServiceDefinitionParseInfo **)&jarg2; 
  if (arg1) (arg1)->ParseInfo = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_UsingDefinition_1ParseInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::UsingDefinition *arg1 = (RobotRaconteur::UsingDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::UsingDefinition > *smartarg1 = 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::UsingDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::UsingDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (RobotRaconteur::ServiceDefinitionParseInfo *)& ((arg1)->ParseInfo);
  *(RobotRaconteur::ServiceDefinitionParseInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_UsingDefinition_1getService(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::UsingDefinition *arg1 = (RobotRaconteur::UsingDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::UsingDefinition > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::UsingDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::UsingDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = RobotRaconteur_UsingDefinition_GetService(arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::ServiceDefinition > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::ServiceDefinition >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_UsingDefinition_1setService(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::UsingDefinition *arg1 = (RobotRaconteur::UsingDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::UsingDefinition > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::UsingDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::UsingDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::ServiceDefinition > **)&jarg2 : &tempnull2; 
  {
    try
    {
      RobotRaconteur_UsingDefinition_SetService(arg1,(boost::shared_ptr< RobotRaconteur::ServiceDefinition > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1UsingDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *arg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > tempnull1 ;
  RobotRaconteur::UsingDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::ServiceDefinition > **)&jarg1 : &tempnull1; 
  {
    try
    {
      result = (RobotRaconteur::UsingDefinition *)new RobotRaconteur::UsingDefinition((boost::shared_ptr< RobotRaconteur::ServiceDefinition > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::UsingDefinition > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::UsingDefinition >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_UsingDefinition_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::UsingDefinition *arg1 = (RobotRaconteur::UsingDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::UsingDefinition > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::UsingDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::UsingDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->ToString();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_UsingDefinition_1fromString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  RobotRaconteur::UsingDefinition *arg1 = (RobotRaconteur::UsingDefinition *) 0 ;
  std::string *arg2 = 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *arg3 = (RobotRaconteur::ServiceDefinitionParseInfo *) 0 ;
  boost::shared_ptr< RobotRaconteur::UsingDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::UsingDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::UsingDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(RobotRaconteur::ServiceDefinitionParseInfo **)&jarg3; 
  {
    try
    {
      (arg1)->FromString((std::string const &)*arg2,(RobotRaconteur::ServiceDefinitionParseInfo const *)arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_UsingDefinition_1fromString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::UsingDefinition *arg1 = (RobotRaconteur::UsingDefinition *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::UsingDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::UsingDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::UsingDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      (arg1)->FromString((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ConstantDefinition_1StructField_1Name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::ConstantDefinition_StructField *arg1 = (RobotRaconteur::ConstantDefinition_StructField *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ConstantDefinition_StructField **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ConstantDefinition_1StructField_1Name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::ConstantDefinition_StructField *arg1 = (RobotRaconteur::ConstantDefinition_StructField *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ConstantDefinition_StructField **)&jarg1; 
  result = (std::string *) & ((arg1)->Name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ConstantDefinition_1StructField_1ConstantRefName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::ConstantDefinition_StructField *arg1 = (RobotRaconteur::ConstantDefinition_StructField *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ConstantDefinition_StructField **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->ConstantRefName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ConstantDefinition_1StructField_1ConstantRefName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::ConstantDefinition_StructField *arg1 = (RobotRaconteur::ConstantDefinition_StructField *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ConstantDefinition_StructField **)&jarg1; 
  result = (std::string *) & ((arg1)->ConstantRefName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1ConstantDefinition_1StructField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::ConstantDefinition_StructField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::ConstantDefinition_StructField *)new RobotRaconteur::ConstantDefinition_StructField();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::ConstantDefinition_StructField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1ConstantDefinition_1StructField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::ConstantDefinition_StructField *arg1 = (RobotRaconteur::ConstantDefinition_StructField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::ConstantDefinition_StructField **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1ConstantDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::ConstantDefinition *arg1 = (RobotRaconteur::ConstantDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ConstantDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ConstantDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ConstantDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ConstantDefinition_1Name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::ConstantDefinition *arg1 = (RobotRaconteur::ConstantDefinition *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::ConstantDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ConstantDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ConstantDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ConstantDefinition_1Name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::ConstantDefinition *arg1 = (RobotRaconteur::ConstantDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ConstantDefinition > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ConstantDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ConstantDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->Name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ConstantDefinition_1DocString_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::ConstantDefinition *arg1 = (RobotRaconteur::ConstantDefinition *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::ConstantDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ConstantDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ConstantDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->DocString = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ConstantDefinition_1DocString_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::ConstantDefinition *arg1 = (RobotRaconteur::ConstantDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ConstantDefinition > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ConstantDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ConstantDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->DocString);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ConstantDefinition_1Type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::ConstantDefinition *arg1 = (RobotRaconteur::ConstantDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::ConstantDefinition > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ConstantDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ConstantDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::TypeDefinition > **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->Type = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ConstantDefinition_1Type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ConstantDefinition *arg1 = (RobotRaconteur::ConstantDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ConstantDefinition > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ConstantDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ConstantDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (boost::shared_ptr< RobotRaconteur::TypeDefinition > *) & ((arg1)->Type);
  *(boost::shared_ptr< RobotRaconteur::TypeDefinition > **)&jresult = *result ? new boost::shared_ptr< RobotRaconteur::TypeDefinition >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ConstantDefinition_1Value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::ConstantDefinition *arg1 = (RobotRaconteur::ConstantDefinition *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::ConstantDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ConstantDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ConstantDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Value = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ConstantDefinition_1Value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::ConstantDefinition *arg1 = (RobotRaconteur::ConstantDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ConstantDefinition > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ConstantDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ConstantDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->Value);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ConstantDefinition_1ParseInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::ConstantDefinition *arg1 = (RobotRaconteur::ConstantDefinition *) 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *arg2 = (RobotRaconteur::ServiceDefinitionParseInfo *) 0 ;
  boost::shared_ptr< RobotRaconteur::ConstantDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ConstantDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ConstantDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::ServiceDefinitionParseInfo **)&jarg2; 
  if (arg1) (arg1)->ParseInfo = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ConstantDefinition_1ParseInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ConstantDefinition *arg1 = (RobotRaconteur::ConstantDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ConstantDefinition > *smartarg1 = 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ConstantDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ConstantDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (RobotRaconteur::ServiceDefinitionParseInfo *)& ((arg1)->ParseInfo);
  *(RobotRaconteur::ServiceDefinitionParseInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ConstantDefinition_1getService(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ConstantDefinition *arg1 = (RobotRaconteur::ConstantDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ConstantDefinition > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ConstantDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ConstantDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = RobotRaconteur_ConstantDefinition_GetService(arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::ServiceDefinition > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::ServiceDefinition >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ConstantDefinition_1setService(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::ConstantDefinition *arg1 = (RobotRaconteur::ConstantDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::ConstantDefinition > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ConstantDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ConstantDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::ServiceDefinition > **)&jarg2 : &tempnull2; 
  {
    try
    {
      RobotRaconteur_ConstantDefinition_SetService(arg1,(boost::shared_ptr< RobotRaconteur::ServiceDefinition > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ConstantDefinition_1getServiceEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ConstantDefinition *arg1 = (RobotRaconteur::ConstantDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ConstantDefinition > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ConstantDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ConstantDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = RobotRaconteur_ConstantDefinition_GetServiceEntry(arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ConstantDefinition_1setServiceEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::ConstantDefinition *arg1 = (RobotRaconteur::ConstantDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::ConstantDefinition > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ConstantDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ConstantDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > **)&jarg2 : &tempnull2; 
  {
    try
    {
      RobotRaconteur_ConstantDefinition_SetServiceEntry(arg1,(boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1ConstantDefinition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *arg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > tempnull1 ;
  RobotRaconteur::ConstantDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::ServiceDefinition > **)&jarg1 : &tempnull1; 
  {
    try
    {
      result = (RobotRaconteur::ConstantDefinition *)new RobotRaconteur::ConstantDefinition((boost::shared_ptr< RobotRaconteur::ServiceDefinition > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::ConstantDefinition > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::ConstantDefinition >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1ConstantDefinition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *arg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > tempnull1 ;
  RobotRaconteur::ConstantDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > **)&jarg1 : &tempnull1; 
  {
    try
    {
      result = (RobotRaconteur::ConstantDefinition *)new RobotRaconteur::ConstantDefinition((boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::ConstantDefinition > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::ConstantDefinition >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ConstantDefinition_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::ConstantDefinition *arg1 = (RobotRaconteur::ConstantDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ConstantDefinition > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ConstantDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ConstantDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->ToString();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ConstantDefinition_1fromString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  RobotRaconteur::ConstantDefinition *arg1 = (RobotRaconteur::ConstantDefinition *) 0 ;
  std::string *arg2 = 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *arg3 = (RobotRaconteur::ServiceDefinitionParseInfo *) 0 ;
  boost::shared_ptr< RobotRaconteur::ConstantDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ConstantDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ConstantDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(RobotRaconteur::ServiceDefinitionParseInfo **)&jarg3; 
  {
    try
    {
      (arg1)->FromString((std::string const &)*arg2,(RobotRaconteur::ServiceDefinitionParseInfo const *)arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ConstantDefinition_1fromString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::ConstantDefinition *arg1 = (RobotRaconteur::ConstantDefinition *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::ConstantDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ConstantDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ConstantDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      (arg1)->FromString((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ConstantDefinition_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::ConstantDefinition *arg1 = (RobotRaconteur::ConstantDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ConstantDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ConstantDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ConstantDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->Reset();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ConstantDefinition_1verifyValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::ConstantDefinition *arg1 = (RobotRaconteur::ConstantDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ConstantDefinition > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ConstantDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ConstantDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)(arg1)->VerifyValue();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ConstantDefinition_1valueToString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::ConstantDefinition *arg1 = (RobotRaconteur::ConstantDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ConstantDefinition > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ConstantDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ConstantDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->ValueToString();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ConstantDefinition_1valueToStructFields(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ConstantDefinition *arg1 = (RobotRaconteur::ConstantDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ConstantDefinition > *smartarg1 = 0 ;
  std::vector< RobotRaconteur::ConstantDefinition_StructField > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ConstantDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ConstantDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->ValueToStructFields();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::ConstantDefinition_StructField > **)&jresult = new std::vector< RobotRaconteur::ConstantDefinition_StructField >((const std::vector< RobotRaconteur::ConstantDefinition_StructField > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ConstantDefinition_1unescapeString(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try
    {
      result = RobotRaconteur::ConstantDefinition::UnescapeString((std::string const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ConstantDefinition_1escapeString(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try
    {
      result = RobotRaconteur::ConstantDefinition::EscapeString((std::string const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1EnumDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::EnumDefinition *arg1 = (RobotRaconteur::EnumDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::EnumDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::EnumDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::EnumDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_EnumDefinition_1Name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::EnumDefinition *arg1 = (RobotRaconteur::EnumDefinition *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::EnumDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::EnumDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::EnumDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_EnumDefinition_1Name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::EnumDefinition *arg1 = (RobotRaconteur::EnumDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::EnumDefinition > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::EnumDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::EnumDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->Name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_EnumDefinition_1DocString_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::EnumDefinition *arg1 = (RobotRaconteur::EnumDefinition *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::EnumDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::EnumDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::EnumDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->DocString = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_EnumDefinition_1DocString_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::EnumDefinition *arg1 = (RobotRaconteur::EnumDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::EnumDefinition > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::EnumDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::EnumDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->DocString);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_EnumDefinition_1Values_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::EnumDefinition *arg1 = (RobotRaconteur::EnumDefinition *) 0 ;
  std::vector< RobotRaconteur::EnumDefinitionValue > *arg2 = (std::vector< RobotRaconteur::EnumDefinitionValue > *) 0 ;
  boost::shared_ptr< RobotRaconteur::EnumDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::EnumDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::EnumDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< RobotRaconteur::EnumDefinitionValue > **)&jarg2; 
  if (arg1) (arg1)->Values = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_EnumDefinition_1Values_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::EnumDefinition *arg1 = (RobotRaconteur::EnumDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::EnumDefinition > *smartarg1 = 0 ;
  std::vector< RobotRaconteur::EnumDefinitionValue > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::EnumDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::EnumDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< RobotRaconteur::EnumDefinitionValue > *)& ((arg1)->Values);
  *(std::vector< RobotRaconteur::EnumDefinitionValue > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_EnumDefinition_1ParseInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::EnumDefinition *arg1 = (RobotRaconteur::EnumDefinition *) 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *arg2 = (RobotRaconteur::ServiceDefinitionParseInfo *) 0 ;
  boost::shared_ptr< RobotRaconteur::EnumDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::EnumDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::EnumDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::ServiceDefinitionParseInfo **)&jarg2; 
  if (arg1) (arg1)->ParseInfo = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_EnumDefinition_1ParseInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::EnumDefinition *arg1 = (RobotRaconteur::EnumDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::EnumDefinition > *smartarg1 = 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::EnumDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::EnumDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (RobotRaconteur::ServiceDefinitionParseInfo *)& ((arg1)->ParseInfo);
  *(RobotRaconteur::ServiceDefinitionParseInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_EnumDefinition_1getService(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::EnumDefinition *arg1 = (RobotRaconteur::EnumDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::EnumDefinition > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::EnumDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::EnumDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = RobotRaconteur_EnumDefinition_GetService(arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::ServiceDefinition > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::ServiceDefinition >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_EnumDefinition_1setService(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::EnumDefinition *arg1 = (RobotRaconteur::EnumDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::EnumDefinition > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::EnumDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::EnumDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::ServiceDefinition > **)&jarg2 : &tempnull2; 
  {
    try
    {
      RobotRaconteur_EnumDefinition_SetService(arg1,(boost::shared_ptr< RobotRaconteur::ServiceDefinition > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1EnumDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *arg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > tempnull1 ;
  RobotRaconteur::EnumDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::ServiceDefinition > **)&jarg1 : &tempnull1; 
  {
    try
    {
      result = (RobotRaconteur::EnumDefinition *)new RobotRaconteur::EnumDefinition((boost::shared_ptr< RobotRaconteur::ServiceDefinition > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::EnumDefinition > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::EnumDefinition >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_EnumDefinition_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::EnumDefinition *arg1 = (RobotRaconteur::EnumDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::EnumDefinition > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::EnumDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::EnumDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->ToString();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_EnumDefinition_1fromString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  RobotRaconteur::EnumDefinition *arg1 = (RobotRaconteur::EnumDefinition *) 0 ;
  std::string *arg2 = 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *arg3 = (RobotRaconteur::ServiceDefinitionParseInfo *) 0 ;
  boost::shared_ptr< RobotRaconteur::EnumDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::EnumDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::EnumDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(RobotRaconteur::ServiceDefinitionParseInfo **)&jarg3; 
  {
    try
    {
      (arg1)->FromString((std::string const &)*arg2,(RobotRaconteur::ServiceDefinitionParseInfo const *)arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_EnumDefinition_1fromString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::EnumDefinition *arg1 = (RobotRaconteur::EnumDefinition *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::EnumDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::EnumDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::EnumDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      (arg1)->FromString((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_EnumDefinition_1verifyValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::EnumDefinition *arg1 = (RobotRaconteur::EnumDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::EnumDefinition > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::EnumDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::EnumDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)(arg1)->VerifyValues();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_EnumDefinition_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::EnumDefinition *arg1 = (RobotRaconteur::EnumDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::EnumDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::EnumDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::EnumDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->Reset();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1EnumDefinitionValue(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::EnumDefinitionValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::EnumDefinitionValue *)new RobotRaconteur::EnumDefinitionValue();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::EnumDefinitionValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_EnumDefinitionValue_1Name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::EnumDefinitionValue *arg1 = (RobotRaconteur::EnumDefinitionValue *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::EnumDefinitionValue **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_EnumDefinitionValue_1Name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::EnumDefinitionValue *arg1 = (RobotRaconteur::EnumDefinitionValue *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::EnumDefinitionValue **)&jarg1; 
  result = (std::string *) & ((arg1)->Name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_EnumDefinitionValue_1DocString_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::EnumDefinitionValue *arg1 = (RobotRaconteur::EnumDefinitionValue *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::EnumDefinitionValue **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->DocString = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_EnumDefinitionValue_1DocString_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::EnumDefinitionValue *arg1 = (RobotRaconteur::EnumDefinitionValue *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::EnumDefinitionValue **)&jarg1; 
  result = (std::string *) & ((arg1)->DocString);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_EnumDefinitionValue_1Value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::EnumDefinitionValue *arg1 = (RobotRaconteur::EnumDefinitionValue *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::EnumDefinitionValue **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->Value = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_EnumDefinitionValue_1Value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::EnumDefinitionValue *arg1 = (RobotRaconteur::EnumDefinitionValue *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::EnumDefinitionValue **)&jarg1; 
  result = (int32_t) ((arg1)->Value);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_EnumDefinitionValue_1ImplicitValue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RobotRaconteur::EnumDefinitionValue *arg1 = (RobotRaconteur::EnumDefinitionValue *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::EnumDefinitionValue **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ImplicitValue = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_EnumDefinitionValue_1ImplicitValue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::EnumDefinitionValue *arg1 = (RobotRaconteur::EnumDefinitionValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::EnumDefinitionValue **)&jarg1; 
  result = (bool) ((arg1)->ImplicitValue);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_EnumDefinitionValue_1HexValue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RobotRaconteur::EnumDefinitionValue *arg1 = (RobotRaconteur::EnumDefinitionValue *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::EnumDefinitionValue **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->HexValue = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_EnumDefinitionValue_1HexValue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::EnumDefinitionValue *arg1 = (RobotRaconteur::EnumDefinitionValue *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::EnumDefinitionValue **)&jarg1; 
  result = (bool) ((arg1)->HexValue);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1EnumDefinitionValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::EnumDefinitionValue *arg1 = (RobotRaconteur::EnumDefinitionValue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::EnumDefinitionValue **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1ExceptionDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::ExceptionDefinition *arg1 = (RobotRaconteur::ExceptionDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ExceptionDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ExceptionDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ExceptionDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ExceptionDefinition_1Name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::ExceptionDefinition *arg1 = (RobotRaconteur::ExceptionDefinition *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::ExceptionDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ExceptionDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ExceptionDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ExceptionDefinition_1Name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::ExceptionDefinition *arg1 = (RobotRaconteur::ExceptionDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ExceptionDefinition > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ExceptionDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ExceptionDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->Name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ExceptionDefinition_1DocString_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::ExceptionDefinition *arg1 = (RobotRaconteur::ExceptionDefinition *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::ExceptionDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ExceptionDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ExceptionDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->DocString = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ExceptionDefinition_1DocString_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::ExceptionDefinition *arg1 = (RobotRaconteur::ExceptionDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ExceptionDefinition > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ExceptionDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ExceptionDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->DocString);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ExceptionDefinition_1ParseInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::ExceptionDefinition *arg1 = (RobotRaconteur::ExceptionDefinition *) 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *arg2 = (RobotRaconteur::ServiceDefinitionParseInfo *) 0 ;
  boost::shared_ptr< RobotRaconteur::ExceptionDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ExceptionDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ExceptionDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::ServiceDefinitionParseInfo **)&jarg2; 
  if (arg1) (arg1)->ParseInfo = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ExceptionDefinition_1ParseInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ExceptionDefinition *arg1 = (RobotRaconteur::ExceptionDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ExceptionDefinition > *smartarg1 = 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ExceptionDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ExceptionDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  result = (RobotRaconteur::ServiceDefinitionParseInfo *)& ((arg1)->ParseInfo);
  *(RobotRaconteur::ServiceDefinitionParseInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ExceptionDefinition_1getService(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ExceptionDefinition *arg1 = (RobotRaconteur::ExceptionDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ExceptionDefinition > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ExceptionDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ExceptionDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = RobotRaconteur_ExceptionDefinition_GetService(arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::ServiceDefinition > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::ServiceDefinition >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ExceptionDefinition_1setService(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::ExceptionDefinition *arg1 = (RobotRaconteur::ExceptionDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::ExceptionDefinition > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ExceptionDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ExceptionDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::ServiceDefinition > **)&jarg2 : &tempnull2; 
  {
    try
    {
      RobotRaconteur_ExceptionDefinition_SetService(arg1,(boost::shared_ptr< RobotRaconteur::ServiceDefinition > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1ExceptionDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *arg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > tempnull1 ;
  RobotRaconteur::ExceptionDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::ServiceDefinition > **)&jarg1 : &tempnull1; 
  {
    try
    {
      result = (RobotRaconteur::ExceptionDefinition *)new RobotRaconteur::ExceptionDefinition((boost::shared_ptr< RobotRaconteur::ServiceDefinition > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::ExceptionDefinition > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::ExceptionDefinition >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ExceptionDefinition_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::ExceptionDefinition *arg1 = (RobotRaconteur::ExceptionDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ExceptionDefinition > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ExceptionDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ExceptionDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->ToString();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ExceptionDefinition_1fromString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  RobotRaconteur::ExceptionDefinition *arg1 = (RobotRaconteur::ExceptionDefinition *) 0 ;
  std::string *arg2 = 0 ;
  RobotRaconteur::ServiceDefinitionParseInfo *arg3 = (RobotRaconteur::ServiceDefinitionParseInfo *) 0 ;
  boost::shared_ptr< RobotRaconteur::ExceptionDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ExceptionDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ExceptionDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(RobotRaconteur::ServiceDefinitionParseInfo **)&jarg3; 
  {
    try
    {
      (arg1)->FromString((std::string const &)*arg2,(RobotRaconteur::ServiceDefinitionParseInfo const *)arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ExceptionDefinition_1fromString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::ExceptionDefinition *arg1 = (RobotRaconteur::ExceptionDefinition *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::ExceptionDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ExceptionDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ExceptionDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      (arg1)->FromString((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ExceptionDefinition_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::ExceptionDefinition *arg1 = (RobotRaconteur::ExceptionDefinition *) 0 ;
  boost::shared_ptr< RobotRaconteur::ExceptionDefinition > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ExceptionDefinition > **)&jarg1;
  arg1 = (RobotRaconteur::ExceptionDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->Reset();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MemberDefinitionUtil_1toProperty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > *arg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > tempnull1 ;
  boost::shared_ptr< RobotRaconteur::PropertyDefinition > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::MemberDefinition > **)&jarg1 : &tempnull1; 
  {
    try
    {
      result = MemberDefinitionUtil::ToProperty((boost::shared_ptr< RobotRaconteur::MemberDefinition > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::PropertyDefinition > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::PropertyDefinition >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MemberDefinitionUtil_1toFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > *arg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > tempnull1 ;
  boost::shared_ptr< RobotRaconteur::FunctionDefinition > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::MemberDefinition > **)&jarg1 : &tempnull1; 
  {
    try
    {
      result = MemberDefinitionUtil::ToFunction((boost::shared_ptr< RobotRaconteur::MemberDefinition > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::FunctionDefinition > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::FunctionDefinition >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MemberDefinitionUtil_1toObjRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > *arg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > tempnull1 ;
  boost::shared_ptr< RobotRaconteur::ObjRefDefinition > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::MemberDefinition > **)&jarg1 : &tempnull1; 
  {
    try
    {
      result = MemberDefinitionUtil::ToObjRef((boost::shared_ptr< RobotRaconteur::MemberDefinition > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::ObjRefDefinition > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::ObjRefDefinition >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MemberDefinitionUtil_1toEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > *arg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > tempnull1 ;
  boost::shared_ptr< RobotRaconteur::EventDefinition > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::MemberDefinition > **)&jarg1 : &tempnull1; 
  {
    try
    {
      result = MemberDefinitionUtil::ToEvent((boost::shared_ptr< RobotRaconteur::MemberDefinition > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::EventDefinition > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::EventDefinition >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MemberDefinitionUtil_1toPipe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > *arg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > tempnull1 ;
  boost::shared_ptr< RobotRaconteur::PipeDefinition > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::MemberDefinition > **)&jarg1 : &tempnull1; 
  {
    try
    {
      result = MemberDefinitionUtil::ToPipe((boost::shared_ptr< RobotRaconteur::MemberDefinition > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::PipeDefinition > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::PipeDefinition >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MemberDefinitionUtil_1toCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > *arg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > tempnull1 ;
  boost::shared_ptr< RobotRaconteur::CallbackDefinition > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::MemberDefinition > **)&jarg1 : &tempnull1; 
  {
    try
    {
      result = MemberDefinitionUtil::ToCallback((boost::shared_ptr< RobotRaconteur::MemberDefinition > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::CallbackDefinition > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::CallbackDefinition >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MemberDefinitionUtil_1toWire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > *arg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > tempnull1 ;
  boost::shared_ptr< RobotRaconteur::WireDefinition > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::MemberDefinition > **)&jarg1 : &tempnull1; 
  {
    try
    {
      result = MemberDefinitionUtil::ToWire((boost::shared_ptr< RobotRaconteur::MemberDefinition > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WireDefinition > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WireDefinition >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MemberDefinitionUtil_1toMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > *arg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::MemberDefinition > tempnull1 ;
  boost::shared_ptr< RobotRaconteur::MemoryDefinition > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::MemberDefinition > **)&jarg1 : &tempnull1; 
  {
    try
    {
      result = MemberDefinitionUtil::ToMemory((boost::shared_ptr< RobotRaconteur::MemberDefinition > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::MemoryDefinition > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::MemoryDefinition >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1MemberDefinitionUtil(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MemberDefinitionUtil *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (MemberDefinitionUtil *)new MemberDefinitionUtil();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(MemberDefinitionUtil **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1MemberDefinitionUtil(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MemberDefinitionUtil *arg1 = (MemberDefinitionUtil *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MemberDefinitionUtil **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1NodeID_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::NodeID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::NodeID *)new RobotRaconteur::NodeID();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::NodeID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeID_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::NodeID *arg1 = (RobotRaconteur::NodeID *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::NodeID **)&jarg1; 
  {
    try
    {
      result = ((RobotRaconteur::NodeID const *)arg1)->ToString();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeID_1newUniqueID(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::NodeID result;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = RobotRaconteur::NodeID::NewUniqueID();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::NodeID **)&jresult = new RobotRaconteur::NodeID((const RobotRaconteur::NodeID &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeID_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  RobotRaconteur::NodeID *arg1 = (RobotRaconteur::NodeID *) 0 ;
  RobotRaconteur::NodeID *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::NodeID **)&jarg1; 
  arg2 = *(RobotRaconteur::NodeID **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::NodeID const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (bool)((RobotRaconteur::NodeID const *)arg1)->operator ==((RobotRaconteur::NodeID const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeID_1ne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  RobotRaconteur::NodeID *arg1 = (RobotRaconteur::NodeID *) 0 ;
  RobotRaconteur::NodeID *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::NodeID **)&jarg1; 
  arg2 = *(RobotRaconteur::NodeID **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::NodeID const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (bool)((RobotRaconteur::NodeID const *)arg1)->operator !=((RobotRaconteur::NodeID const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeID_1lt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  RobotRaconteur::NodeID *arg1 = (RobotRaconteur::NodeID *) 0 ;
  RobotRaconteur::NodeID *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::NodeID **)&jarg1; 
  arg2 = *(RobotRaconteur::NodeID **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::NodeID const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (bool)((RobotRaconteur::NodeID const *)arg1)->operator <((RobotRaconteur::NodeID const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeID_1isAnyNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::NodeID *arg1 = (RobotRaconteur::NodeID *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::NodeID **)&jarg1; 
  {
    try
    {
      result = (bool)(arg1)->IsAnyNode();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeID_1getAny(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::NodeID result;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = RobotRaconteur::NodeID::GetAny();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::NodeID **)&jresult = new RobotRaconteur::NodeID((const RobotRaconteur::NodeID &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1NodeID_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  RobotRaconteur::NodeID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try
    {
      result = (RobotRaconteur::NodeID *)new RobotRaconteur::NodeID((std::string const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::NodeID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1NodeID_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::NodeID *arg1 = 0 ;
  RobotRaconteur::NodeID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::NodeID **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::NodeID const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (RobotRaconteur::NodeID *)new RobotRaconteur::NodeID((RobotRaconteur::NodeID const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::NodeID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1NodeID(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::NodeID *arg1 = (RobotRaconteur::NodeID *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::NodeID **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorptr_1messageentry_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *)new std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > >();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorptr_1messageentry_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *arg1 = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *)new std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > >((std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1messageentry_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *arg1 = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *) 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > **)&jarg1; 
  {
    try
    {
      result = ((std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > const *)arg1)->capacity();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1messageentry_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *arg1 = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *) 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > **)&jarg1; 
  arg2 = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > >::size_type)jarg2; 
  {
    try
    {
      try {
        (arg1)->reserve(arg2);
      } catch(std::length_error &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1messageentry_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *arg1 = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > **)&jarg1; 
  {
    try
    {
      result = (bool)((std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > const *)arg1)->empty();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1messageentry_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *arg1 = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > **)&jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorptr_1messageentry_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  boost::intrusive_ptr< RobotRaconteur::MessageEntry > *arg2 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageEntry > tempnull2 ;
  boost::intrusive_ptr< RobotRaconteur::MessageEntry > temp2 ;
  boost::shared_ptr< RobotRaconteur::MessageEntry > *smartarg2 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  
  // intrusive_ptr by reference
  if ( jarg2 ) {
    smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageEntry >**)&jarg2;
    temp2 = boost::intrusive_ptr<  RobotRaconteur::MessageEntry >(smartarg2->get(), true);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  {
    try
    {
      try {
        result = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *)new_std_vector_Sl_boost_intrusive_ptr_Sl_RobotRaconteur_MessageEntry_Sg__Sg___SWIG_2(arg1,(boost::intrusive_ptr< RobotRaconteur::MessageEntry > const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1messageentry_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *arg1 = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > **)&jarg1; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_intrusive_ptr_Sl_RobotRaconteur_MessageEntry_Sg__Sg__doSize((std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > const *)arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1messageentry_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *arg1 = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *) 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > >::value_type *arg2 = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > >::value_type tempnull2 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > >::value_type temp2 ;
  boost::shared_ptr< RobotRaconteur::MessageEntry > *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > **)&jarg1; 
  
  // intrusive_ptr by reference
  if ( jarg2 ) {
    smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageEntry >**)&jarg2;
    temp2 = boost::intrusive_ptr<  RobotRaconteur::MessageEntry >(smartarg2->get(), true);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  {
    try
    {
      std_vector_Sl_boost_intrusive_ptr_Sl_RobotRaconteur_MessageEntry_Sg__Sg__doAdd__SWIG_0(arg1,(boost::intrusive_ptr< RobotRaconteur::MessageEntry > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1messageentry_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *arg1 = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *) 0 ;
  jint arg2 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > >::value_type *arg3 = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > >::value_type tempnull3 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > >::value_type temp3 ;
  boost::shared_ptr< RobotRaconteur::MessageEntry > *smartarg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > **)&jarg1; 
  arg2 = jarg2; 
  
  // intrusive_ptr by reference
  if ( jarg3 ) {
    smartarg3 = *(boost::shared_ptr<  RobotRaconteur::MessageEntry >**)&jarg3;
    temp3 = boost::intrusive_ptr<  RobotRaconteur::MessageEntry >(smartarg3->get(), true);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  {
    try
    {
      try {
        std_vector_Sl_boost_intrusive_ptr_Sl_RobotRaconteur_MessageEntry_Sg__Sg__doAdd__SWIG_1(arg1,arg2,(boost::intrusive_ptr< RobotRaconteur::MessageEntry > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1messageentry_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *arg1 = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *) 0 ;
  jint arg2 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_intrusive_ptr_Sl_RobotRaconteur_MessageEntry_Sg__Sg__doRemove(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageEntry >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageEntry >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1messageentry_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *arg1 = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *) 0 ;
  jint arg2 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > >::value_type *) &std_vector_Sl_boost_intrusive_ptr_Sl_RobotRaconteur_MessageEntry_Sg__Sg__doGet(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (*result) {
    intrusive_ptr_add_ref(result->get());
    *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageEntry >(result->get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageEntry >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1messageentry_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *arg1 = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *) 0 ;
  jint arg2 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > >::value_type *arg3 = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > >::value_type tempnull3 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > >::value_type temp3 ;
  boost::shared_ptr< RobotRaconteur::MessageEntry > *smartarg3 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > **)&jarg1; 
  arg2 = jarg2; 
  
  // intrusive_ptr by reference
  if ( jarg3 ) {
    smartarg3 = *(boost::shared_ptr<  RobotRaconteur::MessageEntry >**)&jarg3;
    temp3 = boost::intrusive_ptr<  RobotRaconteur::MessageEntry >(smartarg3->get(), true);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  {
    try
    {
      try {
        result = std_vector_Sl_boost_intrusive_ptr_Sl_RobotRaconteur_MessageEntry_Sg__Sg__doSet(arg1,arg2,(boost::intrusive_ptr< RobotRaconteur::MessageEntry > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageEntry >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageEntry >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1messageentry_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *arg1 = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_intrusive_ptr_Sl_RobotRaconteur_MessageEntry_Sg__Sg__doRemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1vectorptr_1messageentry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *arg1 = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorptr_1messageelement_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *)new std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > >();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorptr_1messageelement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *arg1 = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *)new std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > >((std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1messageelement_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *arg1 = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *) 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jarg1; 
  {
    try
    {
      result = ((std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > const *)arg1)->capacity();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1messageelement_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *arg1 = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *) 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jarg1; 
  arg2 = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > >::size_type)jarg2; 
  {
    try
    {
      try {
        (arg1)->reserve(arg2);
      } catch(std::length_error &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1messageelement_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *arg1 = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jarg1; 
  {
    try
    {
      result = (bool)((std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > const *)arg1)->empty();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1messageelement_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *arg1 = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorptr_1messageelement_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *arg2 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > tempnull2 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > temp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg2 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  
  // intrusive_ptr by reference
  if ( jarg2 ) {
    smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg2;
    temp2 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg2->get(), true);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  {
    try
    {
      try {
        result = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *)new_std_vector_Sl_boost_intrusive_ptr_Sl_RobotRaconteur_MessageElement_Sg__Sg___SWIG_2(arg1,(boost::intrusive_ptr< RobotRaconteur::MessageElement > const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1messageelement_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *arg1 = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jarg1; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_intrusive_ptr_Sl_RobotRaconteur_MessageElement_Sg__Sg__doSize((std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > const *)arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1messageelement_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *arg1 = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *) 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > >::value_type *arg2 = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > >::value_type tempnull2 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > >::value_type temp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jarg1; 
  
  // intrusive_ptr by reference
  if ( jarg2 ) {
    smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg2;
    temp2 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg2->get(), true);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  {
    try
    {
      std_vector_Sl_boost_intrusive_ptr_Sl_RobotRaconteur_MessageElement_Sg__Sg__doAdd__SWIG_0(arg1,(boost::intrusive_ptr< RobotRaconteur::MessageElement > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1messageelement_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *arg1 = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *) 0 ;
  jint arg2 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > >::value_type *arg3 = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > >::value_type tempnull3 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > >::value_type temp3 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jarg1; 
  arg2 = jarg2; 
  
  // intrusive_ptr by reference
  if ( jarg3 ) {
    smartarg3 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg3;
    temp3 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg3->get(), true);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  {
    try
    {
      try {
        std_vector_Sl_boost_intrusive_ptr_Sl_RobotRaconteur_MessageElement_Sg__Sg__doAdd__SWIG_1(arg1,arg2,(boost::intrusive_ptr< RobotRaconteur::MessageElement > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1messageelement_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *arg1 = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *) 0 ;
  jint arg2 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_intrusive_ptr_Sl_RobotRaconteur_MessageElement_Sg__Sg__doRemove(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElement >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElement >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1messageelement_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *arg1 = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *) 0 ;
  jint arg2 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > >::value_type *) &std_vector_Sl_boost_intrusive_ptr_Sl_RobotRaconteur_MessageElement_Sg__Sg__doGet(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (*result) {
    intrusive_ptr_add_ref(result->get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElement >(result->get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElement >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1messageelement_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *arg1 = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *) 0 ;
  jint arg2 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > >::value_type *arg3 = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > >::value_type tempnull3 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > >::value_type temp3 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg3 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jarg1; 
  arg2 = jarg2; 
  
  // intrusive_ptr by reference
  if ( jarg3 ) {
    smartarg3 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg3;
    temp3 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg3->get(), true);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  {
    try
    {
      try {
        result = std_vector_Sl_boost_intrusive_ptr_Sl_RobotRaconteur_MessageElement_Sg__Sg__doSet(arg1,arg2,(boost::intrusive_ptr< RobotRaconteur::MessageElement > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElement >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElement >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1messageelement_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *arg1 = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_intrusive_ptr_Sl_RobotRaconteur_MessageElement_Sg__Sg__doRemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1vectorptr_1messageelement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *arg1 = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_Message_1header_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::Message *arg1 = (RobotRaconteur::Message *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageHeader > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::Message > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageHeader > tempnull2 ;
  boost::intrusive_ptr< RobotRaconteur::MessageHeader > temp2 ;
  boost::shared_ptr< RobotRaconteur::MessageHeader > *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::Message > **)&jarg1;
  arg1 = (RobotRaconteur::Message *)(smartarg1 ? smartarg1->get() : 0);
  
  
  // intrusive_ptr by reference
  if ( jarg2 ) {
    smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageHeader >**)&jarg2;
    temp2 = boost::intrusive_ptr<  RobotRaconteur::MessageHeader >(smartarg2->get(), true);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  if (arg1) (arg1)->header = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_Message_1header_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::Message *arg1 = (RobotRaconteur::Message *) 0 ;
  boost::shared_ptr< RobotRaconteur::Message > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageHeader > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::Message > **)&jarg1;
  arg1 = (RobotRaconteur::Message *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (boost::intrusive_ptr< RobotRaconteur::MessageHeader > *) & ((arg1)->header);
  
  if (*result) {
    intrusive_ptr_add_ref(result->get());
    *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageHeader >(result->get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageHeader >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_Message_1entries_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::Message *arg1 = (RobotRaconteur::Message *) 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *arg2 = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *) 0 ;
  boost::shared_ptr< RobotRaconteur::Message > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::Message > **)&jarg1;
  arg1 = (RobotRaconteur::Message *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > **)&jarg2; 
  if (arg1) (arg1)->entries = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_Message_1entries_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::Message *arg1 = (RobotRaconteur::Message *) 0 ;
  boost::shared_ptr< RobotRaconteur::Message > *smartarg1 = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::Message > **)&jarg1;
  arg1 = (RobotRaconteur::Message *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > *)& ((arg1)->entries);
  *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageEntry > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1Message(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::Message *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::Message *)new RobotRaconteur::Message();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  //plain pointer(out)
#if (1)
  if (result) {
    intrusive_ptr_add_ref(result);
    *(boost::shared_ptr<  RobotRaconteur::Message > **)&jresult = new boost::shared_ptr<  RobotRaconteur::Message >(result, SWIG_intrusive_deleter<  RobotRaconteur::Message >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::Message > **)&jresult = 0;
  }
#else
  *(boost::shared_ptr<  RobotRaconteur::Message > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::Message >(result SWIG_NO_NULL_DELETER_0) : 0;
#endif
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_Message_1computeSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::Message *arg1 = (RobotRaconteur::Message *) 0 ;
  boost::shared_ptr< RobotRaconteur::Message > *smartarg1 = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::Message > **)&jarg1;
  arg1 = (RobotRaconteur::Message *)(smartarg1 ? smartarg1->get() : 0);
  
  {
    try
    {
      result = (uint32_t)(arg1)->ComputeSize();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_Message_1findEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  RobotRaconteur::Message *arg1 = (RobotRaconteur::Message *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::Message > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageEntry > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::Message > **)&jarg1;
  arg1 = (RobotRaconteur::Message *)(smartarg1 ? smartarg1->get() : 0);
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (arg1)->FindEntry((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageEntry >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageEntry >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_Message_1addEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  RobotRaconteur::Message *arg1 = (RobotRaconteur::Message *) 0 ;
  RobotRaconteur::MessageEntryType arg2 ;
  std::string *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::Message > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageEntry > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::Message > **)&jarg1;
  arg1 = (RobotRaconteur::Message *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = (RobotRaconteur::MessageEntryType)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try
    {
      result = (arg1)->AddEntry(arg2,(std::string const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageEntry >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageEntry >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1Message(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::Message *arg1 = (RobotRaconteur::Message *) 0 ;
  boost::shared_ptr< RobotRaconteur::Message > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::Message > **)&jarg1;
  arg1 = (RobotRaconteur::Message *)(smartarg1 ? smartarg1->get() : 0);
  
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageHeader_1HeaderSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::MessageHeader *arg1 = (RobotRaconteur::MessageHeader *) 0 ;
  uint16_t arg2 ;
  boost::shared_ptr< RobotRaconteur::MessageHeader > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jarg1;
  arg1 = (RobotRaconteur::MessageHeader *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->HeaderSize = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageHeader_1HeaderSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::MessageHeader *arg1 = (RobotRaconteur::MessageHeader *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageHeader > *smartarg1 = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jarg1;
  arg1 = (RobotRaconteur::MessageHeader *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (uint16_t) ((arg1)->HeaderSize);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageHeader_1MessageFlags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  RobotRaconteur::MessageHeader *arg1 = (RobotRaconteur::MessageHeader *) 0 ;
  uint8_t arg2 ;
  boost::shared_ptr< RobotRaconteur::MessageHeader > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jarg1;
  arg1 = (RobotRaconteur::MessageHeader *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->MessageFlags = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageHeader_1MessageFlags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  RobotRaconteur::MessageHeader *arg1 = (RobotRaconteur::MessageHeader *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageHeader > *smartarg1 = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jarg1;
  arg1 = (RobotRaconteur::MessageHeader *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (uint8_t) ((arg1)->MessageFlags);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageHeader_1SenderEndpoint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RobotRaconteur::MessageHeader *arg1 = (RobotRaconteur::MessageHeader *) 0 ;
  uint32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::MessageHeader > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jarg1;
  arg1 = (RobotRaconteur::MessageHeader *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->SenderEndpoint = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageHeader_1SenderEndpoint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::MessageHeader *arg1 = (RobotRaconteur::MessageHeader *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageHeader > *smartarg1 = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jarg1;
  arg1 = (RobotRaconteur::MessageHeader *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (uint32_t) ((arg1)->SenderEndpoint);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageHeader_1ReceiverEndpoint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RobotRaconteur::MessageHeader *arg1 = (RobotRaconteur::MessageHeader *) 0 ;
  uint32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::MessageHeader > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jarg1;
  arg1 = (RobotRaconteur::MessageHeader *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->ReceiverEndpoint = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageHeader_1ReceiverEndpoint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::MessageHeader *arg1 = (RobotRaconteur::MessageHeader *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageHeader > *smartarg1 = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jarg1;
  arg1 = (RobotRaconteur::MessageHeader *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (uint32_t) ((arg1)->ReceiverEndpoint);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageHeader_1SenderNodeName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::MessageHeader *arg1 = (RobotRaconteur::MessageHeader *) 0 ;
  RobotRaconteur::MessageStringPtr *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::MessageHeader > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jarg1;
  arg1 = (RobotRaconteur::MessageHeader *)(smartarg1 ? smartarg1->get() : 0);
  
  if (!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  RobotRaconteur::MessageStringPtr arg2_str(arg2_pstr,false);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->SenderNodeName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageHeader_1SenderNodeName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::MessageHeader *arg1 = (RobotRaconteur::MessageHeader *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageHeader > *smartarg1 = 0 ;
  RobotRaconteur::MessageStringPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jarg1;
  arg1 = (RobotRaconteur::MessageHeader *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (RobotRaconteur::MessageStringPtr *) & ((arg1)->SenderNodeName);
  std::string temp_ret1 = result->str().to_string(); jresult = jenv->NewStringUTF(temp_ret1.c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageHeader_1ReceiverNodeName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::MessageHeader *arg1 = (RobotRaconteur::MessageHeader *) 0 ;
  RobotRaconteur::MessageStringPtr *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::MessageHeader > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jarg1;
  arg1 = (RobotRaconteur::MessageHeader *)(smartarg1 ? smartarg1->get() : 0);
  
  if (!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  RobotRaconteur::MessageStringPtr arg2_str(arg2_pstr,false);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->ReceiverNodeName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageHeader_1ReceiverNodeName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::MessageHeader *arg1 = (RobotRaconteur::MessageHeader *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageHeader > *smartarg1 = 0 ;
  RobotRaconteur::MessageStringPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jarg1;
  arg1 = (RobotRaconteur::MessageHeader *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (RobotRaconteur::MessageStringPtr *) & ((arg1)->ReceiverNodeName);
  std::string temp_ret1 = result->str().to_string(); jresult = jenv->NewStringUTF(temp_ret1.c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageHeader_1SenderNodeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::MessageHeader *arg1 = (RobotRaconteur::MessageHeader *) 0 ;
  RobotRaconteur::NodeID *arg2 = (RobotRaconteur::NodeID *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageHeader > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jarg1;
  arg1 = (RobotRaconteur::MessageHeader *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = *(RobotRaconteur::NodeID **)&jarg2; 
  if (arg1) (arg1)->SenderNodeID = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageHeader_1SenderNodeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::MessageHeader *arg1 = (RobotRaconteur::MessageHeader *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageHeader > *smartarg1 = 0 ;
  RobotRaconteur::NodeID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jarg1;
  arg1 = (RobotRaconteur::MessageHeader *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (RobotRaconteur::NodeID *)& ((arg1)->SenderNodeID);
  *(RobotRaconteur::NodeID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageHeader_1ReceiverNodeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::MessageHeader *arg1 = (RobotRaconteur::MessageHeader *) 0 ;
  RobotRaconteur::NodeID *arg2 = (RobotRaconteur::NodeID *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageHeader > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jarg1;
  arg1 = (RobotRaconteur::MessageHeader *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = *(RobotRaconteur::NodeID **)&jarg2; 
  if (arg1) (arg1)->ReceiverNodeID = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageHeader_1ReceiverNodeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::MessageHeader *arg1 = (RobotRaconteur::MessageHeader *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageHeader > *smartarg1 = 0 ;
  RobotRaconteur::NodeID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jarg1;
  arg1 = (RobotRaconteur::MessageHeader *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (RobotRaconteur::NodeID *)& ((arg1)->ReceiverNodeID);
  *(RobotRaconteur::NodeID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageHeader_1MetaData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::MessageHeader *arg1 = (RobotRaconteur::MessageHeader *) 0 ;
  RobotRaconteur::MessageStringPtr *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::MessageHeader > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jarg1;
  arg1 = (RobotRaconteur::MessageHeader *)(smartarg1 ? smartarg1->get() : 0);
  
  if (!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  RobotRaconteur::MessageStringPtr arg2_str(arg2_pstr,false);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->MetaData = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageHeader_1MetaData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::MessageHeader *arg1 = (RobotRaconteur::MessageHeader *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageHeader > *smartarg1 = 0 ;
  RobotRaconteur::MessageStringPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jarg1;
  arg1 = (RobotRaconteur::MessageHeader *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (RobotRaconteur::MessageStringPtr *) & ((arg1)->MetaData);
  std::string temp_ret1 = result->str().to_string(); jresult = jenv->NewStringUTF(temp_ret1.c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageHeader_1EntryCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::MessageHeader *arg1 = (RobotRaconteur::MessageHeader *) 0 ;
  uint16_t arg2 ;
  boost::shared_ptr< RobotRaconteur::MessageHeader > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jarg1;
  arg1 = (RobotRaconteur::MessageHeader *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->EntryCount = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageHeader_1EntryCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::MessageHeader *arg1 = (RobotRaconteur::MessageHeader *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageHeader > *smartarg1 = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jarg1;
  arg1 = (RobotRaconteur::MessageHeader *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (uint16_t) ((arg1)->EntryCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageHeader_1MessageID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::MessageHeader *arg1 = (RobotRaconteur::MessageHeader *) 0 ;
  uint16_t arg2 ;
  boost::shared_ptr< RobotRaconteur::MessageHeader > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jarg1;
  arg1 = (RobotRaconteur::MessageHeader *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->MessageID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageHeader_1MessageID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::MessageHeader *arg1 = (RobotRaconteur::MessageHeader *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageHeader > *smartarg1 = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jarg1;
  arg1 = (RobotRaconteur::MessageHeader *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (uint16_t) ((arg1)->MessageID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageHeader_1MessageResID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::MessageHeader *arg1 = (RobotRaconteur::MessageHeader *) 0 ;
  uint16_t arg2 ;
  boost::shared_ptr< RobotRaconteur::MessageHeader > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jarg1;
  arg1 = (RobotRaconteur::MessageHeader *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->MessageResID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageHeader_1MessageResID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::MessageHeader *arg1 = (RobotRaconteur::MessageHeader *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageHeader > *smartarg1 = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jarg1;
  arg1 = (RobotRaconteur::MessageHeader *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (uint16_t) ((arg1)->MessageResID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageHeader_1MessageSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RobotRaconteur::MessageHeader *arg1 = (RobotRaconteur::MessageHeader *) 0 ;
  uint32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::MessageHeader > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jarg1;
  arg1 = (RobotRaconteur::MessageHeader *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->MessageSize = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageHeader_1MessageSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::MessageHeader *arg1 = (RobotRaconteur::MessageHeader *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageHeader > *smartarg1 = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jarg1;
  arg1 = (RobotRaconteur::MessageHeader *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (uint32_t) ((arg1)->MessageSize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageHeader_1Priority_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::MessageHeader *arg1 = (RobotRaconteur::MessageHeader *) 0 ;
  uint16_t arg2 ;
  boost::shared_ptr< RobotRaconteur::MessageHeader > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jarg1;
  arg1 = (RobotRaconteur::MessageHeader *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->Priority = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageHeader_1Priority_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::MessageHeader *arg1 = (RobotRaconteur::MessageHeader *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageHeader > *smartarg1 = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jarg1;
  arg1 = (RobotRaconteur::MessageHeader *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (uint16_t) ((arg1)->Priority);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageHeader_1Extended_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::MessageHeader *arg1 = (RobotRaconteur::MessageHeader *) 0 ;
  std::vector< uint8_t > *arg2 = (std::vector< uint8_t > *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageHeader > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jarg1;
  arg1 = (RobotRaconteur::MessageHeader *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = *(std::vector< uint8_t > **)&jarg2; 
  if (arg1) (arg1)->Extended = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageHeader_1Extended_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::MessageHeader *arg1 = (RobotRaconteur::MessageHeader *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageHeader > *smartarg1 = 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jarg1;
  arg1 = (RobotRaconteur::MessageHeader *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (std::vector< uint8_t > *)& ((arg1)->Extended);
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageHeader_1computeSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::MessageHeader *arg1 = (RobotRaconteur::MessageHeader *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageHeader > *smartarg1 = 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jarg1;
  arg1 = (RobotRaconteur::MessageHeader *)(smartarg1 ? smartarg1->get() : 0);
  
  {
    try
    {
      result = (uint16_t)(arg1)->ComputeSize();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageHeader_1updateHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  RobotRaconteur::MessageHeader *arg1 = (RobotRaconteur::MessageHeader *) 0 ;
  uint32_t arg2 ;
  uint16_t arg3 ;
  boost::shared_ptr< RobotRaconteur::MessageHeader > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jarg1;
  arg1 = (RobotRaconteur::MessageHeader *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = (uint32_t)jarg2; 
  arg3 = (uint16_t)jarg3; 
  {
    try
    {
      (arg1)->UpdateHeader(arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1MessageHeader(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::MessageHeader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::MessageHeader *)new RobotRaconteur::MessageHeader();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  //plain pointer(out)
#if (1)
  if (result) {
    intrusive_ptr_add_ref(result);
    *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageHeader >(result, SWIG_intrusive_deleter<  RobotRaconteur::MessageHeader >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jresult = 0;
  }
#else
  *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::MessageHeader >(result SWIG_NO_NULL_DELETER_0) : 0;
#endif
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1MessageHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::MessageHeader *arg1 = (RobotRaconteur::MessageHeader *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageHeader > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageHeader > **)&jarg1;
  arg1 = (RobotRaconteur::MessageHeader *)(smartarg1 ? smartarg1->get() : 0);
  
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntry_1EntrySize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RobotRaconteur::MessageEntry *arg1 = (RobotRaconteur::MessageEntry *) 0 ;
  uint32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::MessageEntry > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jarg1;
  arg1 = (RobotRaconteur::MessageEntry *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->EntrySize = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntry_1EntrySize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::MessageEntry *arg1 = (RobotRaconteur::MessageEntry *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageEntry > *smartarg1 = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jarg1;
  arg1 = (RobotRaconteur::MessageEntry *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (uint32_t) ((arg1)->EntrySize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntry_1EntryFlags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  RobotRaconteur::MessageEntry *arg1 = (RobotRaconteur::MessageEntry *) 0 ;
  uint8_t arg2 ;
  boost::shared_ptr< RobotRaconteur::MessageEntry > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jarg1;
  arg1 = (RobotRaconteur::MessageEntry *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->EntryFlags = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntry_1EntryFlags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  RobotRaconteur::MessageEntry *arg1 = (RobotRaconteur::MessageEntry *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageEntry > *smartarg1 = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jarg1;
  arg1 = (RobotRaconteur::MessageEntry *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (uint8_t) ((arg1)->EntryFlags);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntry_1EntryType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::MessageEntry *arg1 = (RobotRaconteur::MessageEntry *) 0 ;
  RobotRaconteur::MessageEntryType arg2 ;
  boost::shared_ptr< RobotRaconteur::MessageEntry > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jarg1;
  arg1 = (RobotRaconteur::MessageEntry *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = (RobotRaconteur::MessageEntryType)jarg2; 
  if (arg1) (arg1)->EntryType = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntry_1EntryType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::MessageEntry *arg1 = (RobotRaconteur::MessageEntry *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageEntry > *smartarg1 = 0 ;
  RobotRaconteur::MessageEntryType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jarg1;
  arg1 = (RobotRaconteur::MessageEntry *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (RobotRaconteur::MessageEntryType) ((arg1)->EntryType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntry_1ServicePath_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::MessageEntry *arg1 = (RobotRaconteur::MessageEntry *) 0 ;
  RobotRaconteur::MessageStringPtr *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::MessageEntry > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jarg1;
  arg1 = (RobotRaconteur::MessageEntry *)(smartarg1 ? smartarg1->get() : 0);
  
  if (!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  RobotRaconteur::MessageStringPtr arg2_str(arg2_pstr,false);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->ServicePath = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntry_1ServicePath_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::MessageEntry *arg1 = (RobotRaconteur::MessageEntry *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageEntry > *smartarg1 = 0 ;
  RobotRaconteur::MessageStringPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jarg1;
  arg1 = (RobotRaconteur::MessageEntry *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (RobotRaconteur::MessageStringPtr *) & ((arg1)->ServicePath);
  std::string temp_ret1 = result->str().to_string(); jresult = jenv->NewStringUTF(temp_ret1.c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntry_1MemberName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::MessageEntry *arg1 = (RobotRaconteur::MessageEntry *) 0 ;
  RobotRaconteur::MessageStringPtr *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::MessageEntry > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jarg1;
  arg1 = (RobotRaconteur::MessageEntry *)(smartarg1 ? smartarg1->get() : 0);
  
  if (!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  RobotRaconteur::MessageStringPtr arg2_str(arg2_pstr,false);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->MemberName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntry_1MemberName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::MessageEntry *arg1 = (RobotRaconteur::MessageEntry *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageEntry > *smartarg1 = 0 ;
  RobotRaconteur::MessageStringPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jarg1;
  arg1 = (RobotRaconteur::MessageEntry *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (RobotRaconteur::MessageStringPtr *) & ((arg1)->MemberName);
  std::string temp_ret1 = result->str().to_string(); jresult = jenv->NewStringUTF(temp_ret1.c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntry_1MemberNameCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RobotRaconteur::MessageEntry *arg1 = (RobotRaconteur::MessageEntry *) 0 ;
  uint32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::MessageEntry > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jarg1;
  arg1 = (RobotRaconteur::MessageEntry *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->MemberNameCode = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntry_1MemberNameCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::MessageEntry *arg1 = (RobotRaconteur::MessageEntry *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageEntry > *smartarg1 = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jarg1;
  arg1 = (RobotRaconteur::MessageEntry *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (uint32_t) ((arg1)->MemberNameCode);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntry_1RequestID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RobotRaconteur::MessageEntry *arg1 = (RobotRaconteur::MessageEntry *) 0 ;
  uint32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::MessageEntry > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jarg1;
  arg1 = (RobotRaconteur::MessageEntry *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->RequestID = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntry_1RequestID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::MessageEntry *arg1 = (RobotRaconteur::MessageEntry *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageEntry > *smartarg1 = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jarg1;
  arg1 = (RobotRaconteur::MessageEntry *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (uint32_t) ((arg1)->RequestID);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntry_1Error_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::MessageEntry *arg1 = (RobotRaconteur::MessageEntry *) 0 ;
  RobotRaconteur::MessageErrorType arg2 ;
  boost::shared_ptr< RobotRaconteur::MessageEntry > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jarg1;
  arg1 = (RobotRaconteur::MessageEntry *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = (RobotRaconteur::MessageErrorType)jarg2; 
  if (arg1) (arg1)->Error = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntry_1Error_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::MessageEntry *arg1 = (RobotRaconteur::MessageEntry *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageEntry > *smartarg1 = 0 ;
  RobotRaconteur::MessageErrorType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jarg1;
  arg1 = (RobotRaconteur::MessageEntry *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (RobotRaconteur::MessageErrorType) ((arg1)->Error);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntry_1MetaData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::MessageEntry *arg1 = (RobotRaconteur::MessageEntry *) 0 ;
  RobotRaconteur::MessageStringPtr *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::MessageEntry > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jarg1;
  arg1 = (RobotRaconteur::MessageEntry *)(smartarg1 ? smartarg1->get() : 0);
  
  if (!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  RobotRaconteur::MessageStringPtr arg2_str(arg2_pstr,false);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->MetaData = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntry_1MetaData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::MessageEntry *arg1 = (RobotRaconteur::MessageEntry *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageEntry > *smartarg1 = 0 ;
  RobotRaconteur::MessageStringPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jarg1;
  arg1 = (RobotRaconteur::MessageEntry *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (RobotRaconteur::MessageStringPtr *) & ((arg1)->MetaData);
  std::string temp_ret1 = result->str().to_string(); jresult = jenv->NewStringUTF(temp_ret1.c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntry_1Extended_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::MessageEntry *arg1 = (RobotRaconteur::MessageEntry *) 0 ;
  std::vector< uint8_t > *arg2 = (std::vector< uint8_t > *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageEntry > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jarg1;
  arg1 = (RobotRaconteur::MessageEntry *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = *(std::vector< uint8_t > **)&jarg2; 
  if (arg1) (arg1)->Extended = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntry_1Extended_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::MessageEntry *arg1 = (RobotRaconteur::MessageEntry *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageEntry > *smartarg1 = 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jarg1;
  arg1 = (RobotRaconteur::MessageEntry *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (std::vector< uint8_t > *)& ((arg1)->Extended);
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntry_1elements_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::MessageEntry *arg1 = (RobotRaconteur::MessageEntry *) 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *arg2 = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageEntry > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jarg1;
  arg1 = (RobotRaconteur::MessageEntry *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jarg2; 
  if (arg1) (arg1)->elements = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntry_1elements_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::MessageEntry *arg1 = (RobotRaconteur::MessageEntry *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageEntry > *smartarg1 = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jarg1;
  arg1 = (RobotRaconteur::MessageEntry *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *)& ((arg1)->elements);
  *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1MessageEntry_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::MessageEntry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::MessageEntry *)new RobotRaconteur::MessageEntry();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  //plain pointer(out)
#if (1)
  if (result) {
    intrusive_ptr_add_ref(result);
    *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageEntry >(result, SWIG_intrusive_deleter<  RobotRaconteur::MessageEntry >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jresult = 0;
  }
#else
  *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::MessageEntry >(result SWIG_NO_NULL_DELETER_0) : 0;
#endif
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1MessageEntry_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  RobotRaconteur::MessageEntryType arg1 ;
  std::string *arg2 = 0 ;
  RobotRaconteur::MessageEntry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (RobotRaconteur::MessageEntryType)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (RobotRaconteur::MessageEntry *)new RobotRaconteur::MessageEntry(arg1,(std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  //plain pointer(out)
#if (1)
  if (result) {
    intrusive_ptr_add_ref(result);
    *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageEntry >(result, SWIG_intrusive_deleter<  RobotRaconteur::MessageEntry >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jresult = 0;
  }
#else
  *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::MessageEntry >(result SWIG_NO_NULL_DELETER_0) : 0;
#endif
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntry_1computeSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::MessageEntry *arg1 = (RobotRaconteur::MessageEntry *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageEntry > *smartarg1 = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jarg1;
  arg1 = (RobotRaconteur::MessageEntry *)(smartarg1 ? smartarg1->get() : 0);
  
  {
    try
    {
      result = (uint32_t)(arg1)->ComputeSize();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntry_1findElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  RobotRaconteur::MessageEntry *arg1 = (RobotRaconteur::MessageEntry *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::MessageEntry > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jarg1;
  arg1 = (RobotRaconteur::MessageEntry *)(smartarg1 ? smartarg1->get() : 0);
  
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (arg1)->FindElement((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElement >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElement >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntry_1addElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  RobotRaconteur::MessageEntry *arg1 = (RobotRaconteur::MessageEntry *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::MessageEntry > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > tempnull2 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > temp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg2 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jarg1;
  arg1 = (RobotRaconteur::MessageEntry *)(smartarg1 ? smartarg1->get() : 0);
  
  
  // intrusive_ptr by reference
  if ( jarg2 ) {
    smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg2;
    temp2 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg2->get(), true);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  {
    try
    {
      result = (arg1)->AddElement((boost::intrusive_ptr< RobotRaconteur::MessageElement > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElement >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElement >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1MessageEntry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::MessageEntry *arg1 = (RobotRaconteur::MessageEntry *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageEntry > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageEntry > **)&jarg1;
  arg1 = (RobotRaconteur::MessageEntry *)(smartarg1 ? smartarg1->get() : 0);
  
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElement_1ElementSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RobotRaconteur::MessageElement *arg1 = (RobotRaconteur::MessageElement *) 0 ;
  uint32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElement *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->ElementSize = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElement_1ElementSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::MessageElement *arg1 = (RobotRaconteur::MessageElement *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg1 = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElement *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (uint32_t) ((arg1)->ElementSize);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElement_1ElementFlags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  RobotRaconteur::MessageElement *arg1 = (RobotRaconteur::MessageElement *) 0 ;
  uint8_t arg2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElement *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->ElementFlags = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElement_1ElementFlags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  RobotRaconteur::MessageElement *arg1 = (RobotRaconteur::MessageElement *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg1 = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElement *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (uint8_t) ((arg1)->ElementFlags);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElement_1ElementName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::MessageElement *arg1 = (RobotRaconteur::MessageElement *) 0 ;
  RobotRaconteur::MessageStringPtr *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElement *)(smartarg1 ? smartarg1->get() : 0);
  
  if (!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  RobotRaconteur::MessageStringPtr arg2_str(arg2_pstr,false);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->ElementName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElement_1ElementName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::MessageElement *arg1 = (RobotRaconteur::MessageElement *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg1 = 0 ;
  RobotRaconteur::MessageStringPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElement *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (RobotRaconteur::MessageStringPtr *) & ((arg1)->ElementName);
  std::string temp_ret1 = result->str().to_string(); jresult = jenv->NewStringUTF(temp_ret1.c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElement_1ElementNameCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RobotRaconteur::MessageElement *arg1 = (RobotRaconteur::MessageElement *) 0 ;
  uint32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElement *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->ElementNameCode = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElement_1ElementNameCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::MessageElement *arg1 = (RobotRaconteur::MessageElement *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg1 = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElement *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (uint32_t) ((arg1)->ElementNameCode);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElement_1ElementNumber_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::MessageElement *arg1 = (RobotRaconteur::MessageElement *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElement *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->ElementNumber = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElement_1ElementNumber_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::MessageElement *arg1 = (RobotRaconteur::MessageElement *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElement *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (int32_t) ((arg1)->ElementNumber);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElement_1ElementType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::MessageElement *arg1 = (RobotRaconteur::MessageElement *) 0 ;
  RobotRaconteur::DataTypes arg2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElement *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = (RobotRaconteur::DataTypes)jarg2; 
  if (arg1) (arg1)->ElementType = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElement_1ElementType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::MessageElement *arg1 = (RobotRaconteur::MessageElement *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg1 = 0 ;
  RobotRaconteur::DataTypes result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElement *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (RobotRaconteur::DataTypes) ((arg1)->ElementType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElement_1ElementTypeName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::MessageElement *arg1 = (RobotRaconteur::MessageElement *) 0 ;
  RobotRaconteur::MessageStringPtr *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElement *)(smartarg1 ? smartarg1->get() : 0);
  
  if (!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  RobotRaconteur::MessageStringPtr arg2_str(arg2_pstr,false);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->ElementTypeName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElement_1ElementTypeName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::MessageElement *arg1 = (RobotRaconteur::MessageElement *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg1 = 0 ;
  RobotRaconteur::MessageStringPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElement *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (RobotRaconteur::MessageStringPtr *) & ((arg1)->ElementTypeName);
  std::string temp_ret1 = result->str().to_string(); jresult = jenv->NewStringUTF(temp_ret1.c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElement_1ElementTypeNameCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RobotRaconteur::MessageElement *arg1 = (RobotRaconteur::MessageElement *) 0 ;
  uint32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElement *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->ElementTypeNameCode = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElement_1ElementTypeNameCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::MessageElement *arg1 = (RobotRaconteur::MessageElement *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg1 = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElement *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (uint32_t) ((arg1)->ElementTypeNameCode);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElement_1MetaData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::MessageElement *arg1 = (RobotRaconteur::MessageElement *) 0 ;
  RobotRaconteur::MessageStringPtr *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElement *)(smartarg1 ? smartarg1->get() : 0);
  
  if (!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  RobotRaconteur::MessageStringPtr arg2_str(arg2_pstr,false);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->MetaData = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElement_1MetaData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::MessageElement *arg1 = (RobotRaconteur::MessageElement *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg1 = 0 ;
  RobotRaconteur::MessageStringPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElement *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (RobotRaconteur::MessageStringPtr *) & ((arg1)->MetaData);
  std::string temp_ret1 = result->str().to_string(); jresult = jenv->NewStringUTF(temp_ret1.c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElement_1Extended_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::MessageElement *arg1 = (RobotRaconteur::MessageElement *) 0 ;
  std::vector< uint8_t > *arg2 = (std::vector< uint8_t > *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElement *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = *(std::vector< uint8_t > **)&jarg2; 
  if (arg1) (arg1)->Extended = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElement_1Extended_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::MessageElement *arg1 = (RobotRaconteur::MessageElement *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg1 = 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElement *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (std::vector< uint8_t > *)& ((arg1)->Extended);
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElement_1DataCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RobotRaconteur::MessageElement *arg1 = (RobotRaconteur::MessageElement *) 0 ;
  uint32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElement *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->DataCount = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElement_1DataCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::MessageElement *arg1 = (RobotRaconteur::MessageElement *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg1 = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElement *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (uint32_t) ((arg1)->DataCount);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1MessageElement(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::MessageElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::MessageElement *)new RobotRaconteur::MessageElement();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  //plain pointer(out)
#if (1)
  if (result) {
    intrusive_ptr_add_ref(result);
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElement >(result, SWIG_intrusive_deleter<  RobotRaconteur::MessageElement >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = 0;
  }
#else
  *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::MessageElement >(result SWIG_NO_NULL_DELETER_0) : 0;
#endif
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElement_1_1GetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::MessageElement *arg1 = (RobotRaconteur::MessageElement *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElement *)(smartarg1 ? smartarg1->get() : 0);
  
  {
    try
    {
      result = (arg1)->GetData();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElementData > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElementData >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElementData >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElementData > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElement_1_1SetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::MessageElement *arg1 = (RobotRaconteur::MessageElement *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > tempnull2 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > temp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElementData > *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElement *)(smartarg1 ? smartarg1->get() : 0);
  
  
  // intrusive_ptr by reference
  if ( jarg2 ) {
    smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElementData >**)&jarg2;
    temp2 = boost::intrusive_ptr<  RobotRaconteur::MessageElementData >(smartarg2->get(), true);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  {
    try
    {
      (arg1)->SetData((boost::intrusive_ptr< RobotRaconteur::MessageElementData > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElement_1computeSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::MessageElement *arg1 = (RobotRaconteur::MessageElement *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg1 = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElement *)(smartarg1 ? smartarg1->get() : 0);
  
  {
    try
    {
      result = (uint32_t)(arg1)->ComputeSize();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElement_1updateData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::MessageElement *arg1 = (RobotRaconteur::MessageElement *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElement *)(smartarg1 ? smartarg1->get() : 0);
  
  {
    try
    {
      (arg1)->UpdateData();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElement_1findElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = RobotRaconteur::MessageElement::FindElement(*arg1,(std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElement >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElement >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElement_1containsElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (bool)RobotRaconteur::MessageElement::ContainsElement(*arg1,(std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1MessageElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::MessageElement *arg1 = (RobotRaconteur::MessageElement *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElement *)(smartarg1 ? smartarg1->get() : 0);
  
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementNestedElementList_1Type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::MessageElementNestedElementList *arg1 = (RobotRaconteur::MessageElementNestedElementList *) 0 ;
  RobotRaconteur::DataTypes arg2 ;
  boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElementNestedElementList *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = (RobotRaconteur::DataTypes)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementNestedElementList_1Type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::MessageElementNestedElementList *arg1 = (RobotRaconteur::MessageElementNestedElementList *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > *smartarg1 = 0 ;
  RobotRaconteur::DataTypes result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElementNestedElementList *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (RobotRaconteur::DataTypes) ((arg1)->Type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementNestedElementList_1TypeName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::MessageElementNestedElementList *arg1 = (RobotRaconteur::MessageElementNestedElementList *) 0 ;
  RobotRaconteur::MessageStringPtr *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElementNestedElementList *)(smartarg1 ? smartarg1->get() : 0);
  
  if (!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  RobotRaconteur::MessageStringPtr arg2_str(arg2_pstr,false);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->TypeName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementNestedElementList_1TypeName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::MessageElementNestedElementList *arg1 = (RobotRaconteur::MessageElementNestedElementList *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > *smartarg1 = 0 ;
  RobotRaconteur::MessageStringPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElementNestedElementList *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (RobotRaconteur::MessageStringPtr *) & ((arg1)->TypeName);
  std::string temp_ret1 = result->str().to_string(); jresult = jenv->NewStringUTF(temp_ret1.c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementNestedElementList_1Elements_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::MessageElementNestedElementList *arg1 = (RobotRaconteur::MessageElementNestedElementList *) 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *arg2 = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElementNestedElementList *)(smartarg1 ? smartarg1->get() : 0);
  
  arg2 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jarg2; 
  if (arg1) (arg1)->Elements = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementNestedElementList_1Elements_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::MessageElementNestedElementList *arg1 = (RobotRaconteur::MessageElementNestedElementList *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > *smartarg1 = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElementNestedElementList *)(smartarg1 ? smartarg1->get() : 0);
  
  result = (std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *)& ((arg1)->Elements);
  *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1MessageElementNestedElementList(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  RobotRaconteur::DataTypes arg1 ;
  std::string *arg2 = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *arg3 = 0 ;
  RobotRaconteur::MessageElementNestedElementList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (RobotRaconteur::DataTypes)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (RobotRaconteur::MessageElementNestedElementList *)new RobotRaconteur::MessageElementNestedElementList(arg1,(std::string const &)*arg2,(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  //plain pointer(out)
#if (1)
  if (result) {
    intrusive_ptr_add_ref(result);
    *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList >(result, SWIG_intrusive_deleter<  RobotRaconteur::MessageElementNestedElementList >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList > **)&jresult = 0;
  }
#else
  *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList >(result SWIG_NO_NULL_DELETER_0) : 0;
#endif
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementNestedElementList_1getTypeString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::MessageElementNestedElementList *arg1 = (RobotRaconteur::MessageElementNestedElementList *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > *smartarg1 = 0 ;
  RobotRaconteur::MessageStringPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElementNestedElementList *)(smartarg1 ? smartarg1->get() : 0);
  
  {
    try
    {
      result = (arg1)->GetTypeString();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  std::string temp_ret1 = (&result)->str().to_string(); jresult = jenv->NewStringUTF(temp_ret1.c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementNestedElementList_1getTypeID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::MessageElementNestedElementList *arg1 = (RobotRaconteur::MessageElementNestedElementList *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > *smartarg1 = 0 ;
  RobotRaconteur::DataTypes result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElementNestedElementList *)(smartarg1 ? smartarg1->get() : 0);
  
  {
    try
    {
      result = (RobotRaconteur::DataTypes)(arg1)->GetTypeID();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1MessageElementNestedElementList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::MessageElementNestedElementList *arg1 = (RobotRaconteur::MessageElementNestedElementList *) 0 ;
  boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  // plain pointer
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList > **)&jarg1;
  arg1 = (RobotRaconteur::MessageElementNestedElementList *)(smartarg1 ? smartarg1->get() : 0);
  
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1toRRBaseArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > *arg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > tempnull1 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > temp1 ;
  boost::shared_ptr< RobotRaconteur::MessageElementData > *smartarg1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // intrusive_ptr by reference
  if ( jarg1 ) {
    smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElementData >**)&jarg1;
    temp1 = boost::intrusive_ptr<  RobotRaconteur::MessageElementData >(smartarg1->get(), true);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  {
    try
    {
      result = MessageElementDataUtil::ToRRBaseArray((boost::intrusive_ptr< RobotRaconteur::MessageElementData > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = new boost::shared_ptr<  RobotRaconteur::RRBaseArray >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::RRBaseArray >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1toMessageElementNestedElementList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > *arg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > tempnull1 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > temp1 ;
  boost::shared_ptr< RobotRaconteur::MessageElementData > *smartarg1 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // intrusive_ptr by reference
  if ( jarg1 ) {
    smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MessageElementData >**)&jarg1;
    temp1 = boost::intrusive_ptr<  RobotRaconteur::MessageElementData >(smartarg1->get(), true);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  {
    try
    {
      result = MessageElementDataUtil::ToMessageElementNestedElementList((boost::intrusive_ptr< RobotRaconteur::MessageElementData > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElementNestedElementList >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1rRBaseArrayToString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *arg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > tempnull1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > temp1 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // intrusive_ptr by reference
  if ( jarg1 ) {
    smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray >**)&jarg1;
    temp1 = boost::intrusive_ptr<  RobotRaconteur::RRBaseArray >(smartarg1->get(), true);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  {
    try
    {
      result = MessageElementDataUtil::RRBaseArrayToString((boost::intrusive_ptr< RobotRaconteur::RRBaseArray > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1rRBaseArrayToDoubles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jint jarg3) {
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  int32_t arg3 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > tempnull1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > temp1 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg1 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // intrusive_ptr by reference
  if ( jarg1 ) {
    smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray >**)&jarg1;
    temp1 = boost::intrusive_ptr<  RobotRaconteur::RRBaseArray >(smartarg1->get(), true);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, (double **)&arg2, jarg2)) return ; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      MessageElementDataUtil::RRBaseArrayToDoubles((boost::intrusive_ptr< RobotRaconteur::RRBaseArray > const &)*arg1,arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, (double *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1rRBaseArrayToFloats(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jint jarg3) {
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  int32_t arg3 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > tempnull1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > temp1 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg1 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // intrusive_ptr by reference
  if ( jarg1 ) {
    smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray >**)&jarg1;
    temp1 = boost::intrusive_ptr<  RobotRaconteur::RRBaseArray >(smartarg1->get(), true);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      MessageElementDataUtil::RRBaseArrayToFloats((boost::intrusive_ptr< RobotRaconteur::RRBaseArray > const &)*arg1,arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1rRBaseArrayToBytes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jint jarg3) {
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *arg1 = 0 ;
  int8_t *arg2 = (int8_t *) 0 ;
  int32_t arg3 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > tempnull1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > temp1 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg1 ;
  jbyte *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // intrusive_ptr by reference
  if ( jarg1 ) {
    smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray >**)&jarg1;
    temp1 = boost::intrusive_ptr<  RobotRaconteur::RRBaseArray >(smartarg1->get(), true);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  if (!SWIG_JavaArrayInSchar(jenv, &jarr2, (signed char **)&arg2, jarg2)) return ; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      MessageElementDataUtil::RRBaseArrayToBytes((boost::intrusive_ptr< RobotRaconteur::RRBaseArray > const &)*arg1,arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
  SWIG_JavaArrayArgoutSchar(jenv, jarr2, (signed char *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1rRBaseArrayToBytes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshortArray jarg2, jint jarg3) {
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *arg1 = 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int32_t arg3 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > tempnull1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > temp1 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg1 ;
  jshort *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // intrusive_ptr by reference
  if ( jarg1 ) {
    smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray >**)&jarg1;
    temp1 = boost::intrusive_ptr<  RobotRaconteur::RRBaseArray >(smartarg1->get(), true);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  if (!SWIG_JavaArrayInUchar(jenv, &jarr2, (unsigned char **)&arg2, jarg2)) return ; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      MessageElementDataUtil::RRBaseArrayToBytes((boost::intrusive_ptr< RobotRaconteur::RRBaseArray > const &)*arg1,arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
  SWIG_JavaArrayArgoutUchar(jenv, jarr2, (unsigned char *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1rRBaseArrayToShorts_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshortArray jarg2, jint jarg3) {
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *arg1 = 0 ;
  int16_t *arg2 = (int16_t *) 0 ;
  int32_t arg3 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > tempnull1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > temp1 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg1 ;
  jshort *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // intrusive_ptr by reference
  if ( jarg1 ) {
    smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray >**)&jarg1;
    temp1 = boost::intrusive_ptr<  RobotRaconteur::RRBaseArray >(smartarg1->get(), true);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  if (!SWIG_JavaArrayInShort(jenv, &jarr2, (short **)&arg2, jarg2)) return ; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      MessageElementDataUtil::RRBaseArrayToShorts((boost::intrusive_ptr< RobotRaconteur::RRBaseArray > const &)*arg1,arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
  SWIG_JavaArrayArgoutShort(jenv, jarr2, (short *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1rRBaseArrayToShorts_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jint jarg3) {
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *arg1 = 0 ;
  uint16_t *arg2 = (uint16_t *) 0 ;
  int32_t arg3 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > tempnull1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > temp1 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg1 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // intrusive_ptr by reference
  if ( jarg1 ) {
    smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray >**)&jarg1;
    temp1 = boost::intrusive_ptr<  RobotRaconteur::RRBaseArray >(smartarg1->get(), true);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  if (!SWIG_JavaArrayInUshort(jenv, &jarr2, (unsigned short **)&arg2, jarg2)) return ; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      MessageElementDataUtil::RRBaseArrayToShorts((boost::intrusive_ptr< RobotRaconteur::RRBaseArray > const &)*arg1,arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
  SWIG_JavaArrayArgoutUshort(jenv, jarr2, (unsigned short *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1rRBaseArrayToInts_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jint jarg3) {
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *arg1 = 0 ;
  int32_t *arg2 = (int32_t *) 0 ;
  int32_t arg3 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > tempnull1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > temp1 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg1 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // intrusive_ptr by reference
  if ( jarg1 ) {
    smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray >**)&jarg1;
    temp1 = boost::intrusive_ptr<  RobotRaconteur::RRBaseArray >(smartarg1->get(), true);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return ; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      MessageElementDataUtil::RRBaseArrayToInts((boost::intrusive_ptr< RobotRaconteur::RRBaseArray > const &)*arg1,arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1rRBaseArrayToInts_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2, jint jarg3) {
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *arg1 = 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  int32_t arg3 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > tempnull1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > temp1 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg1 ;
  jlong *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // intrusive_ptr by reference
  if ( jarg1 ) {
    smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray >**)&jarg1;
    temp1 = boost::intrusive_ptr<  RobotRaconteur::RRBaseArray >(smartarg1->get(), true);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  if (!SWIG_JavaArrayInUint(jenv, &jarr2, (unsigned int **)&arg2, jarg2)) return ; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      MessageElementDataUtil::RRBaseArrayToInts((boost::intrusive_ptr< RobotRaconteur::RRBaseArray > const &)*arg1,arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
  SWIG_JavaArrayArgoutUint(jenv, jarr2, (unsigned int *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1rRBaseArrayToLongs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jint jarg3) {
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *arg1 = 0 ;
  int64_t *arg2 = (int64_t *) 0 ;
  int32_t arg3 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > tempnull1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > temp1 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg1 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // intrusive_ptr by reference
  if ( jarg1 ) {
    smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray >**)&jarg1;
    temp1 = boost::intrusive_ptr<  RobotRaconteur::RRBaseArray >(smartarg1->get(), true);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  if (!SWIG_JavaArrayInLong(jenv, &jarr2, (long **)&arg2, jarg2)) return ; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      MessageElementDataUtil::RRBaseArrayToLongs((boost::intrusive_ptr< RobotRaconteur::RRBaseArray > const &)*arg1,arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
  SWIG_JavaArrayArgoutLong(jenv, jarr2, (long *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1rRBaseArrayComplexToDoubles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jint jarg3) {
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  int32_t arg3 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > tempnull1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > temp1 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg1 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // intrusive_ptr by reference
  if ( jarg1 ) {
    smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray >**)&jarg1;
    temp1 = boost::intrusive_ptr<  RobotRaconteur::RRBaseArray >(smartarg1->get(), true);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, (double **)&arg2, jarg2)) return ; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      MessageElementDataUtil::RRBaseArrayComplexToDoubles((boost::intrusive_ptr< RobotRaconteur::RRBaseArray > const &)*arg1,arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, (double *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1rRBaseArrayComplexToFloats(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloatArray jarg2, jint jarg3) {
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *arg1 = 0 ;
  float *arg2 = (float *) 0 ;
  int32_t arg3 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > tempnull1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > temp1 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg1 ;
  jfloat *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // intrusive_ptr by reference
  if ( jarg1 ) {
    smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray >**)&jarg1;
    temp1 = boost::intrusive_ptr<  RobotRaconteur::RRBaseArray >(smartarg1->get(), true);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  if (!SWIG_JavaArrayInFloat(jenv, &jarr2, (float **)&arg2, jarg2)) return ; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      MessageElementDataUtil::RRBaseArrayComplexToFloats((boost::intrusive_ptr< RobotRaconteur::RRBaseArray > const &)*arg1,arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr2, (float *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1rRBaseArrayBoolToBytes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshortArray jarg2, jint jarg3) {
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *arg1 = 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int32_t arg3 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > tempnull1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > temp1 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg1 ;
  jshort *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // intrusive_ptr by reference
  if ( jarg1 ) {
    smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray >**)&jarg1;
    temp1 = boost::intrusive_ptr<  RobotRaconteur::RRBaseArray >(smartarg1->get(), true);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  if (!SWIG_JavaArrayInUchar(jenv, &jarr2, (unsigned char **)&arg2, jarg2)) return ; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      MessageElementDataUtil::RRBaseArrayBoolToBytes((boost::intrusive_ptr< RobotRaconteur::RRBaseArray > const &)*arg1,arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
  SWIG_JavaArrayArgoutUchar(jenv, jarr2, (unsigned char *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1rRBaseArrayBoolToBytes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jint jarg3) {
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *arg1 = 0 ;
  int8_t *arg2 = (int8_t *) 0 ;
  int32_t arg3 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > tempnull1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > temp1 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg1 ;
  jbyte *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  // intrusive_ptr by reference
  if ( jarg1 ) {
    smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray >**)&jarg1;
    temp1 = boost::intrusive_ptr<  RobotRaconteur::RRBaseArray >(smartarg1->get(), true);
    arg1 = &temp1;
  } else {
    arg1 = &tempnull1;
  }
  
  if (!SWIG_JavaArrayInSchar(jenv, &jarr2, (signed char **)&arg2, jarg2)) return ; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      MessageElementDataUtil::RRBaseArrayBoolToBytes((boost::intrusive_ptr< RobotRaconteur::RRBaseArray > const &)*arg1,arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
  SWIG_JavaArrayArgoutSchar(jenv, jarr2, (signed char *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1stringToRRBaseArray(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try
    {
      result = MessageElementDataUtil::stringToRRBaseArray((std::string const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = new boost::shared_ptr<  RobotRaconteur::RRBaseArray >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::RRBaseArray >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1doublesToRRBaseArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jint jarg2) {
  jlong jresult = 0 ;
  double *arg1 = (double *) 0 ;
  int32_t arg2 ;
  jdouble *jarr1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > result;
  
  (void)jenv;
  (void)jcls;
  if (!SWIG_JavaArrayInDouble(jenv, &jarr1, (double **)&arg1, jarg1)) return 0; 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = MessageElementDataUtil::DoublesToRRBaseArray(arg1,arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = new boost::shared_ptr<  RobotRaconteur::RRBaseArray >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::RRBaseArray >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = 0;
  }
  
  SWIG_JavaArrayArgoutDouble(jenv, jarr1, (double *)arg1, jarg1); 
  delete [] arg1; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1floatsToRRBaseArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloatArray jarg1, jint jarg2) {
  jlong jresult = 0 ;
  float *arg1 = (float *) 0 ;
  int32_t arg2 ;
  jfloat *jarr1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > result;
  
  (void)jenv;
  (void)jcls;
  if (!SWIG_JavaArrayInFloat(jenv, &jarr1, (float **)&arg1, jarg1)) return 0; 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = MessageElementDataUtil::FloatsToRRBaseArray(arg1,arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = new boost::shared_ptr<  RobotRaconteur::RRBaseArray >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::RRBaseArray >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = 0;
  }
  
  SWIG_JavaArrayArgoutFloat(jenv, jarr1, (float *)arg1, jarg1); 
  delete [] arg1; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1bytesToRRBaseArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int8_t *arg1 = (int8_t *) 0 ;
  int32_t arg2 ;
  RobotRaconteur::DataTypes arg3 ;
  jbyte *jarr1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > result;
  
  (void)jenv;
  (void)jcls;
  if (!SWIG_JavaArrayInSchar(jenv, &jarr1, (signed char **)&arg1, jarg1)) return 0; 
  arg2 = (int32_t)jarg2; 
  arg3 = (RobotRaconteur::DataTypes)jarg3; 
  {
    try
    {
      result = MessageElementDataUtil::BytesToRRBaseArray(arg1,arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = new boost::shared_ptr<  RobotRaconteur::RRBaseArray >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::RRBaseArray >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = 0;
  }
  
  SWIG_JavaArrayArgoutSchar(jenv, jarr1, (signed char *)arg1, jarg1); 
  delete [] arg1; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1bytesToRRBaseArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jshortArray jarg1, jint jarg2) {
  jlong jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  int32_t arg2 ;
  jshort *jarr1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > result;
  
  (void)jenv;
  (void)jcls;
  if (!SWIG_JavaArrayInUchar(jenv, &jarr1, (unsigned char **)&arg1, jarg1)) return 0; 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = MessageElementDataUtil::BytesToRRBaseArray(arg1,arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = new boost::shared_ptr<  RobotRaconteur::RRBaseArray >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::RRBaseArray >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = 0;
  }
  
  SWIG_JavaArrayArgoutUchar(jenv, jarr1, (unsigned char *)arg1, jarg1); 
  delete [] arg1; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1shortsToRRBaseArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jshortArray jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int16_t *arg1 = (int16_t *) 0 ;
  int32_t arg2 ;
  RobotRaconteur::DataTypes arg3 ;
  jshort *jarr1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > result;
  
  (void)jenv;
  (void)jcls;
  if (!SWIG_JavaArrayInShort(jenv, &jarr1, (short **)&arg1, jarg1)) return 0; 
  arg2 = (int32_t)jarg2; 
  arg3 = (RobotRaconteur::DataTypes)jarg3; 
  {
    try
    {
      result = MessageElementDataUtil::ShortsToRRBaseArray(arg1,arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = new boost::shared_ptr<  RobotRaconteur::RRBaseArray >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::RRBaseArray >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = 0;
  }
  
  SWIG_JavaArrayArgoutShort(jenv, jarr1, (short *)arg1, jarg1); 
  delete [] arg1; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1shortsToRRBaseArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jintArray jarg1, jint jarg2) {
  jlong jresult = 0 ;
  uint16_t *arg1 = (uint16_t *) 0 ;
  int32_t arg2 ;
  jint *jarr1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > result;
  
  (void)jenv;
  (void)jcls;
  if (!SWIG_JavaArrayInUshort(jenv, &jarr1, (unsigned short **)&arg1, jarg1)) return 0; 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = MessageElementDataUtil::ShortsToRRBaseArray(arg1,arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = new boost::shared_ptr<  RobotRaconteur::RRBaseArray >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::RRBaseArray >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = 0;
  }
  
  SWIG_JavaArrayArgoutUshort(jenv, jarr1, (unsigned short *)arg1, jarg1); 
  delete [] arg1; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1intsToRRBaseArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jintArray jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int32_t *arg1 = (int32_t *) 0 ;
  int32_t arg2 ;
  RobotRaconteur::DataTypes arg3 ;
  jint *jarr1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > result;
  
  (void)jenv;
  (void)jcls;
  if (!SWIG_JavaArrayInInt(jenv, &jarr1, (int **)&arg1, jarg1)) return 0; 
  arg2 = (int32_t)jarg2; 
  arg3 = (RobotRaconteur::DataTypes)jarg3; 
  {
    try
    {
      result = MessageElementDataUtil::IntsToRRBaseArray(arg1,arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = new boost::shared_ptr<  RobotRaconteur::RRBaseArray >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::RRBaseArray >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = 0;
  }
  
  SWIG_JavaArrayArgoutInt(jenv, jarr1, (int *)arg1, jarg1); 
  delete [] arg1; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1intsToRRBaseArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jint jarg2) {
  jlong jresult = 0 ;
  uint32_t *arg1 = (uint32_t *) 0 ;
  int32_t arg2 ;
  jlong *jarr1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > result;
  
  (void)jenv;
  (void)jcls;
  if (!SWIG_JavaArrayInUint(jenv, &jarr1, (unsigned int **)&arg1, jarg1)) return 0; 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = MessageElementDataUtil::IntsToRRBaseArray(arg1,arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = new boost::shared_ptr<  RobotRaconteur::RRBaseArray >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::RRBaseArray >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = 0;
  }
  
  SWIG_JavaArrayArgoutUint(jenv, jarr1, (unsigned int *)arg1, jarg1); 
  delete [] arg1; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1longsToRRBaseArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jintArray jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int64_t *arg1 = (int64_t *) 0 ;
  int32_t arg2 ;
  RobotRaconteur::DataTypes arg3 ;
  jint *jarr1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > result;
  
  (void)jenv;
  (void)jcls;
  if (!SWIG_JavaArrayInLong(jenv, &jarr1, (long **)&arg1, jarg1)) return 0; 
  arg2 = (int32_t)jarg2; 
  arg3 = (RobotRaconteur::DataTypes)jarg3; 
  {
    try
    {
      result = MessageElementDataUtil::LongsToRRBaseArray(arg1,arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = new boost::shared_ptr<  RobotRaconteur::RRBaseArray >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::RRBaseArray >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = 0;
  }
  
  SWIG_JavaArrayArgoutLong(jenv, jarr1, (long *)arg1, jarg1); 
  delete [] arg1; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1doublesToComplexRRBaseArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jint jarg2) {
  jlong jresult = 0 ;
  double *arg1 = (double *) 0 ;
  int32_t arg2 ;
  jdouble *jarr1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > result;
  
  (void)jenv;
  (void)jcls;
  if (!SWIG_JavaArrayInDouble(jenv, &jarr1, (double **)&arg1, jarg1)) return 0; 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = MessageElementDataUtil::DoublesToComplexRRBaseArray(arg1,arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = new boost::shared_ptr<  RobotRaconteur::RRBaseArray >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::RRBaseArray >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = 0;
  }
  
  SWIG_JavaArrayArgoutDouble(jenv, jarr1, (double *)arg1, jarg1); 
  delete [] arg1; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1floatsToComplexRRBaseArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloatArray jarg1, jint jarg2) {
  jlong jresult = 0 ;
  float *arg1 = (float *) 0 ;
  int32_t arg2 ;
  jfloat *jarr1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > result;
  
  (void)jenv;
  (void)jcls;
  if (!SWIG_JavaArrayInFloat(jenv, &jarr1, (float **)&arg1, jarg1)) return 0; 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = MessageElementDataUtil::FloatsToComplexRRBaseArray(arg1,arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = new boost::shared_ptr<  RobotRaconteur::RRBaseArray >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::RRBaseArray >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = 0;
  }
  
  SWIG_JavaArrayArgoutFloat(jenv, jarr1, (float *)arg1, jarg1); 
  delete [] arg1; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1bytesToBoolRRBaseArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jshortArray jarg1, jint jarg2) {
  jlong jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  int32_t arg2 ;
  jshort *jarr1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > result;
  
  (void)jenv;
  (void)jcls;
  if (!SWIG_JavaArrayInUchar(jenv, &jarr1, (unsigned char **)&arg1, jarg1)) return 0; 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = MessageElementDataUtil::BytesToBoolRRBaseArray(arg1,arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = new boost::shared_ptr<  RobotRaconteur::RRBaseArray >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::RRBaseArray >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = 0;
  }
  
  SWIG_JavaArrayArgoutUchar(jenv, jarr1, (unsigned char *)arg1, jarg1); 
  delete [] arg1; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1bytesToBoolRRBaseArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int8_t *arg1 = (int8_t *) 0 ;
  int32_t arg2 ;
  jbyte *jarr1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > result;
  
  (void)jenv;
  (void)jcls;
  if (!SWIG_JavaArrayInSchar(jenv, &jarr1, (signed char **)&arg1, jarg1)) return 0; 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = MessageElementDataUtil::BytesToBoolRRBaseArray(arg1,arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = new boost::shared_ptr<  RobotRaconteur::RRBaseArray >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::RRBaseArray >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = 0;
  }
  
  SWIG_JavaArrayArgoutSchar(jenv, jarr1, (signed char *)arg1, jarg1); 
  delete [] arg1; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1doublesToRRBaseArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jint jarg2, jlong jarg3, jobject jarg3_) {
  double *arg1 = (double *) 0 ;
  int32_t arg2 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *arg3 = 0 ;
  jdouble *jarr1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > tempnull3 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > temp3 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if (!SWIG_JavaArrayInDouble(jenv, &jarr1, (double **)&arg1, jarg1)) return ; 
  arg2 = (int32_t)jarg2; 
  
  // intrusive_ptr by reference
  if ( jarg3 ) {
    smartarg3 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray >**)&jarg3;
    temp3 = boost::intrusive_ptr<  RobotRaconteur::RRBaseArray >(smartarg3->get(), true);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  {
    try
    {
      MessageElementDataUtil::DoublesToRRBaseArray(arg1,arg2,(boost::intrusive_ptr< RobotRaconteur::RRBaseArray > const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr1, (double *)arg1, jarg1); 
  delete [] arg1; 
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1floatsToRRBaseArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloatArray jarg1, jint jarg2, jlong jarg3, jobject jarg3_) {
  float *arg1 = (float *) 0 ;
  int32_t arg2 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *arg3 = 0 ;
  jfloat *jarr1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > tempnull3 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > temp3 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if (!SWIG_JavaArrayInFloat(jenv, &jarr1, (float **)&arg1, jarg1)) return ; 
  arg2 = (int32_t)jarg2; 
  
  // intrusive_ptr by reference
  if ( jarg3 ) {
    smartarg3 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray >**)&jarg3;
    temp3 = boost::intrusive_ptr<  RobotRaconteur::RRBaseArray >(smartarg3->get(), true);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  {
    try
    {
      MessageElementDataUtil::FloatsToRRBaseArray(arg1,arg2,(boost::intrusive_ptr< RobotRaconteur::RRBaseArray > const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr1, (float *)arg1, jarg1); 
  delete [] arg1; 
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1bytesToRRBaseArray_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jint jarg2, jlong jarg3, jobject jarg3_) {
  int8_t *arg1 = (int8_t *) 0 ;
  int32_t arg2 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *arg3 = 0 ;
  jbyte *jarr1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > tempnull3 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > temp3 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if (!SWIG_JavaArrayInSchar(jenv, &jarr1, (signed char **)&arg1, jarg1)) return ; 
  arg2 = (int32_t)jarg2; 
  
  // intrusive_ptr by reference
  if ( jarg3 ) {
    smartarg3 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray >**)&jarg3;
    temp3 = boost::intrusive_ptr<  RobotRaconteur::RRBaseArray >(smartarg3->get(), true);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  {
    try
    {
      MessageElementDataUtil::BytesToRRBaseArray(arg1,arg2,(boost::intrusive_ptr< RobotRaconteur::RRBaseArray > const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
  SWIG_JavaArrayArgoutSchar(jenv, jarr1, (signed char *)arg1, jarg1); 
  delete [] arg1; 
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1bytesToRRBaseArray_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jshortArray jarg1, jint jarg2, jlong jarg3, jobject jarg3_) {
  uint8_t *arg1 = (uint8_t *) 0 ;
  int32_t arg2 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *arg3 = 0 ;
  jshort *jarr1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > tempnull3 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > temp3 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if (!SWIG_JavaArrayInUchar(jenv, &jarr1, (unsigned char **)&arg1, jarg1)) return ; 
  arg2 = (int32_t)jarg2; 
  
  // intrusive_ptr by reference
  if ( jarg3 ) {
    smartarg3 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray >**)&jarg3;
    temp3 = boost::intrusive_ptr<  RobotRaconteur::RRBaseArray >(smartarg3->get(), true);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  {
    try
    {
      MessageElementDataUtil::BytesToRRBaseArray(arg1,arg2,(boost::intrusive_ptr< RobotRaconteur::RRBaseArray > const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
  SWIG_JavaArrayArgoutUchar(jenv, jarr1, (unsigned char *)arg1, jarg1); 
  delete [] arg1; 
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1shortsToRRBaseArray_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jshortArray jarg1, jint jarg2, jlong jarg3, jobject jarg3_) {
  int16_t *arg1 = (int16_t *) 0 ;
  int32_t arg2 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *arg3 = 0 ;
  jshort *jarr1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > tempnull3 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > temp3 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if (!SWIG_JavaArrayInShort(jenv, &jarr1, (short **)&arg1, jarg1)) return ; 
  arg2 = (int32_t)jarg2; 
  
  // intrusive_ptr by reference
  if ( jarg3 ) {
    smartarg3 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray >**)&jarg3;
    temp3 = boost::intrusive_ptr<  RobotRaconteur::RRBaseArray >(smartarg3->get(), true);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  {
    try
    {
      MessageElementDataUtil::ShortsToRRBaseArray(arg1,arg2,(boost::intrusive_ptr< RobotRaconteur::RRBaseArray > const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
  SWIG_JavaArrayArgoutShort(jenv, jarr1, (short *)arg1, jarg1); 
  delete [] arg1; 
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1shortsToRRBaseArray_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jintArray jarg1, jint jarg2, jlong jarg3, jobject jarg3_) {
  uint16_t *arg1 = (uint16_t *) 0 ;
  int32_t arg2 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *arg3 = 0 ;
  jint *jarr1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > tempnull3 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > temp3 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if (!SWIG_JavaArrayInUshort(jenv, &jarr1, (unsigned short **)&arg1, jarg1)) return ; 
  arg2 = (int32_t)jarg2; 
  
  // intrusive_ptr by reference
  if ( jarg3 ) {
    smartarg3 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray >**)&jarg3;
    temp3 = boost::intrusive_ptr<  RobotRaconteur::RRBaseArray >(smartarg3->get(), true);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  {
    try
    {
      MessageElementDataUtil::ShortsToRRBaseArray(arg1,arg2,(boost::intrusive_ptr< RobotRaconteur::RRBaseArray > const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
  SWIG_JavaArrayArgoutUshort(jenv, jarr1, (unsigned short *)arg1, jarg1); 
  delete [] arg1; 
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1intsToRRBaseArray_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jintArray jarg1, jint jarg2, jlong jarg3, jobject jarg3_) {
  int32_t *arg1 = (int32_t *) 0 ;
  int32_t arg2 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *arg3 = 0 ;
  jint *jarr1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > tempnull3 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > temp3 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if (!SWIG_JavaArrayInInt(jenv, &jarr1, (int **)&arg1, jarg1)) return ; 
  arg2 = (int32_t)jarg2; 
  
  // intrusive_ptr by reference
  if ( jarg3 ) {
    smartarg3 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray >**)&jarg3;
    temp3 = boost::intrusive_ptr<  RobotRaconteur::RRBaseArray >(smartarg3->get(), true);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  {
    try
    {
      MessageElementDataUtil::IntsToRRBaseArray(arg1,arg2,(boost::intrusive_ptr< RobotRaconteur::RRBaseArray > const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr1, (int *)arg1, jarg1); 
  delete [] arg1; 
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1intsToRRBaseArray_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlongArray jarg1, jint jarg2, jlong jarg3, jobject jarg3_) {
  uint32_t *arg1 = (uint32_t *) 0 ;
  int32_t arg2 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *arg3 = 0 ;
  jlong *jarr1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > tempnull3 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > temp3 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if (!SWIG_JavaArrayInUint(jenv, &jarr1, (unsigned int **)&arg1, jarg1)) return ; 
  arg2 = (int32_t)jarg2; 
  
  // intrusive_ptr by reference
  if ( jarg3 ) {
    smartarg3 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray >**)&jarg3;
    temp3 = boost::intrusive_ptr<  RobotRaconteur::RRBaseArray >(smartarg3->get(), true);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  {
    try
    {
      MessageElementDataUtil::IntsToRRBaseArray(arg1,arg2,(boost::intrusive_ptr< RobotRaconteur::RRBaseArray > const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
  SWIG_JavaArrayArgoutUint(jenv, jarr1, (unsigned int *)arg1, jarg1); 
  delete [] arg1; 
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1longsToRRBaseArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jintArray jarg1, jint jarg2, jlong jarg3, jobject jarg3_) {
  int64_t *arg1 = (int64_t *) 0 ;
  int32_t arg2 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *arg3 = 0 ;
  jint *jarr1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > tempnull3 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > temp3 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if (!SWIG_JavaArrayInLong(jenv, &jarr1, (long **)&arg1, jarg1)) return ; 
  arg2 = (int32_t)jarg2; 
  
  // intrusive_ptr by reference
  if ( jarg3 ) {
    smartarg3 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray >**)&jarg3;
    temp3 = boost::intrusive_ptr<  RobotRaconteur::RRBaseArray >(smartarg3->get(), true);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  {
    try
    {
      MessageElementDataUtil::LongsToRRBaseArray(arg1,arg2,(boost::intrusive_ptr< RobotRaconteur::RRBaseArray > const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
  SWIG_JavaArrayArgoutLong(jenv, jarr1, (long *)arg1, jarg1); 
  delete [] arg1; 
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1doublesToComplexRRBaseArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jint jarg2, jlong jarg3, jobject jarg3_) {
  double *arg1 = (double *) 0 ;
  int32_t arg2 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *arg3 = 0 ;
  jdouble *jarr1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > tempnull3 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > temp3 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if (!SWIG_JavaArrayInDouble(jenv, &jarr1, (double **)&arg1, jarg1)) return ; 
  arg2 = (int32_t)jarg2; 
  
  // intrusive_ptr by reference
  if ( jarg3 ) {
    smartarg3 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray >**)&jarg3;
    temp3 = boost::intrusive_ptr<  RobotRaconteur::RRBaseArray >(smartarg3->get(), true);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  {
    try
    {
      MessageElementDataUtil::DoublesToComplexRRBaseArray(arg1,arg2,(boost::intrusive_ptr< RobotRaconteur::RRBaseArray > const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr1, (double *)arg1, jarg1); 
  delete [] arg1; 
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1floatsToComplexRRBaseArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloatArray jarg1, jint jarg2, jlong jarg3, jobject jarg3_) {
  float *arg1 = (float *) 0 ;
  int32_t arg2 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *arg3 = 0 ;
  jfloat *jarr1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > tempnull3 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > temp3 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if (!SWIG_JavaArrayInFloat(jenv, &jarr1, (float **)&arg1, jarg1)) return ; 
  arg2 = (int32_t)jarg2; 
  
  // intrusive_ptr by reference
  if ( jarg3 ) {
    smartarg3 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray >**)&jarg3;
    temp3 = boost::intrusive_ptr<  RobotRaconteur::RRBaseArray >(smartarg3->get(), true);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  {
    try
    {
      MessageElementDataUtil::FloatsToComplexRRBaseArray(arg1,arg2,(boost::intrusive_ptr< RobotRaconteur::RRBaseArray > const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
  SWIG_JavaArrayArgoutFloat(jenv, jarr1, (float *)arg1, jarg1); 
  delete [] arg1; 
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1bytesToBoolRRBaseArray_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jint jarg2, jlong jarg3, jobject jarg3_) {
  int8_t *arg1 = (int8_t *) 0 ;
  int32_t arg2 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *arg3 = 0 ;
  jbyte *jarr1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > tempnull3 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > temp3 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if (!SWIG_JavaArrayInSchar(jenv, &jarr1, (signed char **)&arg1, jarg1)) return ; 
  arg2 = (int32_t)jarg2; 
  
  // intrusive_ptr by reference
  if ( jarg3 ) {
    smartarg3 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray >**)&jarg3;
    temp3 = boost::intrusive_ptr<  RobotRaconteur::RRBaseArray >(smartarg3->get(), true);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  {
    try
    {
      MessageElementDataUtil::BytesToBoolRRBaseArray(arg1,arg2,(boost::intrusive_ptr< RobotRaconteur::RRBaseArray > const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
  SWIG_JavaArrayArgoutSchar(jenv, jarr1, (signed char *)arg1, jarg1); 
  delete [] arg1; 
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementDataUtil_1bytesToBoolRRBaseArray_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jshortArray jarg1, jint jarg2, jlong jarg3, jobject jarg3_) {
  uint8_t *arg1 = (uint8_t *) 0 ;
  int32_t arg2 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *arg3 = 0 ;
  jshort *jarr1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > tempnull3 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > temp3 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if (!SWIG_JavaArrayInUchar(jenv, &jarr1, (unsigned char **)&arg1, jarg1)) return ; 
  arg2 = (int32_t)jarg2; 
  
  // intrusive_ptr by reference
  if ( jarg3 ) {
    smartarg3 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray >**)&jarg3;
    temp3 = boost::intrusive_ptr<  RobotRaconteur::RRBaseArray >(smartarg3->get(), true);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  {
    try
    {
      MessageElementDataUtil::BytesToBoolRRBaseArray(arg1,arg2,(boost::intrusive_ptr< RobotRaconteur::RRBaseArray > const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
  SWIG_JavaArrayArgoutUchar(jenv, jarr1, (unsigned char *)arg1, jarg1); 
  delete [] arg1; 
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1MessageElementDataUtil(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MessageElementDataUtil *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (MessageElementDataUtil *)new MessageElementDataUtil();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(MessageElementDataUtil **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1MessageElementDataUtil(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MessageElementDataUtil *arg1 = (MessageElementDataUtil *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MessageElementDataUtil **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_HandlerErrorInfo_1error_1code_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RobotRaconteur::HandlerErrorInfo *arg1 = (RobotRaconteur::HandlerErrorInfo *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::HandlerErrorInfo **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->error_code = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_HandlerErrorInfo_1error_1code_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::HandlerErrorInfo *arg1 = (RobotRaconteur::HandlerErrorInfo *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::HandlerErrorInfo **)&jarg1; 
  result = (uint32_t) ((arg1)->error_code);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_HandlerErrorInfo_1errorname_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::HandlerErrorInfo *arg1 = (RobotRaconteur::HandlerErrorInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::HandlerErrorInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->errorname = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_HandlerErrorInfo_1errorname_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::HandlerErrorInfo *arg1 = (RobotRaconteur::HandlerErrorInfo *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::HandlerErrorInfo **)&jarg1; 
  result = (std::string *) & ((arg1)->errorname);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_HandlerErrorInfo_1errormessage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::HandlerErrorInfo *arg1 = (RobotRaconteur::HandlerErrorInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::HandlerErrorInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->errormessage = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_HandlerErrorInfo_1errormessage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::HandlerErrorInfo *arg1 = (RobotRaconteur::HandlerErrorInfo *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::HandlerErrorInfo **)&jarg1; 
  result = (std::string *) & ((arg1)->errormessage);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_HandlerErrorInfo_1errorsubname_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::HandlerErrorInfo *arg1 = (RobotRaconteur::HandlerErrorInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::HandlerErrorInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->errorsubname = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_HandlerErrorInfo_1errorsubname_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::HandlerErrorInfo *arg1 = (RobotRaconteur::HandlerErrorInfo *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::HandlerErrorInfo **)&jarg1; 
  result = (std::string *) & ((arg1)->errorsubname);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_HandlerErrorInfo_1param_1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::HandlerErrorInfo *arg1 = (RobotRaconteur::HandlerErrorInfo *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *arg2 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > tempnull2 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > temp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::HandlerErrorInfo **)&jarg1; 
  
  // intrusive_ptr by reference
  if ( jarg2 ) {
    smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg2;
    temp2 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg2->get(), true);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  if (arg1) (arg1)->param_ = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_HandlerErrorInfo_1param_1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::HandlerErrorInfo *arg1 = (RobotRaconteur::HandlerErrorInfo *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::HandlerErrorInfo **)&jarg1; 
  result = (boost::intrusive_ptr< RobotRaconteur::MessageElement > *) & ((arg1)->param_);
  
  if (*result) {
    intrusive_ptr_add_ref(result->get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElement >(result->get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElement >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1HandlerErrorInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::HandlerErrorInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::HandlerErrorInfo *)new RobotRaconteur::HandlerErrorInfo();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::HandlerErrorInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1HandlerErrorInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::HandlerErrorInfo *arg1 = (RobotRaconteur::HandlerErrorInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::HandlerErrorInfo **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1AsyncRequestDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::AsyncRequestDirector *arg1 = (RobotRaconteur::AsyncRequestDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::AsyncRequestDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncRequestDirector_1handler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  RobotRaconteur::AsyncRequestDirector *arg1 = (RobotRaconteur::AsyncRequestDirector *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > arg2 ;
  RobotRaconteur::HandlerErrorInfo *arg3 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *argp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(RobotRaconteur::AsyncRequestDirector **)&jarg1; 
  
  // intrusive_ptr by value
  smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg2;
  if (smartarg2) {
    arg2 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg2->get(), true);
  }
  
  arg3 = *(RobotRaconteur::HandlerErrorInfo **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::HandlerErrorInfo & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->handler(arg2,*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1AsyncRequestDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::AsyncRequestDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::AsyncRequestDirector *)new SwigDirector_AsyncRequestDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::AsyncRequestDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncRequestDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::AsyncRequestDirector *obj = *((RobotRaconteur::AsyncRequestDirector **)&objarg);
  (void)jcls;
  SwigDirector_AsyncRequestDirector *director = static_cast<SwigDirector_AsyncRequestDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncRequestDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::AsyncRequestDirector *obj = *((RobotRaconteur::AsyncRequestDirector **)&objarg);
  SwigDirector_AsyncRequestDirector *director = dynamic_cast<SwigDirector_AsyncRequestDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1AsyncVoidReturnDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::AsyncVoidReturnDirector *arg1 = (RobotRaconteur::AsyncVoidReturnDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::AsyncVoidReturnDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncVoidReturnDirector_1handler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::AsyncVoidReturnDirector *arg1 = (RobotRaconteur::AsyncVoidReturnDirector *) 0 ;
  RobotRaconteur::HandlerErrorInfo *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::AsyncVoidReturnDirector **)&jarg1; 
  arg2 = *(RobotRaconteur::HandlerErrorInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::HandlerErrorInfo & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->handler(*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1AsyncVoidReturnDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::AsyncVoidReturnDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::AsyncVoidReturnDirector *)new SwigDirector_AsyncVoidReturnDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::AsyncVoidReturnDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncVoidReturnDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::AsyncVoidReturnDirector *obj = *((RobotRaconteur::AsyncVoidReturnDirector **)&objarg);
  (void)jcls;
  SwigDirector_AsyncVoidReturnDirector *director = static_cast<SwigDirector_AsyncVoidReturnDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncVoidReturnDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::AsyncVoidReturnDirector *obj = *((RobotRaconteur::AsyncVoidReturnDirector **)&objarg);
  SwigDirector_AsyncVoidReturnDirector *director = dynamic_cast<SwigDirector_AsyncVoidReturnDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1AsyncVoidNoErrReturnDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::AsyncVoidNoErrReturnDirector *arg1 = (RobotRaconteur::AsyncVoidNoErrReturnDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::AsyncVoidNoErrReturnDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncVoidNoErrReturnDirector_1handler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::AsyncVoidNoErrReturnDirector *arg1 = (RobotRaconteur::AsyncVoidNoErrReturnDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::AsyncVoidNoErrReturnDirector **)&jarg1; 
  {
    try
    {
      (arg1)->handler();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1AsyncVoidNoErrReturnDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::AsyncVoidNoErrReturnDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::AsyncVoidNoErrReturnDirector *)new SwigDirector_AsyncVoidNoErrReturnDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::AsyncVoidNoErrReturnDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncVoidNoErrReturnDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::AsyncVoidNoErrReturnDirector *obj = *((RobotRaconteur::AsyncVoidNoErrReturnDirector **)&objarg);
  (void)jcls;
  SwigDirector_AsyncVoidNoErrReturnDirector *director = static_cast<SwigDirector_AsyncVoidNoErrReturnDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncVoidNoErrReturnDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::AsyncVoidNoErrReturnDirector *obj = *((RobotRaconteur::AsyncVoidNoErrReturnDirector **)&objarg);
  SwigDirector_AsyncVoidNoErrReturnDirector *director = dynamic_cast<SwigDirector_AsyncVoidNoErrReturnDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1AsyncStringReturnDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::AsyncStringReturnDirector *arg1 = (RobotRaconteur::AsyncStringReturnDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::AsyncStringReturnDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncStringReturnDirector_1handler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  RobotRaconteur::AsyncStringReturnDirector *arg1 = (RobotRaconteur::AsyncStringReturnDirector *) 0 ;
  std::string *arg2 = 0 ;
  RobotRaconteur::HandlerErrorInfo *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(RobotRaconteur::AsyncStringReturnDirector **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(RobotRaconteur::HandlerErrorInfo **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::HandlerErrorInfo & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->handler((std::string const &)*arg2,*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1AsyncStringReturnDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::AsyncStringReturnDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::AsyncStringReturnDirector *)new SwigDirector_AsyncStringReturnDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::AsyncStringReturnDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncStringReturnDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::AsyncStringReturnDirector *obj = *((RobotRaconteur::AsyncStringReturnDirector **)&objarg);
  (void)jcls;
  SwigDirector_AsyncStringReturnDirector *director = static_cast<SwigDirector_AsyncStringReturnDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncStringReturnDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::AsyncStringReturnDirector *obj = *((RobotRaconteur::AsyncStringReturnDirector **)&objarg);
  SwigDirector_AsyncStringReturnDirector *director = dynamic_cast<SwigDirector_AsyncStringReturnDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1AsyncUInt32ReturnDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::AsyncUInt32ReturnDirector *arg1 = (RobotRaconteur::AsyncUInt32ReturnDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::AsyncUInt32ReturnDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncUInt32ReturnDirector_1handler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  RobotRaconteur::AsyncUInt32ReturnDirector *arg1 = (RobotRaconteur::AsyncUInt32ReturnDirector *) 0 ;
  uint32_t arg2 ;
  RobotRaconteur::HandlerErrorInfo *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(RobotRaconteur::AsyncUInt32ReturnDirector **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = *(RobotRaconteur::HandlerErrorInfo **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::HandlerErrorInfo & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->handler(arg2,*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1AsyncUInt32ReturnDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::AsyncUInt32ReturnDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::AsyncUInt32ReturnDirector *)new SwigDirector_AsyncUInt32ReturnDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::AsyncUInt32ReturnDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncUInt32ReturnDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::AsyncUInt32ReturnDirector *obj = *((RobotRaconteur::AsyncUInt32ReturnDirector **)&objarg);
  (void)jcls;
  SwigDirector_AsyncUInt32ReturnDirector *director = static_cast<SwigDirector_AsyncUInt32ReturnDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncUInt32ReturnDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::AsyncUInt32ReturnDirector *obj = *((RobotRaconteur::AsyncUInt32ReturnDirector **)&objarg);
  SwigDirector_AsyncUInt32ReturnDirector *director = dynamic_cast<SwigDirector_AsyncUInt32ReturnDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_Transport_1getUrlSchemeString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::Transport *arg1 = (RobotRaconteur::Transport *) 0 ;
  boost::shared_ptr< RobotRaconteur::Transport const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const RobotRaconteur::Transport > **)&jarg1;
  arg1 = (RobotRaconteur::Transport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = ((RobotRaconteur::Transport const *)arg1)->GetUrlSchemeString();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_Transport_1getCurrentTransportConnectionURL(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = RobotRaconteur::Transport::GetCurrentTransportConnectionURL();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_Transport_1getServerListenUrls(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::Transport *arg1 = (RobotRaconteur::Transport *) 0 ;
  boost::shared_ptr< RobotRaconteur::Transport > *smartarg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::Transport > **)&jarg1;
  arg1 = (RobotRaconteur::Transport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetServerListenUrls();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1Transport(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::Transport *arg1 = (RobotRaconteur::Transport *) 0 ;
  boost::shared_ptr< RobotRaconteur::Transport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::Transport > **)&jarg1;
  arg1 = (RobotRaconteur::Transport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1TcpTransport_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::TcpTransport *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::TcpTransport *)new RobotRaconteur::TcpTransport();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::TcpTransport >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1TcpTransport_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *arg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > tempnull1 ;
  RobotRaconteur::TcpTransport *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jarg1 : &tempnull1; 
  {
    try
    {
      result = (RobotRaconteur::TcpTransport *)new RobotRaconteur::TcpTransport((boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::TcpTransport >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1getDefaultReceiveTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (int32_t)(arg1)->GetDefaultReceiveTimeout();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1setDefaultReceiveTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      (arg1)->SetDefaultReceiveTimeout(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1getDefaultConnectTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (int32_t)(arg1)->GetDefaultConnectTimeout();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1setDefaultConnectTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      (arg1)->SetDefaultConnectTimeout(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1getDefaultHeartbeatPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (int32_t)(arg1)->GetDefaultHeartbeatPeriod();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1setDefaultHeartbeatPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      (arg1)->SetDefaultHeartbeatPeriod(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1getUrlSchemeString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = ((RobotRaconteur::TcpTransport const *)arg1)->GetUrlSchemeString();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1getServerListenUrls(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetServerListenUrls();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1getListenPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (int32_t)(arg1)->GetListenPort();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1startServer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  int32_t arg2 ;
  bool arg3 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try
    {
      (arg1)->StartServer(arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1startServer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      (arg1)->StartServer(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->Close();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1enableNodeDiscoveryListening_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  uint32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  {
    try
    {
      (arg1)->EnableNodeDiscoveryListening(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1enableNodeDiscoveryListening_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->EnableNodeDiscoveryListening();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1disableNodeDiscoveryListening(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->DisableNodeDiscoveryListening();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1enableNodeAnnounce_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  uint32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  {
    try
    {
      (arg1)->EnableNodeAnnounce(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1enableNodeAnnounce_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->EnableNodeAnnounce();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1disableNodeAnnounce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->DisableNodeAnnounce();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1getNodeAnnouncePeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (int32_t)(arg1)->GetNodeAnnouncePeriod();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1setNodeAnnouncePeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      (arg1)->SetNodeAnnouncePeriod(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1getMaxMessageSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (int32_t)(arg1)->GetMaxMessageSize();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1setMaxMessageSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      (arg1)->SetMaxMessageSize(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1getMaxConnectionCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (int32_t)(arg1)->GetMaxConnectionCount();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1setMaxConnectionCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      (arg1)->SetMaxConnectionCount(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1getRequireTls(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)(arg1)->GetRequireTls();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1setRequireTls(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  bool arg2 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      (arg1)->SetRequireTls(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1loadTlsNodeCertificate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->LoadTlsNodeCertificate();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1_1IsTlsNodeCertificateLoaded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)(arg1)->IsTlsNodeCertificateLoaded();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1isTransportConnectionSecure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  uint32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  {
    try
    {
      result = (bool)(arg1)->IsTransportConnectionSecure(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1_1IsTransportConnectionSecure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::RRObject > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::RRObject > tempnull2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::RRObject > **)&jarg2 : &tempnull2; 
  {
    try
    {
      result = (bool)(arg1)->IsTransportConnectionSecure((boost::shared_ptr< RobotRaconteur::RRObject > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1isSecurePeerIdentityVerified(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  uint32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  {
    try
    {
      result = (bool)(arg1)->IsSecurePeerIdentityVerified(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1_1IsSecurePeerIdentityVerified(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::RRObject > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::RRObject > tempnull2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::RRObject > **)&jarg2 : &tempnull2; 
  {
    try
    {
      result = (bool)(arg1)->IsSecurePeerIdentityVerified((boost::shared_ptr< RobotRaconteur::RRObject > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1getSecurePeerIdentity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  uint32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  {
    try
    {
      result = (arg1)->GetSecurePeerIdentity(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1_1GetSecurePeerIdentity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::RRObject > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::RRObject > tempnull2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::RRObject > **)&jarg2 : &tempnull2; 
  {
    try
    {
      result = (arg1)->GetSecurePeerIdentity((boost::shared_ptr< RobotRaconteur::RRObject > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1startServerUsingPortSharer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->StartServerUsingPortSharer();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1_1IsPortSharerRunning(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)(arg1)->IsPortSharerRunning();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1getAcceptWebSockets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)(arg1)->GetAcceptWebSockets();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1setAcceptWebSockets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  bool arg2 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      (arg1)->SetAcceptWebSockets(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1getWebSocketAllowedOrigins(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetWebSocketAllowedOrigins();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1addWebSocketAllowedOrigin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      (arg1)->AddWebSocketAllowedOrigin((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1removeWebSocketAllowedOrigin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      (arg1)->RemoveWebSocketAllowedOrigin((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1getDisableMessage4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)(arg1)->GetDisableMessage4();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1setDisableMessage4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  bool arg2 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      (arg1)->SetDisableMessage4(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1getDisableStringTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)(arg1)->GetDisableStringTable();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1setDisableStringTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  bool arg2 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      (arg1)->SetDisableStringTable(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1getDisableAsyncMessageIO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)(arg1)->GetDisableAsyncMessageIO();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1setDisableAsyncMessageIO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  bool arg2 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      (arg1)->SetDisableAsyncMessageIO(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1getLocalAdapterIPAddresses(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = RobotRaconteur_TcpTransport_GetLocalAdapterIPAddresses();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1TcpTransport(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::TcpTransport *arg1 = (RobotRaconteur::TcpTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::TcpTransport > **)&jarg1;
  arg1 = (RobotRaconteur::TcpTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1LocalTransport_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::LocalTransport *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::LocalTransport *)new RobotRaconteur::LocalTransport();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::LocalTransport > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::LocalTransport >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1LocalTransport_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *arg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > tempnull1 ;
  RobotRaconteur::LocalTransport *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jarg1 : &tempnull1; 
  {
    try
    {
      result = (RobotRaconteur::LocalTransport *)new RobotRaconteur::LocalTransport((boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::LocalTransport > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::LocalTransport >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_LocalTransport_1isLocalTransportSupported(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (bool)RobotRaconteur::LocalTransport::IsLocalTransportSupported();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_LocalTransport_1getUrlSchemeString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::LocalTransport *arg1 = (RobotRaconteur::LocalTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::LocalTransport const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const RobotRaconteur::LocalTransport > **)&jarg1;
  arg1 = (RobotRaconteur::LocalTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = ((RobotRaconteur::LocalTransport const *)arg1)->GetUrlSchemeString();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_LocalTransport_1getServerListenUrls(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::LocalTransport *arg1 = (RobotRaconteur::LocalTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::LocalTransport > *smartarg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::LocalTransport > **)&jarg1;
  arg1 = (RobotRaconteur::LocalTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetServerListenUrls();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_LocalTransport_1startClientAsNodeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::LocalTransport *arg1 = (RobotRaconteur::LocalTransport *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::LocalTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::LocalTransport > **)&jarg1;
  arg1 = (RobotRaconteur::LocalTransport *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      (arg1)->StartClientAsNodeName((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_LocalTransport_1startServerAsNodeName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  RobotRaconteur::LocalTransport *arg1 = (RobotRaconteur::LocalTransport *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  boost::shared_ptr< RobotRaconteur::LocalTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::LocalTransport > **)&jarg1;
  arg1 = (RobotRaconteur::LocalTransport *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  {
    try
    {
      (arg1)->StartServerAsNodeName((std::string const &)*arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_LocalTransport_1startServerAsNodeName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::LocalTransport *arg1 = (RobotRaconteur::LocalTransport *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::LocalTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::LocalTransport > **)&jarg1;
  arg1 = (RobotRaconteur::LocalTransport *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      (arg1)->StartServerAsNodeName((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_LocalTransport_1startServerAsNodeID_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  RobotRaconteur::LocalTransport *arg1 = (RobotRaconteur::LocalTransport *) 0 ;
  RobotRaconteur::NodeID *arg2 = 0 ;
  bool arg3 ;
  boost::shared_ptr< RobotRaconteur::LocalTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::LocalTransport > **)&jarg1;
  arg1 = (RobotRaconteur::LocalTransport *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::NodeID **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::NodeID const & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  {
    try
    {
      (arg1)->StartServerAsNodeID((RobotRaconteur::NodeID const &)*arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_LocalTransport_1startServerAsNodeID_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::LocalTransport *arg1 = (RobotRaconteur::LocalTransport *) 0 ;
  RobotRaconteur::NodeID *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::LocalTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::LocalTransport > **)&jarg1;
  arg1 = (RobotRaconteur::LocalTransport *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::NodeID **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::NodeID const & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->StartServerAsNodeID((RobotRaconteur::NodeID const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_LocalTransport_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::LocalTransport *arg1 = (RobotRaconteur::LocalTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::LocalTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::LocalTransport > **)&jarg1;
  arg1 = (RobotRaconteur::LocalTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->Close();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_LocalTransport_1getMaxMessageSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::LocalTransport *arg1 = (RobotRaconteur::LocalTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::LocalTransport > *smartarg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::LocalTransport > **)&jarg1;
  arg1 = (RobotRaconteur::LocalTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (int32_t)(arg1)->GetMaxMessageSize();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_LocalTransport_1setMaxMessageSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::LocalTransport *arg1 = (RobotRaconteur::LocalTransport *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::LocalTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::LocalTransport > **)&jarg1;
  arg1 = (RobotRaconteur::LocalTransport *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      (arg1)->SetMaxMessageSize(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_LocalTransport_1getDisableMessage4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::LocalTransport *arg1 = (RobotRaconteur::LocalTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::LocalTransport > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::LocalTransport > **)&jarg1;
  arg1 = (RobotRaconteur::LocalTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)(arg1)->GetDisableMessage4();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_LocalTransport_1setDisableMessage4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RobotRaconteur::LocalTransport *arg1 = (RobotRaconteur::LocalTransport *) 0 ;
  bool arg2 ;
  boost::shared_ptr< RobotRaconteur::LocalTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::LocalTransport > **)&jarg1;
  arg1 = (RobotRaconteur::LocalTransport *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      (arg1)->SetDisableMessage4(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_LocalTransport_1getDisableStringTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::LocalTransport *arg1 = (RobotRaconteur::LocalTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::LocalTransport > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::LocalTransport > **)&jarg1;
  arg1 = (RobotRaconteur::LocalTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)(arg1)->GetDisableStringTable();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_LocalTransport_1setDisableStringTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RobotRaconteur::LocalTransport *arg1 = (RobotRaconteur::LocalTransport *) 0 ;
  bool arg2 ;
  boost::shared_ptr< RobotRaconteur::LocalTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::LocalTransport > **)&jarg1;
  arg1 = (RobotRaconteur::LocalTransport *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      (arg1)->SetDisableStringTable(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_LocalTransport_1getDisableAsyncMessageIO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::LocalTransport *arg1 = (RobotRaconteur::LocalTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::LocalTransport > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::LocalTransport > **)&jarg1;
  arg1 = (RobotRaconteur::LocalTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)(arg1)->GetDisableAsyncMessageIO();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_LocalTransport_1setDisableAsyncMessageIO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RobotRaconteur::LocalTransport *arg1 = (RobotRaconteur::LocalTransport *) 0 ;
  bool arg2 ;
  boost::shared_ptr< RobotRaconteur::LocalTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::LocalTransport > **)&jarg1;
  arg1 = (RobotRaconteur::LocalTransport *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      (arg1)->SetDisableAsyncMessageIO(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_LocalTransport_1enableNodeDiscoveryListening(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::LocalTransport *arg1 = (RobotRaconteur::LocalTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::LocalTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::LocalTransport > **)&jarg1;
  arg1 = (RobotRaconteur::LocalTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->EnableNodeDiscoveryListening();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_LocalTransport_1disableNodeDiscoveryListening(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::LocalTransport *arg1 = (RobotRaconteur::LocalTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::LocalTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::LocalTransport > **)&jarg1;
  arg1 = (RobotRaconteur::LocalTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->DisableNodeDiscoveryListening();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1LocalTransport(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::LocalTransport *arg1 = (RobotRaconteur::LocalTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::LocalTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::LocalTransport > **)&jarg1;
  arg1 = (RobotRaconteur::LocalTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1HardwareTransport_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::HardwareTransport *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::HardwareTransport *)new RobotRaconteur::HardwareTransport();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::HardwareTransport > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::HardwareTransport >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1HardwareTransport_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *arg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > tempnull1 ;
  RobotRaconteur::HardwareTransport *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jarg1 : &tempnull1; 
  {
    try
    {
      result = (RobotRaconteur::HardwareTransport *)new RobotRaconteur::HardwareTransport((boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::HardwareTransport > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::HardwareTransport >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_HardwareTransport_1getUrlSchemeString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::HardwareTransport *arg1 = (RobotRaconteur::HardwareTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::HardwareTransport const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const RobotRaconteur::HardwareTransport > **)&jarg1;
  arg1 = (RobotRaconteur::HardwareTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = ((RobotRaconteur::HardwareTransport const *)arg1)->GetUrlSchemeString();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_HardwareTransport_1getServerListenUrls(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::HardwareTransport *arg1 = (RobotRaconteur::HardwareTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::HardwareTransport > *smartarg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::HardwareTransport > **)&jarg1;
  arg1 = (RobotRaconteur::HardwareTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetServerListenUrls();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_HardwareTransport_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::HardwareTransport *arg1 = (RobotRaconteur::HardwareTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::HardwareTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::HardwareTransport > **)&jarg1;
  arg1 = (RobotRaconteur::HardwareTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->Close();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_HardwareTransport_1getMaxMessageSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::HardwareTransport *arg1 = (RobotRaconteur::HardwareTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::HardwareTransport > *smartarg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::HardwareTransport > **)&jarg1;
  arg1 = (RobotRaconteur::HardwareTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (int32_t)(arg1)->GetMaxMessageSize();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_HardwareTransport_1setMaxMessageSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::HardwareTransport *arg1 = (RobotRaconteur::HardwareTransport *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::HardwareTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::HardwareTransport > **)&jarg1;
  arg1 = (RobotRaconteur::HardwareTransport *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      (arg1)->SetMaxMessageSize(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_HardwareTransport_1getDisableMessage4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::HardwareTransport *arg1 = (RobotRaconteur::HardwareTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::HardwareTransport > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::HardwareTransport > **)&jarg1;
  arg1 = (RobotRaconteur::HardwareTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)(arg1)->GetDisableMessage4();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_HardwareTransport_1setDisableMessage4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RobotRaconteur::HardwareTransport *arg1 = (RobotRaconteur::HardwareTransport *) 0 ;
  bool arg2 ;
  boost::shared_ptr< RobotRaconteur::HardwareTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::HardwareTransport > **)&jarg1;
  arg1 = (RobotRaconteur::HardwareTransport *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      (arg1)->SetDisableMessage4(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_HardwareTransport_1getDisableStringTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::HardwareTransport *arg1 = (RobotRaconteur::HardwareTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::HardwareTransport > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::HardwareTransport > **)&jarg1;
  arg1 = (RobotRaconteur::HardwareTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)(arg1)->GetDisableStringTable();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_HardwareTransport_1setDisableStringTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RobotRaconteur::HardwareTransport *arg1 = (RobotRaconteur::HardwareTransport *) 0 ;
  bool arg2 ;
  boost::shared_ptr< RobotRaconteur::HardwareTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::HardwareTransport > **)&jarg1;
  arg1 = (RobotRaconteur::HardwareTransport *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      (arg1)->SetDisableStringTable(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_HardwareTransport_1getDisableAsyncMessageIO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::HardwareTransport *arg1 = (RobotRaconteur::HardwareTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::HardwareTransport > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::HardwareTransport > **)&jarg1;
  arg1 = (RobotRaconteur::HardwareTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)(arg1)->GetDisableAsyncMessageIO();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_HardwareTransport_1setDisableAsyncMessageIO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RobotRaconteur::HardwareTransport *arg1 = (RobotRaconteur::HardwareTransport *) 0 ;
  bool arg2 ;
  boost::shared_ptr< RobotRaconteur::HardwareTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::HardwareTransport > **)&jarg1;
  arg1 = (RobotRaconteur::HardwareTransport *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      (arg1)->SetDisableAsyncMessageIO(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1HardwareTransport(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::HardwareTransport *arg1 = (RobotRaconteur::HardwareTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::HardwareTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::HardwareTransport > **)&jarg1;
  arg1 = (RobotRaconteur::HardwareTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1IntraTransport_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::IntraTransport *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::IntraTransport *)new RobotRaconteur::IntraTransport();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::IntraTransport > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::IntraTransport >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1IntraTransport_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *arg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > tempnull1 ;
  RobotRaconteur::IntraTransport *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jarg1 : &tempnull1; 
  {
    try
    {
      result = (RobotRaconteur::IntraTransport *)new RobotRaconteur::IntraTransport((boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::IntraTransport > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::IntraTransport >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_IntraTransport_1getUrlSchemeString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::IntraTransport *arg1 = (RobotRaconteur::IntraTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::IntraTransport const > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr< const RobotRaconteur::IntraTransport > **)&jarg1;
  arg1 = (RobotRaconteur::IntraTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = ((RobotRaconteur::IntraTransport const *)arg1)->GetUrlSchemeString();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_IntraTransport_1getServerListenUrls(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::IntraTransport *arg1 = (RobotRaconteur::IntraTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::IntraTransport > *smartarg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::IntraTransport > **)&jarg1;
  arg1 = (RobotRaconteur::IntraTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetServerListenUrls();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_IntraTransport_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::IntraTransport *arg1 = (RobotRaconteur::IntraTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::IntraTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::IntraTransport > **)&jarg1;
  arg1 = (RobotRaconteur::IntraTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->Close();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_IntraTransport_1startClient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::IntraTransport *arg1 = (RobotRaconteur::IntraTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::IntraTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::IntraTransport > **)&jarg1;
  arg1 = (RobotRaconteur::IntraTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->StartClient();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_IntraTransport_1startServer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::IntraTransport *arg1 = (RobotRaconteur::IntraTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::IntraTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::IntraTransport > **)&jarg1;
  arg1 = (RobotRaconteur::IntraTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->StartServer();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1IntraTransport(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::IntraTransport *arg1 = (RobotRaconteur::IntraTransport *) 0 ;
  boost::shared_ptr< RobotRaconteur::IntraTransport > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::IntraTransport > **)&jarg1;
  arg1 = (RobotRaconteur::IntraTransport *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WallTimer_1initstruct_1handler_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  WallTimer_initstruct *arg1 = (WallTimer_initstruct *) 0 ;
  RobotRaconteur::AsyncTimerEventReturnDirector *arg2 = (RobotRaconteur::AsyncTimerEventReturnDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(WallTimer_initstruct **)&jarg1; 
  arg2 = *(RobotRaconteur::AsyncTimerEventReturnDirector **)&jarg2; 
  if (arg1) (arg1)->handler = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WallTimer_1initstruct_1handler_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  WallTimer_initstruct *arg1 = (WallTimer_initstruct *) 0 ;
  RobotRaconteur::AsyncTimerEventReturnDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WallTimer_initstruct **)&jarg1; 
  result = (RobotRaconteur::AsyncTimerEventReturnDirector *) ((arg1)->handler);
  *(RobotRaconteur::AsyncTimerEventReturnDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WallTimer_1initstruct_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  WallTimer_initstruct *arg1 = (WallTimer_initstruct *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WallTimer_initstruct **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WallTimer_1initstruct_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  WallTimer_initstruct *arg1 = (WallTimer_initstruct *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WallTimer_initstruct **)&jarg1; 
  result = (int32_t) ((arg1)->id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WallTimer_1initstruct(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  WallTimer_initstruct *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (WallTimer_initstruct *)new WallTimer_initstruct();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(WallTimer_initstruct **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WallTimer_1initstruct(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  WallTimer_initstruct *arg1 = (WallTimer_initstruct *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WallTimer_initstruct **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TimerEvent_1stopped_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::TimerEvent *arg1 = (RobotRaconteur::TimerEvent *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::TimerEvent **)&jarg1; 
  result = (bool) ((arg1)->stopped);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TimerEvent_1last_1expected_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::TimerEvent *arg1 = (RobotRaconteur::TimerEvent *) 0 ;
  boost::posix_time::ptime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::TimerEvent **)&jarg1; 
  result =  ((arg1)->last_expected);
  {
    {
      TimeSpec timespec_result1 = RobotRaconteur::ptimeToTimeSpec(result);
      *(RobotRaconteur::TimeSpec **)&jresult = new RobotRaconteur::TimeSpec((const RobotRaconteur::TimeSpec &)timespec_result1);
    }    
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TimerEvent_1last_1real_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::TimerEvent *arg1 = (RobotRaconteur::TimerEvent *) 0 ;
  boost::posix_time::ptime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::TimerEvent **)&jarg1; 
  result =  ((arg1)->last_real);
  {
    {
      TimeSpec timespec_result1 = RobotRaconteur::ptimeToTimeSpec(result);
      *(RobotRaconteur::TimeSpec **)&jresult = new RobotRaconteur::TimeSpec((const RobotRaconteur::TimeSpec &)timespec_result1);
    }    
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TimerEvent_1current_1expected_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::TimerEvent *arg1 = (RobotRaconteur::TimerEvent *) 0 ;
  boost::posix_time::ptime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::TimerEvent **)&jarg1; 
  result =  ((arg1)->current_expected);
  {
    {
      TimeSpec timespec_result1 = RobotRaconteur::ptimeToTimeSpec(result);
      *(RobotRaconteur::TimeSpec **)&jresult = new RobotRaconteur::TimeSpec((const RobotRaconteur::TimeSpec &)timespec_result1);
    }    
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TimerEvent_1current_1real_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::TimerEvent *arg1 = (RobotRaconteur::TimerEvent *) 0 ;
  boost::posix_time::ptime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::TimerEvent **)&jarg1; 
  result =  ((arg1)->current_real);
  {
    {
      TimeSpec timespec_result1 = RobotRaconteur::ptimeToTimeSpec(result);
      *(RobotRaconteur::TimeSpec **)&jresult = new RobotRaconteur::TimeSpec((const RobotRaconteur::TimeSpec &)timespec_result1);
    }    
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1TimerEvent(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::TimerEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::TimerEvent *)new RobotRaconteur::TimerEvent();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::TimerEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1TimerEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::TimerEvent *arg1 = (RobotRaconteur::TimerEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::TimerEvent **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1AsyncTimerEventReturnDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::AsyncTimerEventReturnDirector *arg1 = (RobotRaconteur::AsyncTimerEventReturnDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::AsyncTimerEventReturnDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncTimerEventReturnDirector_1handler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  RobotRaconteur::AsyncTimerEventReturnDirector *arg1 = (RobotRaconteur::AsyncTimerEventReturnDirector *) 0 ;
  RobotRaconteur::TimerEvent *arg2 = 0 ;
  RobotRaconteur::HandlerErrorInfo *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(RobotRaconteur::AsyncTimerEventReturnDirector **)&jarg1; 
  arg2 = *(RobotRaconteur::TimerEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::TimerEvent const & reference is null");
    return ;
  } 
  arg3 = *(RobotRaconteur::HandlerErrorInfo **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::HandlerErrorInfo & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->handler((RobotRaconteur::TimerEvent const &)*arg2,*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1AsyncTimerEventReturnDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::AsyncTimerEventReturnDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::AsyncTimerEventReturnDirector *)new SwigDirector_AsyncTimerEventReturnDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::AsyncTimerEventReturnDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncTimerEventReturnDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::AsyncTimerEventReturnDirector *obj = *((RobotRaconteur::AsyncTimerEventReturnDirector **)&objarg);
  (void)jcls;
  SwigDirector_AsyncTimerEventReturnDirector *director = static_cast<SwigDirector_AsyncTimerEventReturnDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncTimerEventReturnDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::AsyncTimerEventReturnDirector *obj = *((RobotRaconteur::AsyncTimerEventReturnDirector **)&objarg);
  SwigDirector_AsyncTimerEventReturnDirector *director = dynamic_cast<SwigDirector_AsyncTimerEventReturnDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_Timer_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::Timer *arg1 = (RobotRaconteur::Timer *) 0 ;
  boost::shared_ptr< RobotRaconteur::Timer > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::Timer > **)&jarg1;
  arg1 = (RobotRaconteur::Timer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->Start();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_Timer_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::Timer *arg1 = (RobotRaconteur::Timer *) 0 ;
  boost::shared_ptr< RobotRaconteur::Timer > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::Timer > **)&jarg1;
  arg1 = (RobotRaconteur::Timer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->Stop();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_Timer_1getPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::Timer *arg1 = (RobotRaconteur::Timer *) 0 ;
  boost::shared_ptr< RobotRaconteur::Timer > *smartarg1 = 0 ;
  boost::posix_time::time_duration result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::Timer > **)&jarg1;
  arg1 = (RobotRaconteur::Timer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetPeriod();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  {
    jresult=(jint)(&result)->total_milliseconds();
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_Timer_1setPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::Timer *arg1 = (RobotRaconteur::Timer *) 0 ;
  boost::posix_time::time_duration *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::Timer > *smartarg1 = 0 ;
  boost::posix_time::time_duration tmpDur2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::Timer > **)&jarg1;
  arg1 = (RobotRaconteur::Timer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    tmpDur2=boost::posix_time::milliseconds(jarg2);
    arg2=&tmpDur2;
  }
  {
    try
    {
      (arg1)->SetPeriod((boost::posix_time::time_duration const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_Timer_1isRunning(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::Timer *arg1 = (RobotRaconteur::Timer *) 0 ;
  boost::shared_ptr< RobotRaconteur::Timer > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::Timer > **)&jarg1;
  arg1 = (RobotRaconteur::Timer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)(arg1)->IsRunning();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1Timer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::Timer *arg1 = (RobotRaconteur::Timer *) 0 ;
  boost::shared_ptr< RobotRaconteur::Timer > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::Timer > **)&jarg1;
  arg1 = (RobotRaconteur::Timer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WallTimer_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::WallTimer *arg1 = (RobotRaconteur::WallTimer *) 0 ;
  boost::shared_ptr< RobotRaconteur::WallTimer > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WallTimer > **)&jarg1;
  arg1 = (RobotRaconteur::WallTimer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->Start();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WallTimer_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::WallTimer *arg1 = (RobotRaconteur::WallTimer *) 0 ;
  boost::shared_ptr< RobotRaconteur::WallTimer > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WallTimer > **)&jarg1;
  arg1 = (RobotRaconteur::WallTimer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->Stop();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WallTimer_1getPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::WallTimer *arg1 = (RobotRaconteur::WallTimer *) 0 ;
  boost::shared_ptr< RobotRaconteur::WallTimer > *smartarg1 = 0 ;
  boost::posix_time::time_duration result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WallTimer > **)&jarg1;
  arg1 = (RobotRaconteur::WallTimer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetPeriod();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  {
    jresult=(jint)(&result)->total_milliseconds();
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WallTimer_1setPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::WallTimer *arg1 = (RobotRaconteur::WallTimer *) 0 ;
  boost::posix_time::time_duration *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WallTimer > *smartarg1 = 0 ;
  boost::posix_time::time_duration tmpDur2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WallTimer > **)&jarg1;
  arg1 = (RobotRaconteur::WallTimer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    tmpDur2=boost::posix_time::milliseconds(jarg2);
    arg2=&tmpDur2;
  }
  {
    try
    {
      (arg1)->SetPeriod((boost::posix_time::time_duration const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WallTimer_1isRunning(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::WallTimer *arg1 = (RobotRaconteur::WallTimer *) 0 ;
  boost::shared_ptr< RobotRaconteur::WallTimer > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WallTimer > **)&jarg1;
  arg1 = (RobotRaconteur::WallTimer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)(arg1)->IsRunning();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WallTimer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WallTimer *arg1 = (RobotRaconteur::WallTimer *) 0 ;
  boost::shared_ptr< RobotRaconteur::WallTimer > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WallTimer > **)&jarg1;
  arg1 = (RobotRaconteur::WallTimer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WallTimer(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  boost::posix_time::time_duration *arg1 = 0 ;
  bool arg2 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *arg3 = 0 ;
  WallTimer_initstruct arg4 ;
  boost::posix_time::time_duration tmpDur1 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > tempnull3 ;
  WallTimer_initstruct *argp4 ;
  RobotRaconteur::WallTimer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  {
    tmpDur1=boost::posix_time::milliseconds(jarg1);
    arg1=&tmpDur1;
  }
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jarg3 : &tempnull3; 
  argp4 = *(WallTimer_initstruct **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null WallTimer_initstruct");
    return 0;
  }
  arg4 = *argp4; 
  {
    try
    {
      result = (RobotRaconteur::WallTimer *)new_RobotRaconteur_WallTimer((boost::posix_time::time_duration const &)*arg1,arg2,(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &)*arg3,arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::WallTimer > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::WallTimer >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_Rate_1sleep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::Rate *arg1 = (RobotRaconteur::Rate *) 0 ;
  boost::shared_ptr< RobotRaconteur::Rate > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::Rate > **)&jarg1;
  arg1 = (RobotRaconteur::Rate *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->Sleep();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1Rate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::Rate *arg1 = (RobotRaconteur::Rate *) 0 ;
  boost::shared_ptr< RobotRaconteur::Rate > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::Rate > **)&jarg1;
  arg1 = (RobotRaconteur::Rate *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WallRate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  double arg1 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > arg2 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *argp2 ;
  RobotRaconteur::WallRate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (double)jarg1; 
  argp2 = *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jarg2;
  if (argp2) arg2 = *argp2; 
  {
    try
    {
      result = (RobotRaconteur::WallRate *)new RobotRaconteur::WallRate(arg1,arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::WallRate > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::WallRate >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WallRate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  RobotRaconteur::WallRate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  {
    try
    {
      result = (RobotRaconteur::WallRate *)new RobotRaconteur::WallRate(arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::WallRate > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::WallRate >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WallRate_1sleep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::WallRate *arg1 = (RobotRaconteur::WallRate *) 0 ;
  boost::shared_ptr< RobotRaconteur::WallRate > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WallRate > **)&jarg1;
  arg1 = (RobotRaconteur::WallRate *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->Sleep();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WallRate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WallRate *arg1 = (RobotRaconteur::WallRate *) 0 ;
  boost::shared_ptr< RobotRaconteur::WallRate > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WallRate > **)&jarg1;
  arg1 = (RobotRaconteur::WallRate *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1AutoResetEvent(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::AutoResetEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::AutoResetEvent *)new RobotRaconteur::AutoResetEvent();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::AutoResetEvent > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::AutoResetEvent >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1AutoResetEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::AutoResetEvent *arg1 = (RobotRaconteur::AutoResetEvent *) 0 ;
  boost::shared_ptr< RobotRaconteur::AutoResetEvent > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::AutoResetEvent > **)&jarg1;
  arg1 = (RobotRaconteur::AutoResetEvent *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AutoResetEvent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::AutoResetEvent *arg1 = (RobotRaconteur::AutoResetEvent *) 0 ;
  boost::shared_ptr< RobotRaconteur::AutoResetEvent > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::AutoResetEvent > **)&jarg1;
  arg1 = (RobotRaconteur::AutoResetEvent *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->Set();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AutoResetEvent_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::AutoResetEvent *arg1 = (RobotRaconteur::AutoResetEvent *) 0 ;
  boost::shared_ptr< RobotRaconteur::AutoResetEvent > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::AutoResetEvent > **)&jarg1;
  arg1 = (RobotRaconteur::AutoResetEvent *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->Reset();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AutoResetEvent_1waitOne_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::AutoResetEvent *arg1 = (RobotRaconteur::AutoResetEvent *) 0 ;
  boost::shared_ptr< RobotRaconteur::AutoResetEvent > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::AutoResetEvent > **)&jarg1;
  arg1 = (RobotRaconteur::AutoResetEvent *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->WaitOne();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AutoResetEvent_1waitOne_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  RobotRaconteur::AutoResetEvent *arg1 = (RobotRaconteur::AutoResetEvent *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::AutoResetEvent > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::AutoResetEvent > **)&jarg1;
  arg1 = (RobotRaconteur::AutoResetEvent *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = (bool)(arg1)->WaitOne(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TimeSpec_1seconds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::TimeSpec *arg1 = (RobotRaconteur::TimeSpec *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::TimeSpec **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->seconds = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TimeSpec_1seconds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::TimeSpec *arg1 = (RobotRaconteur::TimeSpec *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::TimeSpec **)&jarg1; 
  result = (int64_t) ((arg1)->seconds);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TimeSpec_1nanoseconds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::TimeSpec *arg1 = (RobotRaconteur::TimeSpec *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::TimeSpec **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->nanoseconds = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TimeSpec_1nanoseconds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::TimeSpec *arg1 = (RobotRaconteur::TimeSpec *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::TimeSpec **)&jarg1; 
  result = (int32_t) ((arg1)->nanoseconds);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1TimeSpec_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::TimeSpec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::TimeSpec *)new RobotRaconteur::TimeSpec();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::TimeSpec **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1TimeSpec_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int64_t arg1 ;
  int32_t arg2 ;
  RobotRaconteur::TimeSpec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64_t)jarg1; 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = (RobotRaconteur::TimeSpec *)new RobotRaconteur::TimeSpec(arg1,arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::TimeSpec **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TimeSpec_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  RobotRaconteur::TimeSpec *arg1 = (RobotRaconteur::TimeSpec *) 0 ;
  RobotRaconteur::TimeSpec *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::TimeSpec **)&jarg1; 
  arg2 = *(RobotRaconteur::TimeSpec **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::TimeSpec const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (bool)(arg1)->operator ==((RobotRaconteur::TimeSpec const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TimeSpec_1ne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  RobotRaconteur::TimeSpec *arg1 = (RobotRaconteur::TimeSpec *) 0 ;
  RobotRaconteur::TimeSpec *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::TimeSpec **)&jarg1; 
  arg2 = *(RobotRaconteur::TimeSpec **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::TimeSpec const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (bool)(arg1)->operator !=((RobotRaconteur::TimeSpec const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TimeSpec_1sub(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  RobotRaconteur::TimeSpec *arg1 = (RobotRaconteur::TimeSpec *) 0 ;
  RobotRaconteur::TimeSpec *arg2 = 0 ;
  RobotRaconteur::TimeSpec result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::TimeSpec **)&jarg1; 
  arg2 = *(RobotRaconteur::TimeSpec **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::TimeSpec const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (arg1)->operator -((RobotRaconteur::TimeSpec const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::TimeSpec **)&jresult = new RobotRaconteur::TimeSpec((const RobotRaconteur::TimeSpec &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TimeSpec_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  RobotRaconteur::TimeSpec *arg1 = (RobotRaconteur::TimeSpec *) 0 ;
  RobotRaconteur::TimeSpec *arg2 = 0 ;
  RobotRaconteur::TimeSpec result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::TimeSpec **)&jarg1; 
  arg2 = *(RobotRaconteur::TimeSpec **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::TimeSpec const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (arg1)->operator +((RobotRaconteur::TimeSpec const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::TimeSpec **)&jresult = new RobotRaconteur::TimeSpec((const RobotRaconteur::TimeSpec &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TimeSpec_1gt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  RobotRaconteur::TimeSpec *arg1 = (RobotRaconteur::TimeSpec *) 0 ;
  RobotRaconteur::TimeSpec *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::TimeSpec **)&jarg1; 
  arg2 = *(RobotRaconteur::TimeSpec **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::TimeSpec const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (bool)(arg1)->operator >((RobotRaconteur::TimeSpec const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TimeSpec_1ge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  RobotRaconteur::TimeSpec *arg1 = (RobotRaconteur::TimeSpec *) 0 ;
  RobotRaconteur::TimeSpec *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::TimeSpec **)&jarg1; 
  arg2 = *(RobotRaconteur::TimeSpec **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::TimeSpec const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (bool)(arg1)->operator >=((RobotRaconteur::TimeSpec const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TimeSpec_1lt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  RobotRaconteur::TimeSpec *arg1 = (RobotRaconteur::TimeSpec *) 0 ;
  RobotRaconteur::TimeSpec *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::TimeSpec **)&jarg1; 
  arg2 = *(RobotRaconteur::TimeSpec **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::TimeSpec const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (bool)(arg1)->operator <((RobotRaconteur::TimeSpec const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TimeSpec_1le(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  RobotRaconteur::TimeSpec *arg1 = (RobotRaconteur::TimeSpec *) 0 ;
  RobotRaconteur::TimeSpec *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::TimeSpec **)&jarg1; 
  arg2 = *(RobotRaconteur::TimeSpec **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::TimeSpec const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (bool)(arg1)->operator <=((RobotRaconteur::TimeSpec const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TimeSpec_1cleanup_1nanosecs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::TimeSpec *arg1 = (RobotRaconteur::TimeSpec *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::TimeSpec **)&jarg1; 
  {
    try
    {
      (arg1)->cleanup_nanosecs();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1TimeSpec(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::TimeSpec *arg1 = (RobotRaconteur::TimeSpec *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::TimeSpec **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedService_1typed_1packet_1packet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedService_typed_packet *arg1 = (RobotRaconteur::WrappedService_typed_packet *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *arg2 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > tempnull2 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > temp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::WrappedService_typed_packet **)&jarg1; 
  
  // intrusive_ptr by reference
  if ( jarg2 ) {
    smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg2;
    temp2 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg2->get(), true);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  if (arg1) (arg1)->packet = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedService_1typed_1packet_1packet_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedService_typed_packet *arg1 = (RobotRaconteur::WrappedService_typed_packet *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedService_typed_packet **)&jarg1; 
  result = (boost::intrusive_ptr< RobotRaconteur::MessageElement > *) & ((arg1)->packet);
  
  if (*result) {
    intrusive_ptr_add_ref(result->get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElement >(result->get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElement >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedService_1typed_1packet_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedService_typed_packet *arg1 = (RobotRaconteur::WrappedService_typed_packet *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::WrappedService_typed_packet **)&jarg1; 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::TypeDefinition > **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->type = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedService_1typed_1packet_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedService_typed_packet *arg1 = (RobotRaconteur::WrappedService_typed_packet *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedService_typed_packet **)&jarg1; 
  result = (boost::shared_ptr< RobotRaconteur::TypeDefinition > *) & ((arg1)->type);
  *(boost::shared_ptr< RobotRaconteur::TypeDefinition > **)&jresult = *result ? new boost::shared_ptr< RobotRaconteur::TypeDefinition >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedService_1typed_1packet_1stub_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedService_typed_packet *arg1 = (RobotRaconteur::WrappedService_typed_packet *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::WrappedService_typed_packet **)&jarg1; 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->stub = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedService_1typed_1packet_1stub_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedService_typed_packet *arg1 = (RobotRaconteur::WrappedService_typed_packet *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedService_typed_packet **)&jarg1; 
  result = (boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *) & ((arg1)->stub);
  *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jresult = *result ? new boost::shared_ptr< RobotRaconteur::WrappedServiceStub >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedService_1typed_1packet_1client_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RobotRaconteur::WrappedService_typed_packet *arg1 = (RobotRaconteur::WrappedService_typed_packet *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedService_typed_packet **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->client = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedService_1typed_1packet_1client_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedService_typed_packet *arg1 = (RobotRaconteur::WrappedService_typed_packet *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedService_typed_packet **)&jarg1; 
  result = (uint32_t) ((arg1)->client);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedService_1typed_1packet(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedService_typed_packet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedService_typed_packet *)new RobotRaconteur::WrappedService_typed_packet();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedService_typed_packet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedService_1typed_1packet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedService_typed_packet *arg1 = (RobotRaconteur::WrappedService_typed_packet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedService_typed_packet **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedPipeEndpointDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedPipeEndpointDirector *arg1 = (RobotRaconteur::WrappedPipeEndpointDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedPipeEndpointDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeEndpointDirector_1pipeEndpointClosedCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::WrappedPipeEndpointDirector *arg1 = (RobotRaconteur::WrappedPipeEndpointDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedPipeEndpointDirector **)&jarg1; 
  {
    try
    {
      (arg1)->PipeEndpointClosedCallback();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeEndpointDirector_1packetReceivedEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::WrappedPipeEndpointDirector *arg1 = (RobotRaconteur::WrappedPipeEndpointDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedPipeEndpointDirector **)&jarg1; 
  {
    try
    {
      (arg1)->PacketReceivedEvent();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeEndpointDirector_1packetAckReceivedEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RobotRaconteur::WrappedPipeEndpointDirector *arg1 = (RobotRaconteur::WrappedPipeEndpointDirector *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedPipeEndpointDirector **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  {
    try
    {
      (arg1)->PacketAckReceivedEvent(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedPipeEndpointDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPipeEndpointDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedPipeEndpointDirector *)new SwigDirector_WrappedPipeEndpointDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedPipeEndpointDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeEndpointDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::WrappedPipeEndpointDirector *obj = *((RobotRaconteur::WrappedPipeEndpointDirector **)&objarg);
  (void)jcls;
  SwigDirector_WrappedPipeEndpointDirector *director = static_cast<SwigDirector_WrappedPipeEndpointDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeEndpointDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::WrappedPipeEndpointDirector *obj = *((RobotRaconteur::WrappedPipeEndpointDirector **)&objarg);
  SwigDirector_WrappedPipeEndpointDirector *director = dynamic_cast<SwigDirector_WrappedPipeEndpointDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1AsyncPipeEndpointReturnDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::AsyncPipeEndpointReturnDirector *arg1 = (RobotRaconteur::AsyncPipeEndpointReturnDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::AsyncPipeEndpointReturnDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncPipeEndpointReturnDirector_1handler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  RobotRaconteur::AsyncPipeEndpointReturnDirector *arg1 = (RobotRaconteur::AsyncPipeEndpointReturnDirector *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > *arg2 = 0 ;
  RobotRaconteur::HandlerErrorInfo *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(RobotRaconteur::AsyncPipeEndpointReturnDirector **)&jarg1; 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > **)&jarg2 : &tempnull2; 
  arg3 = *(RobotRaconteur::HandlerErrorInfo **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::HandlerErrorInfo & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->handler((boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > const &)*arg2,*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1AsyncPipeEndpointReturnDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::AsyncPipeEndpointReturnDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::AsyncPipeEndpointReturnDirector *)new SwigDirector_AsyncPipeEndpointReturnDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::AsyncPipeEndpointReturnDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncPipeEndpointReturnDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::AsyncPipeEndpointReturnDirector *obj = *((RobotRaconteur::AsyncPipeEndpointReturnDirector **)&objarg);
  (void)jcls;
  SwigDirector_AsyncPipeEndpointReturnDirector *director = static_cast<SwigDirector_AsyncPipeEndpointReturnDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncPipeEndpointReturnDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::AsyncPipeEndpointReturnDirector *obj = *((RobotRaconteur::AsyncPipeEndpointReturnDirector **)&objarg);
  SwigDirector_AsyncPipeEndpointReturnDirector *director = dynamic_cast<SwigDirector_AsyncPipeEndpointReturnDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedTryReceivePacketWaitResult_1res_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RobotRaconteur::WrappedTryReceivePacketWaitResult *arg1 = (RobotRaconteur::WrappedTryReceivePacketWaitResult *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedTryReceivePacketWaitResult **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->res = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedTryReceivePacketWaitResult_1res_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::WrappedTryReceivePacketWaitResult *arg1 = (RobotRaconteur::WrappedTryReceivePacketWaitResult *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedTryReceivePacketWaitResult **)&jarg1; 
  result = (bool) ((arg1)->res);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedTryReceivePacketWaitResult_1packet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedTryReceivePacketWaitResult *arg1 = (RobotRaconteur::WrappedTryReceivePacketWaitResult *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *arg2 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > tempnull2 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > temp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::WrappedTryReceivePacketWaitResult **)&jarg1; 
  
  // intrusive_ptr by reference
  if ( jarg2 ) {
    smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg2;
    temp2 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg2->get(), true);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  if (arg1) (arg1)->packet = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedTryReceivePacketWaitResult_1packet_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedTryReceivePacketWaitResult *arg1 = (RobotRaconteur::WrappedTryReceivePacketWaitResult *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedTryReceivePacketWaitResult **)&jarg1; 
  result = (boost::intrusive_ptr< RobotRaconteur::MessageElement > *) & ((arg1)->packet);
  
  if (*result) {
    intrusive_ptr_add_ref(result->get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElement >(result->get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElement >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedTryReceivePacketWaitResult(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedTryReceivePacketWaitResult *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedTryReceivePacketWaitResult *)new RobotRaconteur::WrappedTryReceivePacketWaitResult();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedTryReceivePacketWaitResult **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedTryReceivePacketWaitResult(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedTryReceivePacketWaitResult *arg1 = (RobotRaconteur::WrappedTryReceivePacketWaitResult *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedTryReceivePacketWaitResult **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeEndpoint_1sendPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPipeEndpoint *arg1 = (RobotRaconteur::WrappedPipeEndpoint *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > tempnull2 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > temp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg2 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeEndpoint > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeEndpoint *)(smartarg1 ? smartarg1->get() : 0); 
  
  // intrusive_ptr by reference
  if ( jarg2 ) {
    smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg2;
    temp2 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg2->get(), true);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  {
    try
    {
      result = (uint32_t)(arg1)->SendPacket((boost::intrusive_ptr< RobotRaconteur::MessageElement > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeEndpoint_1receivePacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPipeEndpoint *arg1 = (RobotRaconteur::WrappedPipeEndpoint *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeEndpoint > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeEndpoint *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->ReceivePacket();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElement >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElement >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeEndpoint_1peekNextPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPipeEndpoint *arg1 = (RobotRaconteur::WrappedPipeEndpoint *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeEndpoint > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeEndpoint *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->PeekNextPacket();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElement >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElement >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeEndpoint_1receivePacketWait_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPipeEndpoint *arg1 = (RobotRaconteur::WrappedPipeEndpoint *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeEndpoint > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeEndpoint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = (arg1)->ReceivePacketWait(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElement >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElement >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeEndpoint_1receivePacketWait_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPipeEndpoint *arg1 = (RobotRaconteur::WrappedPipeEndpoint *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeEndpoint > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeEndpoint *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->ReceivePacketWait();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElement >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElement >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeEndpoint_1peekNextPacketWait_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPipeEndpoint *arg1 = (RobotRaconteur::WrappedPipeEndpoint *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeEndpoint > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeEndpoint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = (arg1)->PeekNextPacketWait(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElement >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElement >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeEndpoint_1peekNextPacketWait_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPipeEndpoint *arg1 = (RobotRaconteur::WrappedPipeEndpoint *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeEndpoint > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeEndpoint *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->PeekNextPacketWait();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElement >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElement >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeEndpoint_1tryReceivePacketWait_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPipeEndpoint *arg1 = (RobotRaconteur::WrappedPipeEndpoint *) 0 ;
  int32_t arg2 ;
  bool arg3 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > *smartarg1 = 0 ;
  RobotRaconteur::WrappedTryReceivePacketWaitResult result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeEndpoint > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeEndpoint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try
    {
      result = (arg1)->TryReceivePacketWait(arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedTryReceivePacketWaitResult **)&jresult = new RobotRaconteur::WrappedTryReceivePacketWaitResult((const RobotRaconteur::WrappedTryReceivePacketWaitResult &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeEndpoint_1tryReceivePacketWait_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPipeEndpoint *arg1 = (RobotRaconteur::WrappedPipeEndpoint *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > *smartarg1 = 0 ;
  RobotRaconteur::WrappedTryReceivePacketWaitResult result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeEndpoint > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeEndpoint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = (arg1)->TryReceivePacketWait(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedTryReceivePacketWaitResult **)&jresult = new RobotRaconteur::WrappedTryReceivePacketWaitResult((const RobotRaconteur::WrappedTryReceivePacketWaitResult &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeEndpoint_1tryReceivePacketWait_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPipeEndpoint *arg1 = (RobotRaconteur::WrappedPipeEndpoint *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > *smartarg1 = 0 ;
  RobotRaconteur::WrappedTryReceivePacketWaitResult result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeEndpoint > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeEndpoint *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->TryReceivePacketWait();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedTryReceivePacketWaitResult **)&jresult = new RobotRaconteur::WrappedTryReceivePacketWaitResult((const RobotRaconteur::WrappedTryReceivePacketWaitResult &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeEndpoint_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::WrappedPipeEndpoint *arg1 = (RobotRaconteur::WrappedPipeEndpoint *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeEndpoint > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeEndpoint *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->Close();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeEndpoint_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::WrappedPipeEndpoint *arg1 = (RobotRaconteur::WrappedPipeEndpoint *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > *smartarg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeEndpoint > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeEndpoint *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (int32_t)(arg1)->GetIndex();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeEndpoint_1getEndpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPipeEndpoint *arg1 = (RobotRaconteur::WrappedPipeEndpoint *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > *smartarg1 = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeEndpoint > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeEndpoint *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (uint32_t)(arg1)->GetEndpoint();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeEndpoint_1available(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPipeEndpoint *arg1 = (RobotRaconteur::WrappedPipeEndpoint *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > *smartarg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeEndpoint > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeEndpoint *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->Available();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeEndpoint_1getRequestPacketAck(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::WrappedPipeEndpoint *arg1 = (RobotRaconteur::WrappedPipeEndpoint *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeEndpoint > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeEndpoint *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)(arg1)->GetRequestPacketAck();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeEndpoint_1setRequestPacketAck(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RobotRaconteur::WrappedPipeEndpoint *arg1 = (RobotRaconteur::WrappedPipeEndpoint *) 0 ;
  bool arg2 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeEndpoint > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeEndpoint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      (arg1)->SetRequestPacketAck(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeEndpoint_1Type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedPipeEndpoint *arg1 = (RobotRaconteur::WrappedPipeEndpoint *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeEndpoint > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeEndpoint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::TypeDefinition > **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->Type = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeEndpoint_1Type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPipeEndpoint *arg1 = (RobotRaconteur::WrappedPipeEndpoint *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeEndpoint > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeEndpoint *)(smartarg1 ? smartarg1->get() : 0); 
  result = (boost::shared_ptr< RobotRaconteur::TypeDefinition > *) & ((arg1)->Type);
  *(boost::shared_ptr< RobotRaconteur::TypeDefinition > **)&jresult = *result ? new boost::shared_ptr< RobotRaconteur::TypeDefinition >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeEndpoint_1setRRDirector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  RobotRaconteur::WrappedPipeEndpoint *arg1 = (RobotRaconteur::WrappedPipeEndpoint *) 0 ;
  RobotRaconteur::WrappedPipeEndpointDirector *arg2 = (RobotRaconteur::WrappedPipeEndpointDirector *) 0 ;
  int32_t arg3 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeEndpoint > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeEndpoint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::WrappedPipeEndpointDirector **)&jarg2; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      (arg1)->SetRRDirector(arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeEndpoint_1isUnreliable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::WrappedPipeEndpoint *arg1 = (RobotRaconteur::WrappedPipeEndpoint *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeEndpoint > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeEndpoint *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)(arg1)->IsUnreliable();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeEndpoint_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::WrappedPipeEndpoint *arg1 = (RobotRaconteur::WrappedPipeEndpoint *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > *smartarg1 = 0 ;
  RobotRaconteur::MemberDefinition_Direction result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeEndpoint > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeEndpoint *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (RobotRaconteur::MemberDefinition_Direction)(arg1)->Direction();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeEndpoint_1asyncSendPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  RobotRaconteur::WrappedPipeEndpoint *arg1 = (RobotRaconteur::WrappedPipeEndpoint *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *arg2 = 0 ;
  RobotRaconteur::AsyncUInt32ReturnDirector *arg3 = (RobotRaconteur::AsyncUInt32ReturnDirector *) 0 ;
  int32_t arg4 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > tempnull2 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > temp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeEndpoint > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeEndpoint *)(smartarg1 ? smartarg1->get() : 0); 
  
  // intrusive_ptr by reference
  if ( jarg2 ) {
    smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg2;
    temp2 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg2->get(), true);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = *(RobotRaconteur::AsyncUInt32ReturnDirector **)&jarg3; 
  arg4 = (int32_t)jarg4; 
  {
    try
    {
      (arg1)->AsyncSendPacket((boost::intrusive_ptr< RobotRaconteur::MessageElement > const &)*arg2,arg3,arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeEndpoint_1asyncClose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  RobotRaconteur::WrappedPipeEndpoint *arg1 = (RobotRaconteur::WrappedPipeEndpoint *) 0 ;
  int32_t arg2 ;
  RobotRaconteur::AsyncVoidReturnDirector *arg3 = (RobotRaconteur::AsyncVoidReturnDirector *) 0 ;
  int32_t arg4 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeEndpoint > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeEndpoint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  arg3 = *(RobotRaconteur::AsyncVoidReturnDirector **)&jarg3; 
  arg4 = (int32_t)jarg4; 
  {
    try
    {
      (arg1)->AsyncClose(arg2,arg3,arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeEndpoint_1getNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPipeEndpoint *arg1 = (RobotRaconteur::WrappedPipeEndpoint *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeEndpoint > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeEndpoint *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetNode();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::RobotRaconteurNode >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeEndpoint_1getIgnoreReceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::WrappedPipeEndpoint *arg1 = (RobotRaconteur::WrappedPipeEndpoint *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeEndpoint > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeEndpoint *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)(arg1)->GetIgnoreReceived();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeEndpoint_1setIgnoreReceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RobotRaconteur::WrappedPipeEndpoint *arg1 = (RobotRaconteur::WrappedPipeEndpoint *) 0 ;
  bool arg2 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeEndpoint > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeEndpoint *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      (arg1)->SetIgnoreReceived(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedPipeEndpoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedPipeEndpoint *arg1 = (RobotRaconteur::WrappedPipeEndpoint *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeEndpoint > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeEndpoint *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeClient_1connect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPipeClient *arg1 = (RobotRaconteur::WrappedPipeClient *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeClient > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeClient *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = (arg1)->Connect(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeClient_1asyncConnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_, jint jarg5) {
  RobotRaconteur::WrappedPipeClient *arg1 = (RobotRaconteur::WrappedPipeClient *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  RobotRaconteur::AsyncPipeEndpointReturnDirector *arg4 = (RobotRaconteur::AsyncPipeEndpointReturnDirector *) 0 ;
  int32_t arg5 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeClient > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeClient *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = *(RobotRaconteur::AsyncPipeEndpointReturnDirector **)&jarg4; 
  arg5 = (int32_t)jarg5; 
  {
    try
    {
      (arg1)->AsyncConnect(arg2,arg3,arg4,arg5);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeClient_1getMemberName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::WrappedPipeClient *arg1 = (RobotRaconteur::WrappedPipeClient *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeClient > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeClient *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetMemberName();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeClient_1Type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedPipeClient *arg1 = (RobotRaconteur::WrappedPipeClient *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeClient > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeClient *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::TypeDefinition > **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->Type = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeClient_1Type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPipeClient *arg1 = (RobotRaconteur::WrappedPipeClient *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeClient > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeClient *)(smartarg1 ? smartarg1->get() : 0); 
  result = (boost::shared_ptr< RobotRaconteur::TypeDefinition > *) & ((arg1)->Type);
  *(boost::shared_ptr< RobotRaconteur::TypeDefinition > **)&jresult = *result ? new boost::shared_ptr< RobotRaconteur::TypeDefinition >(*result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeClient_1getNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPipeClient *arg1 = (RobotRaconteur::WrappedPipeClient *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeClient > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeClient *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetNode();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::RobotRaconteurNode >(result) : 0; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeClient_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::WrappedPipeClient *arg1 = (RobotRaconteur::WrappedPipeClient *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeClient > *smartarg1 = 0 ;
  RobotRaconteur::MemberDefinition_Direction result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeClient *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (RobotRaconteur::MemberDefinition_Direction)(arg1)->Direction();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedPipeClient(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedPipeClient *arg1 = (RobotRaconteur::WrappedPipeClient *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeClient > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeClient *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedPipeServerConnectDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedPipeServerConnectDirector *arg1 = (RobotRaconteur::WrappedPipeServerConnectDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedPipeServerConnectDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeServerConnectDirector_1pipeConnectCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedPipeServerConnectDirector *arg1 = (RobotRaconteur::WrappedPipeServerConnectDirector *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::WrappedPipeServerConnectDirector **)&jarg1; 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > **)&jarg2 : &tempnull2; 
  {
    try
    {
      (arg1)->PipeConnectCallback((boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedPipeServerConnectDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPipeServerConnectDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedPipeServerConnectDirector *)new SwigDirector_WrappedPipeServerConnectDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedPipeServerConnectDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeServerConnectDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::WrappedPipeServerConnectDirector *obj = *((RobotRaconteur::WrappedPipeServerConnectDirector **)&objarg);
  (void)jcls;
  SwigDirector_WrappedPipeServerConnectDirector *director = static_cast<SwigDirector_WrappedPipeServerConnectDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeServerConnectDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::WrappedPipeServerConnectDirector *obj = *((RobotRaconteur::WrappedPipeServerConnectDirector **)&objarg);
  SwigDirector_WrappedPipeServerConnectDirector *director = dynamic_cast<SwigDirector_WrappedPipeServerConnectDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeServer_1getMemberName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::WrappedPipeServer *arg1 = (RobotRaconteur::WrappedPipeServer *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeServer > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeServer > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeServer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetMemberName();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeServer_1Type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedPipeServer *arg1 = (RobotRaconteur::WrappedPipeServer *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeServer > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeServer > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeServer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::TypeDefinition > **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->Type = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeServer_1Type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPipeServer *arg1 = (RobotRaconteur::WrappedPipeServer *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeServer > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeServer > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeServer *)(smartarg1 ? smartarg1->get() : 0); 
  result = (boost::shared_ptr< RobotRaconteur::TypeDefinition > *) & ((arg1)->Type);
  *(boost::shared_ptr< RobotRaconteur::TypeDefinition > **)&jresult = *result ? new boost::shared_ptr< RobotRaconteur::TypeDefinition >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeServer_1setWrappedPipeConnectCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  RobotRaconteur::WrappedPipeServer *arg1 = (RobotRaconteur::WrappedPipeServer *) 0 ;
  RobotRaconteur::WrappedPipeServerConnectDirector *arg2 = (RobotRaconteur::WrappedPipeServerConnectDirector *) 0 ;
  int32_t arg3 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeServer > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeServer > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeServer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::WrappedPipeServerConnectDirector **)&jarg2; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      (arg1)->SetWrappedPipeConnectCallback(arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeServer_1getNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPipeServer *arg1 = (RobotRaconteur::WrappedPipeServer *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeServer > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeServer > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeServer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetNode();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::RobotRaconteurNode >(result) : 0; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeServer_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::WrappedPipeServer *arg1 = (RobotRaconteur::WrappedPipeServer *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeServer > *smartarg1 = 0 ;
  RobotRaconteur::MemberDefinition_Direction result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeServer > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeServer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (RobotRaconteur::MemberDefinition_Direction)(arg1)->Direction();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedPipeServer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedPipeServer *arg1 = (RobotRaconteur::WrappedPipeServer *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeServer > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeServer > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeServer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeBroadcasterPredicateDirector_1predicate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  RobotRaconteur::WrappedPipeBroadcasterPredicateDirector *arg1 = (RobotRaconteur::WrappedPipeBroadcasterPredicateDirector *) 0 ;
  uint32_t arg2 ;
  int32_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedPipeBroadcasterPredicateDirector **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      result = (bool)(arg1)->Predicate(arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedPipeBroadcasterPredicateDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedPipeBroadcasterPredicateDirector *arg1 = (RobotRaconteur::WrappedPipeBroadcasterPredicateDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedPipeBroadcasterPredicateDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedPipeBroadcasterPredicateDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPipeBroadcasterPredicateDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedPipeBroadcasterPredicateDirector *)new SwigDirector_WrappedPipeBroadcasterPredicateDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedPipeBroadcasterPredicateDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeBroadcasterPredicateDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::WrappedPipeBroadcasterPredicateDirector *obj = *((RobotRaconteur::WrappedPipeBroadcasterPredicateDirector **)&objarg);
  (void)jcls;
  SwigDirector_WrappedPipeBroadcasterPredicateDirector *director = static_cast<SwigDirector_WrappedPipeBroadcasterPredicateDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeBroadcasterPredicateDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::WrappedPipeBroadcasterPredicateDirector *obj = *((RobotRaconteur::WrappedPipeBroadcasterPredicateDirector **)&objarg);
  SwigDirector_WrappedPipeBroadcasterPredicateDirector *director = dynamic_cast<SwigDirector_WrappedPipeBroadcasterPredicateDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeBroadcaster_1init_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  RobotRaconteur::WrappedPipeBroadcaster *arg1 = (RobotRaconteur::WrappedPipeBroadcaster *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeServer > *arg2 = 0 ;
  int32_t arg3 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeBroadcaster > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeServer > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeBroadcaster > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeBroadcaster *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedPipeServer > **)&jarg2 : &tempnull2; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      (arg1)->Init((boost::shared_ptr< RobotRaconteur::WrappedPipeServer > const &)*arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeBroadcaster_1init_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedPipeBroadcaster *arg1 = (RobotRaconteur::WrappedPipeBroadcaster *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeServer > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeBroadcaster > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeServer > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeBroadcaster > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeBroadcaster *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedPipeServer > **)&jarg2 : &tempnull2; 
  {
    try
    {
      (arg1)->Init((boost::shared_ptr< RobotRaconteur::WrappedPipeServer > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeBroadcaster_1sendPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedPipeBroadcaster *arg1 = (RobotRaconteur::WrappedPipeBroadcaster *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeBroadcaster > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > tempnull2 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > temp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeBroadcaster > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeBroadcaster *)(smartarg1 ? smartarg1->get() : 0); 
  
  // intrusive_ptr by reference
  if ( jarg2 ) {
    smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg2;
    temp2 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg2->get(), true);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  {
    try
    {
      (arg1)->SendPacket((boost::intrusive_ptr< RobotRaconteur::MessageElement > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeBroadcaster_1asyncSendPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  RobotRaconteur::WrappedPipeBroadcaster *arg1 = (RobotRaconteur::WrappedPipeBroadcaster *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *arg2 = 0 ;
  RobotRaconteur::AsyncVoidNoErrReturnDirector *arg3 = (RobotRaconteur::AsyncVoidNoErrReturnDirector *) 0 ;
  int32_t arg4 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeBroadcaster > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > tempnull2 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > temp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeBroadcaster > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeBroadcaster *)(smartarg1 ? smartarg1->get() : 0); 
  
  // intrusive_ptr by reference
  if ( jarg2 ) {
    smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg2;
    temp2 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg2->get(), true);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = *(RobotRaconteur::AsyncVoidNoErrReturnDirector **)&jarg3; 
  arg4 = (int32_t)jarg4; 
  {
    try
    {
      (arg1)->AsyncSendPacket((boost::intrusive_ptr< RobotRaconteur::MessageElement > const &)*arg2,arg3,arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeBroadcaster_1getActivePipeEndpointCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPipeBroadcaster *arg1 = (RobotRaconteur::WrappedPipeBroadcaster *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeBroadcaster > *smartarg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeBroadcaster > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeBroadcaster *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetActivePipeEndpointCount();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeBroadcaster_1setPredicateDirector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  RobotRaconteur::WrappedPipeBroadcaster *arg1 = (RobotRaconteur::WrappedPipeBroadcaster *) 0 ;
  RobotRaconteur::WrappedPipeBroadcasterPredicateDirector *arg2 = (RobotRaconteur::WrappedPipeBroadcasterPredicateDirector *) 0 ;
  int32_t arg3 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeBroadcaster > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeBroadcaster > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeBroadcaster *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::WrappedPipeBroadcasterPredicateDirector **)&jarg2; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      (arg1)->SetPredicateDirector(arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeBroadcaster_1getMaxBacklog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::WrappedPipeBroadcaster *arg1 = (RobotRaconteur::WrappedPipeBroadcaster *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeBroadcaster > *smartarg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeBroadcaster > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeBroadcaster *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (int32_t)(arg1)->GetMaxBacklog();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeBroadcaster_1setMaxBacklog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::WrappedPipeBroadcaster *arg1 = (RobotRaconteur::WrappedPipeBroadcaster *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeBroadcaster > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeBroadcaster > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeBroadcaster *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      (arg1)->SetMaxBacklog(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedPipeBroadcaster(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPipeBroadcaster *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedPipeBroadcaster *)new RobotRaconteur::WrappedPipeBroadcaster();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::WrappedPipeBroadcaster > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::WrappedPipeBroadcaster >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedPipeBroadcaster(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedPipeBroadcaster *arg1 = (RobotRaconteur::WrappedPipeBroadcaster *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeBroadcaster > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeBroadcaster > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeBroadcaster *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedWireConnectionDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedWireConnectionDirector *arg1 = (RobotRaconteur::WrappedWireConnectionDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedWireConnectionDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireConnectionDirector_1wireValueChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  RobotRaconteur::WrappedWireConnectionDirector *arg1 = (RobotRaconteur::WrappedWireConnectionDirector *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > arg2 ;
  RobotRaconteur::TimeSpec *arg3 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *argp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(RobotRaconteur::WrappedWireConnectionDirector **)&jarg1; 
  
  // intrusive_ptr by value
  smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg2;
  if (smartarg2) {
    arg2 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg2->get(), true);
  }
  
  arg3 = *(RobotRaconteur::TimeSpec **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::TimeSpec const & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->WireValueChanged(arg2,(RobotRaconteur::TimeSpec const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireConnectionDirector_1wireConnectionClosedCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::WrappedWireConnectionDirector *arg1 = (RobotRaconteur::WrappedWireConnectionDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedWireConnectionDirector **)&jarg1; 
  {
    try
    {
      (arg1)->WireConnectionClosedCallback();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedWireConnectionDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedWireConnectionDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedWireConnectionDirector *)new SwigDirector_WrappedWireConnectionDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedWireConnectionDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireConnectionDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::WrappedWireConnectionDirector *obj = *((RobotRaconteur::WrappedWireConnectionDirector **)&objarg);
  (void)jcls;
  SwigDirector_WrappedWireConnectionDirector *director = static_cast<SwigDirector_WrappedWireConnectionDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireConnectionDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::WrappedWireConnectionDirector *obj = *((RobotRaconteur::WrappedWireConnectionDirector **)&objarg);
  SwigDirector_WrappedWireConnectionDirector *director = dynamic_cast<SwigDirector_WrappedWireConnectionDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1AsyncWireConnectionReturnDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::AsyncWireConnectionReturnDirector *arg1 = (RobotRaconteur::AsyncWireConnectionReturnDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::AsyncWireConnectionReturnDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncWireConnectionReturnDirector_1handler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  RobotRaconteur::AsyncWireConnectionReturnDirector *arg1 = (RobotRaconteur::AsyncWireConnectionReturnDirector *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireConnection > *arg2 = 0 ;
  RobotRaconteur::HandlerErrorInfo *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireConnection > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(RobotRaconteur::AsyncWireConnectionReturnDirector **)&jarg1; 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedWireConnection > **)&jarg2 : &tempnull2; 
  arg3 = *(RobotRaconteur::HandlerErrorInfo **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::HandlerErrorInfo & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->handler((boost::shared_ptr< RobotRaconteur::WrappedWireConnection > const &)*arg2,*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1AsyncWireConnectionReturnDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::AsyncWireConnectionReturnDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::AsyncWireConnectionReturnDirector *)new SwigDirector_AsyncWireConnectionReturnDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::AsyncWireConnectionReturnDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncWireConnectionReturnDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::AsyncWireConnectionReturnDirector *obj = *((RobotRaconteur::AsyncWireConnectionReturnDirector **)&objarg);
  (void)jcls;
  SwigDirector_AsyncWireConnectionReturnDirector *director = static_cast<SwigDirector_AsyncWireConnectionReturnDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncWireConnectionReturnDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::AsyncWireConnectionReturnDirector *obj = *((RobotRaconteur::AsyncWireConnectionReturnDirector **)&objarg);
  SwigDirector_AsyncWireConnectionReturnDirector *director = dynamic_cast<SwigDirector_AsyncWireConnectionReturnDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1AsyncWirePeekReturnDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::AsyncWirePeekReturnDirector *arg1 = (RobotRaconteur::AsyncWirePeekReturnDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::AsyncWirePeekReturnDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncWirePeekReturnDirector_1handler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  RobotRaconteur::AsyncWirePeekReturnDirector *arg1 = (RobotRaconteur::AsyncWirePeekReturnDirector *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > arg2 ;
  RobotRaconteur::TimeSpec *arg3 = 0 ;
  RobotRaconteur::HandlerErrorInfo *arg4 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *argp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(RobotRaconteur::AsyncWirePeekReturnDirector **)&jarg1; 
  
  // intrusive_ptr by value
  smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg2;
  if (smartarg2) {
    arg2 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg2->get(), true);
  }
  
  arg3 = *(RobotRaconteur::TimeSpec **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::TimeSpec const & reference is null");
    return ;
  } 
  arg4 = *(RobotRaconteur::HandlerErrorInfo **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::HandlerErrorInfo & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->handler(arg2,(RobotRaconteur::TimeSpec const &)*arg3,*arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1AsyncWirePeekReturnDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::AsyncWirePeekReturnDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::AsyncWirePeekReturnDirector *)new SwigDirector_AsyncWirePeekReturnDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::AsyncWirePeekReturnDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncWirePeekReturnDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::AsyncWirePeekReturnDirector *obj = *((RobotRaconteur::AsyncWirePeekReturnDirector **)&objarg);
  (void)jcls;
  SwigDirector_AsyncWirePeekReturnDirector *director = static_cast<SwigDirector_AsyncWirePeekReturnDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncWirePeekReturnDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::AsyncWirePeekReturnDirector *obj = *((RobotRaconteur::AsyncWirePeekReturnDirector **)&objarg);
  SwigDirector_AsyncWirePeekReturnDirector *director = dynamic_cast<SwigDirector_AsyncWirePeekReturnDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TryGetValueResult_1res_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RobotRaconteur::TryGetValueResult *arg1 = (RobotRaconteur::TryGetValueResult *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::TryGetValueResult **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->res = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TryGetValueResult_1res_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::TryGetValueResult *arg1 = (RobotRaconteur::TryGetValueResult *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::TryGetValueResult **)&jarg1; 
  result = (bool) ((arg1)->res);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TryGetValueResult_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::TryGetValueResult *arg1 = (RobotRaconteur::TryGetValueResult *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *arg2 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > tempnull2 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > temp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::TryGetValueResult **)&jarg1; 
  
  // intrusive_ptr by reference
  if ( jarg2 ) {
    smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg2;
    temp2 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg2->get(), true);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  if (arg1) (arg1)->value = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TryGetValueResult_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::TryGetValueResult *arg1 = (RobotRaconteur::TryGetValueResult *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::TryGetValueResult **)&jarg1; 
  result = (boost::intrusive_ptr< RobotRaconteur::MessageElement > *) & ((arg1)->value);
  
  if (*result) {
    intrusive_ptr_add_ref(result->get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElement >(result->get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElement >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TryGetValueResult_1ts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::TryGetValueResult *arg1 = (RobotRaconteur::TryGetValueResult *) 0 ;
  RobotRaconteur::TimeSpec *arg2 = (RobotRaconteur::TimeSpec *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::TryGetValueResult **)&jarg1; 
  arg2 = *(RobotRaconteur::TimeSpec **)&jarg2; 
  if (arg1) (arg1)->ts = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TryGetValueResult_1ts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::TryGetValueResult *arg1 = (RobotRaconteur::TryGetValueResult *) 0 ;
  RobotRaconteur::TimeSpec *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::TryGetValueResult **)&jarg1; 
  result = (RobotRaconteur::TimeSpec *)& ((arg1)->ts);
  *(RobotRaconteur::TimeSpec **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1TryGetValueResult(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::TryGetValueResult *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::TryGetValueResult *)new RobotRaconteur::TryGetValueResult();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::TryGetValueResult **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1TryGetValueResult(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::TryGetValueResult *arg1 = (RobotRaconteur::TryGetValueResult *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::TryGetValueResult **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireConnection_1getInValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedWireConnection *arg1 = (RobotRaconteur::WrappedWireConnection *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireConnection > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireConnection > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetInValue();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElement >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElement >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireConnection_1getOutValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedWireConnection *arg1 = (RobotRaconteur::WrappedWireConnection *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireConnection > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireConnection > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetOutValue();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElement >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElement >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireConnection_1setOutValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedWireConnection *arg1 = (RobotRaconteur::WrappedWireConnection *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireConnection > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > tempnull2 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > temp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireConnection > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireConnection *)(smartarg1 ? smartarg1->get() : 0); 
  
  // intrusive_ptr by reference
  if ( jarg2 ) {
    smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg2;
    temp2 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg2->get(), true);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  {
    try
    {
      (arg1)->SetOutValue((boost::intrusive_ptr< RobotRaconteur::MessageElement > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireConnection_1setRRDirector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  RobotRaconteur::WrappedWireConnection *arg1 = (RobotRaconteur::WrappedWireConnection *) 0 ;
  RobotRaconteur::WrappedWireConnectionDirector *arg2 = (RobotRaconteur::WrappedWireConnectionDirector *) 0 ;
  int32_t arg3 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireConnection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireConnection > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireConnection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::WrappedWireConnectionDirector **)&jarg2; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      (arg1)->SetRRDirector(arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireConnection_1Type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedWireConnection *arg1 = (RobotRaconteur::WrappedWireConnection *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireConnection > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireConnection > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireConnection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::TypeDefinition > **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->Type = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireConnection_1Type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedWireConnection *arg1 = (RobotRaconteur::WrappedWireConnection *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireConnection > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireConnection > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireConnection *)(smartarg1 ? smartarg1->get() : 0); 
  result = (boost::shared_ptr< RobotRaconteur::TypeDefinition > *) & ((arg1)->Type);
  *(boost::shared_ptr< RobotRaconteur::TypeDefinition > **)&jresult = *result ? new boost::shared_ptr< RobotRaconteur::TypeDefinition >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireConnection_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::WrappedWireConnection *arg1 = (RobotRaconteur::WrappedWireConnection *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireConnection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireConnection > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->Close();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireConnection_1getEndpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedWireConnection *arg1 = (RobotRaconteur::WrappedWireConnection *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireConnection > *smartarg1 = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireConnection > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (uint32_t)(arg1)->GetEndpoint();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireConnection_1getLastValueReceivedTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedWireConnection *arg1 = (RobotRaconteur::WrappedWireConnection *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireConnection > *smartarg1 = 0 ;
  RobotRaconteur::TimeSpec result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireConnection > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetLastValueReceivedTime();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::TimeSpec **)&jresult = new RobotRaconteur::TimeSpec((const RobotRaconteur::TimeSpec &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireConnection_1getLastValueSentTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedWireConnection *arg1 = (RobotRaconteur::WrappedWireConnection *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireConnection > *smartarg1 = 0 ;
  RobotRaconteur::TimeSpec result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireConnection > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetLastValueSentTime();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::TimeSpec **)&jresult = new RobotRaconteur::TimeSpec((const RobotRaconteur::TimeSpec &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireConnection_1getInValueValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::WrappedWireConnection *arg1 = (RobotRaconteur::WrappedWireConnection *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireConnection > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireConnection > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)(arg1)->GetInValueValid();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireConnection_1getOutValueValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::WrappedWireConnection *arg1 = (RobotRaconteur::WrappedWireConnection *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireConnection > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireConnection > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)(arg1)->GetOutValueValid();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireConnection_1tryGetInValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedWireConnection *arg1 = (RobotRaconteur::WrappedWireConnection *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireConnection > *smartarg1 = 0 ;
  RobotRaconteur::TryGetValueResult result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireConnection > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->TryGetInValue();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::TryGetValueResult **)&jresult = new RobotRaconteur::TryGetValueResult((const RobotRaconteur::TryGetValueResult &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireConnection_1tryGetOutValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedWireConnection *arg1 = (RobotRaconteur::WrappedWireConnection *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireConnection > *smartarg1 = 0 ;
  RobotRaconteur::TryGetValueResult result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireConnection > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->TryGetOutValue();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::TryGetValueResult **)&jresult = new RobotRaconteur::TryGetValueResult((const RobotRaconteur::TryGetValueResult &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireConnection_1asyncClose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  RobotRaconteur::WrappedWireConnection *arg1 = (RobotRaconteur::WrappedWireConnection *) 0 ;
  int32_t arg2 ;
  RobotRaconteur::AsyncVoidReturnDirector *arg3 = (RobotRaconteur::AsyncVoidReturnDirector *) 0 ;
  int32_t arg4 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireConnection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireConnection > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireConnection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  arg3 = *(RobotRaconteur::AsyncVoidReturnDirector **)&jarg3; 
  arg4 = (int32_t)jarg4; 
  {
    try
    {
      (arg1)->AsyncClose(arg2,arg3,arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireConnection_1getNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedWireConnection *arg1 = (RobotRaconteur::WrappedWireConnection *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireConnection > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireConnection > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetNode();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::RobotRaconteurNode >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireConnection_1getIgnoreInValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::WrappedWireConnection *arg1 = (RobotRaconteur::WrappedWireConnection *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireConnection > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireConnection > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)(arg1)->GetIgnoreInValue();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireConnection_1setIgnoreInValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RobotRaconteur::WrappedWireConnection *arg1 = (RobotRaconteur::WrappedWireConnection *) 0 ;
  bool arg2 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireConnection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireConnection > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireConnection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      (arg1)->SetIgnoreInValue(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireConnection_1getInValueLifespan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::WrappedWireConnection *arg1 = (RobotRaconteur::WrappedWireConnection *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireConnection > *smartarg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireConnection > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (int32_t)(arg1)->GetInValueLifespan();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireConnection_1setInValueLifespan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::WrappedWireConnection *arg1 = (RobotRaconteur::WrappedWireConnection *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireConnection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireConnection > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireConnection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      (arg1)->SetInValueLifespan(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireConnection_1getOutValueLifespan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::WrappedWireConnection *arg1 = (RobotRaconteur::WrappedWireConnection *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireConnection > *smartarg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireConnection > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (int32_t)(arg1)->GetOutValueLifespan();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireConnection_1setOutValueLifespan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::WrappedWireConnection *arg1 = (RobotRaconteur::WrappedWireConnection *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireConnection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireConnection > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireConnection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      (arg1)->SetOutValueLifespan(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireConnection_1waitInValueValid_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  RobotRaconteur::WrappedWireConnection *arg1 = (RobotRaconteur::WrappedWireConnection *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireConnection > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireConnection > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireConnection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = (bool)(arg1)->WaitInValueValid(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireConnection_1waitInValueValid_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::WrappedWireConnection *arg1 = (RobotRaconteur::WrappedWireConnection *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireConnection > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireConnection > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)(arg1)->WaitInValueValid();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireConnection_1waitOutValueValid_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  RobotRaconteur::WrappedWireConnection *arg1 = (RobotRaconteur::WrappedWireConnection *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireConnection > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireConnection > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireConnection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = (bool)(arg1)->WaitOutValueValid(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireConnection_1waitOutValueValid_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::WrappedWireConnection *arg1 = (RobotRaconteur::WrappedWireConnection *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireConnection > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireConnection > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)(arg1)->WaitOutValueValid();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireConnection_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::WrappedWireConnection *arg1 = (RobotRaconteur::WrappedWireConnection *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireConnection > *smartarg1 = 0 ;
  RobotRaconteur::MemberDefinition_Direction result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireConnection > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (RobotRaconteur::MemberDefinition_Direction)(arg1)->Direction();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedWireConnection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedWireConnection *arg1 = (RobotRaconteur::WrappedWireConnection *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireConnection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireConnection > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireClient_1connect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedWireClient *arg1 = (RobotRaconteur::WrappedWireClient *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireClient > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireConnection > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireClient *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->Connect();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedWireConnection > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedWireConnection >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireClient_1asyncConnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  RobotRaconteur::WrappedWireClient *arg1 = (RobotRaconteur::WrappedWireClient *) 0 ;
  int32_t arg2 ;
  RobotRaconteur::AsyncWireConnectionReturnDirector *arg3 = (RobotRaconteur::AsyncWireConnectionReturnDirector *) 0 ;
  int32_t arg4 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireClient > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireClient *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  arg3 = *(RobotRaconteur::AsyncWireConnectionReturnDirector **)&jarg3; 
  arg4 = (int32_t)jarg4; 
  {
    try
    {
      (arg1)->AsyncConnect(arg2,arg3,arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireClient_1getMemberName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::WrappedWireClient *arg1 = (RobotRaconteur::WrappedWireClient *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireClient > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireClient *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetMemberName();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireClient_1peekInValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedWireClient *arg1 = (RobotRaconteur::WrappedWireClient *) 0 ;
  RobotRaconteur::TimeSpec *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireClient > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireClient *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::TimeSpec **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::TimeSpec & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (arg1)->PeekInValue(*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElement >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElement >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireClient_1peekOutValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedWireClient *arg1 = (RobotRaconteur::WrappedWireClient *) 0 ;
  RobotRaconteur::TimeSpec *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireClient > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireClient *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::TimeSpec **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::TimeSpec & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (arg1)->PeekOutValue(*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElement >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElement >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireClient_1pokeOutValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedWireClient *arg1 = (RobotRaconteur::WrappedWireClient *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireClient > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > tempnull2 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > temp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireClient *)(smartarg1 ? smartarg1->get() : 0); 
  
  // intrusive_ptr by reference
  if ( jarg2 ) {
    smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg2;
    temp2 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg2->get(), true);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  {
    try
    {
      (arg1)->PokeOutValue((boost::intrusive_ptr< RobotRaconteur::MessageElement > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireClient_1asyncPeekInValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  RobotRaconteur::WrappedWireClient *arg1 = (RobotRaconteur::WrappedWireClient *) 0 ;
  int32_t arg2 ;
  RobotRaconteur::AsyncWirePeekReturnDirector *arg3 = (RobotRaconteur::AsyncWirePeekReturnDirector *) 0 ;
  int32_t arg4 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireClient > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireClient *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  arg3 = *(RobotRaconteur::AsyncWirePeekReturnDirector **)&jarg3; 
  arg4 = (int32_t)jarg4; 
  {
    try
    {
      (arg1)->AsyncPeekInValue(arg2,arg3,arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireClient_1asyncPeekOutValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  RobotRaconteur::WrappedWireClient *arg1 = (RobotRaconteur::WrappedWireClient *) 0 ;
  int32_t arg2 ;
  RobotRaconteur::AsyncWirePeekReturnDirector *arg3 = (RobotRaconteur::AsyncWirePeekReturnDirector *) 0 ;
  int32_t arg4 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireClient > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireClient *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  arg3 = *(RobotRaconteur::AsyncWirePeekReturnDirector **)&jarg3; 
  arg4 = (int32_t)jarg4; 
  {
    try
    {
      (arg1)->AsyncPeekOutValue(arg2,arg3,arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireClient_1asyncPokeOutValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_, jint jarg5) {
  RobotRaconteur::WrappedWireClient *arg1 = (RobotRaconteur::WrappedWireClient *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *arg2 = 0 ;
  int32_t arg3 ;
  RobotRaconteur::AsyncVoidReturnDirector *arg4 = (RobotRaconteur::AsyncVoidReturnDirector *) 0 ;
  int32_t arg5 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireClient > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > tempnull2 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > temp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireClient *)(smartarg1 ? smartarg1->get() : 0); 
  
  // intrusive_ptr by reference
  if ( jarg2 ) {
    smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg2;
    temp2 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg2->get(), true);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (int32_t)jarg3; 
  arg4 = *(RobotRaconteur::AsyncVoidReturnDirector **)&jarg4; 
  arg5 = (int32_t)jarg5; 
  {
    try
    {
      (arg1)->AsyncPokeOutValue((boost::intrusive_ptr< RobotRaconteur::MessageElement > const &)*arg2,arg3,arg4,arg5);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireClient_1Type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedWireClient *arg1 = (RobotRaconteur::WrappedWireClient *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireClient > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireClient *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::TypeDefinition > **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->Type = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireClient_1Type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedWireClient *arg1 = (RobotRaconteur::WrappedWireClient *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireClient > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireClient *)(smartarg1 ? smartarg1->get() : 0); 
  result = (boost::shared_ptr< RobotRaconteur::TypeDefinition > *) & ((arg1)->Type);
  *(boost::shared_ptr< RobotRaconteur::TypeDefinition > **)&jresult = *result ? new boost::shared_ptr< RobotRaconteur::TypeDefinition >(*result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireClient_1getNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedWireClient *arg1 = (RobotRaconteur::WrappedWireClient *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireClient > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireClient *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetNode();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::RobotRaconteurNode >(result) : 0; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireClient_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::WrappedWireClient *arg1 = (RobotRaconteur::WrappedWireClient *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireClient > *smartarg1 = 0 ;
  RobotRaconteur::MemberDefinition_Direction result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireClient *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (RobotRaconteur::MemberDefinition_Direction)(arg1)->Direction();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedWireClient(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedWireClient *arg1 = (RobotRaconteur::WrappedWireClient *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireClient > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireClient *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedWireServerConnectDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedWireServerConnectDirector *arg1 = (RobotRaconteur::WrappedWireServerConnectDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedWireServerConnectDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireServerConnectDirector_1wireConnectCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedWireServerConnectDirector *arg1 = (RobotRaconteur::WrappedWireServerConnectDirector *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireConnection > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireConnection > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::WrappedWireServerConnectDirector **)&jarg1; 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedWireConnection > **)&jarg2 : &tempnull2; 
  {
    try
    {
      (arg1)->WireConnectCallback((boost::shared_ptr< RobotRaconteur::WrappedWireConnection > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedWireServerConnectDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedWireServerConnectDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedWireServerConnectDirector *)new SwigDirector_WrappedWireServerConnectDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedWireServerConnectDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireServerConnectDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::WrappedWireServerConnectDirector *obj = *((RobotRaconteur::WrappedWireServerConnectDirector **)&objarg);
  (void)jcls;
  SwigDirector_WrappedWireServerConnectDirector *director = static_cast<SwigDirector_WrappedWireServerConnectDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireServerConnectDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::WrappedWireServerConnectDirector *obj = *((RobotRaconteur::WrappedWireServerConnectDirector **)&objarg);
  SwigDirector_WrappedWireServerConnectDirector *director = dynamic_cast<SwigDirector_WrappedWireServerConnectDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedWireServerPeekValueDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedWireServerPeekValueDirector *arg1 = (RobotRaconteur::WrappedWireServerPeekValueDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedWireServerPeekValueDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireServerPeekValueDirector_1peekValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedWireServerPeekValueDirector *arg1 = (RobotRaconteur::WrappedWireServerPeekValueDirector *) 0 ;
  uint32_t *arg2 = 0 ;
  uint32_t temp2 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedWireServerPeekValueDirector **)&jarg1; 
  temp2 = (uint32_t)jarg2; 
  arg2 = &temp2; 
  {
    try
    {
      result = (arg1)->PeekValue((uint32_t const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElement >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElement >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedWireServerPeekValueDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedWireServerPeekValueDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedWireServerPeekValueDirector *)new SwigDirector_WrappedWireServerPeekValueDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedWireServerPeekValueDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireServerPeekValueDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::WrappedWireServerPeekValueDirector *obj = *((RobotRaconteur::WrappedWireServerPeekValueDirector **)&objarg);
  (void)jcls;
  SwigDirector_WrappedWireServerPeekValueDirector *director = static_cast<SwigDirector_WrappedWireServerPeekValueDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireServerPeekValueDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::WrappedWireServerPeekValueDirector *obj = *((RobotRaconteur::WrappedWireServerPeekValueDirector **)&objarg);
  SwigDirector_WrappedWireServerPeekValueDirector *director = dynamic_cast<SwigDirector_WrappedWireServerPeekValueDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedWireServerPokeValueDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedWireServerPokeValueDirector *arg1 = (RobotRaconteur::WrappedWireServerPokeValueDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedWireServerPokeValueDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireServerPokeValueDirector_1pokeValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  RobotRaconteur::WrappedWireServerPokeValueDirector *arg1 = (RobotRaconteur::WrappedWireServerPokeValueDirector *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > arg2 ;
  RobotRaconteur::TimeSpec *arg3 = 0 ;
  uint32_t *arg4 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *argp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg2 ;
  uint32_t temp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(RobotRaconteur::WrappedWireServerPokeValueDirector **)&jarg1; 
  
  // intrusive_ptr by value
  smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg2;
  if (smartarg2) {
    arg2 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg2->get(), true);
  }
  
  arg3 = *(RobotRaconteur::TimeSpec **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::TimeSpec const & reference is null");
    return ;
  } 
  temp4 = (uint32_t)jarg4; 
  arg4 = &temp4; 
  {
    try
    {
      (arg1)->PokeValue(arg2,(RobotRaconteur::TimeSpec const &)*arg3,(uint32_t const &)*arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedWireServerPokeValueDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedWireServerPokeValueDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedWireServerPokeValueDirector *)new SwigDirector_WrappedWireServerPokeValueDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedWireServerPokeValueDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireServerPokeValueDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::WrappedWireServerPokeValueDirector *obj = *((RobotRaconteur::WrappedWireServerPokeValueDirector **)&objarg);
  (void)jcls;
  SwigDirector_WrappedWireServerPokeValueDirector *director = static_cast<SwigDirector_WrappedWireServerPokeValueDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireServerPokeValueDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::WrappedWireServerPokeValueDirector *obj = *((RobotRaconteur::WrappedWireServerPokeValueDirector **)&objarg);
  SwigDirector_WrappedWireServerPokeValueDirector *director = dynamic_cast<SwigDirector_WrappedWireServerPokeValueDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireServer_1getMemberName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::WrappedWireServer *arg1 = (RobotRaconteur::WrappedWireServer *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireServer > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireServer > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireServer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetMemberName();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireServer_1Type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedWireServer *arg1 = (RobotRaconteur::WrappedWireServer *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireServer > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireServer > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireServer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::TypeDefinition > **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->Type = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireServer_1Type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedWireServer *arg1 = (RobotRaconteur::WrappedWireServer *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireServer > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireServer > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireServer *)(smartarg1 ? smartarg1->get() : 0); 
  result = (boost::shared_ptr< RobotRaconteur::TypeDefinition > *) & ((arg1)->Type);
  *(boost::shared_ptr< RobotRaconteur::TypeDefinition > **)&jresult = *result ? new boost::shared_ptr< RobotRaconteur::TypeDefinition >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireServer_1setWrappedWireConnectCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  RobotRaconteur::WrappedWireServer *arg1 = (RobotRaconteur::WrappedWireServer *) 0 ;
  RobotRaconteur::WrappedWireServerConnectDirector *arg2 = (RobotRaconteur::WrappedWireServerConnectDirector *) 0 ;
  int32_t arg3 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireServer > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireServer > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireServer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::WrappedWireServerConnectDirector **)&jarg2; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      (arg1)->SetWrappedWireConnectCallback(arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireServer_1getNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedWireServer *arg1 = (RobotRaconteur::WrappedWireServer *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireServer > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireServer > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireServer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetNode();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::RobotRaconteurNode >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireServer_1setPeekInValueCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  RobotRaconteur::WrappedWireServer *arg1 = (RobotRaconteur::WrappedWireServer *) 0 ;
  RobotRaconteur::WrappedWireServerPeekValueDirector *arg2 = (RobotRaconteur::WrappedWireServerPeekValueDirector *) 0 ;
  int32_t arg3 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireServer > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireServer > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireServer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::WrappedWireServerPeekValueDirector **)&jarg2; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      (arg1)->SetPeekInValueCallback(arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireServer_1setPeekOutValueCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  RobotRaconteur::WrappedWireServer *arg1 = (RobotRaconteur::WrappedWireServer *) 0 ;
  RobotRaconteur::WrappedWireServerPeekValueDirector *arg2 = (RobotRaconteur::WrappedWireServerPeekValueDirector *) 0 ;
  int32_t arg3 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireServer > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireServer > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireServer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::WrappedWireServerPeekValueDirector **)&jarg2; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      (arg1)->SetPeekOutValueCallback(arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireServer_1setPokeOutValueCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  RobotRaconteur::WrappedWireServer *arg1 = (RobotRaconteur::WrappedWireServer *) 0 ;
  RobotRaconteur::WrappedWireServerPokeValueDirector *arg2 = (RobotRaconteur::WrappedWireServerPokeValueDirector *) 0 ;
  int32_t arg3 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireServer > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireServer > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireServer *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::WrappedWireServerPokeValueDirector **)&jarg2; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      (arg1)->SetPokeOutValueCallback(arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireServer_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::WrappedWireServer *arg1 = (RobotRaconteur::WrappedWireServer *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireServer > *smartarg1 = 0 ;
  RobotRaconteur::MemberDefinition_Direction result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireServer > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireServer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (RobotRaconteur::MemberDefinition_Direction)(arg1)->Direction();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedWireServer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedWireServer *arg1 = (RobotRaconteur::WrappedWireServer *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireServer > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireServer > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireServer *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireBroadcasterPredicateDirector_1predicate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  RobotRaconteur::WrappedWireBroadcasterPredicateDirector *arg1 = (RobotRaconteur::WrappedWireBroadcasterPredicateDirector *) 0 ;
  uint32_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedWireBroadcasterPredicateDirector **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  {
    try
    {
      result = (bool)(arg1)->Predicate(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedWireBroadcasterPredicateDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedWireBroadcasterPredicateDirector *arg1 = (RobotRaconteur::WrappedWireBroadcasterPredicateDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedWireBroadcasterPredicateDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedWireBroadcasterPredicateDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedWireBroadcasterPredicateDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedWireBroadcasterPredicateDirector *)new SwigDirector_WrappedWireBroadcasterPredicateDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedWireBroadcasterPredicateDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireBroadcasterPredicateDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::WrappedWireBroadcasterPredicateDirector *obj = *((RobotRaconteur::WrappedWireBroadcasterPredicateDirector **)&objarg);
  (void)jcls;
  SwigDirector_WrappedWireBroadcasterPredicateDirector *director = static_cast<SwigDirector_WrappedWireBroadcasterPredicateDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireBroadcasterPredicateDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::WrappedWireBroadcasterPredicateDirector *obj = *((RobotRaconteur::WrappedWireBroadcasterPredicateDirector **)&objarg);
  SwigDirector_WrappedWireBroadcasterPredicateDirector *director = dynamic_cast<SwigDirector_WrappedWireBroadcasterPredicateDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireBroadcaster_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedWireBroadcaster *arg1 = (RobotRaconteur::WrappedWireBroadcaster *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireServer > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireBroadcaster > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireServer > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireBroadcaster > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireBroadcaster *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedWireServer > **)&jarg2 : &tempnull2; 
  {
    try
    {
      (arg1)->Init((boost::shared_ptr< RobotRaconteur::WrappedWireServer > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireBroadcaster_1setOutValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedWireBroadcaster *arg1 = (RobotRaconteur::WrappedWireBroadcaster *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireBroadcaster > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > tempnull2 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > temp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireBroadcaster > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireBroadcaster *)(smartarg1 ? smartarg1->get() : 0); 
  
  // intrusive_ptr by reference
  if ( jarg2 ) {
    smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg2;
    temp2 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg2->get(), true);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  {
    try
    {
      (arg1)->SetOutValue((boost::intrusive_ptr< RobotRaconteur::MessageElement > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireBroadcaster_1getActiveWireConnectionCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedWireBroadcaster *arg1 = (RobotRaconteur::WrappedWireBroadcaster *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireBroadcaster > *smartarg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireBroadcaster > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireBroadcaster *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetActiveWireConnectionCount();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireBroadcaster_1setPredicateDirector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  RobotRaconteur::WrappedWireBroadcaster *arg1 = (RobotRaconteur::WrappedWireBroadcaster *) 0 ;
  RobotRaconteur::WrappedWireBroadcasterPredicateDirector *arg2 = (RobotRaconteur::WrappedWireBroadcasterPredicateDirector *) 0 ;
  int32_t arg3 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireBroadcaster > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireBroadcaster > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireBroadcaster *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::WrappedWireBroadcasterPredicateDirector **)&jarg2; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      (arg1)->SetPredicateDirector(arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireBroadcaster_1getOutValueLifespan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::WrappedWireBroadcaster *arg1 = (RobotRaconteur::WrappedWireBroadcaster *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireBroadcaster > *smartarg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireBroadcaster > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireBroadcaster *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (int32_t)(arg1)->GetOutValueLifespan();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireBroadcaster_1setOutValueLifespan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::WrappedWireBroadcaster *arg1 = (RobotRaconteur::WrappedWireBroadcaster *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireBroadcaster > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireBroadcaster > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireBroadcaster *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      (arg1)->SetOutValueLifespan(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireBroadcaster_1setPeekInValueCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  RobotRaconteur::WrappedWireBroadcaster *arg1 = (RobotRaconteur::WrappedWireBroadcaster *) 0 ;
  RobotRaconteur::WrappedWireServerPeekValueDirector *arg2 = (RobotRaconteur::WrappedWireServerPeekValueDirector *) 0 ;
  int32_t arg3 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireBroadcaster > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireBroadcaster > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireBroadcaster *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::WrappedWireServerPeekValueDirector **)&jarg2; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      (arg1)->SetPeekInValueCallback(arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedWireBroadcaster(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedWireBroadcaster *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedWireBroadcaster *)new RobotRaconteur::WrappedWireBroadcaster();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::WrappedWireBroadcaster > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::WrappedWireBroadcaster >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedWireBroadcaster(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedWireBroadcaster *arg1 = (RobotRaconteur::WrappedWireBroadcaster *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireBroadcaster > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireBroadcaster > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireBroadcaster *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireUnicastReceiver_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedWireUnicastReceiver *arg1 = (RobotRaconteur::WrappedWireUnicastReceiver *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireServer > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireUnicastReceiver > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireServer > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireUnicastReceiver > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireUnicastReceiver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedWireServer > **)&jarg2 : &tempnull2; 
  {
    try
    {
      (arg1)->Init((boost::shared_ptr< RobotRaconteur::WrappedWireServer > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireUnicastReceiver_1getInValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlongArray jarg3) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedWireUnicastReceiver *arg1 = (RobotRaconteur::WrappedWireUnicastReceiver *) 0 ;
  RobotRaconteur::TimeSpec *arg2 = 0 ;
  uint32_t *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireUnicastReceiver > *smartarg1 = 0 ;
  uint32_t temp3 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireUnicastReceiver > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireUnicastReceiver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::TimeSpec **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::TimeSpec & reference is null");
    return 0;
  } 
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp3 = (uint32_t)0;
    arg3 = &temp3; 
  }
  {
    try
    {
      result = (arg1)->GetInValue(*arg2,*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElement >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElement >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = 0;
  }
  
  {
    jlong jvalue = (jlong)temp3;
    jenv->SetLongArrayRegion(jarg3, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireUnicastReceiver_1addInValueChangedListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  RobotRaconteur::WrappedWireUnicastReceiver *arg1 = (RobotRaconteur::WrappedWireUnicastReceiver *) 0 ;
  RobotRaconteur::WrappedWireServerPokeValueDirector *arg2 = (RobotRaconteur::WrappedWireServerPokeValueDirector *) 0 ;
  int32_t arg3 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireUnicastReceiver > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireUnicastReceiver > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireUnicastReceiver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::WrappedWireServerPokeValueDirector **)&jarg2; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      (arg1)->AddInValueChangedListener(arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireUnicastReceiver_1getInValueLifespan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::WrappedWireUnicastReceiver *arg1 = (RobotRaconteur::WrappedWireUnicastReceiver *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireUnicastReceiver > *smartarg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireUnicastReceiver > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireUnicastReceiver *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (int32_t)(arg1)->GetInValueLifespan();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireUnicastReceiver_1setInValueLifespan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::WrappedWireUnicastReceiver *arg1 = (RobotRaconteur::WrappedWireUnicastReceiver *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireUnicastReceiver > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireUnicastReceiver > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireUnicastReceiver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      (arg1)->SetInValueLifespan(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireUnicastReceiver_1tryGetInValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  RobotRaconteur::WrappedWireUnicastReceiver *arg1 = (RobotRaconteur::WrappedWireUnicastReceiver *) 0 ;
  RobotRaconteur::WrappedService_typed_packet *arg2 = 0 ;
  RobotRaconteur::TimeSpec *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireUnicastReceiver > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireUnicastReceiver > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireUnicastReceiver *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::WrappedService_typed_packet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::WrappedService_typed_packet & reference is null");
    return 0;
  } 
  arg3 = *(RobotRaconteur::TimeSpec **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::TimeSpec & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (bool)(arg1)->TryGetInValue(*arg2,*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedWireUnicastReceiver(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedWireUnicastReceiver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedWireUnicastReceiver *)new RobotRaconteur::WrappedWireUnicastReceiver();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::WrappedWireUnicastReceiver > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::WrappedWireUnicastReceiver >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedWireUnicastReceiver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedWireUnicastReceiver *arg1 = (RobotRaconteur::WrappedWireUnicastReceiver *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireUnicastReceiver > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireUnicastReceiver > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireUnicastReceiver *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ArrayMemoryBase_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ArrayMemoryBase *arg1 = (RobotRaconteur::ArrayMemoryBase *) 0 ;
  boost::shared_ptr< RobotRaconteur::ArrayMemoryBase > *smartarg1 = 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ArrayMemoryBase > **)&jarg1;
  arg1 = (RobotRaconteur::ArrayMemoryBase *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (uint64_t)(arg1)->Length();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ArrayMemoryBase_1elementTypeID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::ArrayMemoryBase *arg1 = (RobotRaconteur::ArrayMemoryBase *) 0 ;
  boost::shared_ptr< RobotRaconteur::ArrayMemoryBase > *smartarg1 = 0 ;
  RobotRaconteur::DataTypes result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ArrayMemoryBase > **)&jarg1;
  arg1 = (RobotRaconteur::ArrayMemoryBase *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (RobotRaconteur::DataTypes)(arg1)->ElementTypeID();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1ArrayMemoryBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::ArrayMemoryBase *arg1 = (RobotRaconteur::ArrayMemoryBase *) 0 ;
  boost::shared_ptr< RobotRaconteur::ArrayMemoryBase > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ArrayMemoryBase > **)&jarg1;
  arg1 = (RobotRaconteur::ArrayMemoryBase *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MultiDimArrayMemoryBase_1dimensions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::MultiDimArrayMemoryBase *arg1 = (RobotRaconteur::MultiDimArrayMemoryBase *) 0 ;
  boost::shared_ptr< RobotRaconteur::MultiDimArrayMemoryBase > *smartarg1 = 0 ;
  std::vector< uint64_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MultiDimArrayMemoryBase > **)&jarg1;
  arg1 = (RobotRaconteur::MultiDimArrayMemoryBase *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->Dimensions();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< uint64_t > **)&jresult = new std::vector< uint64_t >((const std::vector< uint64_t > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MultiDimArrayMemoryBase_1dimCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::MultiDimArrayMemoryBase *arg1 = (RobotRaconteur::MultiDimArrayMemoryBase *) 0 ;
  boost::shared_ptr< RobotRaconteur::MultiDimArrayMemoryBase > *smartarg1 = 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MultiDimArrayMemoryBase > **)&jarg1;
  arg1 = (RobotRaconteur::MultiDimArrayMemoryBase *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (uint64_t)(arg1)->DimCount();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MultiDimArrayMemoryBase_1elementTypeID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::MultiDimArrayMemoryBase *arg1 = (RobotRaconteur::MultiDimArrayMemoryBase *) 0 ;
  boost::shared_ptr< RobotRaconteur::MultiDimArrayMemoryBase > *smartarg1 = 0 ;
  RobotRaconteur::DataTypes result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MultiDimArrayMemoryBase > **)&jarg1;
  arg1 = (RobotRaconteur::MultiDimArrayMemoryBase *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (RobotRaconteur::DataTypes)(arg1)->ElementTypeID();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1MultiDimArrayMemoryBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::MultiDimArrayMemoryBase *arg1 = (RobotRaconteur::MultiDimArrayMemoryBase *) 0 ;
  boost::shared_ptr< RobotRaconteur::MultiDimArrayMemoryBase > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::MultiDimArrayMemoryBase > **)&jarg1;
  arg1 = (RobotRaconteur::MultiDimArrayMemoryBase *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedArrayMemoryClientUtil_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::ArrayMemoryBase > *arg1 = 0 ;
  uint64_t arg2 ;
  uint64_t arg3 ;
  boost::shared_ptr< RobotRaconteur::ArrayMemoryBase > tempnull1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::ArrayMemoryBase > **)&jarg1 : &tempnull1; 
  arg2 = (uint64_t)jarg2; 
  arg3 = (uint64_t)jarg3; 
  {
    try
    {
      result = RobotRaconteur::WrappedArrayMemoryClientUtil::Read((boost::shared_ptr< RobotRaconteur::ArrayMemoryBase > const &)*arg1,arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = new boost::shared_ptr<  RobotRaconteur::RRBaseArray >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::RRBaseArray >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::RRBaseArray > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedArrayMemoryClientUtil_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  boost::shared_ptr< RobotRaconteur::ArrayMemoryBase > *arg1 = 0 ;
  uint64_t arg2 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *arg3 = 0 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  boost::shared_ptr< RobotRaconteur::ArrayMemoryBase > tempnull1 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > tempnull3 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > temp3 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::ArrayMemoryBase > **)&jarg1 : &tempnull1; 
  arg2 = (uint64_t)jarg2; 
  
  // intrusive_ptr by reference
  if ( jarg3 ) {
    smartarg3 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray >**)&jarg3;
    temp3 = boost::intrusive_ptr<  RobotRaconteur::RRBaseArray >(smartarg3->get(), true);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  arg4 = (uint64_t)jarg4; 
  arg5 = (uint64_t)jarg5; 
  {
    try
    {
      RobotRaconteur::WrappedArrayMemoryClientUtil::Write((boost::shared_ptr< RobotRaconteur::ArrayMemoryBase > const &)*arg1,arg2,(boost::intrusive_ptr< RobotRaconteur::RRBaseArray > const &)*arg3,arg4,arg5);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedArrayMemoryClientUtil_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::ArrayMemoryBase > *arg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ArrayMemoryBase > tempnull1 ;
  RobotRaconteur::MemberDefinition_Direction result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::ArrayMemoryBase > **)&jarg1 : &tempnull1; 
  {
    try
    {
      result = (RobotRaconteur::MemberDefinition_Direction)RobotRaconteur::WrappedArrayMemoryClientUtil::Direction((boost::shared_ptr< RobotRaconteur::ArrayMemoryBase > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedArrayMemoryClientUtil(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedArrayMemoryClientUtil *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedArrayMemoryClientUtil *)new RobotRaconteur::WrappedArrayMemoryClientUtil();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedArrayMemoryClientUtil **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedArrayMemoryClientUtil(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedArrayMemoryClientUtil *arg1 = (RobotRaconteur::WrappedArrayMemoryClientUtil *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedArrayMemoryClientUtil **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedMultiDimArrayMemoryClientUtil_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::MultiDimArrayMemoryBase > *arg1 = 0 ;
  std::vector< uint64_t > arg2 ;
  std::vector< uint64_t > arg3 ;
  boost::shared_ptr< RobotRaconteur::MultiDimArrayMemoryBase > tempnull1 ;
  std::vector< uint64_t > *argp2 ;
  std::vector< uint64_t > *argp3 ;
  boost::shared_ptr< RobotRaconteur::RRMultiDimArrayUntyped > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::MultiDimArrayMemoryBase > **)&jarg1 : &tempnull1; 
  argp2 = *(std::vector< uint64_t > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< uint64_t >");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(std::vector< uint64_t > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< uint64_t >");
    return 0;
  }
  arg3 = *argp3; 
  {
    try
    {
      result = RobotRaconteur::WrappedMultiDimArrayMemoryClientUtil::Read((boost::shared_ptr< RobotRaconteur::MultiDimArrayMemoryBase > const &)*arg1,arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::RRMultiDimArrayUntyped > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::RRMultiDimArrayUntyped >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedMultiDimArrayMemoryClientUtil_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  boost::shared_ptr< RobotRaconteur::MultiDimArrayMemoryBase > *arg1 = 0 ;
  std::vector< uint64_t > arg2 ;
  boost::shared_ptr< RobotRaconteur::RRMultiDimArrayUntyped > *arg3 = 0 ;
  std::vector< uint64_t > arg4 ;
  std::vector< uint64_t > arg5 ;
  boost::shared_ptr< RobotRaconteur::MultiDimArrayMemoryBase > tempnull1 ;
  std::vector< uint64_t > *argp2 ;
  boost::shared_ptr< RobotRaconteur::RRMultiDimArrayUntyped > tempnull3 ;
  std::vector< uint64_t > *argp4 ;
  std::vector< uint64_t > *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::MultiDimArrayMemoryBase > **)&jarg1 : &tempnull1; 
  argp2 = *(std::vector< uint64_t > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< uint64_t >");
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? *(boost::shared_ptr< RobotRaconteur::RRMultiDimArrayUntyped > **)&jarg3 : &tempnull3; 
  argp4 = *(std::vector< uint64_t > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< uint64_t >");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(std::vector< uint64_t > **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< uint64_t >");
    return ;
  }
  arg5 = *argp5; 
  {
    try
    {
      RobotRaconteur::WrappedMultiDimArrayMemoryClientUtil::Write((boost::shared_ptr< RobotRaconteur::MultiDimArrayMemoryBase > const &)*arg1,arg2,(boost::shared_ptr< RobotRaconteur::RRMultiDimArrayUntyped > const &)*arg3,arg4,arg5);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedMultiDimArrayMemoryClientUtil_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::MultiDimArrayMemoryBase > *arg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::MultiDimArrayMemoryBase > tempnull1 ;
  RobotRaconteur::MemberDefinition_Direction result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::MultiDimArrayMemoryBase > **)&jarg1 : &tempnull1; 
  {
    try
    {
      result = (RobotRaconteur::MemberDefinition_Direction)RobotRaconteur::WrappedMultiDimArrayMemoryClientUtil::Direction((boost::shared_ptr< RobotRaconteur::MultiDimArrayMemoryBase > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedMultiDimArrayMemoryClientUtil(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedMultiDimArrayMemoryClientUtil *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedMultiDimArrayMemoryClientUtil *)new RobotRaconteur::WrappedMultiDimArrayMemoryClientUtil();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedMultiDimArrayMemoryClientUtil **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedMultiDimArrayMemoryClientUtil(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedMultiDimArrayMemoryClientUtil *arg1 = (RobotRaconteur::WrappedMultiDimArrayMemoryClientUtil *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedMultiDimArrayMemoryClientUtil **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPodArrayMemoryClientBuffer_1unpackReadResult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  RobotRaconteur::WrappedPodArrayMemoryClientBuffer *arg1 = (RobotRaconteur::WrappedPodArrayMemoryClientBuffer *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > *argp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::WrappedPodArrayMemoryClientBuffer **)&jarg1; 
  
  // intrusive_ptr by value
  smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList >**)&jarg2;
  if (smartarg2) {
    arg2 = boost::intrusive_ptr<  RobotRaconteur::MessageElementNestedElementList >(smartarg2->get(), true);
  }
  
  arg3 = (uint64_t)jarg3; 
  arg4 = (uint64_t)jarg4; 
  {
    try
    {
      (arg1)->UnpackReadResult(arg2,arg3,arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPodArrayMemoryClientBuffer_1packWriteRequest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPodArrayMemoryClientBuffer *arg1 = (RobotRaconteur::WrappedPodArrayMemoryClientBuffer *) 0 ;
  uint64_t arg2 ;
  uint64_t arg3 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedPodArrayMemoryClientBuffer **)&jarg1; 
  arg2 = (uint64_t)jarg2; 
  arg3 = (uint64_t)jarg3; 
  {
    try
    {
      result = (arg1)->PackWriteRequest(arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElementNestedElementList >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPodArrayMemoryClientBuffer_1getBufferLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPodArrayMemoryClientBuffer *arg1 = (RobotRaconteur::WrappedPodArrayMemoryClientBuffer *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedPodArrayMemoryClientBuffer **)&jarg1; 
  {
    try
    {
      result = (uint64_t)(arg1)->GetBufferLength();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedPodArrayMemoryClientBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedPodArrayMemoryClientBuffer *arg1 = (RobotRaconteur::WrappedPodArrayMemoryClientBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedPodArrayMemoryClientBuffer **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedPodArrayMemoryClientBuffer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPodArrayMemoryClientBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedPodArrayMemoryClientBuffer *)new SwigDirector_WrappedPodArrayMemoryClientBuffer(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedPodArrayMemoryClientBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPodArrayMemoryClientBuffer_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::WrappedPodArrayMemoryClientBuffer *obj = *((RobotRaconteur::WrappedPodArrayMemoryClientBuffer **)&objarg);
  (void)jcls;
  SwigDirector_WrappedPodArrayMemoryClientBuffer *director = static_cast<SwigDirector_WrappedPodArrayMemoryClientBuffer *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPodArrayMemoryClientBuffer_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::WrappedPodArrayMemoryClientBuffer *obj = *((RobotRaconteur::WrappedPodArrayMemoryClientBuffer **)&objarg);
  SwigDirector_WrappedPodArrayMemoryClientBuffer *director = dynamic_cast<SwigDirector_WrappedPodArrayMemoryClientBuffer *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPodArrayMemoryClient_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPodArrayMemoryClient *arg1 = (RobotRaconteur::WrappedPodArrayMemoryClient *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPodArrayMemoryClient > *smartarg1 = 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPodArrayMemoryClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPodArrayMemoryClient *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (uint64_t)(arg1)->Length();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPodArrayMemoryClient_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::WrappedPodArrayMemoryClient *arg1 = (RobotRaconteur::WrappedPodArrayMemoryClient *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPodArrayMemoryClient > *smartarg1 = 0 ;
  RobotRaconteur::MemberDefinition_Direction result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPodArrayMemoryClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPodArrayMemoryClient *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (RobotRaconteur::MemberDefinition_Direction)(arg1)->Direction();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPodArrayMemoryClient_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  RobotRaconteur::WrappedPodArrayMemoryClient *arg1 = (RobotRaconteur::WrappedPodArrayMemoryClient *) 0 ;
  uint64_t arg2 ;
  RobotRaconteur::WrappedPodArrayMemoryClientBuffer *arg3 = (RobotRaconteur::WrappedPodArrayMemoryClientBuffer *) 0 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  boost::shared_ptr< RobotRaconteur::WrappedPodArrayMemoryClient > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPodArrayMemoryClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPodArrayMemoryClient *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint64_t)jarg2; 
  arg3 = *(RobotRaconteur::WrappedPodArrayMemoryClientBuffer **)&jarg3; 
  arg4 = (uint64_t)jarg4; 
  arg5 = (uint64_t)jarg5; 
  {
    try
    {
      (arg1)->Read(arg2,arg3,arg4,arg5);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPodArrayMemoryClient_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  RobotRaconteur::WrappedPodArrayMemoryClient *arg1 = (RobotRaconteur::WrappedPodArrayMemoryClient *) 0 ;
  uint64_t arg2 ;
  RobotRaconteur::WrappedPodArrayMemoryClientBuffer *arg3 = (RobotRaconteur::WrappedPodArrayMemoryClientBuffer *) 0 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  boost::shared_ptr< RobotRaconteur::WrappedPodArrayMemoryClient > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPodArrayMemoryClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPodArrayMemoryClient *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint64_t)jarg2; 
  arg3 = *(RobotRaconteur::WrappedPodArrayMemoryClientBuffer **)&jarg3; 
  arg4 = (uint64_t)jarg4; 
  arg5 = (uint64_t)jarg5; 
  {
    try
    {
      (arg1)->Write(arg2,arg3,arg4,arg5);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedPodArrayMemoryClient(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedPodArrayMemoryClient *arg1 = (RobotRaconteur::WrappedPodArrayMemoryClient *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPodArrayMemoryClient > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPodArrayMemoryClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPodArrayMemoryClient *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPodMultiDimArrayMemoryClientBuffer_1unpackReadResult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  RobotRaconteur::WrappedPodMultiDimArrayMemoryClientBuffer *arg1 = (RobotRaconteur::WrappedPodMultiDimArrayMemoryClientBuffer *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > arg2 ;
  std::vector< uint64_t > *arg3 = 0 ;
  std::vector< uint64_t > *arg4 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > *argp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(RobotRaconteur::WrappedPodMultiDimArrayMemoryClientBuffer **)&jarg1; 
  
  // intrusive_ptr by value
  smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList >**)&jarg2;
  if (smartarg2) {
    arg2 = boost::intrusive_ptr<  RobotRaconteur::MessageElementNestedElementList >(smartarg2->get(), true);
  }
  
  arg3 = *(std::vector< uint64_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint64_t > const & reference is null");
    return ;
  } 
  arg4 = *(std::vector< uint64_t > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint64_t > const & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->UnpackReadResult(arg2,(std::vector< uint64_t > const &)*arg3,(std::vector< uint64_t > const &)*arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPodMultiDimArrayMemoryClientBuffer_1packWriteRequest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPodMultiDimArrayMemoryClientBuffer *arg1 = (RobotRaconteur::WrappedPodMultiDimArrayMemoryClientBuffer *) 0 ;
  std::vector< uint64_t > *arg2 = 0 ;
  std::vector< uint64_t > *arg3 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(RobotRaconteur::WrappedPodMultiDimArrayMemoryClientBuffer **)&jarg1; 
  arg2 = *(std::vector< uint64_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint64_t > const & reference is null");
    return 0;
  } 
  arg3 = *(std::vector< uint64_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint64_t > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (arg1)->PackWriteRequest((std::vector< uint64_t > const &)*arg2,(std::vector< uint64_t > const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElementNestedElementList >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedPodMultiDimArrayMemoryClientBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedPodMultiDimArrayMemoryClientBuffer *arg1 = (RobotRaconteur::WrappedPodMultiDimArrayMemoryClientBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedPodMultiDimArrayMemoryClientBuffer **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedPodMultiDimArrayMemoryClientBuffer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPodMultiDimArrayMemoryClientBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedPodMultiDimArrayMemoryClientBuffer *)new SwigDirector_WrappedPodMultiDimArrayMemoryClientBuffer(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedPodMultiDimArrayMemoryClientBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPodMultiDimArrayMemoryClientBuffer_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::WrappedPodMultiDimArrayMemoryClientBuffer *obj = *((RobotRaconteur::WrappedPodMultiDimArrayMemoryClientBuffer **)&objarg);
  (void)jcls;
  SwigDirector_WrappedPodMultiDimArrayMemoryClientBuffer *director = static_cast<SwigDirector_WrappedPodMultiDimArrayMemoryClientBuffer *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPodMultiDimArrayMemoryClientBuffer_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::WrappedPodMultiDimArrayMemoryClientBuffer *obj = *((RobotRaconteur::WrappedPodMultiDimArrayMemoryClientBuffer **)&objarg);
  SwigDirector_WrappedPodMultiDimArrayMemoryClientBuffer *director = dynamic_cast<SwigDirector_WrappedPodMultiDimArrayMemoryClientBuffer *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPodMultiDimArrayMemoryClient_1dimensions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPodMultiDimArrayMemoryClient *arg1 = (RobotRaconteur::WrappedPodMultiDimArrayMemoryClient *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPodMultiDimArrayMemoryClient > *smartarg1 = 0 ;
  std::vector< uint64_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPodMultiDimArrayMemoryClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPodMultiDimArrayMemoryClient *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->Dimensions();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< uint64_t > **)&jresult = new std::vector< uint64_t >((const std::vector< uint64_t > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPodMultiDimArrayMemoryClient_1dimCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPodMultiDimArrayMemoryClient *arg1 = (RobotRaconteur::WrappedPodMultiDimArrayMemoryClient *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPodMultiDimArrayMemoryClient > *smartarg1 = 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPodMultiDimArrayMemoryClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPodMultiDimArrayMemoryClient *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (uint64_t)(arg1)->DimCount();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPodMultiDimArrayMemoryClient_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::WrappedPodMultiDimArrayMemoryClient *arg1 = (RobotRaconteur::WrappedPodMultiDimArrayMemoryClient *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPodMultiDimArrayMemoryClient > *smartarg1 = 0 ;
  RobotRaconteur::MemberDefinition_Direction result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPodMultiDimArrayMemoryClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPodMultiDimArrayMemoryClient *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (RobotRaconteur::MemberDefinition_Direction)(arg1)->Direction();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPodMultiDimArrayMemoryClient_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  RobotRaconteur::WrappedPodMultiDimArrayMemoryClient *arg1 = (RobotRaconteur::WrappedPodMultiDimArrayMemoryClient *) 0 ;
  std::vector< uint64_t > *arg2 = 0 ;
  RobotRaconteur::WrappedPodMultiDimArrayMemoryClientBuffer *arg3 = (RobotRaconteur::WrappedPodMultiDimArrayMemoryClientBuffer *) 0 ;
  std::vector< uint64_t > *arg4 = 0 ;
  std::vector< uint64_t > *arg5 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPodMultiDimArrayMemoryClient > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPodMultiDimArrayMemoryClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPodMultiDimArrayMemoryClient *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< uint64_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint64_t > const & reference is null");
    return ;
  } 
  arg3 = *(RobotRaconteur::WrappedPodMultiDimArrayMemoryClientBuffer **)&jarg3; 
  arg4 = *(std::vector< uint64_t > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint64_t > const & reference is null");
    return ;
  } 
  arg5 = *(std::vector< uint64_t > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint64_t > const & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->Read((std::vector< uint64_t > const &)*arg2,arg3,(std::vector< uint64_t > const &)*arg4,(std::vector< uint64_t > const &)*arg5);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPodMultiDimArrayMemoryClient_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  RobotRaconteur::WrappedPodMultiDimArrayMemoryClient *arg1 = (RobotRaconteur::WrappedPodMultiDimArrayMemoryClient *) 0 ;
  std::vector< uint64_t > *arg2 = 0 ;
  RobotRaconteur::WrappedPodMultiDimArrayMemoryClientBuffer *arg3 = (RobotRaconteur::WrappedPodMultiDimArrayMemoryClientBuffer *) 0 ;
  std::vector< uint64_t > *arg4 = 0 ;
  std::vector< uint64_t > *arg5 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPodMultiDimArrayMemoryClient > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPodMultiDimArrayMemoryClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPodMultiDimArrayMemoryClient *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< uint64_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint64_t > const & reference is null");
    return ;
  } 
  arg3 = *(RobotRaconteur::WrappedPodMultiDimArrayMemoryClientBuffer **)&jarg3; 
  arg4 = *(std::vector< uint64_t > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint64_t > const & reference is null");
    return ;
  } 
  arg5 = *(std::vector< uint64_t > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint64_t > const & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->Write((std::vector< uint64_t > const &)*arg2,arg3,(std::vector< uint64_t > const &)*arg4,(std::vector< uint64_t > const &)*arg5);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedPodMultiDimArrayMemoryClient(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedPodMultiDimArrayMemoryClient *arg1 = (RobotRaconteur::WrappedPodMultiDimArrayMemoryClient *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPodMultiDimArrayMemoryClient > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPodMultiDimArrayMemoryClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPodMultiDimArrayMemoryClient *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedArrayMemoryDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedArrayMemoryDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedArrayMemoryDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedArrayMemoryDirector_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedArrayMemoryDirector *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedArrayMemoryDirector **)&jarg1; 
  {
    try
    {
      result = (uint64_t)(arg1)->Length();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedArrayMemoryDirector_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  RobotRaconteur::WrappedArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedArrayMemoryDirector *) 0 ;
  uint64_t arg2 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > arg3 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *argp3 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(RobotRaconteur::WrappedArrayMemoryDirector **)&jarg1; 
  arg2 = (uint64_t)jarg2; 
  
  // intrusive_ptr by value
  smartarg3 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray >**)&jarg3;
  if (smartarg3) {
    arg3 = boost::intrusive_ptr<  RobotRaconteur::RRBaseArray >(smartarg3->get(), true);
  }
  
  arg4 = (uint64_t)jarg4; 
  arg5 = (uint64_t)jarg5; 
  {
    try
    {
      (arg1)->Read(arg2,arg3,arg4,arg5);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedArrayMemoryDirector_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  RobotRaconteur::WrappedArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedArrayMemoryDirector *) 0 ;
  uint64_t arg2 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > arg3 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  boost::intrusive_ptr< RobotRaconteur::RRBaseArray > *argp3 ;
  boost::shared_ptr< RobotRaconteur::RRBaseArray > *smartarg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(RobotRaconteur::WrappedArrayMemoryDirector **)&jarg1; 
  arg2 = (uint64_t)jarg2; 
  
  // intrusive_ptr by value
  smartarg3 = *(boost::shared_ptr<  RobotRaconteur::RRBaseArray >**)&jarg3;
  if (smartarg3) {
    arg3 = boost::intrusive_ptr<  RobotRaconteur::RRBaseArray >(smartarg3->get(), true);
  }
  
  arg4 = (uint64_t)jarg4; 
  arg5 = (uint64_t)jarg5; 
  {
    try
    {
      (arg1)->Write(arg2,arg3,arg4,arg5);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedArrayMemoryDirector_1objectheapid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::WrappedArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedArrayMemoryDirector *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedArrayMemoryDirector **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->objectheapid = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedArrayMemoryDirector_1objectheapid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::WrappedArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedArrayMemoryDirector *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedArrayMemoryDirector **)&jarg1; 
  result = (int32_t) ((arg1)->objectheapid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedArrayMemoryDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedArrayMemoryDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedArrayMemoryDirector *)new SwigDirector_WrappedArrayMemoryDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedArrayMemoryDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedArrayMemoryDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::WrappedArrayMemoryDirector *obj = *((RobotRaconteur::WrappedArrayMemoryDirector **)&objarg);
  (void)jcls;
  SwigDirector_WrappedArrayMemoryDirector *director = static_cast<SwigDirector_WrappedArrayMemoryDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedArrayMemoryDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::WrappedArrayMemoryDirector *obj = *((RobotRaconteur::WrappedArrayMemoryDirector **)&objarg);
  SwigDirector_WrappedArrayMemoryDirector *director = dynamic_cast<SwigDirector_WrappedArrayMemoryDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedMultiDimArrayMemoryParams_1memorypos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedMultiDimArrayMemoryParams *arg1 = (RobotRaconteur::WrappedMultiDimArrayMemoryParams *) 0 ;
  std::vector< uint64_t > *arg2 = (std::vector< uint64_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::WrappedMultiDimArrayMemoryParams **)&jarg1; 
  arg2 = *(std::vector< uint64_t > **)&jarg2; 
  if (arg1) (arg1)->memorypos = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedMultiDimArrayMemoryParams_1memorypos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedMultiDimArrayMemoryParams *arg1 = (RobotRaconteur::WrappedMultiDimArrayMemoryParams *) 0 ;
  std::vector< uint64_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedMultiDimArrayMemoryParams **)&jarg1; 
  result = (std::vector< uint64_t > *)& ((arg1)->memorypos);
  *(std::vector< uint64_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedMultiDimArrayMemoryParams_1buffer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedMultiDimArrayMemoryParams *arg1 = (RobotRaconteur::WrappedMultiDimArrayMemoryParams *) 0 ;
  boost::shared_ptr< RobotRaconteur::RRMultiDimArrayUntyped > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RRMultiDimArrayUntyped > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::WrappedMultiDimArrayMemoryParams **)&jarg1; 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::RRMultiDimArrayUntyped > **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->buffer = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedMultiDimArrayMemoryParams_1buffer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedMultiDimArrayMemoryParams *arg1 = (RobotRaconteur::WrappedMultiDimArrayMemoryParams *) 0 ;
  boost::shared_ptr< RobotRaconteur::RRMultiDimArrayUntyped > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedMultiDimArrayMemoryParams **)&jarg1; 
  result = (boost::shared_ptr< RobotRaconteur::RRMultiDimArrayUntyped > *) & ((arg1)->buffer);
  *(boost::shared_ptr< RobotRaconteur::RRMultiDimArrayUntyped > **)&jresult = *result ? new boost::shared_ptr< RobotRaconteur::RRMultiDimArrayUntyped >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedMultiDimArrayMemoryParams_1bufferpos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedMultiDimArrayMemoryParams *arg1 = (RobotRaconteur::WrappedMultiDimArrayMemoryParams *) 0 ;
  std::vector< uint64_t > *arg2 = (std::vector< uint64_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::WrappedMultiDimArrayMemoryParams **)&jarg1; 
  arg2 = *(std::vector< uint64_t > **)&jarg2; 
  if (arg1) (arg1)->bufferpos = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedMultiDimArrayMemoryParams_1bufferpos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedMultiDimArrayMemoryParams *arg1 = (RobotRaconteur::WrappedMultiDimArrayMemoryParams *) 0 ;
  std::vector< uint64_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedMultiDimArrayMemoryParams **)&jarg1; 
  result = (std::vector< uint64_t > *)& ((arg1)->bufferpos);
  *(std::vector< uint64_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedMultiDimArrayMemoryParams_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedMultiDimArrayMemoryParams *arg1 = (RobotRaconteur::WrappedMultiDimArrayMemoryParams *) 0 ;
  std::vector< uint64_t > *arg2 = (std::vector< uint64_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::WrappedMultiDimArrayMemoryParams **)&jarg1; 
  arg2 = *(std::vector< uint64_t > **)&jarg2; 
  if (arg1) (arg1)->count = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedMultiDimArrayMemoryParams_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedMultiDimArrayMemoryParams *arg1 = (RobotRaconteur::WrappedMultiDimArrayMemoryParams *) 0 ;
  std::vector< uint64_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedMultiDimArrayMemoryParams **)&jarg1; 
  result = (std::vector< uint64_t > *)& ((arg1)->count);
  *(std::vector< uint64_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedMultiDimArrayMemoryParams(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedMultiDimArrayMemoryParams *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedMultiDimArrayMemoryParams *)new RobotRaconteur::WrappedMultiDimArrayMemoryParams();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedMultiDimArrayMemoryParams **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedMultiDimArrayMemoryParams(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedMultiDimArrayMemoryParams *arg1 = (RobotRaconteur::WrappedMultiDimArrayMemoryParams *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedMultiDimArrayMemoryParams **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedMultiDimArrayMemoryDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedMultiDimArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedMultiDimArrayMemoryDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedMultiDimArrayMemoryDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedMultiDimArrayMemoryDirector_1dimensions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedMultiDimArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedMultiDimArrayMemoryDirector *) 0 ;
  std::vector< uint64_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedMultiDimArrayMemoryDirector **)&jarg1; 
  {
    try
    {
      result = (arg1)->Dimensions();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< uint64_t > **)&jresult = new std::vector< uint64_t >((const std::vector< uint64_t > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedMultiDimArrayMemoryDirector_1dimCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedMultiDimArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedMultiDimArrayMemoryDirector *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedMultiDimArrayMemoryDirector **)&jarg1; 
  {
    try
    {
      result = (uint64_t)(arg1)->DimCount();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedMultiDimArrayMemoryDirector_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedMultiDimArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedMultiDimArrayMemoryDirector *) 0 ;
  RobotRaconteur::WrappedMultiDimArrayMemoryParams *arg2 = (RobotRaconteur::WrappedMultiDimArrayMemoryParams *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::WrappedMultiDimArrayMemoryDirector **)&jarg1; 
  arg2 = *(RobotRaconteur::WrappedMultiDimArrayMemoryParams **)&jarg2; 
  {
    try
    {
      (arg1)->Read(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedMultiDimArrayMemoryDirector_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedMultiDimArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedMultiDimArrayMemoryDirector *) 0 ;
  RobotRaconteur::WrappedMultiDimArrayMemoryParams *arg2 = (RobotRaconteur::WrappedMultiDimArrayMemoryParams *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::WrappedMultiDimArrayMemoryDirector **)&jarg1; 
  arg2 = *(RobotRaconteur::WrappedMultiDimArrayMemoryParams **)&jarg2; 
  {
    try
    {
      (arg1)->Write(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedMultiDimArrayMemoryDirector_1objectheapid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::WrappedMultiDimArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedMultiDimArrayMemoryDirector *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedMultiDimArrayMemoryDirector **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->objectheapid = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedMultiDimArrayMemoryDirector_1objectheapid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::WrappedMultiDimArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedMultiDimArrayMemoryDirector *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedMultiDimArrayMemoryDirector **)&jarg1; 
  result = (int32_t) ((arg1)->objectheapid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedMultiDimArrayMemoryDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedMultiDimArrayMemoryDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedMultiDimArrayMemoryDirector *)new SwigDirector_WrappedMultiDimArrayMemoryDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedMultiDimArrayMemoryDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedMultiDimArrayMemoryDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::WrappedMultiDimArrayMemoryDirector *obj = *((RobotRaconteur::WrappedMultiDimArrayMemoryDirector **)&objarg);
  (void)jcls;
  SwigDirector_WrappedMultiDimArrayMemoryDirector *director = static_cast<SwigDirector_WrappedMultiDimArrayMemoryDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedMultiDimArrayMemoryDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::WrappedMultiDimArrayMemoryDirector *obj = *((RobotRaconteur::WrappedMultiDimArrayMemoryDirector **)&objarg);
  SwigDirector_WrappedMultiDimArrayMemoryDirector *director = dynamic_cast<SwigDirector_WrappedMultiDimArrayMemoryDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedPodArrayMemoryDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPodArrayMemoryDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedPodArrayMemoryDirector *)new SwigDirector_WrappedPodArrayMemoryDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedPodArrayMemoryDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedPodArrayMemoryDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedPodArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedPodArrayMemoryDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedPodArrayMemoryDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPodArrayMemoryDirector_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPodArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedPodArrayMemoryDirector *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedPodArrayMemoryDirector **)&jarg1; 
  {
    try
    {
      result = (uint64_t)(arg1)->Length();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPodArrayMemoryDirector_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPodArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedPodArrayMemoryDirector *) 0 ;
  uint64_t arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedPodArrayMemoryDirector **)&jarg1; 
  arg2 = (uint64_t)jarg2; 
  arg3 = (uint64_t)jarg3; 
  arg4 = (uint64_t)jarg4; 
  {
    try
    {
      result = (arg1)->Read(arg2,arg3,arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElementNestedElementList >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPodArrayMemoryDirector_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  RobotRaconteur::WrappedPodArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedPodArrayMemoryDirector *) 0 ;
  uint64_t arg2 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > arg3 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > *argp3 ;
  boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > *smartarg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(RobotRaconteur::WrappedPodArrayMemoryDirector **)&jarg1; 
  arg2 = (uint64_t)jarg2; 
  
  // intrusive_ptr by value
  smartarg3 = *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList >**)&jarg3;
  if (smartarg3) {
    arg3 = boost::intrusive_ptr<  RobotRaconteur::MessageElementNestedElementList >(smartarg3->get(), true);
  }
  
  arg4 = (uint64_t)jarg4; 
  arg5 = (uint64_t)jarg5; 
  {
    try
    {
      (arg1)->Write(arg2,arg3,arg4,arg5);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPodArrayMemoryDirector_1objectheapid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::WrappedPodArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedPodArrayMemoryDirector *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedPodArrayMemoryDirector **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->objectheapid = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPodArrayMemoryDirector_1objectheapid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::WrappedPodArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedPodArrayMemoryDirector *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedPodArrayMemoryDirector **)&jarg1; 
  result = (int32_t) ((arg1)->objectheapid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPodArrayMemoryDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::WrappedPodArrayMemoryDirector *obj = *((RobotRaconteur::WrappedPodArrayMemoryDirector **)&objarg);
  (void)jcls;
  SwigDirector_WrappedPodArrayMemoryDirector *director = static_cast<SwigDirector_WrappedPodArrayMemoryDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPodArrayMemoryDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::WrappedPodArrayMemoryDirector *obj = *((RobotRaconteur::WrappedPodArrayMemoryDirector **)&objarg);
  SwigDirector_WrappedPodArrayMemoryDirector *director = dynamic_cast<SwigDirector_WrappedPodArrayMemoryDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedPodMultiDimArrayMemoryDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPodMultiDimArrayMemoryDirector_1dimensions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector *) 0 ;
  std::vector< uint64_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector **)&jarg1; 
  {
    try
    {
      result = (arg1)->Dimensions();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< uint64_t > **)&jresult = new std::vector< uint64_t >((const std::vector< uint64_t > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPodMultiDimArrayMemoryDirector_1dimCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector **)&jarg1; 
  {
    try
    {
      result = (uint64_t)(arg1)->DimCount();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPodMultiDimArrayMemoryDirector_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector *) 0 ;
  std::vector< uint64_t > *arg2 = 0 ;
  std::vector< uint64_t > *arg3 = 0 ;
  std::vector< uint64_t > *arg4 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector **)&jarg1; 
  arg2 = *(std::vector< uint64_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint64_t > const & reference is null");
    return 0;
  } 
  arg3 = *(std::vector< uint64_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint64_t > const & reference is null");
    return 0;
  } 
  arg4 = *(std::vector< uint64_t > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint64_t > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (arg1)->Read((std::vector< uint64_t > const &)*arg2,(std::vector< uint64_t > const &)*arg3,(std::vector< uint64_t > const &)*arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElementNestedElementList >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPodMultiDimArrayMemoryDirector_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector *) 0 ;
  std::vector< uint64_t > *arg2 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > arg3 ;
  std::vector< uint64_t > *arg4 = 0 ;
  std::vector< uint64_t > *arg5 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > *argp3 ;
  boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > *smartarg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector **)&jarg1; 
  arg2 = *(std::vector< uint64_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint64_t > const & reference is null");
    return ;
  } 
  
  // intrusive_ptr by value
  smartarg3 = *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList >**)&jarg3;
  if (smartarg3) {
    arg3 = boost::intrusive_ptr<  RobotRaconteur::MessageElementNestedElementList >(smartarg3->get(), true);
  }
  
  arg4 = *(std::vector< uint64_t > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint64_t > const & reference is null");
    return ;
  } 
  arg5 = *(std::vector< uint64_t > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint64_t > const & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->Write((std::vector< uint64_t > const &)*arg2,arg3,(std::vector< uint64_t > const &)*arg4,(std::vector< uint64_t > const &)*arg5);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPodMultiDimArrayMemoryDirector_1objectheapid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->objectheapid = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPodMultiDimArrayMemoryDirector_1objectheapid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector **)&jarg1; 
  result = (int32_t) ((arg1)->objectheapid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedPodMultiDimArrayMemoryDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector *)new SwigDirector_WrappedPodMultiDimArrayMemoryDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPodMultiDimArrayMemoryDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector *obj = *((RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector **)&objarg);
  (void)jcls;
  SwigDirector_WrappedPodMultiDimArrayMemoryDirector *director = static_cast<SwigDirector_WrappedPodMultiDimArrayMemoryDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPodMultiDimArrayMemoryDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector *obj = *((RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector **)&objarg);
  SwigDirector_WrappedPodMultiDimArrayMemoryDirector *director = dynamic_cast<SwigDirector_WrappedPodMultiDimArrayMemoryDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNamedArrayMemoryClientBuffer_1unpackReadResult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  RobotRaconteur::WrappedNamedArrayMemoryClientBuffer *arg1 = (RobotRaconteur::WrappedNamedArrayMemoryClientBuffer *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > *argp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::WrappedNamedArrayMemoryClientBuffer **)&jarg1; 
  
  // intrusive_ptr by value
  smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList >**)&jarg2;
  if (smartarg2) {
    arg2 = boost::intrusive_ptr<  RobotRaconteur::MessageElementNestedElementList >(smartarg2->get(), true);
  }
  
  arg3 = (uint64_t)jarg3; 
  arg4 = (uint64_t)jarg4; 
  {
    try
    {
      (arg1)->UnpackReadResult(arg2,arg3,arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNamedArrayMemoryClientBuffer_1packWriteRequest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedNamedArrayMemoryClientBuffer *arg1 = (RobotRaconteur::WrappedNamedArrayMemoryClientBuffer *) 0 ;
  uint64_t arg2 ;
  uint64_t arg3 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedNamedArrayMemoryClientBuffer **)&jarg1; 
  arg2 = (uint64_t)jarg2; 
  arg3 = (uint64_t)jarg3; 
  {
    try
    {
      result = (arg1)->PackWriteRequest(arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElementNestedElementList >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNamedArrayMemoryClientBuffer_1getBufferLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedNamedArrayMemoryClientBuffer *arg1 = (RobotRaconteur::WrappedNamedArrayMemoryClientBuffer *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedNamedArrayMemoryClientBuffer **)&jarg1; 
  {
    try
    {
      result = (uint64_t)(arg1)->GetBufferLength();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedNamedArrayMemoryClientBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedNamedArrayMemoryClientBuffer *arg1 = (RobotRaconteur::WrappedNamedArrayMemoryClientBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedNamedArrayMemoryClientBuffer **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedNamedArrayMemoryClientBuffer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedNamedArrayMemoryClientBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedNamedArrayMemoryClientBuffer *)new SwigDirector_WrappedNamedArrayMemoryClientBuffer(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedNamedArrayMemoryClientBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNamedArrayMemoryClientBuffer_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::WrappedNamedArrayMemoryClientBuffer *obj = *((RobotRaconteur::WrappedNamedArrayMemoryClientBuffer **)&objarg);
  (void)jcls;
  SwigDirector_WrappedNamedArrayMemoryClientBuffer *director = static_cast<SwigDirector_WrappedNamedArrayMemoryClientBuffer *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNamedArrayMemoryClientBuffer_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::WrappedNamedArrayMemoryClientBuffer *obj = *((RobotRaconteur::WrappedNamedArrayMemoryClientBuffer **)&objarg);
  SwigDirector_WrappedNamedArrayMemoryClientBuffer *director = dynamic_cast<SwigDirector_WrappedNamedArrayMemoryClientBuffer *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNamedArrayMemoryClient_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedNamedArrayMemoryClient *arg1 = (RobotRaconteur::WrappedNamedArrayMemoryClient *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedNamedArrayMemoryClient > *smartarg1 = 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedNamedArrayMemoryClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedNamedArrayMemoryClient *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (uint64_t)(arg1)->Length();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNamedArrayMemoryClient_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::WrappedNamedArrayMemoryClient *arg1 = (RobotRaconteur::WrappedNamedArrayMemoryClient *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedNamedArrayMemoryClient > *smartarg1 = 0 ;
  RobotRaconteur::MemberDefinition_Direction result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedNamedArrayMemoryClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedNamedArrayMemoryClient *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (RobotRaconteur::MemberDefinition_Direction)(arg1)->Direction();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNamedArrayMemoryClient_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  RobotRaconteur::WrappedNamedArrayMemoryClient *arg1 = (RobotRaconteur::WrappedNamedArrayMemoryClient *) 0 ;
  uint64_t arg2 ;
  RobotRaconteur::WrappedNamedArrayMemoryClientBuffer *arg3 = (RobotRaconteur::WrappedNamedArrayMemoryClientBuffer *) 0 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  boost::shared_ptr< RobotRaconteur::WrappedNamedArrayMemoryClient > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedNamedArrayMemoryClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedNamedArrayMemoryClient *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint64_t)jarg2; 
  arg3 = *(RobotRaconteur::WrappedNamedArrayMemoryClientBuffer **)&jarg3; 
  arg4 = (uint64_t)jarg4; 
  arg5 = (uint64_t)jarg5; 
  {
    try
    {
      (arg1)->Read(arg2,arg3,arg4,arg5);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNamedArrayMemoryClient_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  RobotRaconteur::WrappedNamedArrayMemoryClient *arg1 = (RobotRaconteur::WrappedNamedArrayMemoryClient *) 0 ;
  uint64_t arg2 ;
  RobotRaconteur::WrappedNamedArrayMemoryClientBuffer *arg3 = (RobotRaconteur::WrappedNamedArrayMemoryClientBuffer *) 0 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  boost::shared_ptr< RobotRaconteur::WrappedNamedArrayMemoryClient > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedNamedArrayMemoryClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedNamedArrayMemoryClient *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint64_t)jarg2; 
  arg3 = *(RobotRaconteur::WrappedNamedArrayMemoryClientBuffer **)&jarg3; 
  arg4 = (uint64_t)jarg4; 
  arg5 = (uint64_t)jarg5; 
  {
    try
    {
      (arg1)->Write(arg2,arg3,arg4,arg5);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedNamedArrayMemoryClient(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedNamedArrayMemoryClient *arg1 = (RobotRaconteur::WrappedNamedArrayMemoryClient *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedNamedArrayMemoryClient > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedNamedArrayMemoryClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedNamedArrayMemoryClient *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNamedMultiDimArrayMemoryClientBuffer_1unpackReadResult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  RobotRaconteur::WrappedNamedMultiDimArrayMemoryClientBuffer *arg1 = (RobotRaconteur::WrappedNamedMultiDimArrayMemoryClientBuffer *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > arg2 ;
  std::vector< uint64_t > *arg3 = 0 ;
  std::vector< uint64_t > *arg4 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > *argp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(RobotRaconteur::WrappedNamedMultiDimArrayMemoryClientBuffer **)&jarg1; 
  
  // intrusive_ptr by value
  smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList >**)&jarg2;
  if (smartarg2) {
    arg2 = boost::intrusive_ptr<  RobotRaconteur::MessageElementNestedElementList >(smartarg2->get(), true);
  }
  
  arg3 = *(std::vector< uint64_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint64_t > const & reference is null");
    return ;
  } 
  arg4 = *(std::vector< uint64_t > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint64_t > const & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->UnpackReadResult(arg2,(std::vector< uint64_t > const &)*arg3,(std::vector< uint64_t > const &)*arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNamedMultiDimArrayMemoryClientBuffer_1packWriteRequest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedNamedMultiDimArrayMemoryClientBuffer *arg1 = (RobotRaconteur::WrappedNamedMultiDimArrayMemoryClientBuffer *) 0 ;
  std::vector< uint64_t > *arg2 = 0 ;
  std::vector< uint64_t > *arg3 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(RobotRaconteur::WrappedNamedMultiDimArrayMemoryClientBuffer **)&jarg1; 
  arg2 = *(std::vector< uint64_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint64_t > const & reference is null");
    return 0;
  } 
  arg3 = *(std::vector< uint64_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint64_t > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (arg1)->PackWriteRequest((std::vector< uint64_t > const &)*arg2,(std::vector< uint64_t > const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElementNestedElementList >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedNamedMultiDimArrayMemoryClientBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedNamedMultiDimArrayMemoryClientBuffer *arg1 = (RobotRaconteur::WrappedNamedMultiDimArrayMemoryClientBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedNamedMultiDimArrayMemoryClientBuffer **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedNamedMultiDimArrayMemoryClientBuffer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedNamedMultiDimArrayMemoryClientBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedNamedMultiDimArrayMemoryClientBuffer *)new SwigDirector_WrappedNamedMultiDimArrayMemoryClientBuffer(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedNamedMultiDimArrayMemoryClientBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNamedMultiDimArrayMemoryClientBuffer_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::WrappedNamedMultiDimArrayMemoryClientBuffer *obj = *((RobotRaconteur::WrappedNamedMultiDimArrayMemoryClientBuffer **)&objarg);
  (void)jcls;
  SwigDirector_WrappedNamedMultiDimArrayMemoryClientBuffer *director = static_cast<SwigDirector_WrappedNamedMultiDimArrayMemoryClientBuffer *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNamedMultiDimArrayMemoryClientBuffer_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::WrappedNamedMultiDimArrayMemoryClientBuffer *obj = *((RobotRaconteur::WrappedNamedMultiDimArrayMemoryClientBuffer **)&objarg);
  SwigDirector_WrappedNamedMultiDimArrayMemoryClientBuffer *director = dynamic_cast<SwigDirector_WrappedNamedMultiDimArrayMemoryClientBuffer *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNamedMultiDimArrayMemoryClient_1dimensions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedNamedMultiDimArrayMemoryClient *arg1 = (RobotRaconteur::WrappedNamedMultiDimArrayMemoryClient *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedNamedMultiDimArrayMemoryClient > *smartarg1 = 0 ;
  std::vector< uint64_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedNamedMultiDimArrayMemoryClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedNamedMultiDimArrayMemoryClient *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->Dimensions();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< uint64_t > **)&jresult = new std::vector< uint64_t >((const std::vector< uint64_t > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNamedMultiDimArrayMemoryClient_1dimCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedNamedMultiDimArrayMemoryClient *arg1 = (RobotRaconteur::WrappedNamedMultiDimArrayMemoryClient *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedNamedMultiDimArrayMemoryClient > *smartarg1 = 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedNamedMultiDimArrayMemoryClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedNamedMultiDimArrayMemoryClient *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (uint64_t)(arg1)->DimCount();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNamedMultiDimArrayMemoryClient_1direction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::WrappedNamedMultiDimArrayMemoryClient *arg1 = (RobotRaconteur::WrappedNamedMultiDimArrayMemoryClient *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedNamedMultiDimArrayMemoryClient > *smartarg1 = 0 ;
  RobotRaconteur::MemberDefinition_Direction result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedNamedMultiDimArrayMemoryClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedNamedMultiDimArrayMemoryClient *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (RobotRaconteur::MemberDefinition_Direction)(arg1)->Direction();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNamedMultiDimArrayMemoryClient_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  RobotRaconteur::WrappedNamedMultiDimArrayMemoryClient *arg1 = (RobotRaconteur::WrappedNamedMultiDimArrayMemoryClient *) 0 ;
  std::vector< uint64_t > *arg2 = 0 ;
  RobotRaconteur::WrappedNamedMultiDimArrayMemoryClientBuffer *arg3 = (RobotRaconteur::WrappedNamedMultiDimArrayMemoryClientBuffer *) 0 ;
  std::vector< uint64_t > *arg4 = 0 ;
  std::vector< uint64_t > *arg5 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedNamedMultiDimArrayMemoryClient > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedNamedMultiDimArrayMemoryClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedNamedMultiDimArrayMemoryClient *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< uint64_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint64_t > const & reference is null");
    return ;
  } 
  arg3 = *(RobotRaconteur::WrappedNamedMultiDimArrayMemoryClientBuffer **)&jarg3; 
  arg4 = *(std::vector< uint64_t > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint64_t > const & reference is null");
    return ;
  } 
  arg5 = *(std::vector< uint64_t > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint64_t > const & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->Read((std::vector< uint64_t > const &)*arg2,arg3,(std::vector< uint64_t > const &)*arg4,(std::vector< uint64_t > const &)*arg5);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNamedMultiDimArrayMemoryClient_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  RobotRaconteur::WrappedNamedMultiDimArrayMemoryClient *arg1 = (RobotRaconteur::WrappedNamedMultiDimArrayMemoryClient *) 0 ;
  std::vector< uint64_t > *arg2 = 0 ;
  RobotRaconteur::WrappedNamedMultiDimArrayMemoryClientBuffer *arg3 = (RobotRaconteur::WrappedNamedMultiDimArrayMemoryClientBuffer *) 0 ;
  std::vector< uint64_t > *arg4 = 0 ;
  std::vector< uint64_t > *arg5 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedNamedMultiDimArrayMemoryClient > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedNamedMultiDimArrayMemoryClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedNamedMultiDimArrayMemoryClient *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< uint64_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint64_t > const & reference is null");
    return ;
  } 
  arg3 = *(RobotRaconteur::WrappedNamedMultiDimArrayMemoryClientBuffer **)&jarg3; 
  arg4 = *(std::vector< uint64_t > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint64_t > const & reference is null");
    return ;
  } 
  arg5 = *(std::vector< uint64_t > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint64_t > const & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->Write((std::vector< uint64_t > const &)*arg2,arg3,(std::vector< uint64_t > const &)*arg4,(std::vector< uint64_t > const &)*arg5);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedNamedMultiDimArrayMemoryClient(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedNamedMultiDimArrayMemoryClient *arg1 = (RobotRaconteur::WrappedNamedMultiDimArrayMemoryClient *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedNamedMultiDimArrayMemoryClient > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedNamedMultiDimArrayMemoryClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedNamedMultiDimArrayMemoryClient *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedNamedArrayMemoryDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedNamedArrayMemoryDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedNamedArrayMemoryDirector *)new SwigDirector_WrappedNamedArrayMemoryDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedNamedArrayMemoryDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedNamedArrayMemoryDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedNamedArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedNamedArrayMemoryDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedNamedArrayMemoryDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNamedArrayMemoryDirector_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedNamedArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedNamedArrayMemoryDirector *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedNamedArrayMemoryDirector **)&jarg1; 
  {
    try
    {
      result = (uint64_t)(arg1)->Length();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNamedArrayMemoryDirector_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedNamedArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedNamedArrayMemoryDirector *) 0 ;
  uint64_t arg2 ;
  uint64_t arg3 ;
  uint64_t arg4 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedNamedArrayMemoryDirector **)&jarg1; 
  arg2 = (uint64_t)jarg2; 
  arg3 = (uint64_t)jarg3; 
  arg4 = (uint64_t)jarg4; 
  {
    try
    {
      result = (arg1)->Read(arg2,arg3,arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElementNestedElementList >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNamedArrayMemoryDirector_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  RobotRaconteur::WrappedNamedArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedNamedArrayMemoryDirector *) 0 ;
  uint64_t arg2 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > arg3 ;
  uint64_t arg4 ;
  uint64_t arg5 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > *argp3 ;
  boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > *smartarg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(RobotRaconteur::WrappedNamedArrayMemoryDirector **)&jarg1; 
  arg2 = (uint64_t)jarg2; 
  
  // intrusive_ptr by value
  smartarg3 = *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList >**)&jarg3;
  if (smartarg3) {
    arg3 = boost::intrusive_ptr<  RobotRaconteur::MessageElementNestedElementList >(smartarg3->get(), true);
  }
  
  arg4 = (uint64_t)jarg4; 
  arg5 = (uint64_t)jarg5; 
  {
    try
    {
      (arg1)->Write(arg2,arg3,arg4,arg5);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNamedArrayMemoryDirector_1objectheapid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::WrappedNamedArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedNamedArrayMemoryDirector *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedNamedArrayMemoryDirector **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->objectheapid = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNamedArrayMemoryDirector_1objectheapid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::WrappedNamedArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedNamedArrayMemoryDirector *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedNamedArrayMemoryDirector **)&jarg1; 
  result = (int32_t) ((arg1)->objectheapid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNamedArrayMemoryDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::WrappedNamedArrayMemoryDirector *obj = *((RobotRaconteur::WrappedNamedArrayMemoryDirector **)&objarg);
  (void)jcls;
  SwigDirector_WrappedNamedArrayMemoryDirector *director = static_cast<SwigDirector_WrappedNamedArrayMemoryDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNamedArrayMemoryDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::WrappedNamedArrayMemoryDirector *obj = *((RobotRaconteur::WrappedNamedArrayMemoryDirector **)&objarg);
  SwigDirector_WrappedNamedArrayMemoryDirector *director = dynamic_cast<SwigDirector_WrappedNamedArrayMemoryDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedNamedMultiDimArrayMemoryDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNamedMultiDimArrayMemoryDirector_1dimensions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector *) 0 ;
  std::vector< uint64_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector **)&jarg1; 
  {
    try
    {
      result = (arg1)->Dimensions();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< uint64_t > **)&jresult = new std::vector< uint64_t >((const std::vector< uint64_t > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNamedMultiDimArrayMemoryDirector_1dimCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector **)&jarg1; 
  {
    try
    {
      result = (uint64_t)(arg1)->DimCount();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNamedMultiDimArrayMemoryDirector_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector *) 0 ;
  std::vector< uint64_t > *arg2 = 0 ;
  std::vector< uint64_t > *arg3 = 0 ;
  std::vector< uint64_t > *arg4 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector **)&jarg1; 
  arg2 = *(std::vector< uint64_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint64_t > const & reference is null");
    return 0;
  } 
  arg3 = *(std::vector< uint64_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint64_t > const & reference is null");
    return 0;
  } 
  arg4 = *(std::vector< uint64_t > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint64_t > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (arg1)->Read((std::vector< uint64_t > const &)*arg2,(std::vector< uint64_t > const &)*arg3,(std::vector< uint64_t > const &)*arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElementNestedElementList >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNamedMultiDimArrayMemoryDirector_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector *) 0 ;
  std::vector< uint64_t > *arg2 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > arg3 ;
  std::vector< uint64_t > *arg4 = 0 ;
  std::vector< uint64_t > *arg5 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > *argp3 ;
  boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > *smartarg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector **)&jarg1; 
  arg2 = *(std::vector< uint64_t > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint64_t > const & reference is null");
    return ;
  } 
  
  // intrusive_ptr by value
  smartarg3 = *(boost::shared_ptr<  RobotRaconteur::MessageElementNestedElementList >**)&jarg3;
  if (smartarg3) {
    arg3 = boost::intrusive_ptr<  RobotRaconteur::MessageElementNestedElementList >(smartarg3->get(), true);
  }
  
  arg4 = *(std::vector< uint64_t > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint64_t > const & reference is null");
    return ;
  } 
  arg5 = *(std::vector< uint64_t > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint64_t > const & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->Write((std::vector< uint64_t > const &)*arg2,arg3,(std::vector< uint64_t > const &)*arg4,(std::vector< uint64_t > const &)*arg5);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNamedMultiDimArrayMemoryDirector_1objectheapid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->objectheapid = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNamedMultiDimArrayMemoryDirector_1objectheapid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector *arg1 = (RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector **)&jarg1; 
  result = (int32_t) ((arg1)->objectheapid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedNamedMultiDimArrayMemoryDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector *)new SwigDirector_WrappedNamedMultiDimArrayMemoryDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNamedMultiDimArrayMemoryDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector *obj = *((RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector **)&objarg);
  (void)jcls;
  SwigDirector_WrappedNamedMultiDimArrayMemoryDirector *director = static_cast<SwigDirector_WrappedNamedMultiDimArrayMemoryDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNamedMultiDimArrayMemoryDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector *obj = *((RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector **)&objarg);
  SwigDirector_WrappedNamedMultiDimArrayMemoryDirector *director = dynamic_cast<SwigDirector_WrappedNamedMultiDimArrayMemoryDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedGeneratorClient_1TryGetNextResult_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedGeneratorClient_TryGetNextResult *arg1 = (RobotRaconteur::WrappedGeneratorClient_TryGetNextResult *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *arg2 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > tempnull2 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > temp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::WrappedGeneratorClient_TryGetNextResult **)&jarg1; 
  
  // intrusive_ptr by reference
  if ( jarg2 ) {
    smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg2;
    temp2 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg2->get(), true);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  if (arg1) (arg1)->value = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedGeneratorClient_1TryGetNextResult_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedGeneratorClient_TryGetNextResult *arg1 = (RobotRaconteur::WrappedGeneratorClient_TryGetNextResult *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedGeneratorClient_TryGetNextResult **)&jarg1; 
  result = (boost::intrusive_ptr< RobotRaconteur::MessageElement > *) & ((arg1)->value);
  
  if (*result) {
    intrusive_ptr_add_ref(result->get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElement >(result->get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElement >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedGeneratorClient_1TryGetNextResult_1res_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RobotRaconteur::WrappedGeneratorClient_TryGetNextResult *arg1 = (RobotRaconteur::WrappedGeneratorClient_TryGetNextResult *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedGeneratorClient_TryGetNextResult **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->res = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedGeneratorClient_1TryGetNextResult_1res_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::WrappedGeneratorClient_TryGetNextResult *arg1 = (RobotRaconteur::WrappedGeneratorClient_TryGetNextResult *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedGeneratorClient_TryGetNextResult **)&jarg1; 
  result = (bool) ((arg1)->res);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedGeneratorClient_1TryGetNextResult(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedGeneratorClient_TryGetNextResult *arg1 = (RobotRaconteur::WrappedGeneratorClient_TryGetNextResult *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedGeneratorClient_TryGetNextResult **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedGeneratorClient_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedGeneratorClient *arg1 = (RobotRaconteur::WrappedGeneratorClient *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedGeneratorClient > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > tempnull2 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > temp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg2 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedGeneratorClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedGeneratorClient *)(smartarg1 ? smartarg1->get() : 0); 
  
  // intrusive_ptr by reference
  if ( jarg2 ) {
    smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg2;
    temp2 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg2->get(), true);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  {
    try
    {
      result = (arg1)->Next((boost::intrusive_ptr< RobotRaconteur::MessageElement > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElement >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElement >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedGeneratorClient_1tryNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedGeneratorClient *arg1 = (RobotRaconteur::WrappedGeneratorClient *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedGeneratorClient > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > tempnull2 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > temp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg2 ;
  RobotRaconteur::WrappedGeneratorClient_TryGetNextResult result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedGeneratorClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedGeneratorClient *)(smartarg1 ? smartarg1->get() : 0); 
  
  // intrusive_ptr by reference
  if ( jarg2 ) {
    smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg2;
    temp2 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg2->get(), true);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  {
    try
    {
      result = (arg1)->TryNext((boost::intrusive_ptr< RobotRaconteur::MessageElement > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedGeneratorClient_TryGetNextResult **)&jresult = new RobotRaconteur::WrappedGeneratorClient_TryGetNextResult((const RobotRaconteur::WrappedGeneratorClient_TryGetNextResult &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedGeneratorClient_1asyncNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_, jint jarg5) {
  RobotRaconteur::WrappedGeneratorClient *arg1 = (RobotRaconteur::WrappedGeneratorClient *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *arg2 = 0 ;
  int32_t arg3 ;
  RobotRaconteur::AsyncRequestDirector *arg4 = (RobotRaconteur::AsyncRequestDirector *) 0 ;
  int32_t arg5 ;
  boost::shared_ptr< RobotRaconteur::WrappedGeneratorClient > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > tempnull2 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > temp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedGeneratorClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedGeneratorClient *)(smartarg1 ? smartarg1->get() : 0); 
  
  // intrusive_ptr by reference
  if ( jarg2 ) {
    smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg2;
    temp2 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg2->get(), true);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = (int32_t)jarg3; 
  arg4 = *(RobotRaconteur::AsyncRequestDirector **)&jarg4; 
  arg5 = (int32_t)jarg5; 
  {
    try
    {
      (arg1)->AsyncNext((boost::intrusive_ptr< RobotRaconteur::MessageElement > const &)*arg2,arg3,arg4,arg5);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedGeneratorClient_1abort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::WrappedGeneratorClient *arg1 = (RobotRaconteur::WrappedGeneratorClient *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedGeneratorClient > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedGeneratorClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedGeneratorClient *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->Abort();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedGeneratorClient_1asyncAbort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  RobotRaconteur::WrappedGeneratorClient *arg1 = (RobotRaconteur::WrappedGeneratorClient *) 0 ;
  int32_t arg2 ;
  RobotRaconteur::AsyncVoidReturnDirector *arg3 = (RobotRaconteur::AsyncVoidReturnDirector *) 0 ;
  int32_t arg4 ;
  boost::shared_ptr< RobotRaconteur::WrappedGeneratorClient > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedGeneratorClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedGeneratorClient *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  arg3 = *(RobotRaconteur::AsyncVoidReturnDirector **)&jarg3; 
  arg4 = (int32_t)jarg4; 
  {
    try
    {
      (arg1)->AsyncAbort(arg2,arg3,arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedGeneratorClient_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::WrappedGeneratorClient *arg1 = (RobotRaconteur::WrappedGeneratorClient *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedGeneratorClient > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedGeneratorClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedGeneratorClient *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->Close();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedGeneratorClient_1asyncClose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  RobotRaconteur::WrappedGeneratorClient *arg1 = (RobotRaconteur::WrappedGeneratorClient *) 0 ;
  int32_t arg2 ;
  RobotRaconteur::AsyncVoidReturnDirector *arg3 = (RobotRaconteur::AsyncVoidReturnDirector *) 0 ;
  int32_t arg4 ;
  boost::shared_ptr< RobotRaconteur::WrappedGeneratorClient > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedGeneratorClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedGeneratorClient *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  arg3 = *(RobotRaconteur::AsyncVoidReturnDirector **)&jarg3; 
  arg4 = (int32_t)jarg4; 
  {
    try
    {
      (arg1)->AsyncClose(arg2,arg3,arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedGeneratorClient_1nextAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedGeneratorClient *arg1 = (RobotRaconteur::WrappedGeneratorClient *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedGeneratorClient > *smartarg1 = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedGeneratorClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedGeneratorClient *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->NextAll();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jresult = new std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > >((const std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedGeneratorClient(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedGeneratorClient *arg1 = (RobotRaconteur::WrappedGeneratorClient *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedGeneratorClient > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedGeneratorClient > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedGeneratorClient *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1AsyncGeneratorClientReturnDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::AsyncGeneratorClientReturnDirector *arg1 = (RobotRaconteur::AsyncGeneratorClientReturnDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::AsyncGeneratorClientReturnDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncGeneratorClientReturnDirector_1handler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  RobotRaconteur::AsyncGeneratorClientReturnDirector *arg1 = (RobotRaconteur::AsyncGeneratorClientReturnDirector *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedGeneratorClient > *arg2 = 0 ;
  RobotRaconteur::HandlerErrorInfo *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedGeneratorClient > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(RobotRaconteur::AsyncGeneratorClientReturnDirector **)&jarg1; 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedGeneratorClient > **)&jarg2 : &tempnull2; 
  arg3 = *(RobotRaconteur::HandlerErrorInfo **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::HandlerErrorInfo & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->handler((boost::shared_ptr< RobotRaconteur::WrappedGeneratorClient > const &)*arg2,*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1AsyncGeneratorClientReturnDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::AsyncGeneratorClientReturnDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::AsyncGeneratorClientReturnDirector *)new SwigDirector_AsyncGeneratorClientReturnDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::AsyncGeneratorClientReturnDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncGeneratorClientReturnDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::AsyncGeneratorClientReturnDirector *obj = *((RobotRaconteur::AsyncGeneratorClientReturnDirector **)&objarg);
  (void)jcls;
  SwigDirector_AsyncGeneratorClientReturnDirector *director = static_cast<SwigDirector_AsyncGeneratorClientReturnDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncGeneratorClientReturnDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::AsyncGeneratorClientReturnDirector *obj = *((RobotRaconteur::AsyncGeneratorClientReturnDirector **)&objarg);
  SwigDirector_AsyncGeneratorClientReturnDirector *director = dynamic_cast<SwigDirector_AsyncGeneratorClientReturnDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedGeneratorServerDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedGeneratorServerDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedGeneratorServerDirector *)new SwigDirector_WrappedGeneratorServerDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedGeneratorServerDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedGeneratorServerDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedGeneratorServerDirector *arg1 = (RobotRaconteur::WrappedGeneratorServerDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedGeneratorServerDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedGeneratorServerDirector_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedGeneratorServerDirector *arg1 = (RobotRaconteur::WrappedGeneratorServerDirector *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > arg2 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > *arg3 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *argp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg2 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > tempnull3 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(RobotRaconteur::WrappedGeneratorServerDirector **)&jarg1; 
  
  // intrusive_ptr by value
  smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg2;
  if (smartarg2) {
    arg2 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg2->get(), true);
  }
  
  arg3 = jarg3 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > **)&jarg3 : &tempnull3; 
  {
    try
    {
      result = (arg1)->Next(arg2,(boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElement >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElement >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedGeneratorServerDirector_1abort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedGeneratorServerDirector *arg1 = (RobotRaconteur::WrappedGeneratorServerDirector *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::WrappedGeneratorServerDirector **)&jarg1; 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > **)&jarg2 : &tempnull2; 
  {
    try
    {
      (arg1)->Abort((boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedGeneratorServerDirector_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedGeneratorServerDirector *arg1 = (RobotRaconteur::WrappedGeneratorServerDirector *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::WrappedGeneratorServerDirector **)&jarg1; 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > **)&jarg2 : &tempnull2; 
  {
    try
    {
      (arg1)->Close((boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedGeneratorServerDirector_1objectheapid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::WrappedGeneratorServerDirector *arg1 = (RobotRaconteur::WrappedGeneratorServerDirector *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedGeneratorServerDirector **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->objectheapid = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedGeneratorServerDirector_1objectheapid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::WrappedGeneratorServerDirector *arg1 = (RobotRaconteur::WrappedGeneratorServerDirector *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedGeneratorServerDirector **)&jarg1; 
  result = (int32_t) ((arg1)->objectheapid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedGeneratorServerDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::WrappedGeneratorServerDirector *obj = *((RobotRaconteur::WrappedGeneratorServerDirector **)&objarg);
  (void)jcls;
  SwigDirector_WrappedGeneratorServerDirector *director = static_cast<SwigDirector_WrappedGeneratorServerDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedGeneratorServerDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::WrappedGeneratorServerDirector *obj = *((RobotRaconteur::WrappedGeneratorServerDirector **)&objarg);
  SwigDirector_WrappedGeneratorServerDirector *director = dynamic_cast<SwigDirector_WrappedGeneratorServerDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedServiceStubDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedServiceStubDirector *arg1 = (RobotRaconteur::WrappedServiceStubDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedServiceStubDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStubDirector_1dispatchEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  RobotRaconteur::WrappedServiceStubDirector *arg1 = (RobotRaconteur::WrappedServiceStubDirector *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > arg3 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(RobotRaconteur::WrappedServiceStubDirector **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  argp3 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > >");
    return ;
  }
  arg3 = *argp3; 
  {
    try
    {
      (arg1)->DispatchEvent((std::string const &)*arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStubDirector_1callbackCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceStubDirector *arg1 = (RobotRaconteur::WrappedServiceStubDirector *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > arg3 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *argp3 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(RobotRaconteur::WrappedServiceStubDirector **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  argp3 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > >");
    return 0;
  }
  arg3 = *argp3; 
  {
    try
    {
      result = (arg1)->CallbackCall((std::string const &)*arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElement >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElement >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedServiceStubDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceStubDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedServiceStubDirector *)new SwigDirector_WrappedServiceStubDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedServiceStubDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStubDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::WrappedServiceStubDirector *obj = *((RobotRaconteur::WrappedServiceStubDirector **)&objarg);
  (void)jcls;
  SwigDirector_WrappedServiceStubDirector *director = static_cast<SwigDirector_WrappedServiceStubDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStubDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::WrappedServiceStubDirector *obj = *((RobotRaconteur::WrappedServiceStubDirector **)&objarg);
  SwigDirector_WrappedServiceStubDirector *director = dynamic_cast<SwigDirector_WrappedServiceStubDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1AsyncStubReturnDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::AsyncStubReturnDirector *arg1 = (RobotRaconteur::AsyncStubReturnDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::AsyncStubReturnDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncStubReturnDirector_1handler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  RobotRaconteur::AsyncStubReturnDirector *arg1 = (RobotRaconteur::AsyncStubReturnDirector *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *arg2 = 0 ;
  RobotRaconteur::HandlerErrorInfo *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(RobotRaconteur::AsyncStubReturnDirector **)&jarg1; 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jarg2 : &tempnull2; 
  arg3 = *(RobotRaconteur::HandlerErrorInfo **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::HandlerErrorInfo & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->handler((boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &)*arg2,*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1AsyncStubReturnDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::AsyncStubReturnDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::AsyncStubReturnDirector *)new SwigDirector_AsyncStubReturnDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::AsyncStubReturnDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncStubReturnDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::AsyncStubReturnDirector *obj = *((RobotRaconteur::AsyncStubReturnDirector **)&objarg);
  (void)jcls;
  SwigDirector_AsyncStubReturnDirector *director = static_cast<SwigDirector_AsyncStubReturnDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncStubReturnDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::AsyncStubReturnDirector *obj = *((RobotRaconteur::AsyncStubReturnDirector **)&objarg);
  SwigDirector_AsyncStubReturnDirector *director = dynamic_cast<SwigDirector_AsyncStubReturnDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStub_1propertyGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceStub *arg1 = (RobotRaconteur::WrappedServiceStub *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceStub > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceStub *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (arg1)->PropertyGet((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElement >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElement >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStub_1propertySet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  RobotRaconteur::WrappedServiceStub *arg1 = (RobotRaconteur::WrappedServiceStub *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > tempnull3 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > temp3 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceStub > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceStub *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  
  // intrusive_ptr by reference
  if ( jarg3 ) {
    smartarg3 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg3;
    temp3 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg3->get(), true);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  {
    try
    {
      (arg1)->PropertySet((std::string const &)*arg2,(boost::intrusive_ptr< RobotRaconteur::MessageElement > const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStub_1functionCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceStub *arg1 = (RobotRaconteur::WrappedServiceStub *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceStub > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceStub *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (arg1)->FunctionCall((std::string const &)*arg2,(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElement >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElement >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStub_1generatorFunctionCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceStub *arg1 = (RobotRaconteur::WrappedServiceStub *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedGeneratorClient > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceStub > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceStub *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (arg1)->GeneratorFunctionCall((std::string const &)*arg2,(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedGeneratorClient > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedGeneratorClient >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStub_1async_1PropertyGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_, jint jarg5) {
  RobotRaconteur::WrappedServiceStub *arg1 = (RobotRaconteur::WrappedServiceStub *) 0 ;
  std::string *arg2 = 0 ;
  int32_t arg3 ;
  RobotRaconteur::AsyncRequestDirector *arg4 = (RobotRaconteur::AsyncRequestDirector *) 0 ;
  int32_t arg5 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceStub > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceStub *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int32_t)jarg3; 
  arg4 = *(RobotRaconteur::AsyncRequestDirector **)&jarg4; 
  arg5 = (int32_t)jarg5; 
  {
    try
    {
      (arg1)->async_PropertyGet((std::string const &)*arg2,arg3,arg4,arg5);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStub_1async_1PropertySet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_, jint jarg6) {
  RobotRaconteur::WrappedServiceStub *arg1 = (RobotRaconteur::WrappedServiceStub *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *arg3 = 0 ;
  int32_t arg4 ;
  RobotRaconteur::AsyncRequestDirector *arg5 = (RobotRaconteur::AsyncRequestDirector *) 0 ;
  int32_t arg6 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > tempnull3 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > temp3 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceStub > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceStub *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  
  // intrusive_ptr by reference
  if ( jarg3 ) {
    smartarg3 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg3;
    temp3 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg3->get(), true);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  arg4 = (int32_t)jarg4; 
  arg5 = *(RobotRaconteur::AsyncRequestDirector **)&jarg5; 
  arg6 = (int32_t)jarg6; 
  {
    try
    {
      (arg1)->async_PropertySet((std::string const &)*arg2,(boost::intrusive_ptr< RobotRaconteur::MessageElement > const &)*arg3,arg4,arg5,arg6);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStub_1async_1FunctionCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_, jint jarg6) {
  RobotRaconteur::WrappedServiceStub *arg1 = (RobotRaconteur::WrappedServiceStub *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *arg3 = 0 ;
  int32_t arg4 ;
  RobotRaconteur::AsyncRequestDirector *arg5 = (RobotRaconteur::AsyncRequestDirector *) 0 ;
  int32_t arg6 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceStub > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceStub *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > const & reference is null");
    return ;
  } 
  arg4 = (int32_t)jarg4; 
  arg5 = *(RobotRaconteur::AsyncRequestDirector **)&jarg5; 
  arg6 = (int32_t)jarg6; 
  {
    try
    {
      (arg1)->async_FunctionCall((std::string const &)*arg2,(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > const &)*arg3,arg4,arg5,arg6);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStub_1async_1GeneratorFunctionCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_, jint jarg6) {
  RobotRaconteur::WrappedServiceStub *arg1 = (RobotRaconteur::WrappedServiceStub *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *arg3 = 0 ;
  int32_t arg4 ;
  RobotRaconteur::AsyncGeneratorClientReturnDirector *arg5 = (RobotRaconteur::AsyncGeneratorClientReturnDirector *) 0 ;
  int32_t arg6 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceStub > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceStub *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > const & reference is null");
    return ;
  } 
  arg4 = (int32_t)jarg4; 
  arg5 = *(RobotRaconteur::AsyncGeneratorClientReturnDirector **)&jarg5; 
  arg6 = (int32_t)jarg6; 
  {
    try
    {
      (arg1)->async_GeneratorFunctionCall((std::string const &)*arg2,(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > const &)*arg3,arg4,arg5,arg6);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStub_1async_1FindObjRef_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_, jint jarg5) {
  RobotRaconteur::WrappedServiceStub *arg1 = (RobotRaconteur::WrappedServiceStub *) 0 ;
  std::string *arg2 = 0 ;
  int32_t arg3 ;
  RobotRaconteur::AsyncStubReturnDirector *arg4 = (RobotRaconteur::AsyncStubReturnDirector *) 0 ;
  int32_t arg5 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceStub > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceStub *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int32_t)jarg3; 
  arg4 = *(RobotRaconteur::AsyncStubReturnDirector **)&jarg4; 
  arg5 = (int32_t)jarg5; 
  {
    try
    {
      (arg1)->async_FindObjRef((std::string const &)*arg2,arg3,arg4,arg5);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStub_1async_1FindObjRef_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jlong jarg5, jobject jarg5_, jint jarg6) {
  RobotRaconteur::WrappedServiceStub *arg1 = (RobotRaconteur::WrappedServiceStub *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t arg4 ;
  RobotRaconteur::AsyncStubReturnDirector *arg5 = (RobotRaconteur::AsyncStubReturnDirector *) 0 ;
  int32_t arg6 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceStub > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceStub *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int32_t)jarg4; 
  arg5 = *(RobotRaconteur::AsyncStubReturnDirector **)&jarg5; 
  arg6 = (int32_t)jarg6; 
  {
    try
    {
      (arg1)->async_FindObjRef((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStub_1async_1FindObjRefTyped_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jlong jarg5, jobject jarg5_, jint jarg6) {
  RobotRaconteur::WrappedServiceStub *arg1 = (RobotRaconteur::WrappedServiceStub *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t arg4 ;
  RobotRaconteur::AsyncStubReturnDirector *arg5 = (RobotRaconteur::AsyncStubReturnDirector *) 0 ;
  int32_t arg6 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceStub > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceStub *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int32_t)jarg4; 
  arg5 = *(RobotRaconteur::AsyncStubReturnDirector **)&jarg5; 
  arg6 = (int32_t)jarg6; 
  {
    try
    {
      (arg1)->async_FindObjRefTyped((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStub_1async_1FindObjRefTyped_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jint jarg5, jlong jarg6, jobject jarg6_, jint jarg7) {
  RobotRaconteur::WrappedServiceStub *arg1 = (RobotRaconteur::WrappedServiceStub *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t arg5 ;
  RobotRaconteur::AsyncStubReturnDirector *arg6 = (RobotRaconteur::AsyncStubReturnDirector *) 0 ;
  int32_t arg7 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceStub > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceStub *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int32_t)jarg5; 
  arg6 = *(RobotRaconteur::AsyncStubReturnDirector **)&jarg6; 
  arg7 = (int32_t)jarg7; 
  {
    try
    {
      (arg1)->async_FindObjRefTyped((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5,arg6,arg7);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStub_1getPipe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceStub *arg1 = (RobotRaconteur::WrappedServiceStub *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeClient > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceStub > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceStub *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (arg1)->GetPipe((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedPipeClient > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedPipeClient >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStub_1getWire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceStub *arg1 = (RobotRaconteur::WrappedServiceStub *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireClient > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceStub > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceStub *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (arg1)->GetWire((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedWireClient > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedWireClient >(result) : 0; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStub_1getObjectHeapID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::WrappedServiceStub *arg1 = (RobotRaconteur::WrappedServiceStub *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceStub > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceStub *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (int)(arg1)->GetObjectHeapID();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStub_1findObjRef_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceStub *arg1 = (RobotRaconteur::WrappedServiceStub *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceStub > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceStub *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = RobotRaconteur_WrappedServiceStub_FindObjRef__SWIG_0(arg1,(std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedServiceStub >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStub_1findObjRef_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceStub *arg1 = (RobotRaconteur::WrappedServiceStub *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceStub > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceStub *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try
    {
      result = RobotRaconteur_WrappedServiceStub_FindObjRef__SWIG_1(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedServiceStub >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStub_1findObjRefTyped_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceStub *arg1 = (RobotRaconteur::WrappedServiceStub *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceStub > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceStub *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try
    {
      result = RobotRaconteur_WrappedServiceStub_FindObjRefTyped__SWIG_0(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedServiceStub >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStub_1findObjRefTyped_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceStub *arg1 = (RobotRaconteur::WrappedServiceStub *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceStub > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceStub *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try
    {
      result = RobotRaconteur_WrappedServiceStub_FindObjRefTyped__SWIG_1(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedServiceStub >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStub_1getArrayMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceStub *arg1 = (RobotRaconteur::WrappedServiceStub *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ArrayMemoryBase > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceStub > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceStub *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (arg1)->GetArrayMemory((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::ArrayMemoryBase > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::ArrayMemoryBase >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStub_1getMultiDimArrayMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceStub *arg1 = (RobotRaconteur::WrappedServiceStub *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::MultiDimArrayMemoryBase > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceStub > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceStub *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (arg1)->GetMultiDimArrayMemory((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::MultiDimArrayMemoryBase > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::MultiDimArrayMemoryBase >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStub_1getPodArrayMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceStub *arg1 = (RobotRaconteur::WrappedServiceStub *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPodArrayMemoryClient > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceStub > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceStub *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (arg1)->GetPodArrayMemory((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedPodArrayMemoryClient > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedPodArrayMemoryClient >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStub_1getPodMultiDimArrayMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceStub *arg1 = (RobotRaconteur::WrappedServiceStub *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPodMultiDimArrayMemoryClient > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceStub > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceStub *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (arg1)->GetPodMultiDimArrayMemory((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedPodMultiDimArrayMemoryClient > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedPodMultiDimArrayMemoryClient >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStub_1getNamedArrayMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceStub *arg1 = (RobotRaconteur::WrappedServiceStub *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedNamedArrayMemoryClient > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceStub > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceStub *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (arg1)->GetNamedArrayMemory((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedNamedArrayMemoryClient > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedNamedArrayMemoryClient >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStub_1getNamedMultiDimArrayMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceStub *arg1 = (RobotRaconteur::WrappedServiceStub *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedNamedMultiDimArrayMemoryClient > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceStub > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceStub *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (arg1)->GetNamedMultiDimArrayMemory((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedNamedMultiDimArrayMemoryClient > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedNamedMultiDimArrayMemoryClient >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStub_1rRClose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::WrappedServiceStub *arg1 = (RobotRaconteur::WrappedServiceStub *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceStub > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceStub *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->RRClose();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStub_1RR_1objecttype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedServiceStub *arg1 = (RobotRaconteur::WrappedServiceStub *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceStub > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceStub *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->RR_objecttype = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStub_1RR_1objecttype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceStub *arg1 = (RobotRaconteur::WrappedServiceStub *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceStub > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceStub *)(smartarg1 ? smartarg1->get() : 0); 
  result = (boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *) & ((arg1)->RR_objecttype);
  *(boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > **)&jresult = *result ? new boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStub_1setRRDirector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  RobotRaconteur::WrappedServiceStub *arg1 = (RobotRaconteur::WrappedServiceStub *) 0 ;
  RobotRaconteur::WrappedServiceStubDirector *arg2 = (RobotRaconteur::WrappedServiceStubDirector *) 0 ;
  int32_t arg3 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceStub > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceStub *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::WrappedServiceStubDirector **)&jarg2; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      (arg1)->SetRRDirector(arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStub_1rRGetNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceStub *arg1 = (RobotRaconteur::WrappedServiceStub *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceStub > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceStub *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->RRGetNode();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::RobotRaconteurNode >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedServiceStub(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedServiceStub *arg1 = (RobotRaconteur::WrappedServiceStub *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceStub > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceStub *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedServiceSkelDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedServiceSkelDirector *arg1 = (RobotRaconteur::WrappedServiceSkelDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedServiceSkelDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSkelDirector_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedServiceSkelDirector *arg1 = (RobotRaconteur::WrappedServiceSkelDirector *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSkel > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSkel > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::WrappedServiceSkelDirector **)&jarg1; 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceSkel > **)&jarg2 : &tempnull2; 
  {
    try
    {
      (arg1)->Init((boost::shared_ptr< RobotRaconteur::WrappedServiceSkel > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSkelDirector_1_1CallGetProperty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSkelDirector *arg1 = (RobotRaconteur::WrappedServiceSkelDirector *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > tempnull3 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(RobotRaconteur::WrappedServiceSkelDirector **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > **)&jarg3 : &tempnull3; 
  {
    try
    {
      result = (arg1)->CallGetProperty((std::string const &)*arg2,(boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElement >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElement >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSkelDirector_1_1CallSetProperty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  RobotRaconteur::WrappedServiceSkelDirector *arg1 = (RobotRaconteur::WrappedServiceSkelDirector *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > arg3 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > *arg4 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *argp3 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg3 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > tempnull4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(RobotRaconteur::WrappedServiceSkelDirector **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  
  // intrusive_ptr by value
  smartarg3 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg3;
  if (smartarg3) {
    arg3 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg3->get(), true);
  }
  
  arg4 = jarg4 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > **)&jarg4 : &tempnull4; 
  {
    try
    {
      (arg1)->CallSetProperty((std::string const &)*arg2,arg3,(boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > const &)*arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSkelDirector_1_1CallFunction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSkelDirector *arg1 = (RobotRaconteur::WrappedServiceSkelDirector *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > *arg4 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > tempnull4 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(RobotRaconteur::WrappedServiceSkelDirector **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > const & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > **)&jarg4 : &tempnull4; 
  {
    try
    {
      result = (arg1)->CallFunction((std::string const &)*arg2,(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > const &)*arg3,(boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > const &)*arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElement >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElement >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSkelDirector_1_1GetSubObj(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSkelDirector *arg1 = (RobotRaconteur::WrappedServiceSkelDirector *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedRRObject > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedServiceSkelDirector **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try
    {
      result = (arg1)->GetSubObj((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedRRObject > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedRRObject >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSkelDirector_1_1GetArrayMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSkelDirector *arg1 = (RobotRaconteur::WrappedServiceSkelDirector *) 0 ;
  std::string *arg2 = 0 ;
  RobotRaconteur::WrappedArrayMemoryDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedServiceSkelDirector **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (RobotRaconteur::WrappedArrayMemoryDirector *)(arg1)->GetArrayMemory((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedArrayMemoryDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSkelDirector_1_1GetMultiDimArrayMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSkelDirector *arg1 = (RobotRaconteur::WrappedServiceSkelDirector *) 0 ;
  std::string *arg2 = 0 ;
  RobotRaconteur::WrappedMultiDimArrayMemoryDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedServiceSkelDirector **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (RobotRaconteur::WrappedMultiDimArrayMemoryDirector *)(arg1)->GetMultiDimArrayMemory((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedMultiDimArrayMemoryDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSkelDirector_1_1GetPodArrayMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSkelDirector *arg1 = (RobotRaconteur::WrappedServiceSkelDirector *) 0 ;
  std::string *arg2 = 0 ;
  RobotRaconteur::WrappedPodArrayMemoryDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedServiceSkelDirector **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (RobotRaconteur::WrappedPodArrayMemoryDirector *)(arg1)->GetPodArrayMemory((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedPodArrayMemoryDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSkelDirector_1_1GetPodMultiDimArrayMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSkelDirector *arg1 = (RobotRaconteur::WrappedServiceSkelDirector *) 0 ;
  std::string *arg2 = 0 ;
  RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedServiceSkelDirector **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector *)(arg1)->GetPodMultiDimArrayMemory((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSkelDirector_1_1GetNamedArrayMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSkelDirector *arg1 = (RobotRaconteur::WrappedServiceSkelDirector *) 0 ;
  std::string *arg2 = 0 ;
  RobotRaconteur::WrappedNamedArrayMemoryDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedServiceSkelDirector **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (RobotRaconteur::WrappedNamedArrayMemoryDirector *)(arg1)->GetNamedArrayMemory((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedNamedArrayMemoryDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSkelDirector_1_1GetNamedMultiDimArrayMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSkelDirector *arg1 = (RobotRaconteur::WrappedServiceSkelDirector *) 0 ;
  std::string *arg2 = 0 ;
  RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedServiceSkelDirector **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector *)(arg1)->GetNamedMultiDimArrayMemory((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSkelDirector_1monitorEnter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::WrappedServiceSkelDirector *arg1 = (RobotRaconteur::WrappedServiceSkelDirector *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedServiceSkelDirector **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      (arg1)->MonitorEnter(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSkelDirector_1monitorExit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::WrappedServiceSkelDirector *arg1 = (RobotRaconteur::WrappedServiceSkelDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedServiceSkelDirector **)&jarg1; 
  {
    try
    {
      (arg1)->MonitorExit();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSkelDirector_1releaseCastObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::WrappedServiceSkelDirector *arg1 = (RobotRaconteur::WrappedServiceSkelDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedServiceSkelDirector **)&jarg1; 
  {
    try
    {
      (arg1)->ReleaseCastObject();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedServiceSkelDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSkelDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedServiceSkelDirector *)new SwigDirector_WrappedServiceSkelDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedServiceSkelDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSkelDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::WrappedServiceSkelDirector *obj = *((RobotRaconteur::WrappedServiceSkelDirector **)&objarg);
  (void)jcls;
  SwigDirector_WrappedServiceSkelDirector *director = static_cast<SwigDirector_WrappedServiceSkelDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSkelDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::WrappedServiceSkelDirector *obj = *((RobotRaconteur::WrappedServiceSkelDirector **)&objarg);
  SwigDirector_WrappedServiceSkelDirector *director = dynamic_cast<SwigDirector_WrappedServiceSkelDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedRRObject(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  RobotRaconteur::WrappedServiceSkelDirector *arg2 = (RobotRaconteur::WrappedServiceSkelDirector *) 0 ;
  int32_t arg3 ;
  RobotRaconteur::WrappedRRObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(RobotRaconteur::WrappedServiceSkelDirector **)&jarg2; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      result = (RobotRaconteur::WrappedRRObject *)new RobotRaconteur::WrappedRRObject((std::string const &)*arg1,arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::WrappedRRObject > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::WrappedRRObject >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedRRObject_1Type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::WrappedRRObject *arg1 = (RobotRaconteur::WrappedRRObject *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedRRObject > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedRRObject > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedRRObject *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Type = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedRRObject_1Type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::WrappedRRObject *arg1 = (RobotRaconteur::WrappedRRObject *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedRRObject > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedRRObject > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedRRObject *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->Type);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedRRObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedRRObject *arg1 = (RobotRaconteur::WrappedRRObject *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedRRObject > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedRRObject > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedRRObject *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSkel_1Type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedServiceSkel *arg1 = (RobotRaconteur::WrappedServiceSkel *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSkel > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSkel > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSkel *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->Type = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSkel_1Type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSkel *arg1 = (RobotRaconteur::WrappedServiceSkel *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSkel > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSkel > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSkel *)(smartarg1 ? smartarg1->get() : 0); 
  result = (boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > *) & ((arg1)->Type);
  *(boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition > **)&jresult = *result ? new boost::shared_ptr< RobotRaconteur::ServiceEntryDefinition >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSkel_1castobj_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedServiceSkel *arg1 = (RobotRaconteur::WrappedServiceSkel *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedRRObject > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSkel > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedRRObject > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSkel > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSkel *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedRRObject > **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->castobj = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSkel_1castobj_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSkel *arg1 = (RobotRaconteur::WrappedServiceSkel *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSkel > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedRRObject > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSkel > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSkel *)(smartarg1 ? smartarg1->get() : 0); 
  result = (boost::shared_ptr< RobotRaconteur::WrappedRRObject > *) & ((arg1)->castobj);
  *(boost::shared_ptr< RobotRaconteur::WrappedRRObject > **)&jresult = *result ? new boost::shared_ptr< RobotRaconteur::WrappedRRObject >(*result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSkel_1getPipe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSkel *arg1 = (RobotRaconteur::WrappedServiceSkel *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSkel > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeServer > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSkel > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSkel *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (arg1)->GetPipe((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedPipeServer > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedPipeServer >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSkel_1getWire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSkel *arg1 = (RobotRaconteur::WrappedServiceSkel *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSkel > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireServer > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSkel > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSkel *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (arg1)->GetWire((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedWireServer > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedWireServer >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSkel_1wrappedDispatchEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  RobotRaconteur::WrappedServiceSkel *arg1 = (RobotRaconteur::WrappedServiceSkel *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSkel > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSkel > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSkel *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > const & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->WrappedDispatchEvent((std::string const &)*arg2,(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSkel_1wrappedCallbackCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSkel *arg1 = (RobotRaconteur::WrappedServiceSkel *) 0 ;
  std::string *arg2 = 0 ;
  uint32_t arg3 ;
  std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > *arg4 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSkel > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSkel > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSkel *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (uint32_t)jarg3; 
  arg4 = *(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (arg1)->WrappedCallbackCall((std::string const &)*arg2,arg3,(std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > const &)*arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElement >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElement >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSkel_1rRGetNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSkel *arg1 = (RobotRaconteur::WrappedServiceSkel *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSkel > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSkel > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSkel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->RRGetNode();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::RobotRaconteurNode >(result) : 0; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSkel_1registerGeneratorServer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  RobotRaconteur::WrappedServiceSkel *arg1 = (RobotRaconteur::WrappedServiceSkel *) 0 ;
  std::string *arg2 = 0 ;
  RobotRaconteur::WrappedGeneratorServerDirector *arg3 = (RobotRaconteur::WrappedGeneratorServerDirector *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSkel > *smartarg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSkel > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSkel *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(RobotRaconteur::WrappedGeneratorServerDirector **)&jarg3; 
  {
    try
    {
      result = (int32_t)(arg1)->RegisterGeneratorServer((std::string const &)*arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSkel_1getServicePath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::WrappedServiceSkel *arg1 = (RobotRaconteur::WrappedServiceSkel *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSkel > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSkel > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSkel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetServicePath();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSkel_1getContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSkel *arg1 = (RobotRaconteur::WrappedServiceSkel *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSkel > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServerContext > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSkel > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSkel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetContext();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::ServerContext > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::ServerContext >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedServiceSkel(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSkel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedServiceSkel *)new RobotRaconteur::WrappedServiceSkel();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSkel > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::WrappedServiceSkel >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedServiceSkel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedServiceSkel *arg1 = (RobotRaconteur::WrappedServiceSkel *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSkel > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSkel > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSkel *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServerServiceListenerDirector_1objectheapid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ServerServiceListenerDirector *arg1 = (ServerServiceListenerDirector *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ServerServiceListenerDirector **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->objectheapid = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServerServiceListenerDirector_1objectheapid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ServerServiceListenerDirector *arg1 = (ServerServiceListenerDirector *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ServerServiceListenerDirector **)&jarg1; 
  result = (int32_t) ((arg1)->objectheapid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1ServerServiceListenerDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ServerServiceListenerDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (ServerServiceListenerDirector *)new SwigDirector_ServerServiceListenerDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(ServerServiceListenerDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServerServiceListenerDirector_1callback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  ServerServiceListenerDirector *arg1 = (ServerServiceListenerDirector *) 0 ;
  int32_t arg2 ;
  uint32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ServerServiceListenerDirector **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (uint32_t)jarg3; 
  {
    try
    {
      (arg1)->Callback(arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServerServiceListenerDirector_1callbackSwigExplicitServerServiceListenerDirector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  ServerServiceListenerDirector *arg1 = (ServerServiceListenerDirector *) 0 ;
  int32_t arg2 ;
  uint32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ServerServiceListenerDirector **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (uint32_t)jarg3; 
  {
    try
    {
      (arg1)->ServerServiceListenerDirector::Callback(arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1ServerServiceListenerDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ServerServiceListenerDirector *arg1 = (ServerServiceListenerDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ServerServiceListenerDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServerServiceListenerDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  ServerServiceListenerDirector *obj = *((ServerServiceListenerDirector **)&objarg);
  (void)jcls;
  SwigDirector_ServerServiceListenerDirector *director = static_cast<SwigDirector_ServerServiceListenerDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServerServiceListenerDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  ServerServiceListenerDirector *obj = *((ServerServiceListenerDirector **)&objarg);
  SwigDirector_ServerServiceListenerDirector *director = dynamic_cast<SwigDirector_ServerServiceListenerDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServerContext_1getCurrentServicePath(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = RobotRaconteur::ServerContext::GetCurrentServicePath();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServerContext_1_1ReleaseServicePath_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::ServerContext *arg1 = (RobotRaconteur::ServerContext *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServerContext > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServerContext > **)&jarg1;
  arg1 = (RobotRaconteur::ServerContext *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      (arg1)->ReleaseServicePath((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServerContext_1_1ReleaseServicePath_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  RobotRaconteur::ServerContext *arg1 = (RobotRaconteur::ServerContext *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< uint32_t > arg3 ;
  boost::shared_ptr< RobotRaconteur::ServerContext > *smartarg1 = 0 ;
  std::vector< uint32_t > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServerContext > **)&jarg1;
  arg1 = (RobotRaconteur::ServerContext *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  argp3 = *(std::vector< uint32_t > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< uint32_t >");
    return ;
  }
  arg3 = *argp3; 
  {
    try
    {
      (arg1)->ReleaseServicePath((std::string const &)*arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServerContext_1getCurrentServerContext(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::ServerContext > result;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = RobotRaconteur::ServerContext::GetCurrentServerContext();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::ServerContext > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::ServerContext >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServerContext_1kickUser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::ServerContext *arg1 = (RobotRaconteur::ServerContext *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServerContext > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServerContext > **)&jarg1;
  arg1 = (RobotRaconteur::ServerContext *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      (arg1)->KickUser((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServerContext_1_1AddServerServiceListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::ServerContext *arg1 = (RobotRaconteur::ServerContext *) 0 ;
  ServerServiceListenerDirector *arg2 = (ServerServiceListenerDirector *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServerContext > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServerContext > **)&jarg1;
  arg1 = (RobotRaconteur::ServerContext *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(ServerServiceListenerDirector **)&jarg2; 
  {
    try
    {
      RobotRaconteur_ServerContext_AddServerServiceListener(arg1,arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServerContext_1_1SetServiceAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::ServerContext *arg1 = (RobotRaconteur::ServerContext *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServerContext > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > tempnull2 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > temp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServerContext > **)&jarg1;
  arg1 = (RobotRaconteur::ServerContext *)(smartarg1 ? smartarg1->get() : 0); 
  
  // intrusive_ptr by reference
  if ( jarg2 ) {
    smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg2;
    temp2 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg2->get(), true);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  {
    try
    {
      RobotRaconteur_ServerContext_SetServiceAttributes(arg1,(boost::intrusive_ptr< RobotRaconteur::MessageElement > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServerContext_1requestObjectLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  RobotRaconteur::ServerContext *arg1 = (RobotRaconteur::ServerContext *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServerContext > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServerContext > **)&jarg1;
  arg1 = (RobotRaconteur::ServerContext *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try
    {
      (arg1)->RequestObjectLock((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServerContext_1requestClientObjectLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4) {
  RobotRaconteur::ServerContext *arg1 = (RobotRaconteur::ServerContext *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  uint32_t arg4 ;
  boost::shared_ptr< RobotRaconteur::ServerContext > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServerContext > **)&jarg1;
  arg1 = (RobotRaconteur::ServerContext *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (uint32_t)jarg4; 
  {
    try
    {
      (arg1)->RequestClientObjectLock((std::string const &)*arg2,(std::string const &)*arg3,arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServerContext_1releaseObjectLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  RobotRaconteur::ServerContext *arg1 = (RobotRaconteur::ServerContext *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  boost::shared_ptr< RobotRaconteur::ServerContext > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServerContext > **)&jarg1;
  arg1 = (RobotRaconteur::ServerContext *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  {
    try
    {
      (arg1)->ReleaseObjectLock((std::string const &)*arg2,(std::string const &)*arg3,arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServerContext_1getObjectLockUsername(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  RobotRaconteur::ServerContext *arg1 = (RobotRaconteur::ServerContext *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServerContext > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServerContext > **)&jarg1;
  arg1 = (RobotRaconteur::ServerContext *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (arg1)->GetObjectLockUsername((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServerContext_1getNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ServerContext *arg1 = (RobotRaconteur::ServerContext *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServerContext > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServerContext > **)&jarg1;
  arg1 = (RobotRaconteur::ServerContext *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetNode();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::RobotRaconteurNode >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServerContext_1getExtraImports(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ServerContext *arg1 = (RobotRaconteur::ServerContext *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServerContext > *smartarg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServerContext > **)&jarg1;
  arg1 = (RobotRaconteur::ServerContext *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetExtraImports();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServerContext_1addExtraImport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::ServerContext *arg1 = (RobotRaconteur::ServerContext *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServerContext > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServerContext > **)&jarg1;
  arg1 = (RobotRaconteur::ServerContext *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      (arg1)->AddExtraImport((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServerContext_1removeExtraImport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  RobotRaconteur::ServerContext *arg1 = (RobotRaconteur::ServerContext *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServerContext > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServerContext > **)&jarg1;
  arg1 = (RobotRaconteur::ServerContext *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (bool)(arg1)->RemoveExtraImport((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1ServerContext(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::ServerContext *arg1 = (RobotRaconteur::ServerContext *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServerContext > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServerContext > **)&jarg1;
  arg1 = (RobotRaconteur::ServerContext *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AuthenticatedUser_1_1GetUsername(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::AuthenticatedUser *arg1 = (RobotRaconteur::AuthenticatedUser *) 0 ;
  boost::shared_ptr< RobotRaconteur::AuthenticatedUser > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::AuthenticatedUser > **)&jarg1;
  arg1 = (RobotRaconteur::AuthenticatedUser *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetUsername();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AuthenticatedUser_1_1GetPrivileges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::AuthenticatedUser *arg1 = (RobotRaconteur::AuthenticatedUser *) 0 ;
  boost::shared_ptr< RobotRaconteur::AuthenticatedUser > *smartarg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::AuthenticatedUser > **)&jarg1;
  arg1 = (RobotRaconteur::AuthenticatedUser *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetPrivileges();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AuthenticatedUser_1_1GetProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::AuthenticatedUser *arg1 = (RobotRaconteur::AuthenticatedUser *) 0 ;
  boost::shared_ptr< RobotRaconteur::AuthenticatedUser > *smartarg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::AuthenticatedUser > **)&jarg1;
  arg1 = (RobotRaconteur::AuthenticatedUser *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetProperties();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AuthenticatedUser_1_1GetLoginTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::AuthenticatedUser *arg1 = (RobotRaconteur::AuthenticatedUser *) 0 ;
  boost::shared_ptr< RobotRaconteur::AuthenticatedUser > *smartarg1 = 0 ;
  boost::posix_time::ptime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::AuthenticatedUser > **)&jarg1;
  arg1 = (RobotRaconteur::AuthenticatedUser *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetLoginTime();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  {
    {
      TimeSpec timespec_result1 = RobotRaconteur::ptimeToTimeSpec(result);
      *(RobotRaconteur::TimeSpec **)&jresult = new RobotRaconteur::TimeSpec((const RobotRaconteur::TimeSpec &)timespec_result1);
    }    
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AuthenticatedUser_1_1GetLastAccessTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::AuthenticatedUser *arg1 = (RobotRaconteur::AuthenticatedUser *) 0 ;
  boost::shared_ptr< RobotRaconteur::AuthenticatedUser > *smartarg1 = 0 ;
  boost::posix_time::ptime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::AuthenticatedUser > **)&jarg1;
  arg1 = (RobotRaconteur::AuthenticatedUser *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetLastAccessTime();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  {
    {
      TimeSpec timespec_result1 = RobotRaconteur::ptimeToTimeSpec(result);
      *(RobotRaconteur::TimeSpec **)&jresult = new RobotRaconteur::TimeSpec((const RobotRaconteur::TimeSpec &)timespec_result1);
    }    
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1AuthenticatedUser(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::AuthenticatedUser *arg1 = (RobotRaconteur::AuthenticatedUser *) 0 ;
  boost::shared_ptr< RobotRaconteur::AuthenticatedUser > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::AuthenticatedUser > **)&jarg1;
  arg1 = (RobotRaconteur::AuthenticatedUser *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServerEndpoint_1getCurrentEndpoint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (uint32_t)RobotRaconteur_ServerEndpoint_GetCurrentEndpoint();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServerEndpoint_1getCurrentAuthenticatedUser(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::AuthenticatedUser > result;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = RobotRaconteur::ServerEndpoint::GetCurrentAuthenticatedUser();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::AuthenticatedUser > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::AuthenticatedUser >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1ServerEndpoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::ServerEndpoint *arg1 = (RobotRaconteur::ServerEndpoint *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServerEndpoint > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServerEndpoint > **)&jarg1;
  arg1 = (RobotRaconteur::ServerEndpoint *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSkelAsyncAdapter_1makeAsync(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::WrappedServiceSkelAsyncAdapter *arg1 = (RobotRaconteur::WrappedServiceSkelAsyncAdapter *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSkelAsyncAdapter > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSkelAsyncAdapter *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->MakeAsync();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSkelAsyncAdapter_1isAsync(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::WrappedServiceSkelAsyncAdapter *arg1 = (RobotRaconteur::WrappedServiceSkelAsyncAdapter *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSkelAsyncAdapter > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSkelAsyncAdapter *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)(arg1)->IsAsync();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSkelAsyncAdapter_1end_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedServiceSkelAsyncAdapter *arg1 = (RobotRaconteur::WrappedServiceSkelAsyncAdapter *) 0 ;
  RobotRaconteur::HandlerErrorInfo *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSkelAsyncAdapter > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSkelAsyncAdapter *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::HandlerErrorInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::HandlerErrorInfo const & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->End((RobotRaconteur::HandlerErrorInfo const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSkelAsyncAdapter_1end_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  RobotRaconteur::WrappedServiceSkelAsyncAdapter *arg1 = (RobotRaconteur::WrappedServiceSkelAsyncAdapter *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *arg2 = 0 ;
  RobotRaconteur::HandlerErrorInfo *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > tempnull2 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > temp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSkelAsyncAdapter > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSkelAsyncAdapter *)(smartarg1 ? smartarg1->get() : 0); 
  
  // intrusive_ptr by reference
  if ( jarg2 ) {
    smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg2;
    temp2 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg2->get(), true);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  arg3 = *(RobotRaconteur::HandlerErrorInfo **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::HandlerErrorInfo const & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->End((boost::intrusive_ptr< RobotRaconteur::MessageElement > const &)*arg2,(RobotRaconteur::HandlerErrorInfo const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedServiceSkelAsyncAdapter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedServiceSkelAsyncAdapter *arg1 = (RobotRaconteur::WrappedServiceSkelAsyncAdapter *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSkelAsyncAdapter > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSkelAsyncAdapter *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NativeUserAuthenticator_1_1AuthenticateUser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  RobotRaconteur::UserAuthenticator *arg1 = (RobotRaconteur::UserAuthenticator *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServerContext > *arg4 = 0 ;
  boost::shared_ptr< RobotRaconteur::UserAuthenticator > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > tempnull3 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > temp3 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg3 ;
  boost::shared_ptr< RobotRaconteur::ServerContext > tempnull4 ;
  boost::shared_ptr< RobotRaconteur::AuthenticatedUser > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::UserAuthenticator > **)&jarg1;
  arg1 = (RobotRaconteur::UserAuthenticator *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  
  // intrusive_ptr by reference
  if ( jarg3 ) {
    smartarg3 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg3;
    temp3 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg3->get(), true);
    arg3 = &temp3;
  } else {
    arg3 = &tempnull3;
  }
  
  arg4 = jarg4 ? *(boost::shared_ptr< RobotRaconteur::ServerContext > **)&jarg4 : &tempnull4; 
  {
    try
    {
      result = RobotRaconteur_UserAuthenticator_AuthenticateUser(arg1,(std::string const &)*arg2,(boost::intrusive_ptr< RobotRaconteur::MessageElement > const &)*arg3,(boost::shared_ptr< RobotRaconteur::ServerContext > const &)*arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::AuthenticatedUser > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::AuthenticatedUser >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1NativeUserAuthenticator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::UserAuthenticator *arg1 = (RobotRaconteur::UserAuthenticator *) 0 ;
  boost::shared_ptr< RobotRaconteur::UserAuthenticator > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::UserAuthenticator > **)&jarg1;
  arg1 = (RobotRaconteur::UserAuthenticator *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1ServiceSecurityPolicy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::UserAuthenticator > *arg1 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::UserAuthenticator > tempnull1 ;
  RobotRaconteur::ServiceSecurityPolicy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::UserAuthenticator > **)&jarg1 : &tempnull1; 
  arg2 = *(std::map< std::string,std::string,std::less< std::string > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string,std::less< std::string > > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (RobotRaconteur::ServiceSecurityPolicy *)new RobotRaconteur::ServiceSecurityPolicy((boost::shared_ptr< RobotRaconteur::UserAuthenticator > const &)*arg1,(std::map< std::string,std::string,std::less< std::string > > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::ServiceSecurityPolicy > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::ServiceSecurityPolicy >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1ServiceSecurityPolicy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::ServiceSecurityPolicy *arg1 = (RobotRaconteur::ServiceSecurityPolicy *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceSecurityPolicy > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::ServiceSecurityPolicy > **)&jarg1;
  arg1 = (RobotRaconteur::ServiceSecurityPolicy *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1PasswordFileUserAuthenticator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  bool arg2 ;
  RobotRaconteur::PasswordFileUserAuthenticator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      result = (RobotRaconteur::PasswordFileUserAuthenticator *)new RobotRaconteur::PasswordFileUserAuthenticator((std::string const &)*arg1,arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::PasswordFileUserAuthenticator > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::PasswordFileUserAuthenticator >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1PasswordFileUserAuthenticator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  RobotRaconteur::PasswordFileUserAuthenticator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try
    {
      result = (RobotRaconteur::PasswordFileUserAuthenticator *)new RobotRaconteur::PasswordFileUserAuthenticator((std::string const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::PasswordFileUserAuthenticator > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::PasswordFileUserAuthenticator >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1PasswordFileUserAuthenticator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::PasswordFileUserAuthenticator *arg1 = (RobotRaconteur::PasswordFileUserAuthenticator *) 0 ;
  boost::shared_ptr< RobotRaconteur::PasswordFileUserAuthenticator > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::PasswordFileUserAuthenticator > **)&jarg1;
  arg1 = (RobotRaconteur::PasswordFileUserAuthenticator *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedUserAuthenticatorDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedUserAuthenticatorDirector *arg1 = (RobotRaconteur::WrappedUserAuthenticatorDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedUserAuthenticatorDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedUserAuthenticatorDirector_1authenticateUser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedUserAuthenticatorDirector *arg1 = (RobotRaconteur::WrappedUserAuthenticatorDirector *) 0 ;
  std::string *arg2 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > arg3 ;
  boost::shared_ptr< RobotRaconteur::ServerContext > *arg4 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *argp3 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg3 ;
  boost::shared_ptr< RobotRaconteur::ServerContext > tempnull4 ;
  boost::shared_ptr< RobotRaconteur::AuthenticatedUser > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(RobotRaconteur::WrappedUserAuthenticatorDirector **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  
  // intrusive_ptr by value
  smartarg3 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg3;
  if (smartarg3) {
    arg3 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg3->get(), true);
  }
  
  arg4 = jarg4 ? *(boost::shared_ptr< RobotRaconteur::ServerContext > **)&jarg4 : &tempnull4; 
  {
    try
    {
      result = (arg1)->AuthenticateUser((std::string const &)*arg2,arg3,(boost::shared_ptr< RobotRaconteur::ServerContext > const &)*arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::AuthenticatedUser > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::AuthenticatedUser >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedUserAuthenticatorDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedUserAuthenticatorDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedUserAuthenticatorDirector *)new SwigDirector_WrappedUserAuthenticatorDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedUserAuthenticatorDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedUserAuthenticatorDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::WrappedUserAuthenticatorDirector *obj = *((RobotRaconteur::WrappedUserAuthenticatorDirector **)&objarg);
  (void)jcls;
  SwigDirector_WrappedUserAuthenticatorDirector *director = static_cast<SwigDirector_WrappedUserAuthenticatorDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedUserAuthenticatorDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::WrappedUserAuthenticatorDirector *obj = *((RobotRaconteur::WrappedUserAuthenticatorDirector **)&objarg);
  SwigDirector_WrappedUserAuthenticatorDirector *director = dynamic_cast<SwigDirector_WrappedUserAuthenticatorDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedUserAuthenticator_1setRRDirector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  RobotRaconteur::WrappedUserAuthenticator *arg1 = (RobotRaconteur::WrappedUserAuthenticator *) 0 ;
  RobotRaconteur::WrappedUserAuthenticatorDirector *arg2 = (RobotRaconteur::WrappedUserAuthenticatorDirector *) 0 ;
  int arg3 ;
  boost::shared_ptr< RobotRaconteur::WrappedUserAuthenticator > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedUserAuthenticator > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedUserAuthenticator *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::WrappedUserAuthenticatorDirector **)&jarg2; 
  arg3 = (int)jarg3; 
  {
    try
    {
      (arg1)->SetRRDirector(arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedUserAuthenticator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedUserAuthenticator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedUserAuthenticator *)new RobotRaconteur::WrappedUserAuthenticator();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::WrappedUserAuthenticator > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::WrappedUserAuthenticator >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedUserAuthenticator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedUserAuthenticator *arg1 = (RobotRaconteur::WrappedUserAuthenticator *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedUserAuthenticator > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedUserAuthenticator > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedUserAuthenticator *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1AsyncServiceInfo2VectorReturnDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::AsyncServiceInfo2VectorReturnDirector *arg1 = (RobotRaconteur::AsyncServiceInfo2VectorReturnDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::AsyncServiceInfo2VectorReturnDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncServiceInfo2VectorReturnDirector_1handler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::AsyncServiceInfo2VectorReturnDirector *arg1 = (RobotRaconteur::AsyncServiceInfo2VectorReturnDirector *) 0 ;
  std::vector< RobotRaconteur::ServiceInfo2Wrapped > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::AsyncServiceInfo2VectorReturnDirector **)&jarg1; 
  arg2 = *(std::vector< RobotRaconteur::ServiceInfo2Wrapped > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< RobotRaconteur::ServiceInfo2Wrapped > const & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->handler((std::vector< RobotRaconteur::ServiceInfo2Wrapped > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1AsyncServiceInfo2VectorReturnDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::AsyncServiceInfo2VectorReturnDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::AsyncServiceInfo2VectorReturnDirector *)new SwigDirector_AsyncServiceInfo2VectorReturnDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::AsyncServiceInfo2VectorReturnDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncServiceInfo2VectorReturnDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::AsyncServiceInfo2VectorReturnDirector *obj = *((RobotRaconteur::AsyncServiceInfo2VectorReturnDirector **)&objarg);
  (void)jcls;
  SwigDirector_AsyncServiceInfo2VectorReturnDirector *director = static_cast<SwigDirector_AsyncServiceInfo2VectorReturnDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncServiceInfo2VectorReturnDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::AsyncServiceInfo2VectorReturnDirector *obj = *((RobotRaconteur::AsyncServiceInfo2VectorReturnDirector **)&objarg);
  SwigDirector_AsyncServiceInfo2VectorReturnDirector *director = dynamic_cast<SwigDirector_AsyncServiceInfo2VectorReturnDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1AsyncNodeInfo2VectorReturnDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::AsyncNodeInfo2VectorReturnDirector *arg1 = (RobotRaconteur::AsyncNodeInfo2VectorReturnDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::AsyncNodeInfo2VectorReturnDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncNodeInfo2VectorReturnDirector_1handler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::AsyncNodeInfo2VectorReturnDirector *arg1 = (RobotRaconteur::AsyncNodeInfo2VectorReturnDirector *) 0 ;
  std::vector< RobotRaconteur::NodeInfo2 > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::AsyncNodeInfo2VectorReturnDirector **)&jarg1; 
  arg2 = *(std::vector< RobotRaconteur::NodeInfo2 > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< RobotRaconteur::NodeInfo2 > const & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->handler((std::vector< RobotRaconteur::NodeInfo2 > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1AsyncNodeInfo2VectorReturnDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::AsyncNodeInfo2VectorReturnDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::AsyncNodeInfo2VectorReturnDirector *)new SwigDirector_AsyncNodeInfo2VectorReturnDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::AsyncNodeInfo2VectorReturnDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncNodeInfo2VectorReturnDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::AsyncNodeInfo2VectorReturnDirector *obj = *((RobotRaconteur::AsyncNodeInfo2VectorReturnDirector **)&objarg);
  (void)jcls;
  SwigDirector_AsyncNodeInfo2VectorReturnDirector *director = static_cast<SwigDirector_AsyncNodeInfo2VectorReturnDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_AsyncNodeInfo2VectorReturnDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::AsyncNodeInfo2VectorReturnDirector *obj = *((RobotRaconteur::AsyncNodeInfo2VectorReturnDirector **)&objarg);
  SwigDirector_AsyncNodeInfo2VectorReturnDirector *director = dynamic_cast<SwigDirector_AsyncNodeInfo2VectorReturnDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceInfo2Wrapped_1Name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::ServiceInfo2Wrapped *arg1 = (RobotRaconteur::ServiceInfo2Wrapped *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceInfo2Wrapped **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceInfo2Wrapped_1Name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::ServiceInfo2Wrapped *arg1 = (RobotRaconteur::ServiceInfo2Wrapped *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceInfo2Wrapped **)&jarg1; 
  result = (std::string *) & ((arg1)->Name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceInfo2Wrapped_1RootObjectType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::ServiceInfo2Wrapped *arg1 = (RobotRaconteur::ServiceInfo2Wrapped *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceInfo2Wrapped **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->RootObjectType = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceInfo2Wrapped_1RootObjectType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::ServiceInfo2Wrapped *arg1 = (RobotRaconteur::ServiceInfo2Wrapped *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceInfo2Wrapped **)&jarg1; 
  result = (std::string *) & ((arg1)->RootObjectType);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceInfo2Wrapped_1RootObjectImplements_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::ServiceInfo2Wrapped *arg1 = (RobotRaconteur::ServiceInfo2Wrapped *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::ServiceInfo2Wrapped **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->RootObjectImplements = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceInfo2Wrapped_1RootObjectImplements_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ServiceInfo2Wrapped *arg1 = (RobotRaconteur::ServiceInfo2Wrapped *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceInfo2Wrapped **)&jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->RootObjectImplements);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceInfo2Wrapped_1ConnectionURL_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::ServiceInfo2Wrapped *arg1 = (RobotRaconteur::ServiceInfo2Wrapped *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::ServiceInfo2Wrapped **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->ConnectionURL = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceInfo2Wrapped_1ConnectionURL_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ServiceInfo2Wrapped *arg1 = (RobotRaconteur::ServiceInfo2Wrapped *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceInfo2Wrapped **)&jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->ConnectionURL);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceInfo2Wrapped_1Attributes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::ServiceInfo2Wrapped *arg1 = (RobotRaconteur::ServiceInfo2Wrapped *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *arg2 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > tempnull2 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > temp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::ServiceInfo2Wrapped **)&jarg1; 
  
  // intrusive_ptr by reference
  if ( jarg2 ) {
    smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg2;
    temp2 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg2->get(), true);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  if (arg1) (arg1)->Attributes = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceInfo2Wrapped_1Attributes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ServiceInfo2Wrapped *arg1 = (RobotRaconteur::ServiceInfo2Wrapped *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceInfo2Wrapped **)&jarg1; 
  result = (boost::intrusive_ptr< RobotRaconteur::MessageElement > *) & ((arg1)->Attributes);
  
  if (*result) {
    intrusive_ptr_add_ref(result->get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElement >(result->get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElement >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceInfo2Wrapped_1NodeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::ServiceInfo2Wrapped *arg1 = (RobotRaconteur::ServiceInfo2Wrapped *) 0 ;
  RobotRaconteur::NodeID *arg2 = (RobotRaconteur::NodeID *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::ServiceInfo2Wrapped **)&jarg1; 
  arg2 = *(RobotRaconteur::NodeID **)&jarg2; 
  if (arg1) (arg1)->NodeID = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceInfo2Wrapped_1NodeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ServiceInfo2Wrapped *arg1 = (RobotRaconteur::ServiceInfo2Wrapped *) 0 ;
  RobotRaconteur::NodeID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceInfo2Wrapped **)&jarg1; 
  result = (RobotRaconteur::NodeID *)& ((arg1)->NodeID);
  *(RobotRaconteur::NodeID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceInfo2Wrapped_1NodeName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::ServiceInfo2Wrapped *arg1 = (RobotRaconteur::ServiceInfo2Wrapped *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceInfo2Wrapped **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->NodeName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceInfo2Wrapped_1NodeName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::ServiceInfo2Wrapped *arg1 = (RobotRaconteur::ServiceInfo2Wrapped *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceInfo2Wrapped **)&jarg1; 
  result = (std::string *) & ((arg1)->NodeName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1ServiceInfo2Wrapped(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::ServiceInfo2Wrapped *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::ServiceInfo2Wrapped *)new RobotRaconteur::ServiceInfo2Wrapped();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::ServiceInfo2Wrapped **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1ServiceInfo2Wrapped(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::ServiceInfo2Wrapped *arg1 = (RobotRaconteur::ServiceInfo2Wrapped *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::ServiceInfo2Wrapped **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_wrappedFindServiceByType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > tempnull1 ;
  std::vector< RobotRaconteur::ServiceInfo2Wrapped > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jarg1 : &tempnull1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< std::string > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = RobotRaconteur::WrappedFindServiceByType((boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &)*arg1,(std::string const &)*arg2,(std::vector< std::string > const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::ServiceInfo2Wrapped > **)&jresult = new std::vector< RobotRaconteur::ServiceInfo2Wrapped >((const std::vector< RobotRaconteur::ServiceInfo2Wrapped > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_asyncWrappedFindServiceByType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_, jint jarg6) {
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  int32_t arg4 ;
  RobotRaconteur::AsyncServiceInfo2VectorReturnDirector *arg5 = (RobotRaconteur::AsyncServiceInfo2VectorReturnDirector *) 0 ;
  int32_t arg6 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > tempnull1 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jarg1 : &tempnull1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< std::string > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ;
  } 
  arg4 = (int32_t)jarg4; 
  arg5 = *(RobotRaconteur::AsyncServiceInfo2VectorReturnDirector **)&jarg5; 
  arg6 = (int32_t)jarg6; 
  {
    try
    {
      RobotRaconteur::AsyncWrappedFindServiceByType((boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &)*arg1,(std::string const &)*arg2,(std::vector< std::string > const &)*arg3,arg4,arg5,arg6);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorserviceinfo2wrapped_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::ServiceInfo2Wrapped > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (std::vector< RobotRaconteur::ServiceInfo2Wrapped > *)new std::vector< RobotRaconteur::ServiceInfo2Wrapped >();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::ServiceInfo2Wrapped > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorserviceinfo2wrapped_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::ServiceInfo2Wrapped > *arg1 = 0 ;
  std::vector< RobotRaconteur::ServiceInfo2Wrapped > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ServiceInfo2Wrapped > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< RobotRaconteur::ServiceInfo2Wrapped > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (std::vector< RobotRaconteur::ServiceInfo2Wrapped > *)new std::vector< RobotRaconteur::ServiceInfo2Wrapped >((std::vector< RobotRaconteur::ServiceInfo2Wrapped > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::ServiceInfo2Wrapped > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorserviceinfo2wrapped_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::ServiceInfo2Wrapped > *arg1 = (std::vector< RobotRaconteur::ServiceInfo2Wrapped > *) 0 ;
  std::vector< RobotRaconteur::ServiceInfo2Wrapped >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ServiceInfo2Wrapped > **)&jarg1; 
  {
    try
    {
      result = ((std::vector< RobotRaconteur::ServiceInfo2Wrapped > const *)arg1)->capacity();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorserviceinfo2wrapped_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< RobotRaconteur::ServiceInfo2Wrapped > *arg1 = (std::vector< RobotRaconteur::ServiceInfo2Wrapped > *) 0 ;
  std::vector< RobotRaconteur::ServiceInfo2Wrapped >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ServiceInfo2Wrapped > **)&jarg1; 
  arg2 = (std::vector< RobotRaconteur::ServiceInfo2Wrapped >::size_type)jarg2; 
  {
    try
    {
      try {
        (arg1)->reserve(arg2);
      } catch(std::length_error &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorserviceinfo2wrapped_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< RobotRaconteur::ServiceInfo2Wrapped > *arg1 = (std::vector< RobotRaconteur::ServiceInfo2Wrapped > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ServiceInfo2Wrapped > **)&jarg1; 
  {
    try
    {
      result = (bool)((std::vector< RobotRaconteur::ServiceInfo2Wrapped > const *)arg1)->empty();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorserviceinfo2wrapped_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< RobotRaconteur::ServiceInfo2Wrapped > *arg1 = (std::vector< RobotRaconteur::ServiceInfo2Wrapped > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ServiceInfo2Wrapped > **)&jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorserviceinfo2wrapped_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  RobotRaconteur::ServiceInfo2Wrapped *arg2 = 0 ;
  std::vector< RobotRaconteur::ServiceInfo2Wrapped > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(RobotRaconteur::ServiceInfo2Wrapped **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::ServiceInfo2Wrapped const & reference is null");
    return 0;
  } 
  {
    try
    {
      try {
        result = (std::vector< RobotRaconteur::ServiceInfo2Wrapped > *)new_std_vector_Sl_RobotRaconteur_ServiceInfo2Wrapped_Sg___SWIG_2(arg1,(RobotRaconteur::ServiceInfo2Wrapped const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::ServiceInfo2Wrapped > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorserviceinfo2wrapped_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< RobotRaconteur::ServiceInfo2Wrapped > *arg1 = (std::vector< RobotRaconteur::ServiceInfo2Wrapped > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ServiceInfo2Wrapped > **)&jarg1; 
  {
    try
    {
      try {
        result = std_vector_Sl_RobotRaconteur_ServiceInfo2Wrapped_Sg__doSize((std::vector< RobotRaconteur::ServiceInfo2Wrapped > const *)arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorserviceinfo2wrapped_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< RobotRaconteur::ServiceInfo2Wrapped > *arg1 = (std::vector< RobotRaconteur::ServiceInfo2Wrapped > *) 0 ;
  std::vector< RobotRaconteur::ServiceInfo2Wrapped >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< RobotRaconteur::ServiceInfo2Wrapped > **)&jarg1; 
  arg2 = *(std::vector< RobotRaconteur::ServiceInfo2Wrapped >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< RobotRaconteur::ServiceInfo2Wrapped >::value_type const & reference is null");
    return ;
  } 
  {
    try
    {
      std_vector_Sl_RobotRaconteur_ServiceInfo2Wrapped_Sg__doAdd__SWIG_0(arg1,(RobotRaconteur::ServiceInfo2Wrapped const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorserviceinfo2wrapped_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< RobotRaconteur::ServiceInfo2Wrapped > *arg1 = (std::vector< RobotRaconteur::ServiceInfo2Wrapped > *) 0 ;
  jint arg2 ;
  std::vector< RobotRaconteur::ServiceInfo2Wrapped >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< RobotRaconteur::ServiceInfo2Wrapped > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< RobotRaconteur::ServiceInfo2Wrapped >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< RobotRaconteur::ServiceInfo2Wrapped >::value_type const & reference is null");
    return ;
  } 
  {
    try
    {
      try {
        std_vector_Sl_RobotRaconteur_ServiceInfo2Wrapped_Sg__doAdd__SWIG_1(arg1,arg2,(RobotRaconteur::ServiceInfo2Wrapped const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorserviceinfo2wrapped_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::ServiceInfo2Wrapped > *arg1 = (std::vector< RobotRaconteur::ServiceInfo2Wrapped > *) 0 ;
  jint arg2 ;
  std::vector< RobotRaconteur::ServiceInfo2Wrapped >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ServiceInfo2Wrapped > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = std_vector_Sl_RobotRaconteur_ServiceInfo2Wrapped_Sg__doRemove(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::ServiceInfo2Wrapped >::value_type **)&jresult = new std::vector< RobotRaconteur::ServiceInfo2Wrapped >::value_type((const std::vector< RobotRaconteur::ServiceInfo2Wrapped >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorserviceinfo2wrapped_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::ServiceInfo2Wrapped > *arg1 = (std::vector< RobotRaconteur::ServiceInfo2Wrapped > *) 0 ;
  jint arg2 ;
  std::vector< RobotRaconteur::ServiceInfo2Wrapped >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ServiceInfo2Wrapped > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = (std::vector< RobotRaconteur::ServiceInfo2Wrapped >::value_type *) &std_vector_Sl_RobotRaconteur_ServiceInfo2Wrapped_Sg__doGet(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::ServiceInfo2Wrapped >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorserviceinfo2wrapped_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::ServiceInfo2Wrapped > *arg1 = (std::vector< RobotRaconteur::ServiceInfo2Wrapped > *) 0 ;
  jint arg2 ;
  std::vector< RobotRaconteur::ServiceInfo2Wrapped >::value_type *arg3 = 0 ;
  std::vector< RobotRaconteur::ServiceInfo2Wrapped >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< RobotRaconteur::ServiceInfo2Wrapped > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< RobotRaconteur::ServiceInfo2Wrapped >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< RobotRaconteur::ServiceInfo2Wrapped >::value_type const & reference is null");
    return 0;
  } 
  {
    try
    {
      try {
        result = std_vector_Sl_RobotRaconteur_ServiceInfo2Wrapped_Sg__doSet(arg1,arg2,(RobotRaconteur::ServiceInfo2Wrapped const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::ServiceInfo2Wrapped >::value_type **)&jresult = new std::vector< RobotRaconteur::ServiceInfo2Wrapped >::value_type((const std::vector< RobotRaconteur::ServiceInfo2Wrapped >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorserviceinfo2wrapped_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< RobotRaconteur::ServiceInfo2Wrapped > *arg1 = (std::vector< RobotRaconteur::ServiceInfo2Wrapped > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ServiceInfo2Wrapped > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_RobotRaconteur_ServiceInfo2Wrapped_Sg__doRemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1vectorserviceinfo2wrapped(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< RobotRaconteur::ServiceInfo2Wrapped > *arg1 = (std::vector< RobotRaconteur::ServiceInfo2Wrapped > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< RobotRaconteur::ServiceInfo2Wrapped > **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNodeInfo2_1NodeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::NodeInfo2 *arg1 = (RobotRaconteur::NodeInfo2 *) 0 ;
  RobotRaconteur::NodeID *arg2 = (RobotRaconteur::NodeID *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::NodeInfo2 **)&jarg1; 
  arg2 = *(RobotRaconteur::NodeID **)&jarg2; 
  if (arg1) (arg1)->NodeID = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNodeInfo2_1NodeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::NodeInfo2 *arg1 = (RobotRaconteur::NodeInfo2 *) 0 ;
  RobotRaconteur::NodeID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::NodeInfo2 **)&jarg1; 
  result = (RobotRaconteur::NodeID *)& ((arg1)->NodeID);
  *(RobotRaconteur::NodeID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNodeInfo2_1NodeName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::NodeInfo2 *arg1 = (RobotRaconteur::NodeInfo2 *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::NodeInfo2 **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->NodeName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNodeInfo2_1NodeName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::NodeInfo2 *arg1 = (RobotRaconteur::NodeInfo2 *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::NodeInfo2 **)&jarg1; 
  result = (std::string *) & ((arg1)->NodeName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNodeInfo2_1ConnectionURL_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::NodeInfo2 *arg1 = (RobotRaconteur::NodeInfo2 *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::NodeInfo2 **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->ConnectionURL = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedNodeInfo2_1ConnectionURL_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::NodeInfo2 *arg1 = (RobotRaconteur::NodeInfo2 *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::NodeInfo2 **)&jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->ConnectionURL);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedNodeInfo2(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::NodeInfo2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::NodeInfo2 *)new RobotRaconteur::NodeInfo2();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::NodeInfo2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedNodeInfo2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::NodeInfo2 *arg1 = (RobotRaconteur::NodeInfo2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::NodeInfo2 **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_wrappedFindNodeByID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *arg1 = 0 ;
  RobotRaconteur::NodeID arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > tempnull1 ;
  RobotRaconteur::NodeID *argp2 ;
  std::vector< RobotRaconteur::NodeInfo2 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jarg1 : &tempnull1; 
  argp2 = *(RobotRaconteur::NodeID **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null RobotRaconteur::NodeID");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(std::vector< std::string > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = RobotRaconteur::WrappedFindNodeByID((boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &)*arg1,arg2,(std::vector< std::string > const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::NodeInfo2 > **)&jresult = new std::vector< RobotRaconteur::NodeInfo2 >((const std::vector< RobotRaconteur::NodeInfo2 > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_wrappedFindNodeByName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > tempnull1 ;
  std::vector< RobotRaconteur::NodeInfo2 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jarg1 : &tempnull1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< std::string > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = RobotRaconteur::WrappedFindNodeByName((boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &)*arg1,(std::string const &)*arg2,(std::vector< std::string > const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::NodeInfo2 > **)&jresult = new std::vector< RobotRaconteur::NodeInfo2 >((const std::vector< RobotRaconteur::NodeInfo2 > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_asyncWrappedFindNodeByID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_, jint jarg6) {
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *arg1 = 0 ;
  RobotRaconteur::NodeID *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  int32_t arg4 ;
  RobotRaconteur::AsyncNodeInfo2VectorReturnDirector *arg5 = (RobotRaconteur::AsyncNodeInfo2VectorReturnDirector *) 0 ;
  int32_t arg6 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > tempnull1 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jarg1 : &tempnull1; 
  arg2 = *(RobotRaconteur::NodeID **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::NodeID const & reference is null");
    return ;
  } 
  arg3 = *(std::vector< std::string > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ;
  } 
  arg4 = (int32_t)jarg4; 
  arg5 = *(RobotRaconteur::AsyncNodeInfo2VectorReturnDirector **)&jarg5; 
  arg6 = (int32_t)jarg6; 
  {
    try
    {
      RobotRaconteur::AsyncWrappedFindNodeByID((boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &)*arg1,(RobotRaconteur::NodeID const &)*arg2,(std::vector< std::string > const &)*arg3,arg4,arg5,arg6);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_asyncWrappedFindNodeByName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_, jint jarg6) {
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  int32_t arg4 ;
  RobotRaconteur::AsyncNodeInfo2VectorReturnDirector *arg5 = (RobotRaconteur::AsyncNodeInfo2VectorReturnDirector *) 0 ;
  int32_t arg6 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > tempnull1 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jarg1 : &tempnull1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< std::string > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ;
  } 
  arg4 = (int32_t)jarg4; 
  arg5 = *(RobotRaconteur::AsyncNodeInfo2VectorReturnDirector **)&jarg5; 
  arg6 = (int32_t)jarg6; 
  {
    try
    {
      RobotRaconteur::AsyncWrappedFindNodeByName((boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &)*arg1,(std::string const &)*arg2,(std::vector< std::string > const &)*arg3,arg4,arg5,arg6);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_wrappedUpdateDetectedNodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *arg1 = 0 ;
  std::vector< std::string > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > tempnull1 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jarg1 : &tempnull1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ;
  } 
  {
    try
    {
      RobotRaconteur::WrappedUpdateDetectedNodes((boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &)*arg1,(std::vector< std::string > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_asyncWrappedUpdateDetectedNodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_, jint jarg5) {
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *arg1 = 0 ;
  std::vector< std::string > *arg2 = 0 ;
  int32_t arg3 ;
  RobotRaconteur::AsyncVoidNoErrReturnDirector *arg4 = (RobotRaconteur::AsyncVoidNoErrReturnDirector *) 0 ;
  int32_t arg5 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > tempnull1 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jarg1 : &tempnull1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ;
  } 
  arg3 = (int32_t)jarg3; 
  arg4 = *(RobotRaconteur::AsyncVoidNoErrReturnDirector **)&jarg4; 
  arg5 = (int32_t)jarg5; 
  {
    try
    {
      RobotRaconteur::AsyncWrappedUpdateDetectedNodes((boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &)*arg1,(std::vector< std::string > const &)*arg2,arg3,arg4,arg5);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_wrappedGetDetectedNodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *arg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > tempnull1 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jarg1 : &tempnull1; 
  {
    try
    {
      result = RobotRaconteur::WrappedGetDetectedNodes((boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_wrappedGetDetectedNodeCacheInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *arg1 = 0 ;
  RobotRaconteur::NodeID *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > tempnull1 ;
  RobotRaconteur::NodeInfo2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jarg1 : &tempnull1; 
  arg2 = *(RobotRaconteur::NodeID **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::NodeID const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = RobotRaconteur::WrappedGetDetectedNodeCacheInfo((boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &)*arg1,(RobotRaconteur::NodeID const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::NodeInfo2 **)&jresult = new RobotRaconteur::NodeInfo2((const RobotRaconteur::NodeInfo2 &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_wrappedTryGetDetectedNodeCacheInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *arg1 = 0 ;
  RobotRaconteur::NodeID *arg2 = 0 ;
  RobotRaconteur::NodeInfo2 *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > tempnull1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jarg1 : &tempnull1; 
  arg2 = *(RobotRaconteur::NodeID **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::NodeID const & reference is null");
    return 0;
  } 
  arg3 = *(RobotRaconteur::NodeInfo2 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::NodeInfo2 & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (bool)RobotRaconteur::WrappedTryGetDetectedNodeCacheInfo((boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &)*arg1,(RobotRaconteur::NodeID const &)*arg2,*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectornodeinfo2_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::NodeInfo2 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (std::vector< RobotRaconteur::NodeInfo2 > *)new std::vector< RobotRaconteur::NodeInfo2 >();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::NodeInfo2 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectornodeinfo2_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::NodeInfo2 > *arg1 = 0 ;
  std::vector< RobotRaconteur::NodeInfo2 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::NodeInfo2 > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< RobotRaconteur::NodeInfo2 > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (std::vector< RobotRaconteur::NodeInfo2 > *)new std::vector< RobotRaconteur::NodeInfo2 >((std::vector< RobotRaconteur::NodeInfo2 > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::NodeInfo2 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectornodeinfo2_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::NodeInfo2 > *arg1 = (std::vector< RobotRaconteur::NodeInfo2 > *) 0 ;
  std::vector< RobotRaconteur::NodeInfo2 >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::NodeInfo2 > **)&jarg1; 
  {
    try
    {
      result = ((std::vector< RobotRaconteur::NodeInfo2 > const *)arg1)->capacity();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectornodeinfo2_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< RobotRaconteur::NodeInfo2 > *arg1 = (std::vector< RobotRaconteur::NodeInfo2 > *) 0 ;
  std::vector< RobotRaconteur::NodeInfo2 >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::NodeInfo2 > **)&jarg1; 
  arg2 = (std::vector< RobotRaconteur::NodeInfo2 >::size_type)jarg2; 
  {
    try
    {
      try {
        (arg1)->reserve(arg2);
      } catch(std::length_error &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectornodeinfo2_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< RobotRaconteur::NodeInfo2 > *arg1 = (std::vector< RobotRaconteur::NodeInfo2 > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::NodeInfo2 > **)&jarg1; 
  {
    try
    {
      result = (bool)((std::vector< RobotRaconteur::NodeInfo2 > const *)arg1)->empty();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectornodeinfo2_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< RobotRaconteur::NodeInfo2 > *arg1 = (std::vector< RobotRaconteur::NodeInfo2 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::NodeInfo2 > **)&jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectornodeinfo2_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  RobotRaconteur::NodeInfo2 *arg2 = 0 ;
  std::vector< RobotRaconteur::NodeInfo2 > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(RobotRaconteur::NodeInfo2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::NodeInfo2 const & reference is null");
    return 0;
  } 
  {
    try
    {
      try {
        result = (std::vector< RobotRaconteur::NodeInfo2 > *)new_std_vector_Sl_RobotRaconteur_NodeInfo2_Sg___SWIG_2(arg1,(RobotRaconteur::NodeInfo2 const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::NodeInfo2 > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectornodeinfo2_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< RobotRaconteur::NodeInfo2 > *arg1 = (std::vector< RobotRaconteur::NodeInfo2 > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::NodeInfo2 > **)&jarg1; 
  {
    try
    {
      try {
        result = std_vector_Sl_RobotRaconteur_NodeInfo2_Sg__doSize((std::vector< RobotRaconteur::NodeInfo2 > const *)arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectornodeinfo2_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< RobotRaconteur::NodeInfo2 > *arg1 = (std::vector< RobotRaconteur::NodeInfo2 > *) 0 ;
  std::vector< RobotRaconteur::NodeInfo2 >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< RobotRaconteur::NodeInfo2 > **)&jarg1; 
  arg2 = *(std::vector< RobotRaconteur::NodeInfo2 >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< RobotRaconteur::NodeInfo2 >::value_type const & reference is null");
    return ;
  } 
  {
    try
    {
      std_vector_Sl_RobotRaconteur_NodeInfo2_Sg__doAdd__SWIG_0(arg1,(RobotRaconteur::NodeInfo2 const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectornodeinfo2_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< RobotRaconteur::NodeInfo2 > *arg1 = (std::vector< RobotRaconteur::NodeInfo2 > *) 0 ;
  jint arg2 ;
  std::vector< RobotRaconteur::NodeInfo2 >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< RobotRaconteur::NodeInfo2 > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< RobotRaconteur::NodeInfo2 >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< RobotRaconteur::NodeInfo2 >::value_type const & reference is null");
    return ;
  } 
  {
    try
    {
      try {
        std_vector_Sl_RobotRaconteur_NodeInfo2_Sg__doAdd__SWIG_1(arg1,arg2,(RobotRaconteur::NodeInfo2 const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectornodeinfo2_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::NodeInfo2 > *arg1 = (std::vector< RobotRaconteur::NodeInfo2 > *) 0 ;
  jint arg2 ;
  std::vector< RobotRaconteur::NodeInfo2 >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::NodeInfo2 > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = std_vector_Sl_RobotRaconteur_NodeInfo2_Sg__doRemove(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::NodeInfo2 >::value_type **)&jresult = new std::vector< RobotRaconteur::NodeInfo2 >::value_type((const std::vector< RobotRaconteur::NodeInfo2 >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectornodeinfo2_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::NodeInfo2 > *arg1 = (std::vector< RobotRaconteur::NodeInfo2 > *) 0 ;
  jint arg2 ;
  std::vector< RobotRaconteur::NodeInfo2 >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::NodeInfo2 > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = (std::vector< RobotRaconteur::NodeInfo2 >::value_type *) &std_vector_Sl_RobotRaconteur_NodeInfo2_Sg__doGet(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::NodeInfo2 >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectornodeinfo2_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::NodeInfo2 > *arg1 = (std::vector< RobotRaconteur::NodeInfo2 > *) 0 ;
  jint arg2 ;
  std::vector< RobotRaconteur::NodeInfo2 >::value_type *arg3 = 0 ;
  std::vector< RobotRaconteur::NodeInfo2 >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< RobotRaconteur::NodeInfo2 > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< RobotRaconteur::NodeInfo2 >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< RobotRaconteur::NodeInfo2 >::value_type const & reference is null");
    return 0;
  } 
  {
    try
    {
      try {
        result = std_vector_Sl_RobotRaconteur_NodeInfo2_Sg__doSet(arg1,arg2,(RobotRaconteur::NodeInfo2 const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::NodeInfo2 >::value_type **)&jresult = new std::vector< RobotRaconteur::NodeInfo2 >::value_type((const std::vector< RobotRaconteur::NodeInfo2 >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectornodeinfo2_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< RobotRaconteur::NodeInfo2 > *arg1 = (std::vector< RobotRaconteur::NodeInfo2 > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::NodeInfo2 > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_RobotRaconteur_NodeInfo2_Sg__doRemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1vectornodeinfo2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< RobotRaconteur::NodeInfo2 > *arg1 = (std::vector< RobotRaconteur::NodeInfo2 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< RobotRaconteur::NodeInfo2 > **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1map_1subscriptionserviceinfo2_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > *)new std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1map_1subscriptionserviceinfo2_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > *arg1 = 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > *)new std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >((std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionserviceinfo2_1Iterator_1getNextUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator *arg1 = (std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator *) 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped,std::less< RobotRaconteur::ServiceSubscriptionClientID > >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator **)&jarg1; 
  {
    try
    {
      result = std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_RobotRaconteur_ServiceInfo2Wrapped_Sg__iterator_getNextUnchecked(arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped,std::less< RobotRaconteur::ServiceSubscriptionClientID > >::iterator **)&jresult = new std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped,std::less< RobotRaconteur::ServiceSubscriptionClientID > >::iterator((const std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped,std::less< RobotRaconteur::ServiceSubscriptionClientID > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionserviceinfo2_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator *arg1 = (std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator *) 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator arg2 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator **)&jarg1; 
  argp2 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator");
    return 0;
  }
  arg2 = *argp2; 
  {
    try
    {
      result = (bool)std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_RobotRaconteur_ServiceInfo2Wrapped_Sg__iterator_isNot((std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator const *)arg1,arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionserviceinfo2_1Iterator_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator *arg1 = (std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator *) 0 ;
  RobotRaconteur::ServiceSubscriptionClientID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator **)&jarg1; 
  {
    try
    {
      result = std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_RobotRaconteur_ServiceInfo2Wrapped_Sg__iterator_getKey((std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator const *)arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::ServiceSubscriptionClientID **)&jresult = new RobotRaconteur::ServiceSubscriptionClientID((const RobotRaconteur::ServiceSubscriptionClientID &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionserviceinfo2_1Iterator_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator *arg1 = (std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator *) 0 ;
  RobotRaconteur::ServiceInfo2Wrapped result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator **)&jarg1; 
  {
    try
    {
      result = std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_RobotRaconteur_ServiceInfo2Wrapped_Sg__iterator_getValue((std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator const *)arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::ServiceInfo2Wrapped **)&jresult = new RobotRaconteur::ServiceInfo2Wrapped((const RobotRaconteur::ServiceInfo2Wrapped &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionserviceinfo2_1Iterator_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator *arg1 = (std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator *) 0 ;
  RobotRaconteur::ServiceInfo2Wrapped *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator **)&jarg1; 
  arg2 = *(RobotRaconteur::ServiceInfo2Wrapped **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::ServiceInfo2Wrapped const & reference is null");
    return ;
  } 
  {
    try
    {
      std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_RobotRaconteur_ServiceInfo2Wrapped_Sg__iterator_setValue(arg1,(RobotRaconteur::ServiceInfo2Wrapped const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1map_1subscriptionserviceinfo2_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator *arg1 = (std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionserviceinfo2_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > *arg1 = (std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > **)&jarg1; 
  {
    try
    {
      result = (bool)((std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > const *)arg1)->empty();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionserviceinfo2_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > *arg1 = (std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > **)&jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionserviceinfo2_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > *arg1 = (std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > *) 0 ;
  RobotRaconteur::ServiceSubscriptionClientID *arg2 = 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > **)&jarg1; 
  arg2 = *(RobotRaconteur::ServiceSubscriptionClientID **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::ServiceSubscriptionClientID const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (arg1)->find((RobotRaconteur::ServiceSubscriptionClientID const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator **)&jresult = new std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator((const std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionserviceinfo2_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > *arg1 = (std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > *) 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > **)&jarg1; 
  {
    try
    {
      result = (arg1)->begin();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator **)&jresult = new std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator((const std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionserviceinfo2_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > *arg1 = (std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > *) 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > **)&jarg1; 
  {
    try
    {
      result = (arg1)->end();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator **)&jresult = new std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator((const std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionserviceinfo2_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > *arg1 = (std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > **)&jarg1; 
  {
    try
    {
      try {
        result = std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_RobotRaconteur_ServiceInfo2Wrapped_Sg__sizeImpl((std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > const *)arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionserviceinfo2_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > *arg1 = (std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > *) 0 ;
  RobotRaconteur::ServiceSubscriptionClientID *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > **)&jarg1; 
  arg2 = *(RobotRaconteur::ServiceSubscriptionClientID **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::ServiceSubscriptionClientID const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (bool)std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_RobotRaconteur_ServiceInfo2Wrapped_Sg__containsImpl(arg1,(RobotRaconteur::ServiceSubscriptionClientID const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionserviceinfo2_1putUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > *arg1 = (std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > *) 0 ;
  RobotRaconteur::ServiceSubscriptionClientID *arg2 = 0 ;
  RobotRaconteur::ServiceInfo2Wrapped *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > **)&jarg1; 
  arg2 = *(RobotRaconteur::ServiceSubscriptionClientID **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::ServiceSubscriptionClientID const & reference is null");
    return ;
  } 
  arg3 = *(RobotRaconteur::ServiceInfo2Wrapped **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::ServiceInfo2Wrapped const & reference is null");
    return ;
  } 
  {
    try
    {
      std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_RobotRaconteur_ServiceInfo2Wrapped_Sg__putUnchecked(arg1,(RobotRaconteur::ServiceSubscriptionClientID const &)*arg2,(RobotRaconteur::ServiceInfo2Wrapped const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionserviceinfo2_1removeUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > *arg1 = (std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > *) 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped,std::less< RobotRaconteur::ServiceSubscriptionClientID > >::iterator arg2 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped,std::less< RobotRaconteur::ServiceSubscriptionClientID > >::iterator const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > **)&jarg1; 
  argp2 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped,std::less< RobotRaconteur::ServiceSubscriptionClientID > >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped,std::less< RobotRaconteur::ServiceSubscriptionClientID > >::iterator const");
    return ;
  }
  arg2 = *argp2; 
  {
    try
    {
      std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_RobotRaconteur_ServiceInfo2Wrapped_Sg__removeUnchecked(arg1,arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1map_1subscriptionserviceinfo2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > *arg1 = (std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped > **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1map_1subscriptionclients_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > *)new std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1map_1subscriptionclients_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > *arg1 = 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > *)new std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >((std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionclients_1Iterator_1getNextUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator *arg1 = (std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator *) 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub >,std::less< RobotRaconteur::ServiceSubscriptionClientID > >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator **)&jarg1; 
  {
    try
    {
      result = std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_boost_shared_ptr_Sl_RobotRaconteur_WrappedServiceStub_Sg__Sg__iterator_getNextUnchecked(arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub >,std::less< RobotRaconteur::ServiceSubscriptionClientID > >::iterator **)&jresult = new std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub >,std::less< RobotRaconteur::ServiceSubscriptionClientID > >::iterator((const std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub >,std::less< RobotRaconteur::ServiceSubscriptionClientID > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionclients_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator *arg1 = (std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator *) 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator arg2 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator **)&jarg1; 
  argp2 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator");
    return 0;
  }
  arg2 = *argp2; 
  {
    try
    {
      result = (bool)std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_boost_shared_ptr_Sl_RobotRaconteur_WrappedServiceStub_Sg__Sg__iterator_isNot((std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator const *)arg1,arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionclients_1Iterator_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator *arg1 = (std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator *) 0 ;
  RobotRaconteur::ServiceSubscriptionClientID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator **)&jarg1; 
  {
    try
    {
      result = std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_boost_shared_ptr_Sl_RobotRaconteur_WrappedServiceStub_Sg__Sg__iterator_getKey((std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator const *)arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::ServiceSubscriptionClientID **)&jresult = new RobotRaconteur::ServiceSubscriptionClientID((const RobotRaconteur::ServiceSubscriptionClientID &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionclients_1Iterator_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator *arg1 = (std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator **)&jarg1; 
  {
    try
    {
      result = std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_boost_shared_ptr_Sl_RobotRaconteur_WrappedServiceStub_Sg__Sg__iterator_getValue((std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator const *)arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedServiceStub >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionclients_1Iterator_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator *arg1 = (std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator **)&jarg1; 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jarg2 : &tempnull2; 
  {
    try
    {
      std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_boost_shared_ptr_Sl_RobotRaconteur_WrappedServiceStub_Sg__Sg__iterator_setValue(arg1,(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1map_1subscriptionclients_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator *arg1 = (std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionclients_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > *arg1 = (std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > **)&jarg1; 
  {
    try
    {
      result = (bool)((std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > const *)arg1)->empty();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionclients_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > *arg1 = (std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > **)&jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionclients_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > *arg1 = (std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > *) 0 ;
  RobotRaconteur::ServiceSubscriptionClientID *arg2 = 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > **)&jarg1; 
  arg2 = *(RobotRaconteur::ServiceSubscriptionClientID **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::ServiceSubscriptionClientID const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (arg1)->find((RobotRaconteur::ServiceSubscriptionClientID const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator **)&jresult = new std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator((const std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionclients_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > *arg1 = (std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > *) 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > **)&jarg1; 
  {
    try
    {
      result = (arg1)->begin();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator **)&jresult = new std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator((const std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionclients_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > *arg1 = (std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > *) 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > **)&jarg1; 
  {
    try
    {
      result = (arg1)->end();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator **)&jresult = new std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator((const std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionclients_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > *arg1 = (std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > **)&jarg1; 
  {
    try
    {
      try {
        result = std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_boost_shared_ptr_Sl_RobotRaconteur_WrappedServiceStub_Sg__Sg__sizeImpl((std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > const *)arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionclients_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > *arg1 = (std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > *) 0 ;
  RobotRaconteur::ServiceSubscriptionClientID *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > **)&jarg1; 
  arg2 = *(RobotRaconteur::ServiceSubscriptionClientID **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::ServiceSubscriptionClientID const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (bool)std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_boost_shared_ptr_Sl_RobotRaconteur_WrappedServiceStub_Sg__Sg__containsImpl(arg1,(RobotRaconteur::ServiceSubscriptionClientID const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionclients_1putUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > *arg1 = (std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > *) 0 ;
  RobotRaconteur::ServiceSubscriptionClientID *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > **)&jarg1; 
  arg2 = *(RobotRaconteur::ServiceSubscriptionClientID **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::ServiceSubscriptionClientID const & reference is null");
    return ;
  } 
  arg3 = jarg3 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jarg3 : &tempnull3; 
  {
    try
    {
      std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_boost_shared_ptr_Sl_RobotRaconteur_WrappedServiceStub_Sg__Sg__putUnchecked(arg1,(RobotRaconteur::ServiceSubscriptionClientID const &)*arg2,(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionclients_1removeUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > *arg1 = (std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > *) 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub >,std::less< RobotRaconteur::ServiceSubscriptionClientID > >::iterator arg2 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub >,std::less< RobotRaconteur::ServiceSubscriptionClientID > >::iterator const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > **)&jarg1; 
  argp2 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub >,std::less< RobotRaconteur::ServiceSubscriptionClientID > >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub >,std::less< RobotRaconteur::ServiceSubscriptionClientID > >::iterator const");
    return ;
  }
  arg2 = *argp2; 
  {
    try
    {
      std_map_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sc_boost_shared_ptr_Sl_RobotRaconteur_WrappedServiceStub_Sg__Sg__removeUnchecked(arg1,arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1map_1subscriptionclients(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > *arg1 = (std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub > > **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorptr_1wrappedservicesubscriptionnode_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *)new std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > >();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorptr_1wrappedservicesubscriptionnode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *arg1 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *)new std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > >((std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1wrappedservicesubscriptionnode_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > **)&jarg1; 
  {
    try
    {
      result = ((std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > const *)arg1)->capacity();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1wrappedservicesubscriptionnode_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > **)&jarg1; 
  arg2 = (std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > >::size_type)jarg2; 
  {
    try
    {
      try {
        (arg1)->reserve(arg2);
      } catch(std::length_error &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1wrappedservicesubscriptionnode_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > **)&jarg1; 
  {
    try
    {
      result = (bool)((std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > const *)arg1)->empty();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1wrappedservicesubscriptionnode_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > **)&jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorptr_1wrappedservicesubscriptionnode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > tempnull2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > **)&jarg2 : &tempnull2; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *)new_std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_WrappedServiceSubscriptionFilterNode_Sg__Sg___SWIG_2(arg1,(boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1wrappedservicesubscriptionnode_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > **)&jarg1; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_WrappedServiceSubscriptionFilterNode_Sg__Sg__doSize((std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > const *)arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1wrappedservicesubscriptionnode_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > >::value_type *arg2 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > >::value_type **)&jarg2 : &tempnull2; 
  {
    try
    {
      std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_WrappedServiceSubscriptionFilterNode_Sg__Sg__doAdd__SWIG_0(arg1,(boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1wrappedservicesubscriptionnode_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > >::value_type *arg3 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? *(std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > >::value_type **)&jarg3 : &tempnull3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_WrappedServiceSubscriptionFilterNode_Sg__Sg__doAdd__SWIG_1(arg1,arg2,(boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1wrappedservicesubscriptionnode_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_WrappedServiceSubscriptionFilterNode_Sg__Sg__doRemove(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > >::value_type **)&jresult = result ? new std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > >::value_type(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1wrappedservicesubscriptionnode_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > >::value_type *) &std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_WrappedServiceSubscriptionFilterNode_Sg__Sg__doGet(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > >::value_type **)&jresult = *result ? new std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > >::value_type(*result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1wrappedservicesubscriptionnode_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *) 0 ;
  jint arg2 ;
  std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > >::value_type *arg3 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > >::value_type tempnull3 ;
  std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? *(std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > >::value_type **)&jarg3 : &tempnull3; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_WrappedServiceSubscriptionFilterNode_Sg__Sg__doSet(arg1,arg2,(boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > >::value_type **)&jresult = result ? new std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > >::value_type(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1wrappedservicesubscriptionnode_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_RobotRaconteur_WrappedServiceSubscriptionFilterNode_Sg__Sg__doRemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1vectorptr_1wrappedservicesubscriptionnode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *arg1 = (std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorptr_1subscriptionclientid_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::ServiceSubscriptionClientID > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (std::vector< RobotRaconteur::ServiceSubscriptionClientID > *)new std::vector< RobotRaconteur::ServiceSubscriptionClientID >();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::ServiceSubscriptionClientID > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorptr_1subscriptionclientid_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::ServiceSubscriptionClientID > *arg1 = 0 ;
  std::vector< RobotRaconteur::ServiceSubscriptionClientID > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ServiceSubscriptionClientID > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< RobotRaconteur::ServiceSubscriptionClientID > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (std::vector< RobotRaconteur::ServiceSubscriptionClientID > *)new std::vector< RobotRaconteur::ServiceSubscriptionClientID >((std::vector< RobotRaconteur::ServiceSubscriptionClientID > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::ServiceSubscriptionClientID > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1subscriptionclientid_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::ServiceSubscriptionClientID > *arg1 = (std::vector< RobotRaconteur::ServiceSubscriptionClientID > *) 0 ;
  std::vector< RobotRaconteur::ServiceSubscriptionClientID >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ServiceSubscriptionClientID > **)&jarg1; 
  {
    try
    {
      result = ((std::vector< RobotRaconteur::ServiceSubscriptionClientID > const *)arg1)->capacity();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1subscriptionclientid_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< RobotRaconteur::ServiceSubscriptionClientID > *arg1 = (std::vector< RobotRaconteur::ServiceSubscriptionClientID > *) 0 ;
  std::vector< RobotRaconteur::ServiceSubscriptionClientID >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ServiceSubscriptionClientID > **)&jarg1; 
  arg2 = (std::vector< RobotRaconteur::ServiceSubscriptionClientID >::size_type)jarg2; 
  {
    try
    {
      try {
        (arg1)->reserve(arg2);
      } catch(std::length_error &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1subscriptionclientid_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< RobotRaconteur::ServiceSubscriptionClientID > *arg1 = (std::vector< RobotRaconteur::ServiceSubscriptionClientID > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ServiceSubscriptionClientID > **)&jarg1; 
  {
    try
    {
      result = (bool)((std::vector< RobotRaconteur::ServiceSubscriptionClientID > const *)arg1)->empty();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1subscriptionclientid_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< RobotRaconteur::ServiceSubscriptionClientID > *arg1 = (std::vector< RobotRaconteur::ServiceSubscriptionClientID > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ServiceSubscriptionClientID > **)&jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vectorptr_1subscriptionclientid_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  RobotRaconteur::ServiceSubscriptionClientID *arg2 = 0 ;
  std::vector< RobotRaconteur::ServiceSubscriptionClientID > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(RobotRaconteur::ServiceSubscriptionClientID **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::ServiceSubscriptionClientID const & reference is null");
    return 0;
  } 
  {
    try
    {
      try {
        result = (std::vector< RobotRaconteur::ServiceSubscriptionClientID > *)new_std_vector_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sg___SWIG_2(arg1,(RobotRaconteur::ServiceSubscriptionClientID const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::ServiceSubscriptionClientID > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1subscriptionclientid_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< RobotRaconteur::ServiceSubscriptionClientID > *arg1 = (std::vector< RobotRaconteur::ServiceSubscriptionClientID > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ServiceSubscriptionClientID > **)&jarg1; 
  {
    try
    {
      try {
        result = std_vector_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sg__doSize((std::vector< RobotRaconteur::ServiceSubscriptionClientID > const *)arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1subscriptionclientid_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< RobotRaconteur::ServiceSubscriptionClientID > *arg1 = (std::vector< RobotRaconteur::ServiceSubscriptionClientID > *) 0 ;
  std::vector< RobotRaconteur::ServiceSubscriptionClientID >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< RobotRaconteur::ServiceSubscriptionClientID > **)&jarg1; 
  arg2 = *(std::vector< RobotRaconteur::ServiceSubscriptionClientID >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< RobotRaconteur::ServiceSubscriptionClientID >::value_type const & reference is null");
    return ;
  } 
  {
    try
    {
      std_vector_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sg__doAdd__SWIG_0(arg1,(RobotRaconteur::ServiceSubscriptionClientID const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1subscriptionclientid_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< RobotRaconteur::ServiceSubscriptionClientID > *arg1 = (std::vector< RobotRaconteur::ServiceSubscriptionClientID > *) 0 ;
  jint arg2 ;
  std::vector< RobotRaconteur::ServiceSubscriptionClientID >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< RobotRaconteur::ServiceSubscriptionClientID > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< RobotRaconteur::ServiceSubscriptionClientID >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< RobotRaconteur::ServiceSubscriptionClientID >::value_type const & reference is null");
    return ;
  } 
  {
    try
    {
      try {
        std_vector_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sg__doAdd__SWIG_1(arg1,arg2,(RobotRaconteur::ServiceSubscriptionClientID const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1subscriptionclientid_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::ServiceSubscriptionClientID > *arg1 = (std::vector< RobotRaconteur::ServiceSubscriptionClientID > *) 0 ;
  jint arg2 ;
  std::vector< RobotRaconteur::ServiceSubscriptionClientID >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ServiceSubscriptionClientID > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = std_vector_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sg__doRemove(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::ServiceSubscriptionClientID >::value_type **)&jresult = new std::vector< RobotRaconteur::ServiceSubscriptionClientID >::value_type((const std::vector< RobotRaconteur::ServiceSubscriptionClientID >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1subscriptionclientid_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::ServiceSubscriptionClientID > *arg1 = (std::vector< RobotRaconteur::ServiceSubscriptionClientID > *) 0 ;
  jint arg2 ;
  std::vector< RobotRaconteur::ServiceSubscriptionClientID >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ServiceSubscriptionClientID > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = (std::vector< RobotRaconteur::ServiceSubscriptionClientID >::value_type *) &std_vector_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sg__doGet(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::ServiceSubscriptionClientID >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1subscriptionclientid_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::ServiceSubscriptionClientID > *arg1 = (std::vector< RobotRaconteur::ServiceSubscriptionClientID > *) 0 ;
  jint arg2 ;
  std::vector< RobotRaconteur::ServiceSubscriptionClientID >::value_type *arg3 = 0 ;
  std::vector< RobotRaconteur::ServiceSubscriptionClientID >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< RobotRaconteur::ServiceSubscriptionClientID > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< RobotRaconteur::ServiceSubscriptionClientID >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< RobotRaconteur::ServiceSubscriptionClientID >::value_type const & reference is null");
    return 0;
  } 
  {
    try
    {
      try {
        result = std_vector_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sg__doSet(arg1,arg2,(RobotRaconteur::ServiceSubscriptionClientID const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::ServiceSubscriptionClientID >::value_type **)&jresult = new std::vector< RobotRaconteur::ServiceSubscriptionClientID >::value_type((const std::vector< RobotRaconteur::ServiceSubscriptionClientID >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vectorptr_1subscriptionclientid_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< RobotRaconteur::ServiceSubscriptionClientID > *arg1 = (std::vector< RobotRaconteur::ServiceSubscriptionClientID > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ServiceSubscriptionClientID > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_RobotRaconteur_ServiceSubscriptionClientID_Sg__doRemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1vectorptr_1subscriptionclientid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< RobotRaconteur::ServiceSubscriptionClientID > *arg1 = (std::vector< RobotRaconteur::ServiceSubscriptionClientID > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< RobotRaconteur::ServiceSubscriptionClientID > **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceSubscriptionFilterAttribute_1Name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::ServiceSubscriptionFilterAttribute *arg1 = (RobotRaconteur::ServiceSubscriptionFilterAttribute *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceSubscriptionFilterAttribute **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceSubscriptionFilterAttribute_1Name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::ServiceSubscriptionFilterAttribute *arg1 = (RobotRaconteur::ServiceSubscriptionFilterAttribute *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceSubscriptionFilterAttribute **)&jarg1; 
  result = (std::string *) & ((arg1)->Name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceSubscriptionFilterAttribute_1Value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::ServiceSubscriptionFilterAttribute *arg1 = (RobotRaconteur::ServiceSubscriptionFilterAttribute *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceSubscriptionFilterAttribute **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Value = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceSubscriptionFilterAttribute_1Value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::ServiceSubscriptionFilterAttribute *arg1 = (RobotRaconteur::ServiceSubscriptionFilterAttribute *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceSubscriptionFilterAttribute **)&jarg1; 
  result = (std::string *) & ((arg1)->Value);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceSubscriptionFilterAttribute_1UseRegex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RobotRaconteur::ServiceSubscriptionFilterAttribute *arg1 = (RobotRaconteur::ServiceSubscriptionFilterAttribute *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceSubscriptionFilterAttribute **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->UseRegex = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceSubscriptionFilterAttribute_1UseRegex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::ServiceSubscriptionFilterAttribute *arg1 = (RobotRaconteur::ServiceSubscriptionFilterAttribute *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceSubscriptionFilterAttribute **)&jarg1; 
  result = (bool) ((arg1)->UseRegex);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1ServiceSubscriptionFilterAttribute_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  RobotRaconteur::ServiceSubscriptionFilterAttribute *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try
    {
      result = (RobotRaconteur::ServiceSubscriptionFilterAttribute *)new RobotRaconteur::ServiceSubscriptionFilterAttribute((std::string const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::ServiceSubscriptionFilterAttribute **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1ServiceSubscriptionFilterAttribute_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  RobotRaconteur::ServiceSubscriptionFilterAttribute *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (RobotRaconteur::ServiceSubscriptionFilterAttribute *)new RobotRaconteur::ServiceSubscriptionFilterAttribute((std::string const &)*arg1,(std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::ServiceSubscriptionFilterAttribute **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceSubscriptionFilterAttribute_1isMatch_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  RobotRaconteur::ServiceSubscriptionFilterAttribute *arg1 = (RobotRaconteur::ServiceSubscriptionFilterAttribute *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceSubscriptionFilterAttribute **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (bool)((RobotRaconteur::ServiceSubscriptionFilterAttribute const *)arg1)->IsMatch((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceSubscriptionFilterAttribute_1isMatch_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  RobotRaconteur::ServiceSubscriptionFilterAttribute *arg1 = (RobotRaconteur::ServiceSubscriptionFilterAttribute *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceSubscriptionFilterAttribute **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try
    {
      result = (bool)((RobotRaconteur::ServiceSubscriptionFilterAttribute const *)arg1)->IsMatch((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceSubscriptionFilterAttribute_1isMatch_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  RobotRaconteur::ServiceSubscriptionFilterAttribute *arg1 = (RobotRaconteur::ServiceSubscriptionFilterAttribute *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::ServiceSubscriptionFilterAttribute **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (bool)((RobotRaconteur::ServiceSubscriptionFilterAttribute const *)arg1)->IsMatch((std::vector< std::string > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceSubscriptionFilterAttribute_1isMatch_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  RobotRaconteur::ServiceSubscriptionFilterAttribute *arg1 = (RobotRaconteur::ServiceSubscriptionFilterAttribute *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::ServiceSubscriptionFilterAttribute **)&jarg1; 
  arg2 = *(std::map< std::string,std::string,std::less< std::string > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string,std::less< std::string > > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (bool)((RobotRaconteur::ServiceSubscriptionFilterAttribute const *)arg1)->IsMatch((std::map< std::string,std::string,std::less< std::string > > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1ServiceSubscriptionFilterAttribute(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::ServiceSubscriptionFilterAttribute *arg1 = (RobotRaconteur::ServiceSubscriptionFilterAttribute *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::ServiceSubscriptionFilterAttribute **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_createServiceSubscriptionFilterAttributeRegex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  SwigValueWrapper< RobotRaconteur::ServiceSubscriptionFilterAttribute > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try
    {
      result = RobotRaconteur::CreateServiceSubscriptionFilterAttributeRegex((std::string const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::ServiceSubscriptionFilterAttribute **)&jresult = new RobotRaconteur::ServiceSubscriptionFilterAttribute((const RobotRaconteur::ServiceSubscriptionFilterAttribute &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_createServiceSubscriptionFilterAttributeRegex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< RobotRaconteur::ServiceSubscriptionFilterAttribute > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = RobotRaconteur::CreateServiceSubscriptionFilterAttributeRegex((std::string const &)*arg1,(std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::ServiceSubscriptionFilterAttribute **)&jresult = new RobotRaconteur::ServiceSubscriptionFilterAttribute((const RobotRaconteur::ServiceSubscriptionFilterAttribute &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vector_1subscriptionattribute_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *)new std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute >();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vector_1subscriptionattribute_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *arg1 = 0 ;
  std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *)new std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute >((std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1subscriptionattribute_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *arg1 = (std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *) 0 ;
  std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > **)&jarg1; 
  {
    try
    {
      result = ((std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > const *)arg1)->capacity();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1subscriptionattribute_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *arg1 = (std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *) 0 ;
  std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > **)&jarg1; 
  arg2 = (std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute >::size_type)jarg2; 
  {
    try
    {
      try {
        (arg1)->reserve(arg2);
      } catch(std::length_error &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1subscriptionattribute_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *arg1 = (std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > **)&jarg1; 
  {
    try
    {
      result = (bool)((std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > const *)arg1)->empty();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1subscriptionattribute_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *arg1 = (std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > **)&jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1vector_1subscriptionattribute_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  jint arg1 ;
  RobotRaconteur::ServiceSubscriptionFilterAttribute *arg2 = 0 ;
  std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = jarg1; 
  arg2 = *(RobotRaconteur::ServiceSubscriptionFilterAttribute **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::ServiceSubscriptionFilterAttribute const & reference is null");
    return 0;
  } 
  {
    try
    {
      try {
        result = (std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *)new_std_vector_Sl_RobotRaconteur_ServiceSubscriptionFilterAttribute_Sg___SWIG_2(arg1,(RobotRaconteur::ServiceSubscriptionFilterAttribute const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1subscriptionattribute_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *arg1 = (std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > **)&jarg1; 
  {
    try
    {
      try {
        result = std_vector_Sl_RobotRaconteur_ServiceSubscriptionFilterAttribute_Sg__doSize((std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > const *)arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1subscriptionattribute_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *arg1 = (std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *) 0 ;
  std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > **)&jarg1; 
  arg2 = *(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute >::value_type const & reference is null");
    return ;
  } 
  {
    try
    {
      std_vector_Sl_RobotRaconteur_ServiceSubscriptionFilterAttribute_Sg__doAdd__SWIG_0(arg1,(RobotRaconteur::ServiceSubscriptionFilterAttribute const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1subscriptionattribute_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *arg1 = (std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *) 0 ;
  jint arg2 ;
  std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute >::value_type const & reference is null");
    return ;
  } 
  {
    try
    {
      try {
        std_vector_Sl_RobotRaconteur_ServiceSubscriptionFilterAttribute_Sg__doAdd__SWIG_1(arg1,arg2,(RobotRaconteur::ServiceSubscriptionFilterAttribute const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1subscriptionattribute_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *arg1 = (std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *) 0 ;
  jint arg2 ;
  SwigValueWrapper< RobotRaconteur::ServiceSubscriptionFilterAttribute > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = std_vector_Sl_RobotRaconteur_ServiceSubscriptionFilterAttribute_Sg__doRemove(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute >::value_type **)&jresult = new std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute >::value_type((const std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute >::value_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1subscriptionattribute_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *arg1 = (std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *) 0 ;
  jint arg2 ;
  std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > **)&jarg1; 
  arg2 = jarg2; 
  {
    try
    {
      try {
        result = (std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute >::value_type *) &std_vector_Sl_RobotRaconteur_ServiceSubscriptionFilterAttribute_Sg__doGet(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1subscriptionattribute_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *arg1 = (std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *) 0 ;
  jint arg2 ;
  std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute >::value_type *arg3 = 0 ;
  SwigValueWrapper< RobotRaconteur::ServiceSubscriptionFilterAttribute > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = *(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute >::value_type const & reference is null");
    return 0;
  } 
  {
    try
    {
      try {
        result = std_vector_Sl_RobotRaconteur_ServiceSubscriptionFilterAttribute_Sg__doSet(arg1,arg2,(RobotRaconteur::ServiceSubscriptionFilterAttribute const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute >::value_type **)&jresult = new std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute >::value_type((const std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute >::value_type &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_vector_1subscriptionattribute_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *arg1 = (std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_RobotRaconteur_ServiceSubscriptionFilterAttribute_Sg__doRemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1vector_1subscriptionattribute(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *arg1 = (std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1map_1subscriptionattribute_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > *)new std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1map_1subscriptionattribute_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > *arg1 = 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > *)new std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >((std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionattribute_1Iterator_1getNextUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator *arg1 = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator *) 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute,std::less< std::string > >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator **)&jarg1; 
  {
    try
    {
      result = std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttribute_Sg__iterator_getNextUnchecked(arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute,std::less< std::string > >::iterator **)&jresult = new std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute,std::less< std::string > >::iterator((const std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute,std::less< std::string > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionattribute_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator *arg1 = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator *) 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator arg2 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator **)&jarg1; 
  argp2 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator");
    return 0;
  }
  arg2 = *argp2; 
  {
    try
    {
      result = (bool)std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttribute_Sg__iterator_isNot((std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator const *)arg1,arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionattribute_1Iterator_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator *arg1 = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator **)&jarg1; 
  {
    try
    {
      result = std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttribute_Sg__iterator_getKey((std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator const *)arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionattribute_1Iterator_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator *arg1 = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator *) 0 ;
  SwigValueWrapper< RobotRaconteur::ServiceSubscriptionFilterAttribute > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator **)&jarg1; 
  {
    try
    {
      result = std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttribute_Sg__iterator_getValue((std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator const *)arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::ServiceSubscriptionFilterAttribute **)&jresult = new RobotRaconteur::ServiceSubscriptionFilterAttribute((const RobotRaconteur::ServiceSubscriptionFilterAttribute &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionattribute_1Iterator_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator *arg1 = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator *) 0 ;
  RobotRaconteur::ServiceSubscriptionFilterAttribute *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator **)&jarg1; 
  arg2 = *(RobotRaconteur::ServiceSubscriptionFilterAttribute **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::ServiceSubscriptionFilterAttribute const & reference is null");
    return ;
  } 
  {
    try
    {
      std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttribute_Sg__iterator_setValue(arg1,(RobotRaconteur::ServiceSubscriptionFilterAttribute const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1map_1subscriptionattribute_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator *arg1 = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionattribute_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > *arg1 = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > **)&jarg1; 
  {
    try
    {
      result = (bool)((std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > const *)arg1)->empty();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionattribute_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > *arg1 = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > **)&jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionattribute_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > *arg1 = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > *) 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (arg1)->find((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator **)&jresult = new std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator((const std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionattribute_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > *arg1 = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > *) 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > **)&jarg1; 
  {
    try
    {
      result = (arg1)->begin();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator **)&jresult = new std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator((const std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionattribute_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > *arg1 = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > *) 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > **)&jarg1; 
  {
    try
    {
      result = (arg1)->end();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator **)&jresult = new std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator((const std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionattribute_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > *arg1 = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > **)&jarg1; 
  {
    try
    {
      try {
        result = std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttribute_Sg__sizeImpl((std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > const *)arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionattribute_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > *arg1 = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (bool)std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttribute_Sg__containsImpl(arg1,(std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionattribute_1putUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > *arg1 = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > *) 0 ;
  std::string *arg2 = 0 ;
  RobotRaconteur::ServiceSubscriptionFilterAttribute *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(RobotRaconteur::ServiceSubscriptionFilterAttribute **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::ServiceSubscriptionFilterAttribute const & reference is null");
    return ;
  } 
  {
    try
    {
      std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttribute_Sg__putUnchecked(arg1,(std::string const &)*arg2,(RobotRaconteur::ServiceSubscriptionFilterAttribute const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionattribute_1removeUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > *arg1 = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > *) 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute,std::less< std::string > >::iterator arg2 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute,std::less< std::string > >::iterator const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > **)&jarg1; 
  argp2 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute,std::less< std::string > >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute,std::less< std::string > >::iterator const");
    return ;
  }
  arg2 = *argp2; 
  {
    try
    {
      std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttribute_Sg__removeUnchecked(arg1,arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1map_1subscriptionattribute(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > *arg1 = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttribute > **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceSubscriptionFilterAttributeGroup_1Attributes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *arg1 = (RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *) 0 ;
  std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *arg2 = (std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::ServiceSubscriptionFilterAttributeGroup **)&jarg1; 
  arg2 = *(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > **)&jarg2; 
  if (arg1) (arg1)->Attributes = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceSubscriptionFilterAttributeGroup_1Attributes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *arg1 = (RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *) 0 ;
  std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceSubscriptionFilterAttributeGroup **)&jarg1; 
  result = (std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *)& ((arg1)->Attributes);
  *(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceSubscriptionFilterAttributeGroup_1Groups_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *arg1 = (RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *) 0 ;
  std::vector< RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > *arg2 = (std::vector< RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceSubscriptionFilterAttributeGroup **)&jarg1; 
  arg2 = *(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > **)&jarg2; 
  if (arg1) (arg1)->Groups = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceSubscriptionFilterAttributeGroup_1Groups_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *arg1 = (RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *) 0 ;
  std::vector< RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceSubscriptionFilterAttributeGroup **)&jarg1; 
  result = (std::vector< RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > *)& ((arg1)->Groups);
  *(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceSubscriptionFilterAttributeGroup_1Operation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *arg1 = (RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *) 0 ;
  RobotRaconteur::ServiceSubscriptionFilterAttributeGroupOperation arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceSubscriptionFilterAttributeGroup **)&jarg1; 
  arg2 = (RobotRaconteur::ServiceSubscriptionFilterAttributeGroupOperation)jarg2; 
  if (arg1) (arg1)->Operation = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceSubscriptionFilterAttributeGroup_1Operation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *arg1 = (RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *) 0 ;
  RobotRaconteur::ServiceSubscriptionFilterAttributeGroupOperation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceSubscriptionFilterAttributeGroup **)&jarg1; 
  result = (RobotRaconteur::ServiceSubscriptionFilterAttributeGroupOperation) ((arg1)->Operation);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceSubscriptionFilterAttributeGroup_1SplitStringAttribute_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *arg1 = (RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceSubscriptionFilterAttributeGroup **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->SplitStringAttribute = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceSubscriptionFilterAttributeGroup_1SplitStringAttribute_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *arg1 = (RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceSubscriptionFilterAttributeGroup **)&jarg1; 
  result = (bool) ((arg1)->SplitStringAttribute);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceSubscriptionFilterAttributeGroup_1SplitStringDelimiter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *arg1 = (RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *) 0 ;
  char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceSubscriptionFilterAttributeGroup **)&jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->SplitStringDelimiter = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceSubscriptionFilterAttributeGroup_1SplitStringDelimiter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *arg1 = (RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceSubscriptionFilterAttributeGroup **)&jarg1; 
  result = (char) ((arg1)->SplitStringDelimiter);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1ServiceSubscriptionFilterAttributeGroup_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *)new RobotRaconteur::ServiceSubscriptionFilterAttributeGroup();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::ServiceSubscriptionFilterAttributeGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1ServiceSubscriptionFilterAttributeGroup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  RobotRaconteur::ServiceSubscriptionFilterAttributeGroupOperation arg1 ;
  RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (RobotRaconteur::ServiceSubscriptionFilterAttributeGroupOperation)jarg1; 
  {
    try
    {
      result = (RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *)new RobotRaconteur::ServiceSubscriptionFilterAttributeGroup(arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::ServiceSubscriptionFilterAttributeGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1ServiceSubscriptionFilterAttributeGroup_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  RobotRaconteur::ServiceSubscriptionFilterAttributeGroupOperation arg1 ;
  std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > arg2 ;
  std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > *argp2 ;
  RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (RobotRaconteur::ServiceSubscriptionFilterAttributeGroupOperation)jarg1; 
  argp2 = *(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< RobotRaconteur::ServiceSubscriptionFilterAttribute >");
    return 0;
  }
  arg2 = *argp2; 
  {
    try
    {
      result = (RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *)new RobotRaconteur::ServiceSubscriptionFilterAttributeGroup(arg1,arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::ServiceSubscriptionFilterAttributeGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1ServiceSubscriptionFilterAttributeGroup_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  RobotRaconteur::ServiceSubscriptionFilterAttributeGroupOperation arg1 ;
  SwigValueWrapper< std::vector< RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > > arg2 ;
  std::vector< RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > *argp2 ;
  RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (RobotRaconteur::ServiceSubscriptionFilterAttributeGroupOperation)jarg1; 
  argp2 = *(std::vector< RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >");
    return 0;
  }
  arg2 = *argp2; 
  {
    try
    {
      result = (RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *)new RobotRaconteur::ServiceSubscriptionFilterAttributeGroup(arg1,arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::ServiceSubscriptionFilterAttributeGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceSubscriptionFilterAttributeGroup_1isMatch_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *arg1 = (RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceSubscriptionFilterAttributeGroup **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (bool)((RobotRaconteur::ServiceSubscriptionFilterAttributeGroup const *)arg1)->IsMatch((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceSubscriptionFilterAttributeGroup_1isMatch_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *arg1 = (RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::ServiceSubscriptionFilterAttributeGroup **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (bool)((RobotRaconteur::ServiceSubscriptionFilterAttributeGroup const *)arg1)->IsMatch((std::vector< std::string > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ServiceSubscriptionFilterAttributeGroup_1isMatch_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *arg1 = (RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::ServiceSubscriptionFilterAttributeGroup **)&jarg1; 
  arg2 = *(std::map< std::string,std::string,std::less< std::string > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string,std::less< std::string > > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (bool)((RobotRaconteur::ServiceSubscriptionFilterAttributeGroup const *)arg1)->IsMatch((std::map< std::string,std::string,std::less< std::string > > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1ServiceSubscriptionFilterAttributeGroup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *arg1 = (RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::ServiceSubscriptionFilterAttributeGroup **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1map_1subscriptionattributegroup_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > *)new std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1map_1subscriptionattributegroup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > *arg1 = 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > *)new std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >((std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionattributegroup_1Iterator_1getNextUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator *arg1 = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator *) 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup,std::less< std::string > >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator **)&jarg1; 
  {
    try
    {
      result = std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttributeGroup_Sg__iterator_getNextUnchecked(arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup,std::less< std::string > >::iterator **)&jresult = new std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup,std::less< std::string > >::iterator((const std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup,std::less< std::string > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionattributegroup_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator *arg1 = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator *) 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator arg2 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator **)&jarg1; 
  argp2 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator");
    return 0;
  }
  arg2 = *argp2; 
  {
    try
    {
      result = (bool)std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttributeGroup_Sg__iterator_isNot((std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator const *)arg1,arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionattributegroup_1Iterator_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator *arg1 = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator **)&jarg1; 
  {
    try
    {
      result = std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttributeGroup_Sg__iterator_getKey((std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator const *)arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionattributegroup_1Iterator_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator *arg1 = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator *) 0 ;
  RobotRaconteur::ServiceSubscriptionFilterAttributeGroup result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator **)&jarg1; 
  {
    try
    {
      result = std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttributeGroup_Sg__iterator_getValue((std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator const *)arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::ServiceSubscriptionFilterAttributeGroup **)&jresult = new RobotRaconteur::ServiceSubscriptionFilterAttributeGroup((const RobotRaconteur::ServiceSubscriptionFilterAttributeGroup &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionattributegroup_1Iterator_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator *arg1 = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator *) 0 ;
  RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator **)&jarg1; 
  arg2 = *(RobotRaconteur::ServiceSubscriptionFilterAttributeGroup **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::ServiceSubscriptionFilterAttributeGroup const & reference is null");
    return ;
  } 
  {
    try
    {
      std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttributeGroup_Sg__iterator_setValue(arg1,(RobotRaconteur::ServiceSubscriptionFilterAttributeGroup const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1map_1subscriptionattributegroup_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator *arg1 = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionattributegroup_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > *arg1 = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > **)&jarg1; 
  {
    try
    {
      result = (bool)((std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > const *)arg1)->empty();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionattributegroup_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > *arg1 = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > **)&jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionattributegroup_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > *arg1 = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > *) 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (arg1)->find((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator **)&jresult = new std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator((const std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionattributegroup_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > *arg1 = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > *) 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > **)&jarg1; 
  {
    try
    {
      result = (arg1)->begin();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator **)&jresult = new std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator((const std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionattributegroup_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > *arg1 = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > *) 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > **)&jarg1; 
  {
    try
    {
      result = (arg1)->end();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator **)&jresult = new std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator((const std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionattributegroup_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > *arg1 = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > **)&jarg1; 
  {
    try
    {
      try {
        result = std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttributeGroup_Sg__sizeImpl((std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > const *)arg1);
      } catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionattributegroup_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > *arg1 = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (bool)std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttributeGroup_Sg__containsImpl(arg1,(std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionattributegroup_1putUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > *arg1 = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > *) 0 ;
  std::string *arg2 = 0 ;
  RobotRaconteur::ServiceSubscriptionFilterAttributeGroup *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(RobotRaconteur::ServiceSubscriptionFilterAttributeGroup **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::ServiceSubscriptionFilterAttributeGroup const & reference is null");
    return ;
  } 
  {
    try
    {
      std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttributeGroup_Sg__putUnchecked(arg1,(std::string const &)*arg2,(RobotRaconteur::ServiceSubscriptionFilterAttributeGroup const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_map_1subscriptionattributegroup_1removeUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > *arg1 = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > *) 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup,std::less< std::string > >::iterator arg2 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup,std::less< std::string > >::iterator const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > **)&jarg1; 
  argp2 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup,std::less< std::string > >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup,std::less< std::string > >::iterator const");
    return ;
  }
  arg2 = *argp2; 
  {
    try
    {
      std_map_Sl_std_string_Sc_RobotRaconteur_ServiceSubscriptionFilterAttributeGroup_Sg__removeUnchecked(arg1,arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1map_1subscriptionattributegroup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > *arg1 = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup > **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionFilterPredicateDirector_1predicate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  RobotRaconteur::WrappedServiceSubscriptionFilterPredicateDirector *arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilterPredicateDirector *) 0 ;
  RobotRaconteur::ServiceInfo2Wrapped *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::WrappedServiceSubscriptionFilterPredicateDirector **)&jarg1; 
  arg2 = *(RobotRaconteur::ServiceInfo2Wrapped **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::ServiceInfo2Wrapped const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (bool)(arg1)->Predicate((RobotRaconteur::ServiceInfo2Wrapped const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedServiceSubscriptionFilterPredicateDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedServiceSubscriptionFilterPredicateDirector *arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilterPredicateDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedServiceSubscriptionFilterPredicateDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedServiceSubscriptionFilterPredicateDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSubscriptionFilterPredicateDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedServiceSubscriptionFilterPredicateDirector *)new SwigDirector_WrappedServiceSubscriptionFilterPredicateDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedServiceSubscriptionFilterPredicateDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionFilterPredicateDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::WrappedServiceSubscriptionFilterPredicateDirector *obj = *((RobotRaconteur::WrappedServiceSubscriptionFilterPredicateDirector **)&objarg);
  (void)jcls;
  SwigDirector_WrappedServiceSubscriptionFilterPredicateDirector *director = static_cast<SwigDirector_WrappedServiceSubscriptionFilterPredicateDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionFilterPredicateDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::WrappedServiceSubscriptionFilterPredicateDirector *obj = *((RobotRaconteur::WrappedServiceSubscriptionFilterPredicateDirector **)&objarg);
  SwigDirector_WrappedServiceSubscriptionFilterPredicateDirector *director = dynamic_cast<SwigDirector_WrappedServiceSubscriptionFilterPredicateDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionFilterNode_1NodeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedServiceSubscriptionFilterNode *arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilterNode *) 0 ;
  ::RobotRaconteur::NodeID *arg2 = (::RobotRaconteur::NodeID *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscriptionFilterNode > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilterNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(::RobotRaconteur::NodeID **)&jarg2; 
  if (arg1) (arg1)->NodeID = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionFilterNode_1NodeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSubscriptionFilterNode *arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilterNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > *smartarg1 = 0 ;
  ::RobotRaconteur::NodeID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscriptionFilterNode > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilterNode *)(smartarg1 ? smartarg1->get() : 0); 
  result = (::RobotRaconteur::NodeID *)& ((arg1)->NodeID);
  *(::RobotRaconteur::NodeID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionFilterNode_1NodeName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::WrappedServiceSubscriptionFilterNode *arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilterNode *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscriptionFilterNode > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilterNode *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->NodeName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionFilterNode_1NodeName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::WrappedServiceSubscriptionFilterNode *arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilterNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscriptionFilterNode > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilterNode *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->NodeName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionFilterNode_1Username_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::WrappedServiceSubscriptionFilterNode *arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilterNode *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscriptionFilterNode > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilterNode *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Username = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionFilterNode_1Username_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::WrappedServiceSubscriptionFilterNode *arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilterNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscriptionFilterNode > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilterNode *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->Username);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionFilterNode_1Credentials_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedServiceSubscriptionFilterNode *arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilterNode *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > tempnull2 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > temp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElementData > *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscriptionFilterNode > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilterNode *)(smartarg1 ? smartarg1->get() : 0); 
  
  // intrusive_ptr by reference
  if ( jarg2 ) {
    smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElementData >**)&jarg2;
    temp2 = boost::intrusive_ptr<  RobotRaconteur::MessageElementData >(smartarg2->get(), true);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  if (arg1) (arg1)->Credentials = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionFilterNode_1Credentials_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSubscriptionFilterNode *arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilterNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscriptionFilterNode > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilterNode *)(smartarg1 ? smartarg1->get() : 0); 
  result = (boost::intrusive_ptr< RobotRaconteur::MessageElementData > *) & ((arg1)->Credentials);
  
  if (*result) {
    intrusive_ptr_add_ref(result->get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElementData > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElementData >(result->get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElementData >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElementData > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedServiceSubscriptionFilterNode(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSubscriptionFilterNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedServiceSubscriptionFilterNode *)new RobotRaconteur::WrappedServiceSubscriptionFilterNode();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscriptionFilterNode > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscriptionFilterNode >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedServiceSubscriptionFilterNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedServiceSubscriptionFilterNode *arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilterNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscriptionFilterNode > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilterNode *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionFilter_1Nodes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedServiceSubscriptionFilter *arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilter *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *arg2 = (std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilter > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscriptionFilter > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilter *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > **)&jarg2; 
  if (arg1) (arg1)->Nodes = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionFilter_1Nodes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSubscriptionFilter *arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilter *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilter > *smartarg1 = 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscriptionFilter > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilter *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > *)& ((arg1)->Nodes);
  *(std::vector< boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilterNode > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionFilter_1ServiceNames_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedServiceSubscriptionFilter *arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilter *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilter > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscriptionFilter > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilter *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->ServiceNames = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionFilter_1ServiceNames_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSubscriptionFilter *arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilter *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilter > *smartarg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscriptionFilter > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilter *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< std::string > *)& ((arg1)->ServiceNames);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionFilter_1TransportSchemes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedServiceSubscriptionFilter *arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilter *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilter > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscriptionFilter > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilter *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->TransportSchemes = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionFilter_1TransportSchemes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSubscriptionFilter *arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilter *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilter > *smartarg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscriptionFilter > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilter *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< std::string > *)& ((arg1)->TransportSchemes);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionFilter_1Attributes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedServiceSubscriptionFilter *arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilter *) 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup,std::less< std::string > > *arg2 = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup,std::less< std::string > > *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilter > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscriptionFilter > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilter *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup,std::less< std::string > > **)&jarg2; 
  if (arg1) (arg1)->Attributes = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionFilter_1Attributes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSubscriptionFilter *arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilter *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilter > *smartarg1 = 0 ;
  std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup,std::less< std::string > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscriptionFilter > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilter *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup,std::less< std::string > > *)& ((arg1)->Attributes);
  *(std::map< std::string,RobotRaconteur::ServiceSubscriptionFilterAttributeGroup,std::less< std::string > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionFilter_1AttributesMatchOperation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::WrappedServiceSubscriptionFilter *arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilter *) 0 ;
  RobotRaconteur::ServiceSubscriptionFilterAttributeGroupOperation arg2 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilter > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscriptionFilter > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilter *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (RobotRaconteur::ServiceSubscriptionFilterAttributeGroupOperation)jarg2; 
  if (arg1) (arg1)->AttributesMatchOperation = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionFilter_1AttributesMatchOperation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::WrappedServiceSubscriptionFilter *arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilter *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilter > *smartarg1 = 0 ;
  RobotRaconteur::ServiceSubscriptionFilterAttributeGroupOperation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscriptionFilter > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilter *)(smartarg1 ? smartarg1->get() : 0); 
  result = (RobotRaconteur::ServiceSubscriptionFilterAttributeGroupOperation) ((arg1)->AttributesMatchOperation);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionFilter_1setRRPredicateDirector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  RobotRaconteur::WrappedServiceSubscriptionFilter *arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilter *) 0 ;
  RobotRaconteur::WrappedServiceSubscriptionFilterPredicateDirector *arg2 = (RobotRaconteur::WrappedServiceSubscriptionFilterPredicateDirector *) 0 ;
  int32_t arg3 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilter > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscriptionFilter > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilter *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::WrappedServiceSubscriptionFilterPredicateDirector **)&jarg2; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      (arg1)->SetRRPredicateDirector(arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionFilter_1MaxConnections_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RobotRaconteur::WrappedServiceSubscriptionFilter *arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilter *) 0 ;
  uint32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilter > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscriptionFilter > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilter *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->MaxConnections = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionFilter_1MaxConnections_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSubscriptionFilter *arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilter *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilter > *smartarg1 = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscriptionFilter > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilter *)(smartarg1 ? smartarg1->get() : 0); 
  result = (uint32_t) ((arg1)->MaxConnections);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedServiceSubscriptionFilter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSubscriptionFilter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedServiceSubscriptionFilter *)new RobotRaconteur::WrappedServiceSubscriptionFilter();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscriptionFilter > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscriptionFilter >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedServiceSubscriptionFilter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedServiceSubscriptionFilter *arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilter *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilter > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscriptionFilter > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscriptionFilter *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionClientID_1NodeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::ServiceSubscriptionClientID *arg1 = (RobotRaconteur::ServiceSubscriptionClientID *) 0 ;
  ::RobotRaconteur::NodeID *arg2 = (::RobotRaconteur::NodeID *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::ServiceSubscriptionClientID **)&jarg1; 
  arg2 = *(::RobotRaconteur::NodeID **)&jarg2; 
  if (arg1) (arg1)->NodeID = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionClientID_1NodeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::ServiceSubscriptionClientID *arg1 = (RobotRaconteur::ServiceSubscriptionClientID *) 0 ;
  ::RobotRaconteur::NodeID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceSubscriptionClientID **)&jarg1; 
  result = (::RobotRaconteur::NodeID *)& ((arg1)->NodeID);
  *(::RobotRaconteur::NodeID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionClientID_1ServiceName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::ServiceSubscriptionClientID *arg1 = (RobotRaconteur::ServiceSubscriptionClientID *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceSubscriptionClientID **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->ServiceName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionClientID_1ServiceName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::ServiceSubscriptionClientID *arg1 = (RobotRaconteur::ServiceSubscriptionClientID *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::ServiceSubscriptionClientID **)&jarg1; 
  result = (std::string *) & ((arg1)->ServiceName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionClientID_1eq(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  RobotRaconteur::ServiceSubscriptionClientID *arg1 = (RobotRaconteur::ServiceSubscriptionClientID *) 0 ;
  RobotRaconteur::ServiceSubscriptionClientID *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::ServiceSubscriptionClientID **)&jarg1; 
  arg2 = *(RobotRaconteur::ServiceSubscriptionClientID **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::ServiceSubscriptionClientID const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (bool)((RobotRaconteur::ServiceSubscriptionClientID const *)arg1)->operator ==((RobotRaconteur::ServiceSubscriptionClientID const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionClientID_1ne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  RobotRaconteur::ServiceSubscriptionClientID *arg1 = (RobotRaconteur::ServiceSubscriptionClientID *) 0 ;
  RobotRaconteur::ServiceSubscriptionClientID *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::ServiceSubscriptionClientID **)&jarg1; 
  arg2 = *(RobotRaconteur::ServiceSubscriptionClientID **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::ServiceSubscriptionClientID const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (bool)((RobotRaconteur::ServiceSubscriptionClientID const *)arg1)->operator !=((RobotRaconteur::ServiceSubscriptionClientID const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedServiceSubscriptionClientID(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::ServiceSubscriptionClientID *arg1 = (RobotRaconteur::ServiceSubscriptionClientID *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::ServiceSubscriptionClientID **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceInfo2SubscriptionDirector_1serviceDetected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  RobotRaconteur::WrappedServiceInfo2SubscriptionDirector *arg1 = (RobotRaconteur::WrappedServiceInfo2SubscriptionDirector *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceInfo2Subscription > *arg2 = 0 ;
  RobotRaconteur::ServiceSubscriptionClientID *arg3 = 0 ;
  RobotRaconteur::ServiceInfo2Wrapped *arg4 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceInfo2Subscription > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(RobotRaconteur::WrappedServiceInfo2SubscriptionDirector **)&jarg1; 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceInfo2Subscription > **)&jarg2 : &tempnull2; 
  arg3 = *(RobotRaconteur::ServiceSubscriptionClientID **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::ServiceSubscriptionClientID const & reference is null");
    return ;
  } 
  arg4 = *(RobotRaconteur::ServiceInfo2Wrapped **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::ServiceInfo2Wrapped const & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->ServiceDetected((boost::shared_ptr< RobotRaconteur::WrappedServiceInfo2Subscription > const &)*arg2,(RobotRaconteur::ServiceSubscriptionClientID const &)*arg3,(RobotRaconteur::ServiceInfo2Wrapped const &)*arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceInfo2SubscriptionDirector_1serviceLost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  RobotRaconteur::WrappedServiceInfo2SubscriptionDirector *arg1 = (RobotRaconteur::WrappedServiceInfo2SubscriptionDirector *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceInfo2Subscription > *arg2 = 0 ;
  RobotRaconteur::ServiceSubscriptionClientID *arg3 = 0 ;
  RobotRaconteur::ServiceInfo2Wrapped *arg4 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceInfo2Subscription > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(RobotRaconteur::WrappedServiceInfo2SubscriptionDirector **)&jarg1; 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceInfo2Subscription > **)&jarg2 : &tempnull2; 
  arg3 = *(RobotRaconteur::ServiceSubscriptionClientID **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::ServiceSubscriptionClientID const & reference is null");
    return ;
  } 
  arg4 = *(RobotRaconteur::ServiceInfo2Wrapped **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::ServiceInfo2Wrapped const & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->ServiceLost((boost::shared_ptr< RobotRaconteur::WrappedServiceInfo2Subscription > const &)*arg2,(RobotRaconteur::ServiceSubscriptionClientID const &)*arg3,(RobotRaconteur::ServiceInfo2Wrapped const &)*arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedServiceInfo2SubscriptionDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedServiceInfo2SubscriptionDirector *arg1 = (RobotRaconteur::WrappedServiceInfo2SubscriptionDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedServiceInfo2SubscriptionDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedServiceInfo2SubscriptionDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceInfo2SubscriptionDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedServiceInfo2SubscriptionDirector *)new SwigDirector_WrappedServiceInfo2SubscriptionDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedServiceInfo2SubscriptionDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceInfo2SubscriptionDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::WrappedServiceInfo2SubscriptionDirector *obj = *((RobotRaconteur::WrappedServiceInfo2SubscriptionDirector **)&objarg);
  (void)jcls;
  SwigDirector_WrappedServiceInfo2SubscriptionDirector *director = static_cast<SwigDirector_WrappedServiceInfo2SubscriptionDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceInfo2SubscriptionDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::WrappedServiceInfo2SubscriptionDirector *obj = *((RobotRaconteur::WrappedServiceInfo2SubscriptionDirector **)&objarg);
  SwigDirector_WrappedServiceInfo2SubscriptionDirector *director = dynamic_cast<SwigDirector_WrappedServiceInfo2SubscriptionDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceInfo2Subscription_1getDetectedServiceInfo2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceInfo2Subscription *arg1 = (RobotRaconteur::WrappedServiceInfo2Subscription *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceInfo2Subscription > *smartarg1 = 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped,std::less< RobotRaconteur::ServiceSubscriptionClientID > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceInfo2Subscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceInfo2Subscription *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetDetectedServiceInfo2();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped,std::less< RobotRaconteur::ServiceSubscriptionClientID > > **)&jresult = new std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped,std::less< RobotRaconteur::ServiceSubscriptionClientID > >((const std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped,std::less< RobotRaconteur::ServiceSubscriptionClientID > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceInfo2Subscription_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::WrappedServiceInfo2Subscription *arg1 = (RobotRaconteur::WrappedServiceInfo2Subscription *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceInfo2Subscription > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceInfo2Subscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceInfo2Subscription *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->Close();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceInfo2Subscription_1setRRDirector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  RobotRaconteur::WrappedServiceInfo2Subscription *arg1 = (RobotRaconteur::WrappedServiceInfo2Subscription *) 0 ;
  RobotRaconteur::WrappedServiceInfo2SubscriptionDirector *arg2 = (RobotRaconteur::WrappedServiceInfo2SubscriptionDirector *) 0 ;
  int32_t arg3 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceInfo2Subscription > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceInfo2Subscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceInfo2Subscription *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::WrappedServiceInfo2SubscriptionDirector **)&jarg2; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      (arg1)->SetRRDirector(arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceInfo2Subscription_1getNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceInfo2Subscription *arg1 = (RobotRaconteur::WrappedServiceInfo2Subscription *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceInfo2Subscription > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceInfo2Subscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceInfo2Subscription *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetNode();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::RobotRaconteurNode >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedServiceInfo2Subscription(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedServiceInfo2Subscription *arg1 = (RobotRaconteur::WrappedServiceInfo2Subscription *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceInfo2Subscription > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceInfo2Subscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceInfo2Subscription *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionDirector_1clientConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  RobotRaconteur::WrappedServiceSubscriptionDirector *arg1 = (RobotRaconteur::WrappedServiceSubscriptionDirector *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *arg2 = 0 ;
  RobotRaconteur::ServiceSubscriptionClientID *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *arg4 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > tempnull2 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > tempnull4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(RobotRaconteur::WrappedServiceSubscriptionDirector **)&jarg1; 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > **)&jarg2 : &tempnull2; 
  arg3 = *(RobotRaconteur::ServiceSubscriptionClientID **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::ServiceSubscriptionClientID const & reference is null");
    return ;
  } 
  arg4 = jarg4 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jarg4 : &tempnull4; 
  {
    try
    {
      (arg1)->ClientConnected((boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > const &)*arg2,(RobotRaconteur::ServiceSubscriptionClientID const &)*arg3,(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &)*arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionDirector_1clientDisconnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  RobotRaconteur::WrappedServiceSubscriptionDirector *arg1 = (RobotRaconteur::WrappedServiceSubscriptionDirector *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *arg2 = 0 ;
  RobotRaconteur::ServiceSubscriptionClientID *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *arg4 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > tempnull2 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > tempnull4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(RobotRaconteur::WrappedServiceSubscriptionDirector **)&jarg1; 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > **)&jarg2 : &tempnull2; 
  arg3 = *(RobotRaconteur::ServiceSubscriptionClientID **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::ServiceSubscriptionClientID const & reference is null");
    return ;
  } 
  arg4 = jarg4 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jarg4 : &tempnull4; 
  {
    try
    {
      (arg1)->ClientDisconnected((boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > const &)*arg2,(RobotRaconteur::ServiceSubscriptionClientID const &)*arg3,(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &)*arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionDirector_1clientConnectFailed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  RobotRaconteur::WrappedServiceSubscriptionDirector *arg1 = (RobotRaconteur::WrappedServiceSubscriptionDirector *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *arg2 = 0 ;
  RobotRaconteur::ServiceSubscriptionClientID *arg3 = 0 ;
  std::vector< std::string > *arg4 = 0 ;
  RobotRaconteur::HandlerErrorInfo *arg5 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(RobotRaconteur::WrappedServiceSubscriptionDirector **)&jarg1; 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > **)&jarg2 : &tempnull2; 
  arg3 = *(RobotRaconteur::ServiceSubscriptionClientID **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::ServiceSubscriptionClientID const & reference is null");
    return ;
  } 
  arg4 = *(std::vector< std::string > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ;
  } 
  arg5 = *(RobotRaconteur::HandlerErrorInfo **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::HandlerErrorInfo & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->ClientConnectFailed((boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > const &)*arg2,(RobotRaconteur::ServiceSubscriptionClientID const &)*arg3,(std::vector< std::string > const &)*arg4,*arg5);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedServiceSubscriptionDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedServiceSubscriptionDirector *arg1 = (RobotRaconteur::WrappedServiceSubscriptionDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedServiceSubscriptionDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedServiceSubscriptionDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSubscriptionDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedServiceSubscriptionDirector *)new SwigDirector_WrappedServiceSubscriptionDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedServiceSubscriptionDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::WrappedServiceSubscriptionDirector *obj = *((RobotRaconteur::WrappedServiceSubscriptionDirector **)&objarg);
  (void)jcls;
  SwigDirector_WrappedServiceSubscriptionDirector *director = static_cast<SwigDirector_WrappedServiceSubscriptionDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscriptionDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::WrappedServiceSubscriptionDirector *obj = *((RobotRaconteur::WrappedServiceSubscriptionDirector **)&objarg);
  SwigDirector_WrappedServiceSubscriptionDirector *director = dynamic_cast<SwigDirector_WrappedServiceSubscriptionDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1TryDefaultClientRes_1res_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RobotRaconteur::WrappedServiceSubscription_TryDefaultClientRes *arg1 = (RobotRaconteur::WrappedServiceSubscription_TryDefaultClientRes *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedServiceSubscription_TryDefaultClientRes **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->res = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1TryDefaultClientRes_1res_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::WrappedServiceSubscription_TryDefaultClientRes *arg1 = (RobotRaconteur::WrappedServiceSubscription_TryDefaultClientRes *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedServiceSubscription_TryDefaultClientRes **)&jarg1; 
  result = (bool) ((arg1)->res);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1TryDefaultClientRes_1client_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedServiceSubscription_TryDefaultClientRes *arg1 = (RobotRaconteur::WrappedServiceSubscription_TryDefaultClientRes *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::WrappedServiceSubscription_TryDefaultClientRes **)&jarg1; 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->client = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1TryDefaultClientRes_1client_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSubscription_TryDefaultClientRes *arg1 = (RobotRaconteur::WrappedServiceSubscription_TryDefaultClientRes *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedServiceSubscription_TryDefaultClientRes **)&jarg1; 
  result = (boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *) & ((arg1)->client);
  *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jresult = *result ? new boost::shared_ptr< RobotRaconteur::WrappedServiceStub >(*result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedServiceSubscription_1TryDefaultClientRes(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSubscription_TryDefaultClientRes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedServiceSubscription_TryDefaultClientRes *)new RobotRaconteur::WrappedServiceSubscription_TryDefaultClientRes();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedServiceSubscription_TryDefaultClientRes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedServiceSubscription_1TryDefaultClientRes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedServiceSubscription_TryDefaultClientRes *arg1 = (RobotRaconteur::WrappedServiceSubscription_TryDefaultClientRes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedServiceSubscription_TryDefaultClientRes **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1getConnectedClients(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSubscription *arg1 = (RobotRaconteur::WrappedServiceSubscription *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *smartarg1 = 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub >,std::less< RobotRaconteur::ServiceSubscriptionClientID > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetConnectedClients();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub >,std::less< RobotRaconteur::ServiceSubscriptionClientID > > **)&jresult = new std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub >,std::less< RobotRaconteur::ServiceSubscriptionClientID > >((const std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub >,std::less< RobotRaconteur::ServiceSubscriptionClientID > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::WrappedServiceSubscription *arg1 = (RobotRaconteur::WrappedServiceSubscription *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->Close();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1claimClient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedServiceSubscription *arg1 = (RobotRaconteur::WrappedServiceSubscription *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jarg2 : &tempnull2; 
  {
    try
    {
      (arg1)->ClaimClient((boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1releaseClient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedServiceSubscription *arg1 = (RobotRaconteur::WrappedServiceSubscription *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jarg2 : &tempnull2; 
  {
    try
    {
      (arg1)->ReleaseClient((boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1getConnectRetryDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSubscription *arg1 = (RobotRaconteur::WrappedServiceSubscription *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *smartarg1 = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (uint32_t)(arg1)->GetConnectRetryDelay();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1setConnectRetryDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RobotRaconteur::WrappedServiceSubscription *arg1 = (RobotRaconteur::WrappedServiceSubscription *) 0 ;
  uint32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  {
    try
    {
      (arg1)->SetConnectRetryDelay(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1subscribeWire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSubscription *arg1 = (RobotRaconteur::WrappedServiceSubscription *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireSubscription > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try
    {
      result = (arg1)->SubscribeWire((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedWireSubscription > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedWireSubscription >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1subscribePipe_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSubscription *arg1 = (RobotRaconteur::WrappedServiceSubscription *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t arg4 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeSubscription > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int32_t)jarg4; 
  {
    try
    {
      result = (arg1)->SubscribePipe((std::string const &)*arg2,(std::string const &)*arg3,arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedPipeSubscription > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedPipeSubscription >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1subscribePipe_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSubscription *arg1 = (RobotRaconteur::WrappedServiceSubscription *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeSubscription > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try
    {
      result = (arg1)->SubscribePipe((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedPipeSubscription > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedPipeSubscription >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1getDefaultClient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSubscription *arg1 = (RobotRaconteur::WrappedServiceSubscription *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetDefaultClient();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedServiceStub >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1tryGetDefaultClient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSubscription *arg1 = (RobotRaconteur::WrappedServiceSubscription *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *smartarg1 = 0 ;
  RobotRaconteur::WrappedServiceSubscription_TryDefaultClientRes result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->TryGetDefaultClient();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedServiceSubscription_TryDefaultClientRes **)&jresult = new RobotRaconteur::WrappedServiceSubscription_TryDefaultClientRes((const RobotRaconteur::WrappedServiceSubscription_TryDefaultClientRes &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1getDefaultClientWait_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSubscription *arg1 = (RobotRaconteur::WrappedServiceSubscription *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = (arg1)->GetDefaultClientWait(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedServiceStub >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1getDefaultClientWait_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSubscription *arg1 = (RobotRaconteur::WrappedServiceSubscription *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetDefaultClientWait();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedServiceStub >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1tryGetDefaultClientWait_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSubscription *arg1 = (RobotRaconteur::WrappedServiceSubscription *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *smartarg1 = 0 ;
  RobotRaconteur::WrappedServiceSubscription_TryDefaultClientRes result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = (arg1)->TryGetDefaultClientWait(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedServiceSubscription_TryDefaultClientRes **)&jresult = new RobotRaconteur::WrappedServiceSubscription_TryDefaultClientRes((const RobotRaconteur::WrappedServiceSubscription_TryDefaultClientRes &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1tryGetDefaultClientWait_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSubscription *arg1 = (RobotRaconteur::WrappedServiceSubscription *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *smartarg1 = 0 ;
  RobotRaconteur::WrappedServiceSubscription_TryDefaultClientRes result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->TryGetDefaultClientWait();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedServiceSubscription_TryDefaultClientRes **)&jresult = new RobotRaconteur::WrappedServiceSubscription_TryDefaultClientRes((const RobotRaconteur::WrappedServiceSubscription_TryDefaultClientRes &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1asyncGetDefaultClient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  RobotRaconteur::WrappedServiceSubscription *arg1 = (RobotRaconteur::WrappedServiceSubscription *) 0 ;
  int32_t arg2 ;
  RobotRaconteur::AsyncStubReturnDirector *arg3 = (RobotRaconteur::AsyncStubReturnDirector *) 0 ;
  int32_t arg4 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  arg3 = *(RobotRaconteur::AsyncStubReturnDirector **)&jarg3; 
  arg4 = (int32_t)jarg4; 
  {
    try
    {
      (arg1)->AsyncGetDefaultClient(arg2,arg3,arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1setRRDirector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  RobotRaconteur::WrappedServiceSubscription *arg1 = (RobotRaconteur::WrappedServiceSubscription *) 0 ;
  RobotRaconteur::WrappedServiceSubscriptionDirector *arg2 = (RobotRaconteur::WrappedServiceSubscriptionDirector *) 0 ;
  int32_t arg3 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::WrappedServiceSubscriptionDirector **)&jarg2; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      (arg1)->SetRRDirector(arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1getNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSubscription *arg1 = (RobotRaconteur::WrappedServiceSubscription *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetNode();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::RobotRaconteurNode >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1getServiceURL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedServiceSubscription *arg1 = (RobotRaconteur::WrappedServiceSubscription *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *smartarg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetServiceURL();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1updateServiceURL_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_, jstring jarg5, jboolean jarg6) {
  RobotRaconteur::WrappedServiceSubscription *arg1 = (RobotRaconteur::WrappedServiceSubscription *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > arg4 ;
  std::string *arg5 = 0 ;
  bool arg6 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > *argp4 ;
  boost::shared_ptr< RobotRaconteur::MessageElementData > *smartarg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  
  // intrusive_ptr by value
  smartarg4 = *(boost::shared_ptr<  RobotRaconteur::MessageElementData >**)&jarg4;
  if (smartarg4) {
    arg4 = boost::intrusive_ptr<  RobotRaconteur::MessageElementData >(smartarg4->get(), true);
  }
  
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = jarg6 ? true : false; 
  {
    try
    {
      (arg1)->UpdateServiceURL((std::vector< std::string > const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5,arg6);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1updateServiceURL_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_, jstring jarg5) {
  RobotRaconteur::WrappedServiceSubscription *arg1 = (RobotRaconteur::WrappedServiceSubscription *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > arg4 ;
  std::string *arg5 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > *argp4 ;
  boost::shared_ptr< RobotRaconteur::MessageElementData > *smartarg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  
  // intrusive_ptr by value
  smartarg4 = *(boost::shared_ptr<  RobotRaconteur::MessageElementData >**)&jarg4;
  if (smartarg4) {
    arg4 = boost::intrusive_ptr<  RobotRaconteur::MessageElementData >(smartarg4->get(), true);
  }
  
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  {
    try
    {
      (arg1)->UpdateServiceURL((std::vector< std::string > const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1updateServiceURL_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_) {
  RobotRaconteur::WrappedServiceSubscription *arg1 = (RobotRaconteur::WrappedServiceSubscription *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > arg4 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > *argp4 ;
  boost::shared_ptr< RobotRaconteur::MessageElementData > *smartarg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  
  // intrusive_ptr by value
  smartarg4 = *(boost::shared_ptr<  RobotRaconteur::MessageElementData >**)&jarg4;
  if (smartarg4) {
    arg4 = boost::intrusive_ptr<  RobotRaconteur::MessageElementData >(smartarg4->get(), true);
  }
  
  {
    try
    {
      (arg1)->UpdateServiceURL((std::vector< std::string > const &)*arg2,(std::string const &)*arg3,arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1updateServiceURL_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  RobotRaconteur::WrappedServiceSubscription *arg1 = (RobotRaconteur::WrappedServiceSubscription *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try
    {
      (arg1)->UpdateServiceURL((std::vector< std::string > const &)*arg2,(std::string const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1updateServiceURL_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedServiceSubscription *arg1 = (RobotRaconteur::WrappedServiceSubscription *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->UpdateServiceURL((std::vector< std::string > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1updateServiceURL_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jstring jarg5, jboolean jarg6) {
  RobotRaconteur::WrappedServiceSubscription *arg1 = (RobotRaconteur::WrappedServiceSubscription *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > arg4 ;
  std::string *arg5 = 0 ;
  bool arg6 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > *argp4 ;
  boost::shared_ptr< RobotRaconteur::MessageElementData > *smartarg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  
  // intrusive_ptr by value
  smartarg4 = *(boost::shared_ptr<  RobotRaconteur::MessageElementData >**)&jarg4;
  if (smartarg4) {
    arg4 = boost::intrusive_ptr<  RobotRaconteur::MessageElementData >(smartarg4->get(), true);
  }
  
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = jarg6 ? true : false; 
  {
    try
    {
      (arg1)->UpdateServiceURL((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5,arg6);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1updateServiceURL_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jstring jarg5) {
  RobotRaconteur::WrappedServiceSubscription *arg1 = (RobotRaconteur::WrappedServiceSubscription *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > arg4 ;
  std::string *arg5 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > *argp4 ;
  boost::shared_ptr< RobotRaconteur::MessageElementData > *smartarg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  
  // intrusive_ptr by value
  smartarg4 = *(boost::shared_ptr<  RobotRaconteur::MessageElementData >**)&jarg4;
  if (smartarg4) {
    arg4 = boost::intrusive_ptr<  RobotRaconteur::MessageElementData >(smartarg4->get(), true);
  }
  
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  {
    try
    {
      (arg1)->UpdateServiceURL((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1updateServiceURL_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  RobotRaconteur::WrappedServiceSubscription *arg1 = (RobotRaconteur::WrappedServiceSubscription *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > arg4 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > *argp4 ;
  boost::shared_ptr< RobotRaconteur::MessageElementData > *smartarg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  
  // intrusive_ptr by value
  smartarg4 = *(boost::shared_ptr<  RobotRaconteur::MessageElementData >**)&jarg4;
  if (smartarg4) {
    arg4 = boost::intrusive_ptr<  RobotRaconteur::MessageElementData >(smartarg4->get(), true);
  }
  
  {
    try
    {
      (arg1)->UpdateServiceURL((std::string const &)*arg2,(std::string const &)*arg3,arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1updateServiceURL_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  RobotRaconteur::WrappedServiceSubscription *arg1 = (RobotRaconteur::WrappedServiceSubscription *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try
    {
      (arg1)->UpdateServiceURL((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1updateServiceURL_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::WrappedServiceSubscription *arg1 = (RobotRaconteur::WrappedServiceSubscription *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      (arg1)->UpdateServiceURL((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1updateServiceByType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  RobotRaconteur::WrappedServiceSubscription *arg1 = (RobotRaconteur::WrappedServiceSubscription *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilter > *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilter > tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ;
  } 
  arg3 = jarg3 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilter > **)&jarg3 : &tempnull3; 
  {
    try
    {
      (arg1)->UpdateServiceByType((std::vector< std::string > const &)*arg2,(boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilter > const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceSubscription_1updateServiceByType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedServiceSubscription *arg1 = (RobotRaconteur::WrappedServiceSubscription *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->UpdateServiceByType((std::vector< std::string > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedServiceSubscription(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedServiceSubscription *arg1 = (RobotRaconteur::WrappedServiceSubscription *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedServiceSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedServiceSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireSubscriptionDirector_1wireValueChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  RobotRaconteur::WrappedWireSubscriptionDirector *arg1 = (RobotRaconteur::WrappedWireSubscriptionDirector *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireSubscription > *arg2 = 0 ;
  RobotRaconteur::WrappedService_typed_packet *arg3 = 0 ;
  RobotRaconteur::TimeSpec *arg4 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireSubscription > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(RobotRaconteur::WrappedWireSubscriptionDirector **)&jarg1; 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedWireSubscription > **)&jarg2 : &tempnull2; 
  arg3 = *(RobotRaconteur::WrappedService_typed_packet **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::WrappedService_typed_packet & reference is null");
    return ;
  } 
  arg4 = *(RobotRaconteur::TimeSpec **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::TimeSpec const & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->WireValueChanged((boost::shared_ptr< RobotRaconteur::WrappedWireSubscription > const &)*arg2,*arg3,(RobotRaconteur::TimeSpec const &)*arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedWireSubscriptionDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedWireSubscriptionDirector *arg1 = (RobotRaconteur::WrappedWireSubscriptionDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedWireSubscriptionDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedWireSubscriptionDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedWireSubscriptionDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedWireSubscriptionDirector *)new SwigDirector_WrappedWireSubscriptionDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedWireSubscriptionDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireSubscriptionDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::WrappedWireSubscriptionDirector *obj = *((RobotRaconteur::WrappedWireSubscriptionDirector **)&objarg);
  (void)jcls;
  SwigDirector_WrappedWireSubscriptionDirector *director = static_cast<SwigDirector_WrappedWireSubscriptionDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireSubscriptionDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::WrappedWireSubscriptionDirector *obj = *((RobotRaconteur::WrappedWireSubscriptionDirector **)&objarg);
  SwigDirector_WrappedWireSubscriptionDirector *director = dynamic_cast<SwigDirector_WrappedWireSubscriptionDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireSubscription_1getInValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedWireSubscription *arg1 = (RobotRaconteur::WrappedWireSubscription *) 0 ;
  RobotRaconteur::TimeSpec *arg2 = (RobotRaconteur::TimeSpec *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireSubscription > *smartarg1 = 0 ;
  RobotRaconteur::WrappedService_typed_packet result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::TimeSpec **)&jarg2; 
  {
    try
    {
      result = (arg1)->GetInValue(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedService_typed_packet **)&jresult = new RobotRaconteur::WrappedService_typed_packet((const RobotRaconteur::WrappedService_typed_packet &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireSubscription_1getInValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedWireSubscription *arg1 = (RobotRaconteur::WrappedWireSubscription *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireSubscription > *smartarg1 = 0 ;
  RobotRaconteur::WrappedService_typed_packet result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetInValue();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedService_typed_packet **)&jresult = new RobotRaconteur::WrappedService_typed_packet((const RobotRaconteur::WrappedService_typed_packet &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireSubscription_1tryGetInValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  RobotRaconteur::WrappedWireSubscription *arg1 = (RobotRaconteur::WrappedWireSubscription *) 0 ;
  RobotRaconteur::WrappedService_typed_packet *arg2 = 0 ;
  RobotRaconteur::TimeSpec *arg3 = (RobotRaconteur::TimeSpec *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireSubscription > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::WrappedService_typed_packet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::WrappedService_typed_packet & reference is null");
    return 0;
  } 
  arg3 = *(RobotRaconteur::TimeSpec **)&jarg3; 
  {
    try
    {
      result = (bool)(arg1)->TryGetInValue(*arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireSubscription_1tryGetInValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  RobotRaconteur::WrappedWireSubscription *arg1 = (RobotRaconteur::WrappedWireSubscription *) 0 ;
  RobotRaconteur::WrappedService_typed_packet *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireSubscription > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::WrappedService_typed_packet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::WrappedService_typed_packet & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (bool)(arg1)->TryGetInValue(*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireSubscription_1waitInValueValid_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  RobotRaconteur::WrappedWireSubscription *arg1 = (RobotRaconteur::WrappedWireSubscription *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireSubscription > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = (bool)(arg1)->WaitInValueValid(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireSubscription_1waitInValueValid_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::WrappedWireSubscription *arg1 = (RobotRaconteur::WrappedWireSubscription *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireSubscription > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)(arg1)->WaitInValueValid();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireSubscription_1getIgnoreInValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::WrappedWireSubscription *arg1 = (RobotRaconteur::WrappedWireSubscription *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireSubscription > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)(arg1)->GetIgnoreInValue();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireSubscription_1setIgnoreInValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RobotRaconteur::WrappedWireSubscription *arg1 = (RobotRaconteur::WrappedWireSubscription *) 0 ;
  bool arg2 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireSubscription > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      (arg1)->SetIgnoreInValue(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireSubscription_1getInValueLifespan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::WrappedWireSubscription *arg1 = (RobotRaconteur::WrappedWireSubscription *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireSubscription > *smartarg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (int32_t)(arg1)->GetInValueLifespan();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireSubscription_1setInValueLifespan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::WrappedWireSubscription *arg1 = (RobotRaconteur::WrappedWireSubscription *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireSubscription > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      (arg1)->SetInValueLifespan(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireSubscription_1getActiveWireConnectionCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedWireSubscription *arg1 = (RobotRaconteur::WrappedWireSubscription *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireSubscription > *smartarg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetActiveWireConnectionCount();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireSubscription_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::WrappedWireSubscription *arg1 = (RobotRaconteur::WrappedWireSubscription *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireSubscription > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->Close();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireSubscription_1setRRDirector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  RobotRaconteur::WrappedWireSubscription *arg1 = (RobotRaconteur::WrappedWireSubscription *) 0 ;
  RobotRaconteur::WrappedWireSubscriptionDirector *arg2 = (RobotRaconteur::WrappedWireSubscriptionDirector *) 0 ;
  int32_t arg3 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireSubscription > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::WrappedWireSubscriptionDirector **)&jarg2; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      (arg1)->SetRRDirector(arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireSubscription_1getNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedWireSubscription *arg1 = (RobotRaconteur::WrappedWireSubscription *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireSubscription > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetNode();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::RobotRaconteurNode >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedWireSubscription(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedWireSubscription *arg1 = (RobotRaconteur::WrappedWireSubscription *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireSubscription > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedWireSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedWireSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedWireSubscription_1send_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireSubscription > *arg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireSubscription > tempnull1 ;
  RobotRaconteur::WrappedWireSubscription_send_iterator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::WrappedWireSubscription > **)&jarg1 : &tempnull1; 
  {
    try
    {
      result = (RobotRaconteur::WrappedWireSubscription_send_iterator *)new RobotRaconteur::WrappedWireSubscription_send_iterator((boost::shared_ptr< RobotRaconteur::WrappedWireSubscription > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedWireSubscription_send_iterator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireSubscription_1send_1iterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedWireSubscription_send_iterator *arg1 = (RobotRaconteur::WrappedWireSubscription_send_iterator *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireConnection > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedWireSubscription_send_iterator **)&jarg1; 
  {
    try
    {
      result = (arg1)->Next();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedWireConnection > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedWireConnection >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireSubscription_1send_1iterator_1setOutValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedWireSubscription_send_iterator *arg1 = (RobotRaconteur::WrappedWireSubscription_send_iterator *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *arg2 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > tempnull2 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > temp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::WrappedWireSubscription_send_iterator **)&jarg1; 
  
  // intrusive_ptr by reference
  if ( jarg2 ) {
    smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg2;
    temp2 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg2->get(), true);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  {
    try
    {
      (arg1)->SetOutValue((boost::intrusive_ptr< RobotRaconteur::MessageElement > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireSubscription_1send_1iterator_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedWireSubscription_send_iterator *arg1 = (RobotRaconteur::WrappedWireSubscription_send_iterator *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedWireSubscription_send_iterator **)&jarg1; 
  {
    try
    {
      result = (arg1)->GetType();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::TypeDefinition > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::TypeDefinition >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedWireSubscription_1send_1iterator_1getStub(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedWireSubscription_send_iterator *arg1 = (RobotRaconteur::WrappedWireSubscription_send_iterator *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedWireSubscription_send_iterator **)&jarg1; 
  {
    try
    {
      result = (arg1)->GetStub();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedServiceStub >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedWireSubscription_1send_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedWireSubscription_send_iterator *arg1 = (RobotRaconteur::WrappedWireSubscription_send_iterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedWireSubscription_send_iterator **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeSubscriptionDirector_1pipePacketReceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedPipeSubscriptionDirector *arg1 = (RobotRaconteur::WrappedPipeSubscriptionDirector *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeSubscription > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeSubscription > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::WrappedPipeSubscriptionDirector **)&jarg1; 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedPipeSubscription > **)&jarg2 : &tempnull2; 
  {
    try
    {
      (arg1)->PipePacketReceived((boost::shared_ptr< RobotRaconteur::WrappedPipeSubscription > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedPipeSubscriptionDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedPipeSubscriptionDirector *arg1 = (RobotRaconteur::WrappedPipeSubscriptionDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedPipeSubscriptionDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedPipeSubscriptionDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPipeSubscriptionDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::WrappedPipeSubscriptionDirector *)new SwigDirector_WrappedPipeSubscriptionDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedPipeSubscriptionDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeSubscriptionDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::WrappedPipeSubscriptionDirector *obj = *((RobotRaconteur::WrappedPipeSubscriptionDirector **)&objarg);
  (void)jcls;
  SwigDirector_WrappedPipeSubscriptionDirector *director = static_cast<SwigDirector_WrappedPipeSubscriptionDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeSubscriptionDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::WrappedPipeSubscriptionDirector *obj = *((RobotRaconteur::WrappedPipeSubscriptionDirector **)&objarg);
  SwigDirector_WrappedPipeSubscriptionDirector *director = dynamic_cast<SwigDirector_WrappedPipeSubscriptionDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeSubscription_1receivePacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPipeSubscription *arg1 = (RobotRaconteur::WrappedPipeSubscription *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeSubscription > *smartarg1 = 0 ;
  RobotRaconteur::WrappedService_typed_packet result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->ReceivePacket();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedService_typed_packet **)&jresult = new RobotRaconteur::WrappedService_typed_packet((const RobotRaconteur::WrappedService_typed_packet &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeSubscription_1tryReceivePacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  RobotRaconteur::WrappedPipeSubscription *arg1 = (RobotRaconteur::WrappedPipeSubscription *) 0 ;
  RobotRaconteur::WrappedService_typed_packet *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeSubscription > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::WrappedService_typed_packet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::WrappedService_typed_packet & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (bool)(arg1)->TryReceivePacket(*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeSubscription_1tryReceivePacketWait_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  RobotRaconteur::WrappedPipeSubscription *arg1 = (RobotRaconteur::WrappedPipeSubscription *) 0 ;
  RobotRaconteur::WrappedService_typed_packet *arg2 = 0 ;
  int32_t arg3 ;
  bool arg4 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeSubscription > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::WrappedService_typed_packet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::WrappedService_typed_packet & reference is null");
    return 0;
  } 
  arg3 = (int32_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    try
    {
      result = (bool)(arg1)->TryReceivePacketWait(*arg2,arg3,arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeSubscription_1tryReceivePacketWait_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jboolean jresult = 0 ;
  RobotRaconteur::WrappedPipeSubscription *arg1 = (RobotRaconteur::WrappedPipeSubscription *) 0 ;
  RobotRaconteur::WrappedService_typed_packet *arg2 = 0 ;
  int32_t arg3 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeSubscription > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::WrappedService_typed_packet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::WrappedService_typed_packet & reference is null");
    return 0;
  } 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      result = (bool)(arg1)->TryReceivePacketWait(*arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeSubscription_1tryReceivePacketWait_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  RobotRaconteur::WrappedPipeSubscription *arg1 = (RobotRaconteur::WrappedPipeSubscription *) 0 ;
  RobotRaconteur::WrappedService_typed_packet *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeSubscription > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::WrappedService_typed_packet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::WrappedService_typed_packet & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (bool)(arg1)->TryReceivePacketWait(*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeSubscription_1available(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPipeSubscription *arg1 = (RobotRaconteur::WrappedPipeSubscription *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeSubscription > *smartarg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->Available();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeSubscription_1getActivePipeEndpointCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPipeSubscription *arg1 = (RobotRaconteur::WrappedPipeSubscription *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeSubscription > *smartarg1 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetActivePipeEndpointCount();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeSubscription_1getIgnoreReceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RobotRaconteur::WrappedPipeSubscription *arg1 = (RobotRaconteur::WrappedPipeSubscription *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeSubscription > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)(arg1)->GetIgnoreReceived();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeSubscription_1setIgnoreReceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RobotRaconteur::WrappedPipeSubscription *arg1 = (RobotRaconteur::WrappedPipeSubscription *) 0 ;
  bool arg2 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeSubscription > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      (arg1)->SetIgnoreReceived(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeSubscription_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::WrappedPipeSubscription *arg1 = (RobotRaconteur::WrappedPipeSubscription *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeSubscription > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->Close();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeSubscription_1setRRDirector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  RobotRaconteur::WrappedPipeSubscription *arg1 = (RobotRaconteur::WrappedPipeSubscription *) 0 ;
  RobotRaconteur::WrappedPipeSubscriptionDirector *arg2 = (RobotRaconteur::WrappedPipeSubscriptionDirector *) 0 ;
  int32_t arg3 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeSubscription > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::WrappedPipeSubscriptionDirector **)&jarg2; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      (arg1)->SetRRDirector(arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeSubscription_1getNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPipeSubscription *arg1 = (RobotRaconteur::WrappedPipeSubscription *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeSubscription > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetNode();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::RobotRaconteurNode >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedPipeSubscription(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedPipeSubscription *arg1 = (RobotRaconteur::WrappedPipeSubscription *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeSubscription > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::WrappedPipeSubscription > **)&jarg1;
  arg1 = (RobotRaconteur::WrappedPipeSubscription *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedPipeSubscription_1send_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeSubscription > *arg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeSubscription > tempnull1 ;
  RobotRaconteur::WrappedPipeSubscription_send_iterator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::WrappedPipeSubscription > **)&jarg1 : &tempnull1; 
  {
    try
    {
      result = (RobotRaconteur::WrappedPipeSubscription_send_iterator *)new RobotRaconteur::WrappedPipeSubscription_send_iterator((boost::shared_ptr< RobotRaconteur::WrappedPipeSubscription > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::WrappedPipeSubscription_send_iterator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeSubscription_1send_1iterator_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPipeSubscription_send_iterator *arg1 = (RobotRaconteur::WrappedPipeSubscription_send_iterator *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedPipeSubscription_send_iterator **)&jarg1; 
  {
    try
    {
      result = (arg1)->Next();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeSubscription_1send_1iterator_1asyncSendPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::WrappedPipeSubscription_send_iterator *arg1 = (RobotRaconteur::WrappedPipeSubscription_send_iterator *) 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > *arg2 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > tempnull2 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > temp2 ;
  boost::shared_ptr< RobotRaconteur::MessageElement > *smartarg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::WrappedPipeSubscription_send_iterator **)&jarg1; 
  
  // intrusive_ptr by reference
  if ( jarg2 ) {
    smartarg2 = *(boost::shared_ptr<  RobotRaconteur::MessageElement >**)&jarg2;
    temp2 = boost::intrusive_ptr<  RobotRaconteur::MessageElement >(smartarg2->get(), true);
    arg2 = &temp2;
  } else {
    arg2 = &tempnull2;
  }
  
  {
    try
    {
      (arg1)->AsyncSendPacket((boost::intrusive_ptr< RobotRaconteur::MessageElement > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeSubscription_1send_1iterator_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPipeSubscription_send_iterator *arg1 = (RobotRaconteur::WrappedPipeSubscription_send_iterator *) 0 ;
  boost::shared_ptr< RobotRaconteur::TypeDefinition > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedPipeSubscription_send_iterator **)&jarg1; 
  {
    try
    {
      result = (arg1)->GetType();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::TypeDefinition > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::TypeDefinition >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedPipeSubscription_1send_1iterator_1getStub(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::WrappedPipeSubscription_send_iterator *arg1 = (RobotRaconteur::WrappedPipeSubscription_send_iterator *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::WrappedPipeSubscription_send_iterator **)&jarg1; 
  {
    try
    {
      result = (arg1)->GetStub();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedServiceStub >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedPipeSubscription_1send_1iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::WrappedPipeSubscription_send_iterator *arg1 = (RobotRaconteur::WrappedPipeSubscription_send_iterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::WrappedPipeSubscription_send_iterator **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_wrappedServiceInfo2SubscriptionServicesToVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped,std::less< RobotRaconteur::ServiceSubscriptionClientID > > *arg1 = 0 ;
  std::vector< RobotRaconteur::ServiceSubscriptionClientID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped,std::less< RobotRaconteur::ServiceSubscriptionClientID > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< RobotRaconteur::ServiceSubscriptionClientID,RobotRaconteur::ServiceInfo2Wrapped,std::less< RobotRaconteur::ServiceSubscriptionClientID > > & reference is null");
    return 0;
  } 
  {
    try
    {
      result = RobotRaconteur::WrappedServiceInfo2SubscriptionServicesToVector(*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::ServiceSubscriptionClientID > **)&jresult = new std::vector< RobotRaconteur::ServiceSubscriptionClientID >((const std::vector< RobotRaconteur::ServiceSubscriptionClientID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_wrappedSubscribeServiceInfo2_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *arg1 = 0 ;
  std::vector< std::string > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilter > arg3 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > tempnull1 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilter > *argp3 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceInfo2Subscription > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jarg1 : &tempnull1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  argp3 = *(boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilter > **)&jarg3;
  if (argp3) arg3 = *argp3; 
  {
    try
    {
      result = RobotRaconteur::WrappedSubscribeServiceInfo2((boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &)*arg1,(std::vector< std::string > const &)*arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedServiceInfo2Subscription > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedServiceInfo2Subscription >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_wrappedSubscribeServiceInfo2_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *arg1 = 0 ;
  std::vector< std::string > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > tempnull1 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceInfo2Subscription > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jarg1 : &tempnull1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = RobotRaconteur::WrappedSubscribeServiceInfo2((boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &)*arg1,(std::vector< std::string > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedServiceInfo2Subscription > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedServiceInfo2Subscription >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_wrappedServiceSubscriptionClientsToVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub >,std::less< RobotRaconteur::ServiceSubscriptionClientID > > *arg1 = 0 ;
  std::vector< RobotRaconteur::ServiceSubscriptionClientID > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub >,std::less< RobotRaconteur::ServiceSubscriptionClientID > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< RobotRaconteur::ServiceSubscriptionClientID,boost::shared_ptr< RobotRaconteur::WrappedServiceStub >,std::less< RobotRaconteur::ServiceSubscriptionClientID > > & reference is null");
    return 0;
  } 
  {
    try
    {
      result = RobotRaconteur::WrappedServiceSubscriptionClientsToVector(*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< RobotRaconteur::ServiceSubscriptionClientID > **)&jresult = new std::vector< RobotRaconteur::ServiceSubscriptionClientID >((const std::vector< RobotRaconteur::ServiceSubscriptionClientID > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_wrappedSubscribeServiceByType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *arg1 = 0 ;
  std::vector< std::string > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilter > arg3 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > tempnull1 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilter > *argp3 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jarg1 : &tempnull1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  argp3 = *(boost::shared_ptr< RobotRaconteur::WrappedServiceSubscriptionFilter > **)&jarg3;
  if (argp3) arg3 = *argp3; 
  {
    try
    {
      result = RobotRaconteur::WrappedSubscribeServiceByType((boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &)*arg1,(std::vector< std::string > const &)*arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_wrappedSubscribeServiceByType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *arg1 = 0 ;
  std::vector< std::string > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > tempnull1 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jarg1 : &tempnull1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = RobotRaconteur::WrappedSubscribeServiceByType((boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &)*arg1,(std::vector< std::string > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_wrappedSubscribeService_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_, jstring jarg5) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *arg1 = 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > arg4 ;
  std::string *arg5 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > tempnull1 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > *argp4 ;
  boost::shared_ptr< RobotRaconteur::MessageElementData > *smartarg4 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jarg1 : &tempnull1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  
  // intrusive_ptr by value
  smartarg4 = *(boost::shared_ptr<  RobotRaconteur::MessageElementData >**)&jarg4;
  if (smartarg4) {
    arg4 = boost::intrusive_ptr<  RobotRaconteur::MessageElementData >(smartarg4->get(), true);
  }
  
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  {
    try
    {
      result = RobotRaconteur::WrappedSubscribeService((boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &)*arg1,(std::vector< std::string > const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_wrappedSubscribeService_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *arg1 = 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > arg4 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > tempnull1 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > *argp4 ;
  boost::shared_ptr< RobotRaconteur::MessageElementData > *smartarg4 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jarg1 : &tempnull1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  
  // intrusive_ptr by value
  smartarg4 = *(boost::shared_ptr<  RobotRaconteur::MessageElementData >**)&jarg4;
  if (smartarg4) {
    arg4 = boost::intrusive_ptr<  RobotRaconteur::MessageElementData >(smartarg4->get(), true);
  }
  
  {
    try
    {
      result = RobotRaconteur::WrappedSubscribeService((boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &)*arg1,(std::vector< std::string > const &)*arg2,(std::string const &)*arg3,arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_wrappedSubscribeService_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *arg1 = 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > tempnull1 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jarg1 : &tempnull1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try
    {
      result = RobotRaconteur::WrappedSubscribeService((boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &)*arg1,(std::vector< std::string > const &)*arg2,(std::string const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_wrappedSubscribeService_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *arg1 = 0 ;
  std::vector< std::string > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > tempnull1 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jarg1 : &tempnull1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = RobotRaconteur::WrappedSubscribeService((boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &)*arg1,(std::vector< std::string > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_wrappedSubscribeService_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jstring jarg5) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > arg4 ;
  std::string *arg5 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > tempnull1 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > *argp4 ;
  boost::shared_ptr< RobotRaconteur::MessageElementData > *smartarg4 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jarg1 : &tempnull1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  
  // intrusive_ptr by value
  smartarg4 = *(boost::shared_ptr<  RobotRaconteur::MessageElementData >**)&jarg4;
  if (smartarg4) {
    arg4 = boost::intrusive_ptr<  RobotRaconteur::MessageElementData >(smartarg4->get(), true);
  }
  
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  {
    try
    {
      result = RobotRaconteur::WrappedSubscribeService((boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_wrappedSubscribeService_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > arg4 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > tempnull1 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > *argp4 ;
  boost::shared_ptr< RobotRaconteur::MessageElementData > *smartarg4 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jarg1 : &tempnull1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  
  // intrusive_ptr by value
  smartarg4 = *(boost::shared_ptr<  RobotRaconteur::MessageElementData >**)&jarg4;
  if (smartarg4) {
    arg4 = boost::intrusive_ptr<  RobotRaconteur::MessageElementData >(smartarg4->get(), true);
  }
  
  {
    try
    {
      result = RobotRaconteur::WrappedSubscribeService((boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_wrappedSubscribeService_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > tempnull1 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jarg1 : &tempnull1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try
    {
      result = RobotRaconteur::WrappedSubscribeService((boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_wrappedSubscribeService_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > tempnull1 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jarg1 : &tempnull1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = RobotRaconteur::WrappedSubscribeService((boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &)*arg1,(std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRLogRecord_1getNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::RRLogRecord *arg1 = (RobotRaconteur::RRLogRecord *) 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RRLogRecord **)&jarg1; 
  {
    try
    {
      result = RobotRaconteur_RRLogRecord_GetNode(arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::RobotRaconteurNode >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRLogRecord_1setNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::RRLogRecord *arg1 = (RobotRaconteur::RRLogRecord *) 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::RRLogRecord **)&jarg1; 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jarg2 : &tempnull2; 
  {
    try
    {
      RobotRaconteur_RRLogRecord_SetNode(arg1,(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRLogRecord_1Level_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::RRLogRecord *arg1 = (RobotRaconteur::RRLogRecord *) 0 ;
  RobotRaconteur::RobotRaconteur_LogLevel arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RRLogRecord **)&jarg1; 
  arg2 = (RobotRaconteur::RobotRaconteur_LogLevel)jarg2; 
  if (arg1) (arg1)->Level = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRLogRecord_1Level_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::RRLogRecord *arg1 = (RobotRaconteur::RRLogRecord *) 0 ;
  RobotRaconteur::RobotRaconteur_LogLevel result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RRLogRecord **)&jarg1; 
  result = (RobotRaconteur::RobotRaconteur_LogLevel) ((arg1)->Level);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRLogRecord_1Component_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::RRLogRecord *arg1 = (RobotRaconteur::RRLogRecord *) 0 ;
  RobotRaconteur::RobotRaconteur_LogComponent arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RRLogRecord **)&jarg1; 
  arg2 = (RobotRaconteur::RobotRaconteur_LogComponent)jarg2; 
  if (arg1) (arg1)->Component = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRLogRecord_1Component_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::RRLogRecord *arg1 = (RobotRaconteur::RRLogRecord *) 0 ;
  RobotRaconteur::RobotRaconteur_LogComponent result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RRLogRecord **)&jarg1; 
  result = (RobotRaconteur::RobotRaconteur_LogComponent) ((arg1)->Component);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRLogRecord_1ComponentName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::RRLogRecord *arg1 = (RobotRaconteur::RRLogRecord *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RRLogRecord **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->ComponentName = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRLogRecord_1ComponentName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::RRLogRecord *arg1 = (RobotRaconteur::RRLogRecord *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RRLogRecord **)&jarg1; 
  result = (std::string *) & ((arg1)->ComponentName);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRLogRecord_1ComponentObjectID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::RRLogRecord *arg1 = (RobotRaconteur::RRLogRecord *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RRLogRecord **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->ComponentObjectID = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRLogRecord_1ComponentObjectID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::RRLogRecord *arg1 = (RobotRaconteur::RRLogRecord *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RRLogRecord **)&jarg1; 
  result = (std::string *) & ((arg1)->ComponentObjectID);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRLogRecord_1Endpoint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::RRLogRecord *arg1 = (RobotRaconteur::RRLogRecord *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RRLogRecord **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->Endpoint = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRLogRecord_1Endpoint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::RRLogRecord *arg1 = (RobotRaconteur::RRLogRecord *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RRLogRecord **)&jarg1; 
  result = (int64_t) ((arg1)->Endpoint);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRLogRecord_1ServicePath_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::RRLogRecord *arg1 = (RobotRaconteur::RRLogRecord *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RRLogRecord **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->ServicePath = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRLogRecord_1ServicePath_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::RRLogRecord *arg1 = (RobotRaconteur::RRLogRecord *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RRLogRecord **)&jarg1; 
  result = (std::string *) & ((arg1)->ServicePath);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRLogRecord_1Member_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::RRLogRecord *arg1 = (RobotRaconteur::RRLogRecord *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RRLogRecord **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Member = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRLogRecord_1Member_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::RRLogRecord *arg1 = (RobotRaconteur::RRLogRecord *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RRLogRecord **)&jarg1; 
  result = (std::string *) & ((arg1)->Member);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRLogRecord_1Message_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::RRLogRecord *arg1 = (RobotRaconteur::RRLogRecord *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RRLogRecord **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Message = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRLogRecord_1Message_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::RRLogRecord *arg1 = (RobotRaconteur::RRLogRecord *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RRLogRecord **)&jarg1; 
  result = (std::string *) & ((arg1)->Message);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRLogRecord_1Time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RobotRaconteur::RRLogRecord *arg1 = (RobotRaconteur::RRLogRecord *) 0 ;
  boost::posix_time::ptime arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RRLogRecord **)&jarg1; 
  {
    {
      TimeSpec* temp_ptime = *(RobotRaconteur::TimeSpec **)&jarg2;
      if (!temp_ptime) 
      {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null TimeSpec");
        return ;
      }
      arg2 = TimeSpecToPTime(*temp_ptime);
    }    
  }
  if (arg1) (arg1)->Time = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRLogRecord_1Time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::RRLogRecord *arg1 = (RobotRaconteur::RRLogRecord *) 0 ;
  boost::posix_time::ptime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RRLogRecord **)&jarg1; 
  result =  ((arg1)->Time);
  {
    {
      TimeSpec timespec_result1 = RobotRaconteur::ptimeToTimeSpec(result);
      *(RobotRaconteur::TimeSpec **)&jresult = new RobotRaconteur::TimeSpec((const RobotRaconteur::TimeSpec &)timespec_result1);
    }    
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRLogRecord_1SourceFile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::RRLogRecord *arg1 = (RobotRaconteur::RRLogRecord *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RRLogRecord **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->SourceFile = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRLogRecord_1SourceFile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::RRLogRecord *arg1 = (RobotRaconteur::RRLogRecord *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RRLogRecord **)&jarg1; 
  result = (std::string *) & ((arg1)->SourceFile);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRLogRecord_1SourceLine_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RobotRaconteur::RRLogRecord *arg1 = (RobotRaconteur::RRLogRecord *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RRLogRecord **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->SourceLine = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRLogRecord_1SourceLine_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::RRLogRecord *arg1 = (RobotRaconteur::RRLogRecord *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RRLogRecord **)&jarg1; 
  result = (uint32_t) ((arg1)->SourceLine);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRLogRecord_1ThreadID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::RRLogRecord *arg1 = (RobotRaconteur::RRLogRecord *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RRLogRecord **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->ThreadID = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRLogRecord_1ThreadID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::RRLogRecord *arg1 = (RobotRaconteur::RRLogRecord *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RRLogRecord **)&jarg1; 
  result = (std::string *) & ((arg1)->ThreadID);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRLogRecord_1FiberID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::RRLogRecord *arg1 = (RobotRaconteur::RRLogRecord *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RRLogRecord **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->FiberID = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRLogRecord_1FiberID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::RRLogRecord *arg1 = (RobotRaconteur::RRLogRecord *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RRLogRecord **)&jarg1; 
  result = (std::string *) & ((arg1)->FiberID);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRLogRecord_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::RRLogRecord *arg1 = (RobotRaconteur::RRLogRecord *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RRLogRecord **)&jarg1; 
  {
    try
    {
      result = RobotRaconteur_RRLogRecord_ToString(arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1RRLogRecord(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::RRLogRecord *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::RRLogRecord *)new RobotRaconteur::RRLogRecord();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::RRLogRecord **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1RRLogRecord(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::RRLogRecord *arg1 = (RobotRaconteur::RRLogRecord *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::RRLogRecord **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1LogRecordHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::LogRecordHandler *arg1 = (RobotRaconteur::LogRecordHandler *) 0 ;
  boost::shared_ptr< RobotRaconteur::LogRecordHandler > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::LogRecordHandler > **)&jarg1;
  arg1 = (RobotRaconteur::LogRecordHandler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_FileLogRecordHandler_1openFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  RobotRaconteur::FileLogRecordHandler *arg1 = (RobotRaconteur::FileLogRecordHandler *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  boost::shared_ptr< RobotRaconteur::FileLogRecordHandler > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::FileLogRecordHandler > **)&jarg1;
  arg1 = (RobotRaconteur::FileLogRecordHandler *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  {
    try
    {
      (arg1)->OpenFile((std::string const &)*arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_FileLogRecordHandler_1openFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::FileLogRecordHandler *arg1 = (RobotRaconteur::FileLogRecordHandler *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::FileLogRecordHandler > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::FileLogRecordHandler > **)&jarg1;
  arg1 = (RobotRaconteur::FileLogRecordHandler *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      (arg1)->OpenFile((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1FileLogRecordHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::FileLogRecordHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::FileLogRecordHandler *)new RobotRaconteur::FileLogRecordHandler();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::FileLogRecordHandler > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::FileLogRecordHandler >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1FileLogRecordHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::FileLogRecordHandler *arg1 = (RobotRaconteur::FileLogRecordHandler *) 0 ;
  boost::shared_ptr< RobotRaconteur::FileLogRecordHandler > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::FileLogRecordHandler > **)&jarg1;
  arg1 = (RobotRaconteur::FileLogRecordHandler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_UserLogRecordHandlerDirector_1handleLogRecord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::UserLogRecordHandlerDirector *arg1 = (RobotRaconteur::UserLogRecordHandlerDirector *) 0 ;
  RobotRaconteur::RRLogRecord *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::UserLogRecordHandlerDirector **)&jarg1; 
  arg2 = *(RobotRaconteur::RRLogRecord **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::RRLogRecord const & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->HandleLogRecord((RobotRaconteur::RRLogRecord const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1UserLogRecordHandlerDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::UserLogRecordHandlerDirector *arg1 = (RobotRaconteur::UserLogRecordHandlerDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::UserLogRecordHandlerDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1UserLogRecordHandlerDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::UserLogRecordHandlerDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::UserLogRecordHandlerDirector *)new SwigDirector_UserLogRecordHandlerDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::UserLogRecordHandlerDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_UserLogRecordHandlerDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::UserLogRecordHandlerDirector *obj = *((RobotRaconteur::UserLogRecordHandlerDirector **)&objarg);
  (void)jcls;
  SwigDirector_UserLogRecordHandlerDirector *director = static_cast<SwigDirector_UserLogRecordHandlerDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_UserLogRecordHandlerDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::UserLogRecordHandlerDirector *obj = *((RobotRaconteur::UserLogRecordHandlerDirector **)&objarg);
  SwigDirector_UserLogRecordHandlerDirector *director = dynamic_cast<SwigDirector_UserLogRecordHandlerDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_UserLogRecordHandlerBase_1_1SetHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  RobotRaconteur::UserLogRecordHandlerBase *arg1 = (RobotRaconteur::UserLogRecordHandlerBase *) 0 ;
  RobotRaconteur::UserLogRecordHandlerDirector *arg2 = (RobotRaconteur::UserLogRecordHandlerDirector *) 0 ;
  int32_t arg3 ;
  boost::shared_ptr< RobotRaconteur::UserLogRecordHandlerBase > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::UserLogRecordHandlerBase > **)&jarg1;
  arg1 = (RobotRaconteur::UserLogRecordHandlerBase *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::UserLogRecordHandlerDirector **)&jarg2; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      (arg1)->SetHandler(arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1UserLogRecordHandlerBase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::UserLogRecordHandlerBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::UserLogRecordHandlerBase *)new RobotRaconteur::UserLogRecordHandlerBase();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::UserLogRecordHandlerBase > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::UserLogRecordHandlerBase >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1UserLogRecordHandlerBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::UserLogRecordHandlerBase *arg1 = (RobotRaconteur::UserLogRecordHandlerBase *) 0 ;
  boost::shared_ptr< RobotRaconteur::UserLogRecordHandlerBase > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::UserLogRecordHandlerBase > **)&jarg1;
  arg1 = (RobotRaconteur::UserLogRecordHandlerBase *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1CommandLineConfigParser_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  uint32_t arg1 ;
  std::string *arg2 = 0 ;
  RobotRaconteur::CommandLineConfigParser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint32_t)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (RobotRaconteur::CommandLineConfigParser *)new RobotRaconteur::CommandLineConfigParser(arg1,(std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::CommandLineConfigParser > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::CommandLineConfigParser >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1CommandLineConfigParser_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  uint32_t arg1 ;
  RobotRaconteur::CommandLineConfigParser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint32_t)jarg1; 
  {
    try
    {
      result = (RobotRaconteur::CommandLineConfigParser *)new RobotRaconteur::CommandLineConfigParser(arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::CommandLineConfigParser > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::CommandLineConfigParser >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_CommandLineConfigParser_1setDefaults(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4) {
  RobotRaconteur::CommandLineConfigParser *arg1 = (RobotRaconteur::CommandLineConfigParser *) 0 ;
  std::string *arg2 = 0 ;
  uint16_t arg3 ;
  uint32_t arg4 ;
  boost::shared_ptr< RobotRaconteur::CommandLineConfigParser > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::CommandLineConfigParser > **)&jarg1;
  arg1 = (RobotRaconteur::CommandLineConfigParser *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (uint16_t)jarg3; 
  arg4 = (uint32_t)jarg4; 
  {
    try
    {
      (arg1)->SetDefaults((std::string const &)*arg2,arg3,arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_CommandLineConfigParser_1addStringOption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  RobotRaconteur::CommandLineConfigParser *arg1 = (RobotRaconteur::CommandLineConfigParser *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::CommandLineConfigParser > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::CommandLineConfigParser > **)&jarg1;
  arg1 = (RobotRaconteur::CommandLineConfigParser *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try
    {
      (arg1)->AddStringOption((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_CommandLineConfigParser_1addBoolOption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  RobotRaconteur::CommandLineConfigParser *arg1 = (RobotRaconteur::CommandLineConfigParser *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::CommandLineConfigParser > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::CommandLineConfigParser > **)&jarg1;
  arg1 = (RobotRaconteur::CommandLineConfigParser *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try
    {
      (arg1)->AddBoolOption((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_CommandLineConfigParser_1addIntOption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  RobotRaconteur::CommandLineConfigParser *arg1 = (RobotRaconteur::CommandLineConfigParser *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::CommandLineConfigParser > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::CommandLineConfigParser > **)&jarg1;
  arg1 = (RobotRaconteur::CommandLineConfigParser *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try
    {
      (arg1)->AddIntOption((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_CommandLineConfigParser_1_1ParseCommandLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::CommandLineConfigParser *arg1 = (RobotRaconteur::CommandLineConfigParser *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::CommandLineConfigParser > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::CommandLineConfigParser > **)&jarg1;
  arg1 = (RobotRaconteur::CommandLineConfigParser *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->ParseCommandLine((std::vector< std::string > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_CommandLineConfigParser_1getOptionOrDefaultAsString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  RobotRaconteur::CommandLineConfigParser *arg1 = (RobotRaconteur::CommandLineConfigParser *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::CommandLineConfigParser > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::CommandLineConfigParser > **)&jarg1;
  arg1 = (RobotRaconteur::CommandLineConfigParser *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (arg1)->GetOptionOrDefaultAsString((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_CommandLineConfigParser_1getOptionOrDefaultAsString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  RobotRaconteur::CommandLineConfigParser *arg1 = (RobotRaconteur::CommandLineConfigParser *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::CommandLineConfigParser > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::CommandLineConfigParser > **)&jarg1;
  arg1 = (RobotRaconteur::CommandLineConfigParser *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try
    {
      result = (arg1)->GetOptionOrDefaultAsString((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_CommandLineConfigParser_1getOptionOrDefaultAsBool_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  RobotRaconteur::CommandLineConfigParser *arg1 = (RobotRaconteur::CommandLineConfigParser *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::CommandLineConfigParser > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::CommandLineConfigParser > **)&jarg1;
  arg1 = (RobotRaconteur::CommandLineConfigParser *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (bool)(arg1)->GetOptionOrDefaultAsBool((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_CommandLineConfigParser_1getOptionOrDefaultAsBool_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  RobotRaconteur::CommandLineConfigParser *arg1 = (RobotRaconteur::CommandLineConfigParser *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  boost::shared_ptr< RobotRaconteur::CommandLineConfigParser > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::CommandLineConfigParser > **)&jarg1;
  arg1 = (RobotRaconteur::CommandLineConfigParser *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  {
    try
    {
      result = (bool)(arg1)->GetOptionOrDefaultAsBool((std::string const &)*arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_CommandLineConfigParser_1getOptionOrDefaultAsInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  RobotRaconteur::CommandLineConfigParser *arg1 = (RobotRaconteur::CommandLineConfigParser *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::CommandLineConfigParser > *smartarg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::CommandLineConfigParser > **)&jarg1;
  arg1 = (RobotRaconteur::CommandLineConfigParser *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (int32_t)(arg1)->GetOptionOrDefaultAsInt((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_CommandLineConfigParser_1getOptionOrDefaultAsInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  RobotRaconteur::CommandLineConfigParser *arg1 = (RobotRaconteur::CommandLineConfigParser *) 0 ;
  std::string *arg2 = 0 ;
  int32_t arg3 ;
  boost::shared_ptr< RobotRaconteur::CommandLineConfigParser > *smartarg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::CommandLineConfigParser > **)&jarg1;
  arg1 = (RobotRaconteur::CommandLineConfigParser *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      result = (int32_t)(arg1)->GetOptionOrDefaultAsInt((std::string const &)*arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1CommandLineConfigParser(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::CommandLineConfigParser *arg1 = (RobotRaconteur::CommandLineConfigParser *) 0 ;
  boost::shared_ptr< RobotRaconteur::CommandLineConfigParser > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::CommandLineConfigParser > **)&jarg1;
  arg1 = (RobotRaconteur::CommandLineConfigParser *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedRobotRaconteurNodeSetup_1getLocalTransport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNodeSetup *arg1 = (RobotRaconteur::RobotRaconteurNodeSetup *) 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNodeSetup > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::LocalTransport > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNodeSetup > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNodeSetup *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetLocalTransport();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::LocalTransport > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::LocalTransport >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedRobotRaconteurNodeSetup_1getIntraTransport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNodeSetup *arg1 = (RobotRaconteur::RobotRaconteurNodeSetup *) 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNodeSetup > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::IntraTransport > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNodeSetup > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNodeSetup *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetIntraTransport();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::IntraTransport > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::IntraTransport >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedRobotRaconteurNodeSetup_1getTcpTransport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNodeSetup *arg1 = (RobotRaconteur::RobotRaconteurNodeSetup *) 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNodeSetup > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::TcpTransport > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNodeSetup > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNodeSetup *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetTcpTransport();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::TcpTransport > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::TcpTransport >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedRobotRaconteurNodeSetup_1getHardwareTransport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNodeSetup *arg1 = (RobotRaconteur::RobotRaconteurNodeSetup *) 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNodeSetup > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::HardwareTransport > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNodeSetup > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNodeSetup *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetHardwareTransport();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::HardwareTransport > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::HardwareTransport >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedRobotRaconteurNodeSetup_1getCommandLineConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNodeSetup *arg1 = (RobotRaconteur::RobotRaconteurNodeSetup *) 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNodeSetup > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::CommandLineConfigParser > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNodeSetup > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNodeSetup *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetCommandLineConfig();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::CommandLineConfigParser > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::CommandLineConfigParser >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedRobotRaconteurNodeSetup_1releaseNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::RobotRaconteurNodeSetup *arg1 = (RobotRaconteur::RobotRaconteurNodeSetup *) 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNodeSetup > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNodeSetup > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNodeSetup *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->ReleaseNode();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1WrappedRobotRaconteurNodeSetup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::RobotRaconteurNodeSetup *arg1 = (RobotRaconteur::RobotRaconteurNodeSetup *) 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNodeSetup > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNodeSetup > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNodeSetup *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedRobotRaconteurNodeSetup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  uint16_t arg3 ;
  uint32_t arg4 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > tempnull1 ;
  RobotRaconteur::RobotRaconteurNodeSetup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jarg1 : &tempnull1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (uint16_t)jarg3; 
  arg4 = (uint32_t)jarg4; 
  {
    try
    {
      result = (RobotRaconteur::RobotRaconteurNodeSetup *)new_RobotRaconteur_RobotRaconteurNodeSetup__SWIG_0((boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &)*arg1,(std::string const &)*arg2,arg3,arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNodeSetup > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::RobotRaconteurNodeSetup >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedRobotRaconteurNodeSetup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *arg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::CommandLineConfigParser > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > tempnull1 ;
  boost::shared_ptr< RobotRaconteur::CommandLineConfigParser > tempnull2 ;
  RobotRaconteur::RobotRaconteurNodeSetup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jarg1 : &tempnull1; 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::CommandLineConfigParser > **)&jarg2 : &tempnull2; 
  {
    try
    {
      result = (RobotRaconteur::RobotRaconteurNodeSetup *)new_RobotRaconteur_RobotRaconteurNodeSetup__SWIG_1((boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &)*arg1,(boost::shared_ptr< RobotRaconteur::CommandLineConfigParser > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNodeSetup > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::RobotRaconteurNodeSetup >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1WrappedRobotRaconteurNodeSetup_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  uint16_t arg3 ;
  uint32_t arg4 ;
  uint32_t arg5 ;
  std::vector< std::string > *arg6 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > tempnull1 ;
  RobotRaconteur::RobotRaconteurNodeSetup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jarg1 : &tempnull1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (uint16_t)jarg3; 
  arg4 = (uint32_t)jarg4; 
  arg5 = (uint32_t)jarg5; 
  arg6 = *(std::vector< std::string > **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (RobotRaconteur::RobotRaconteurNodeSetup *)new_RobotRaconteur_RobotRaconteurNodeSetup__SWIG_2((boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > const &)*arg1,(std::string const &)*arg2,arg3,arg4,arg5,(std::vector< std::string > const &)*arg6);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNodeSetup > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::RobotRaconteurNodeSetup >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1BroadcastDownsampler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::BroadcastDownsampler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::BroadcastDownsampler *)new RobotRaconteur::BroadcastDownsampler();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::BroadcastDownsampler > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::BroadcastDownsampler >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_BroadcastDownsampler_1_1Init_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  RobotRaconteur::BroadcastDownsampler *arg1 = (RobotRaconteur::BroadcastDownsampler *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServerContext > *arg2 = 0 ;
  uint32_t arg3 ;
  boost::shared_ptr< RobotRaconteur::BroadcastDownsampler > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServerContext > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::BroadcastDownsampler > **)&jarg1;
  arg1 = (RobotRaconteur::BroadcastDownsampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::ServerContext > **)&jarg2 : &tempnull2; 
  arg3 = (uint32_t)jarg3; 
  {
    try
    {
      (arg1)->Init((boost::shared_ptr< RobotRaconteur::ServerContext > const &)*arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_BroadcastDownsampler_1_1Init_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::BroadcastDownsampler *arg1 = (RobotRaconteur::BroadcastDownsampler *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServerContext > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::BroadcastDownsampler > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServerContext > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::BroadcastDownsampler > **)&jarg1;
  arg1 = (RobotRaconteur::BroadcastDownsampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::ServerContext > **)&jarg2 : &tempnull2; 
  {
    try
    {
      (arg1)->Init((boost::shared_ptr< RobotRaconteur::ServerContext > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_BroadcastDownsampler_1getClientDownsample(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  RobotRaconteur::BroadcastDownsampler *arg1 = (RobotRaconteur::BroadcastDownsampler *) 0 ;
  uint32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::BroadcastDownsampler > *smartarg1 = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::BroadcastDownsampler > **)&jarg1;
  arg1 = (RobotRaconteur::BroadcastDownsampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  {
    try
    {
      result = (uint32_t)(arg1)->GetClientDownsample(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_BroadcastDownsampler_1setClientDownsample(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  RobotRaconteur::BroadcastDownsampler *arg1 = (RobotRaconteur::BroadcastDownsampler *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  boost::shared_ptr< RobotRaconteur::BroadcastDownsampler > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::BroadcastDownsampler > **)&jarg1;
  arg1 = (RobotRaconteur::BroadcastDownsampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  arg3 = (uint32_t)jarg3; 
  {
    try
    {
      (arg1)->SetClientDownsample(arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_BroadcastDownsampler_1beginStep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::BroadcastDownsampler *arg1 = (RobotRaconteur::BroadcastDownsampler *) 0 ;
  boost::shared_ptr< RobotRaconteur::BroadcastDownsampler > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::BroadcastDownsampler > **)&jarg1;
  arg1 = (RobotRaconteur::BroadcastDownsampler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->BeginStep();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_BroadcastDownsampler_1endStep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::BroadcastDownsampler *arg1 = (RobotRaconteur::BroadcastDownsampler *) 0 ;
  boost::shared_ptr< RobotRaconteur::BroadcastDownsampler > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::BroadcastDownsampler > **)&jarg1;
  arg1 = (RobotRaconteur::BroadcastDownsampler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->EndStep();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_BroadcastDownsampler_1_1AddPipeBroadcaster(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::BroadcastDownsampler *arg1 = (RobotRaconteur::BroadcastDownsampler *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeBroadcaster > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::BroadcastDownsampler > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedPipeBroadcaster > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::BroadcastDownsampler > **)&jarg1;
  arg1 = (RobotRaconteur::BroadcastDownsampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedPipeBroadcaster > **)&jarg2 : &tempnull2; 
  {
    try
    {
      (arg1)->AddPipeBroadcaster((boost::shared_ptr< RobotRaconteur::WrappedPipeBroadcaster > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_BroadcastDownsampler_1_1AddWireBroadcaster(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::BroadcastDownsampler *arg1 = (RobotRaconteur::BroadcastDownsampler *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireBroadcaster > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::BroadcastDownsampler > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedWireBroadcaster > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::BroadcastDownsampler > **)&jarg1;
  arg1 = (RobotRaconteur::BroadcastDownsampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedWireBroadcaster > **)&jarg2 : &tempnull2; 
  {
    try
    {
      (arg1)->AddWireBroadcaster((boost::shared_ptr< RobotRaconteur::WrappedWireBroadcaster > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1BroadcastDownsampler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::BroadcastDownsampler *arg1 = (RobotRaconteur::BroadcastDownsampler *) 0 ;
  boost::shared_ptr< RobotRaconteur::BroadcastDownsampler > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::BroadcastDownsampler > **)&jarg1;
  arg1 = (RobotRaconteur::BroadcastDownsampler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRMonitor_1lock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RRMonitor *arg1 = (RRMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RRMonitor **)&jarg1; 
  {
    try
    {
      (arg1)->lock();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRMonitor_1tryLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  RRMonitor *arg1 = (RRMonitor *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RRMonitor **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      result = (bool)(arg1)->tryLock(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRMonitor_1unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RRMonitor *arg1 = (RRMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RRMonitor **)&jarg1; 
  {
    try
    {
      (arg1)->unlock();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1RRMonitor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RRMonitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RRMonitor *)new RRMonitor();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RRMonitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1RRMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RRMonitor *arg1 = (RRMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RRMonitor **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRNativeObjectHeapSupport_1set_1Support(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::RRNativeObjectHeapSupport *arg1 = (RobotRaconteur::RRNativeObjectHeapSupport *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RRNativeObjectHeapSupport **)&jarg1; 
  {
    try
    {
      RobotRaconteur::RRNativeObjectHeapSupport::Set_Support(arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRNativeObjectHeapSupport_1deleteObject_1i(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::RRNativeObjectHeapSupport *arg1 = (RobotRaconteur::RRNativeObjectHeapSupport *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::RRNativeObjectHeapSupport **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      (arg1)->DeleteObject_i(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRNativeObjectHeapSupport_1deleteObject(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int32_t arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  {
    try
    {
      RobotRaconteur::RRNativeObjectHeapSupport::DeleteObject(arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1RRNativeObjectHeapSupport(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::RRNativeObjectHeapSupport *arg1 = (RobotRaconteur::RRNativeObjectHeapSupport *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::RRNativeObjectHeapSupport **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1RRNativeObjectHeapSupport(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::RRNativeObjectHeapSupport *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::RRNativeObjectHeapSupport *)new SwigDirector_RRNativeObjectHeapSupport(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::RRNativeObjectHeapSupport **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRNativeObjectHeapSupport_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  RobotRaconteur::RRNativeObjectHeapSupport *obj = *((RobotRaconteur::RRNativeObjectHeapSupport **)&objarg);
  (void)jcls;
  SwigDirector_RRNativeObjectHeapSupport *director = static_cast<SwigDirector_RRNativeObjectHeapSupport *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRNativeObjectHeapSupport_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  RobotRaconteur::RRNativeObjectHeapSupport *obj = *((RobotRaconteur::RRNativeObjectHeapSupport **)&objarg);
  SwigDirector_RRNativeObjectHeapSupport *director = dynamic_cast<SwigDirector_RRNativeObjectHeapSupport *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeDirectories_1system_1data_1dir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::NodeDirectories *arg1 = (RobotRaconteur::NodeDirectories *) 0 ;
  boost::filesystem::path *arg2 = (boost::filesystem::path *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::NodeDirectories **)&jarg1; 
  arg2 = *(boost::filesystem::path **)&jarg2; 
  if (arg1) (arg1)->system_data_dir = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeDirectories_1system_1data_1dir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::NodeDirectories *arg1 = (RobotRaconteur::NodeDirectories *) 0 ;
  boost::filesystem::path *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::NodeDirectories **)&jarg1; 
  result = (boost::filesystem::path *)& ((arg1)->system_data_dir);
  *(boost::filesystem::path **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeDirectories_1system_1config_1dir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::NodeDirectories *arg1 = (RobotRaconteur::NodeDirectories *) 0 ;
  boost::filesystem::path *arg2 = (boost::filesystem::path *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::NodeDirectories **)&jarg1; 
  arg2 = *(boost::filesystem::path **)&jarg2; 
  if (arg1) (arg1)->system_config_dir = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeDirectories_1system_1config_1dir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::NodeDirectories *arg1 = (RobotRaconteur::NodeDirectories *) 0 ;
  boost::filesystem::path *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::NodeDirectories **)&jarg1; 
  result = (boost::filesystem::path *)& ((arg1)->system_config_dir);
  *(boost::filesystem::path **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeDirectories_1system_1state_1dir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::NodeDirectories *arg1 = (RobotRaconteur::NodeDirectories *) 0 ;
  boost::filesystem::path *arg2 = (boost::filesystem::path *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::NodeDirectories **)&jarg1; 
  arg2 = *(boost::filesystem::path **)&jarg2; 
  if (arg1) (arg1)->system_state_dir = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeDirectories_1system_1state_1dir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::NodeDirectories *arg1 = (RobotRaconteur::NodeDirectories *) 0 ;
  boost::filesystem::path *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::NodeDirectories **)&jarg1; 
  result = (boost::filesystem::path *)& ((arg1)->system_state_dir);
  *(boost::filesystem::path **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeDirectories_1system_1cache_1dir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::NodeDirectories *arg1 = (RobotRaconteur::NodeDirectories *) 0 ;
  boost::filesystem::path *arg2 = (boost::filesystem::path *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::NodeDirectories **)&jarg1; 
  arg2 = *(boost::filesystem::path **)&jarg2; 
  if (arg1) (arg1)->system_cache_dir = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeDirectories_1system_1cache_1dir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::NodeDirectories *arg1 = (RobotRaconteur::NodeDirectories *) 0 ;
  boost::filesystem::path *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::NodeDirectories **)&jarg1; 
  result = (boost::filesystem::path *)& ((arg1)->system_cache_dir);
  *(boost::filesystem::path **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeDirectories_1system_1run_1dir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::NodeDirectories *arg1 = (RobotRaconteur::NodeDirectories *) 0 ;
  boost::filesystem::path *arg2 = (boost::filesystem::path *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::NodeDirectories **)&jarg1; 
  arg2 = *(boost::filesystem::path **)&jarg2; 
  if (arg1) (arg1)->system_run_dir = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeDirectories_1system_1run_1dir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::NodeDirectories *arg1 = (RobotRaconteur::NodeDirectories *) 0 ;
  boost::filesystem::path *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::NodeDirectories **)&jarg1; 
  result = (boost::filesystem::path *)& ((arg1)->system_run_dir);
  *(boost::filesystem::path **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeDirectories_1user_1data_1dir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::NodeDirectories *arg1 = (RobotRaconteur::NodeDirectories *) 0 ;
  boost::filesystem::path *arg2 = (boost::filesystem::path *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::NodeDirectories **)&jarg1; 
  arg2 = *(boost::filesystem::path **)&jarg2; 
  if (arg1) (arg1)->user_data_dir = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeDirectories_1user_1data_1dir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::NodeDirectories *arg1 = (RobotRaconteur::NodeDirectories *) 0 ;
  boost::filesystem::path *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::NodeDirectories **)&jarg1; 
  result = (boost::filesystem::path *)& ((arg1)->user_data_dir);
  *(boost::filesystem::path **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeDirectories_1user_1config_1dir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::NodeDirectories *arg1 = (RobotRaconteur::NodeDirectories *) 0 ;
  boost::filesystem::path *arg2 = (boost::filesystem::path *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::NodeDirectories **)&jarg1; 
  arg2 = *(boost::filesystem::path **)&jarg2; 
  if (arg1) (arg1)->user_config_dir = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeDirectories_1user_1config_1dir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::NodeDirectories *arg1 = (RobotRaconteur::NodeDirectories *) 0 ;
  boost::filesystem::path *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::NodeDirectories **)&jarg1; 
  result = (boost::filesystem::path *)& ((arg1)->user_config_dir);
  *(boost::filesystem::path **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeDirectories_1user_1state_1dir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::NodeDirectories *arg1 = (RobotRaconteur::NodeDirectories *) 0 ;
  boost::filesystem::path *arg2 = (boost::filesystem::path *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::NodeDirectories **)&jarg1; 
  arg2 = *(boost::filesystem::path **)&jarg2; 
  if (arg1) (arg1)->user_state_dir = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeDirectories_1user_1state_1dir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::NodeDirectories *arg1 = (RobotRaconteur::NodeDirectories *) 0 ;
  boost::filesystem::path *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::NodeDirectories **)&jarg1; 
  result = (boost::filesystem::path *)& ((arg1)->user_state_dir);
  *(boost::filesystem::path **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeDirectories_1user_1cache_1dir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::NodeDirectories *arg1 = (RobotRaconteur::NodeDirectories *) 0 ;
  boost::filesystem::path *arg2 = (boost::filesystem::path *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::NodeDirectories **)&jarg1; 
  arg2 = *(boost::filesystem::path **)&jarg2; 
  if (arg1) (arg1)->user_cache_dir = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeDirectories_1user_1cache_1dir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::NodeDirectories *arg1 = (RobotRaconteur::NodeDirectories *) 0 ;
  boost::filesystem::path *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::NodeDirectories **)&jarg1; 
  result = (boost::filesystem::path *)& ((arg1)->user_cache_dir);
  *(boost::filesystem::path **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeDirectories_1user_1run_1dir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::NodeDirectories *arg1 = (RobotRaconteur::NodeDirectories *) 0 ;
  boost::filesystem::path *arg2 = (boost::filesystem::path *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::NodeDirectories **)&jarg1; 
  arg2 = *(boost::filesystem::path **)&jarg2; 
  if (arg1) (arg1)->user_run_dir = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeDirectories_1user_1run_1dir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::NodeDirectories *arg1 = (RobotRaconteur::NodeDirectories *) 0 ;
  boost::filesystem::path *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::NodeDirectories **)&jarg1; 
  result = (boost::filesystem::path *)& ((arg1)->user_run_dir);
  *(boost::filesystem::path **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1NodeDirectories(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::NodeDirectories *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::NodeDirectories *)new RobotRaconteur::NodeDirectories();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::NodeDirectories **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1NodeDirectories(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::NodeDirectories *arg1 = (RobotRaconteur::NodeDirectories *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::NodeDirectories **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1NodeDirectoriesFD(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::NodeDirectoriesFD *arg1 = (RobotRaconteur::NodeDirectoriesFD *) 0 ;
  boost::shared_ptr< RobotRaconteur::NodeDirectoriesFD > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::NodeDirectoriesFD > **)&jarg1;
  arg1 = (RobotRaconteur::NodeDirectoriesFD *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeDirectoriesUtil_1getDefaultNodeDirectories_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > arg1 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *argp1 ;
  RobotRaconteur::NodeDirectories result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  if (argp1) arg1 = *argp1; 
  {
    try
    {
      result = RobotRaconteur::NodeDirectoriesUtil::GetDefaultNodeDirectories(arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::NodeDirectories **)&jresult = new RobotRaconteur::NodeDirectories((const RobotRaconteur::NodeDirectories &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeDirectoriesUtil_1getDefaultNodeDirectories_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::NodeDirectories result;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = RobotRaconteur::NodeDirectoriesUtil::GetDefaultNodeDirectories();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::NodeDirectories **)&jresult = new RobotRaconteur::NodeDirectories((const RobotRaconteur::NodeDirectories &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeDirectoriesUtil_1getLogonUserName(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = RobotRaconteur::NodeDirectoriesUtil::GetLogonUserName();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeDirectoriesUtil_1isLogonUserRoot(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (bool)RobotRaconteur::NodeDirectoriesUtil::IsLogonUserRoot();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeDirectoriesUtil_1readInfoFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  boost::filesystem::path *arg1 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(boost::filesystem::path **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::filesystem::path const & reference is null");
    return 0;
  } 
  arg2 = *(std::map< std::string,std::string,std::less< std::string > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string,std::less< std::string > > & reference is null");
    return 0;
  } 
  {
    try
    {
      result = (bool)RobotRaconteur::NodeDirectoriesUtil::ReadInfoFile((boost::filesystem::path const &)*arg1,*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeDirectoriesUtil_1createPidFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  boost::filesystem::path *arg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::NodeDirectoriesFD > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(boost::filesystem::path **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::filesystem::path const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = RobotRaconteur::NodeDirectoriesUtil::CreatePidFile((boost::filesystem::path const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::NodeDirectoriesFD > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::NodeDirectoriesFD >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeDirectoriesUtil_1createInfoFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  boost::filesystem::path *arg1 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > arg2 ;
  std::map< std::string,std::string,std::less< std::string > > *argp2 ;
  boost::shared_ptr< RobotRaconteur::NodeDirectoriesFD > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(boost::filesystem::path **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "boost::filesystem::path const & reference is null");
    return 0;
  } 
  argp2 = *(std::map< std::string,std::string,std::less< std::string > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< std::string,std::string,std::less< std::string > >");
    return 0;
  }
  arg2 = *argp2; 
  {
    try
    {
      result = RobotRaconteur::NodeDirectoriesUtil::CreateInfoFile((boost::filesystem::path const &)*arg1,arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::NodeDirectoriesFD > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::NodeDirectoriesFD >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_NodeDirectoriesUtil_1refreshInfoFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  boost::shared_ptr< RobotRaconteur::NodeDirectoriesFD > *arg1 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::NodeDirectoriesFD > tempnull1 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = jarg1 ? *(boost::shared_ptr< RobotRaconteur::NodeDirectoriesFD > **)&jarg1 : &tempnull1; 
  arg2 = *(std::map< std::string,std::string,std::less< std::string > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string,std::less< std::string > > const & reference is null");
    return ;
  } 
  {
    try
    {
      RobotRaconteur::NodeDirectoriesUtil::RefreshInfoFile((boost::shared_ptr< RobotRaconteur::NodeDirectoriesFD > const &)*arg1,(std::map< std::string,std::string,std::less< std::string > > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1NodeDirectoriesUtil(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::NodeDirectoriesUtil *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::NodeDirectoriesUtil *)new RobotRaconteur::NodeDirectoriesUtil();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::NodeDirectoriesUtil **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1NodeDirectoriesUtil(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::NodeDirectoriesUtil *arg1 = (RobotRaconteur::NodeDirectoriesUtil *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::NodeDirectoriesUtil **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_GetUuidForNameAndLockResult_1uuid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::GetUuidForNameAndLockResult *arg1 = (RobotRaconteur::GetUuidForNameAndLockResult *) 0 ;
  RobotRaconteur::NodeID *arg2 = (RobotRaconteur::NodeID *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::GetUuidForNameAndLockResult **)&jarg1; 
  arg2 = *(RobotRaconteur::NodeID **)&jarg2; 
  if (arg1) (arg1)->uuid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_GetUuidForNameAndLockResult_1uuid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::GetUuidForNameAndLockResult *arg1 = (RobotRaconteur::GetUuidForNameAndLockResult *) 0 ;
  RobotRaconteur::NodeID *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::GetUuidForNameAndLockResult **)&jarg1; 
  result = (RobotRaconteur::NodeID *)& ((arg1)->uuid);
  *(RobotRaconteur::NodeID **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_GetUuidForNameAndLockResult_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::GetUuidForNameAndLockResult *arg1 = (RobotRaconteur::GetUuidForNameAndLockResult *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::GetUuidForNameAndLockResult **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_GetUuidForNameAndLockResult_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::GetUuidForNameAndLockResult *arg1 = (RobotRaconteur::GetUuidForNameAndLockResult *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::GetUuidForNameAndLockResult **)&jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_GetUuidForNameAndLockResult_1scope_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::GetUuidForNameAndLockResult *arg1 = (RobotRaconteur::GetUuidForNameAndLockResult *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::GetUuidForNameAndLockResult **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->scope = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_GetUuidForNameAndLockResult_1scope_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::GetUuidForNameAndLockResult *arg1 = (RobotRaconteur::GetUuidForNameAndLockResult *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::GetUuidForNameAndLockResult **)&jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->scope);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_GetUuidForNameAndLockResult_1fd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::GetUuidForNameAndLockResult *arg1 = (RobotRaconteur::GetUuidForNameAndLockResult *) 0 ;
  boost::shared_ptr< RobotRaconteur::NodeDirectoriesFD > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::NodeDirectoriesFD > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RobotRaconteur::GetUuidForNameAndLockResult **)&jarg1; 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::NodeDirectoriesFD > **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->fd = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_GetUuidForNameAndLockResult_1fd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::GetUuidForNameAndLockResult *arg1 = (RobotRaconteur::GetUuidForNameAndLockResult *) 0 ;
  boost::shared_ptr< RobotRaconteur::NodeDirectoriesFD > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RobotRaconteur::GetUuidForNameAndLockResult **)&jarg1; 
  result = (boost::shared_ptr< RobotRaconteur::NodeDirectoriesFD > *) & ((arg1)->fd);
  *(boost::shared_ptr< RobotRaconteur::NodeDirectoriesFD > **)&jresult = *result ? new boost::shared_ptr< RobotRaconteur::NodeDirectoriesFD >(*result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1GetUuidForNameAndLockResult(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::GetUuidForNameAndLockResult *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::GetUuidForNameAndLockResult *)new RobotRaconteur::GetUuidForNameAndLockResult();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::GetUuidForNameAndLockResult **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1GetUuidForNameAndLockResult(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::GetUuidForNameAndLockResult *arg1 = (RobotRaconteur::GetUuidForNameAndLockResult *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::GetUuidForNameAndLockResult **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_getUuidForNameAndLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  RobotRaconteur::NodeDirectories *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  RobotRaconteur::GetUuidForNameAndLockResult result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(RobotRaconteur::NodeDirectories **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::NodeDirectories const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< std::string > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = RobotRaconteur::GetUuidForNameAndLock((RobotRaconteur::NodeDirectories const &)*arg1,(std::string const &)*arg2,(std::vector< std::string > const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::GetUuidForNameAndLockResult **)&jresult = new RobotRaconteur::GetUuidForNameAndLockResult((const RobotRaconteur::GetUuidForNameAndLockResult &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1NodeDirectoriesResourceAlreadyInUse(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::NodeDirectoriesResourceAlreadyInUse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::NodeDirectoriesResourceAlreadyInUse *)new RobotRaconteur::NodeDirectoriesResourceAlreadyInUse();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::NodeDirectoriesResourceAlreadyInUse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1NodeDirectoriesResourceAlreadyInUse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::NodeDirectoriesResourceAlreadyInUse *arg1 = (RobotRaconteur::NodeDirectoriesResourceAlreadyInUse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RobotRaconteur::NodeDirectoriesResourceAlreadyInUse **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ClientServiceListenerDirector_1objectheapid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ClientServiceListenerDirector *arg1 = (ClientServiceListenerDirector *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ClientServiceListenerDirector **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->objectheapid = arg2;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ClientServiceListenerDirector_1objectheapid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ClientServiceListenerDirector *arg1 = (ClientServiceListenerDirector *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ClientServiceListenerDirector **)&jarg1; 
  result = (int32_t) ((arg1)->objectheapid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1ClientServiceListenerDirector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ClientServiceListenerDirector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (ClientServiceListenerDirector *)new SwigDirector_ClientServiceListenerDirector(jenv);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(ClientServiceListenerDirector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ClientServiceListenerDirector_1callback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ClientServiceListenerDirector *arg1 = (ClientServiceListenerDirector *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ClientServiceListenerDirector **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      (arg1)->Callback(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ClientServiceListenerDirector_1callbackSwigExplicitClientServiceListenerDirector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ClientServiceListenerDirector *arg1 = (ClientServiceListenerDirector *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ClientServiceListenerDirector **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      (arg1)->ClientServiceListenerDirector::Callback(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ClientServiceListenerDirector_1callback2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  ClientServiceListenerDirector *arg1 = (ClientServiceListenerDirector *) 0 ;
  int32_t arg2 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ClientServiceListenerDirector **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try
    {
      (arg1)->Callback2(arg2,(std::string const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ClientServiceListenerDirector_1callback2SwigExplicitClientServiceListenerDirector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  ClientServiceListenerDirector *arg1 = (ClientServiceListenerDirector *) 0 ;
  int32_t arg2 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ClientServiceListenerDirector **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try
    {
      (arg1)->ClientServiceListenerDirector::Callback2(arg2,(std::string const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1ClientServiceListenerDirector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ClientServiceListenerDirector *arg1 = (ClientServiceListenerDirector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ClientServiceListenerDirector **)&jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ClientServiceListenerDirector_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  ClientServiceListenerDirector *obj = *((ClientServiceListenerDirector **)&objarg);
  (void)jcls;
  SwigDirector_ClientServiceListenerDirector *director = static_cast<SwigDirector_ClientServiceListenerDirector *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ClientServiceListenerDirector_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  ClientServiceListenerDirector *obj = *((ClientServiceListenerDirector **)&objarg);
  SwigDirector_ClientServiceListenerDirector *director = dynamic_cast<SwigDirector_ClientServiceListenerDirector *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1registerTransport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::Transport > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::Transport > tempnull2 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::Transport > **)&jarg2 : &tempnull2; 
  {
    try
    {
      result = (uint32_t)(arg1)->RegisterTransport((boost::shared_ptr< RobotRaconteur::Transport > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1getRequestTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (uint32_t)(arg1)->GetRequestTimeout();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1setRequestTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  uint32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  {
    try
    {
      (arg1)->SetRequestTimeout(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1getTransportInactivityTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (uint32_t)(arg1)->GetTransportInactivityTimeout();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1setTransportInactivityTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  uint32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  {
    try
    {
      (arg1)->SetTransportInactivityTimeout(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1getEndpointInactivityTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (uint32_t)(arg1)->GetEndpointInactivityTimeout();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1setEndpointInactivityTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  uint32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  {
    try
    {
      (arg1)->SetEndpointInactivityTimeout(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1getMemoryMaxTransferSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (uint32_t)(arg1)->GetMemoryMaxTransferSize();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1setMemoryMaxTransferSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  uint32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  {
    try
    {
      (arg1)->SetMemoryMaxTransferSize(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1getNodeDiscoveryMaxCacheCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (uint32_t)(arg1)->GetNodeDiscoveryMaxCacheCount();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1setNodeDiscoveryMaxCacheCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  uint32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  {
    try
    {
      (arg1)->SetNodeDiscoveryMaxCacheCount(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1unregisterServiceType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      (arg1)->UnregisterServiceType((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1ConnectService_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jstring jarg6) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > arg4 ;
  ClientServiceListenerDirector *arg5 = (ClientServiceListenerDirector *) 0 ;
  std::string *arg6 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > *argp4 ;
  boost::shared_ptr< RobotRaconteur::MessageElementData > *smartarg4 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg5_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  
  // intrusive_ptr by value
  smartarg4 = *(boost::shared_ptr<  RobotRaconteur::MessageElementData >**)&jarg4;
  if (smartarg4) {
    arg4 = boost::intrusive_ptr<  RobotRaconteur::MessageElementData >(smartarg4->get(), true);
  }
  
  arg5 = *(ClientServiceListenerDirector **)&jarg5; 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  {
    try
    {
      result = RobotRaconteur_RobotRaconteurNode_ConnectService__SWIG_0(arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,(std::string const &)*arg6);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedServiceStub >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1ConnectService_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > arg4 ;
  ClientServiceListenerDirector *arg5 = (ClientServiceListenerDirector *) 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > *argp4 ;
  boost::shared_ptr< RobotRaconteur::MessageElementData > *smartarg4 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg5_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  
  // intrusive_ptr by value
  smartarg4 = *(boost::shared_ptr<  RobotRaconteur::MessageElementData >**)&jarg4;
  if (smartarg4) {
    arg4 = boost::intrusive_ptr<  RobotRaconteur::MessageElementData >(smartarg4->get(), true);
  }
  
  arg5 = *(ClientServiceListenerDirector **)&jarg5; 
  {
    try
    {
      result = RobotRaconteur_RobotRaconteurNode_ConnectService__SWIG_0(arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedServiceStub >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1ConnectService_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > arg4 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > *argp4 ;
  boost::shared_ptr< RobotRaconteur::MessageElementData > *smartarg4 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  
  // intrusive_ptr by value
  smartarg4 = *(boost::shared_ptr<  RobotRaconteur::MessageElementData >**)&jarg4;
  if (smartarg4) {
    arg4 = boost::intrusive_ptr<  RobotRaconteur::MessageElementData >(smartarg4->get(), true);
  }
  
  {
    try
    {
      result = RobotRaconteur_RobotRaconteurNode_ConnectService__SWIG_0(arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedServiceStub >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1ConnectService_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try
    {
      result = RobotRaconteur_RobotRaconteurNode_ConnectService__SWIG_0(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedServiceStub >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1ConnectService_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = RobotRaconteur_RobotRaconteurNode_ConnectService__SWIG_0(arg1,(std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedServiceStub >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1ConnectService_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jstring jarg6) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > arg4 ;
  ClientServiceListenerDirector *arg5 = (ClientServiceListenerDirector *) 0 ;
  std::string *arg6 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > *argp4 ;
  boost::shared_ptr< RobotRaconteur::MessageElementData > *smartarg4 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg5_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  
  // intrusive_ptr by value
  smartarg4 = *(boost::shared_ptr<  RobotRaconteur::MessageElementData >**)&jarg4;
  if (smartarg4) {
    arg4 = boost::intrusive_ptr<  RobotRaconteur::MessageElementData >(smartarg4->get(), true);
  }
  
  arg5 = *(ClientServiceListenerDirector **)&jarg5; 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  {
    try
    {
      result = RobotRaconteur_RobotRaconteurNode_ConnectService__SWIG_5(arg1,(std::vector< std::string > const &)*arg2,(std::string const &)*arg3,arg4,arg5,(std::string const &)*arg6);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedServiceStub >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1ConnectService_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > arg4 ;
  ClientServiceListenerDirector *arg5 = (ClientServiceListenerDirector *) 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > *argp4 ;
  boost::shared_ptr< RobotRaconteur::MessageElementData > *smartarg4 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg5_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  
  // intrusive_ptr by value
  smartarg4 = *(boost::shared_ptr<  RobotRaconteur::MessageElementData >**)&jarg4;
  if (smartarg4) {
    arg4 = boost::intrusive_ptr<  RobotRaconteur::MessageElementData >(smartarg4->get(), true);
  }
  
  arg5 = *(ClientServiceListenerDirector **)&jarg5; 
  {
    try
    {
      result = RobotRaconteur_RobotRaconteurNode_ConnectService__SWIG_5(arg1,(std::vector< std::string > const &)*arg2,(std::string const &)*arg3,arg4,arg5);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedServiceStub >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1ConnectService_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > arg4 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > *argp4 ;
  boost::shared_ptr< RobotRaconteur::MessageElementData > *smartarg4 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  
  // intrusive_ptr by value
  smartarg4 = *(boost::shared_ptr<  RobotRaconteur::MessageElementData >**)&jarg4;
  if (smartarg4) {
    arg4 = boost::intrusive_ptr<  RobotRaconteur::MessageElementData >(smartarg4->get(), true);
  }
  
  {
    try
    {
      result = RobotRaconteur_RobotRaconteurNode_ConnectService__SWIG_5(arg1,(std::vector< std::string > const &)*arg2,(std::string const &)*arg3,arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedServiceStub >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1ConnectService_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try
    {
      result = RobotRaconteur_RobotRaconteurNode_ConnectService__SWIG_5(arg1,(std::vector< std::string > const &)*arg2,(std::string const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedServiceStub >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1ConnectService_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = RobotRaconteur_RobotRaconteurNode_ConnectService__SWIG_5(arg1,(std::vector< std::string > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::WrappedServiceStub >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1AsyncConnectService_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jstring jarg6, jint jarg7, jlong jarg8, jobject jarg8_, jint jarg9) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > *arg4 = 0 ;
  ClientServiceListenerDirector *arg5 = (ClientServiceListenerDirector *) 0 ;
  std::string *arg6 = 0 ;
  int32_t arg7 ;
  RobotRaconteur::AsyncStubReturnDirector *arg8 = (RobotRaconteur::AsyncStubReturnDirector *) 0 ;
  int32_t arg9 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > tempnull4 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > temp4 ;
  boost::shared_ptr< RobotRaconteur::MessageElementData > *smartarg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg8_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  
  // intrusive_ptr by reference
  if ( jarg4 ) {
    smartarg4 = *(boost::shared_ptr<  RobotRaconteur::MessageElementData >**)&jarg4;
    temp4 = boost::intrusive_ptr<  RobotRaconteur::MessageElementData >(smartarg4->get(), true);
    arg4 = &temp4;
  } else {
    arg4 = &tempnull4;
  }
  
  arg5 = *(ClientServiceListenerDirector **)&jarg5; 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return ;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  arg7 = (int32_t)jarg7; 
  arg8 = *(RobotRaconteur::AsyncStubReturnDirector **)&jarg8; 
  arg9 = (int32_t)jarg9; 
  {
    try
    {
      RobotRaconteur_RobotRaconteurNode_AsyncConnectService__SWIG_0(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(boost::intrusive_ptr< RobotRaconteur::MessageElementData > const &)*arg4,arg5,(std::string const &)*arg6,arg7,arg8,arg9);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1AsyncConnectService_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jstring jarg6, jint jarg7, jlong jarg8, jobject jarg8_, jint jarg9) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > *arg4 = 0 ;
  ClientServiceListenerDirector *arg5 = (ClientServiceListenerDirector *) 0 ;
  std::string *arg6 = 0 ;
  int32_t arg7 ;
  RobotRaconteur::AsyncStubReturnDirector *arg8 = (RobotRaconteur::AsyncStubReturnDirector *) 0 ;
  int32_t arg9 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > tempnull4 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElementData > temp4 ;
  boost::shared_ptr< RobotRaconteur::MessageElementData > *smartarg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg8_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  
  // intrusive_ptr by reference
  if ( jarg4 ) {
    smartarg4 = *(boost::shared_ptr<  RobotRaconteur::MessageElementData >**)&jarg4;
    temp4 = boost::intrusive_ptr<  RobotRaconteur::MessageElementData >(smartarg4->get(), true);
    arg4 = &temp4;
  } else {
    arg4 = &tempnull4;
  }
  
  arg5 = *(ClientServiceListenerDirector **)&jarg5; 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return ;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  arg7 = (int32_t)jarg7; 
  arg8 = *(RobotRaconteur::AsyncStubReturnDirector **)&jarg8; 
  arg9 = (int32_t)jarg9; 
  {
    try
    {
      RobotRaconteur_RobotRaconteurNode_AsyncConnectService__SWIG_1(arg1,(std::vector< std::string > const &)*arg2,(std::string const &)*arg3,(boost::intrusive_ptr< RobotRaconteur::MessageElementData > const &)*arg4,arg5,(std::string const &)*arg6,arg7,arg8,arg9);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1DisconnectService(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jarg2 : &tempnull2; 
  {
    try
    {
      RobotRaconteur_RobotRaconteurNode_DisconnectService(arg1,(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1AsyncDisconnectService(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *arg2 = 0 ;
  RobotRaconteur::AsyncVoidNoErrReturnDirector *arg3 = (RobotRaconteur::AsyncVoidNoErrReturnDirector *) 0 ;
  int32_t arg4 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jarg2 : &tempnull2; 
  arg3 = *(RobotRaconteur::AsyncVoidNoErrReturnDirector **)&jarg3; 
  arg4 = (int32_t)jarg4; 
  {
    try
    {
      RobotRaconteur_RobotRaconteurNode_AsyncDisconnectService(arg1,(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &)*arg2,arg3,arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1selectRemoteNodeURL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  {
    try
    {
      result = RobotRaconteur::RobotRaconteurNode::SelectRemoteNodeURL((std::vector< std::string > const &)*arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1RegisterServiceType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::ServiceDefinition > **)&jarg2 : &tempnull2; 
  {
    try
    {
      RobotRaconteur_RobotRaconteurNode_RegisterServiceType(arg1,(boost::shared_ptr< RobotRaconteur::ServiceDefinition > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1RegisterServiceTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > const & reference is null");
    return ;
  } 
  {
    try
    {
      RobotRaconteur_RobotRaconteurNode_RegisterServiceTypes(arg1,(std::vector< boost::shared_ptr< RobotRaconteur::ServiceDefinition > > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1GetServiceType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = RobotRaconteur_RobotRaconteurNode_GetServiceType(arg1,(std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::ServiceDefinition > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::ServiceDefinition >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1GetPulledServiceType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::RRObject > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::RRObject > tempnull2 ;
  boost::shared_ptr< RobotRaconteur::ServiceDefinition > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::RRObject > **)&jarg2 : &tempnull2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try
    {
      result = RobotRaconteur_RobotRaconteurNode_GetPulledServiceType(arg1,(boost::shared_ptr< RobotRaconteur::RRObject > const &)*arg2,(std::string const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::ServiceDefinition > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::ServiceDefinition >(result) : 0; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1isServiceTypeRegistered(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (bool)(arg1)->IsServiceTypeRegistered((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1GetRegisteredServiceTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetRegisteredServiceTypes();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1GetPulledServiceTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::RRObject > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::RRObject > tempnull2 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::RRObject > **)&jarg2 : &tempnull2; 
  {
    try
    {
      result = (arg1)->GetPulledServiceTypes((boost::shared_ptr< RobotRaconteur::RRObject > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1get_1s(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > result;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = RobotRaconteur::RobotRaconteurNode::sp();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::RobotRaconteurNode >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1Shutdown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->Shutdown();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1RequestObjectLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jstring jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *arg2 = 0 ;
  RobotRaconteur::RobotRaconteurObjectLockFlags arg3 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > tempnull2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jarg2 : &tempnull2; 
  arg3 = (RobotRaconteur::RobotRaconteurObjectLockFlags)jarg3; 
  {
    try
    {
      result = RobotRaconteur_RobotRaconteurNode_RequestObjectLock(arg1,(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &)*arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1ReleaseObjectLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > tempnull2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jarg2 : &tempnull2; 
  {
    try
    {
      result = RobotRaconteur_RobotRaconteurNode_ReleaseObjectLock(arg1,(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1MonitorEnter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *arg2 = 0 ;
  int32_t arg3 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jarg2 : &tempnull2; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      RobotRaconteur_RobotRaconteurNode_MonitorEnter__SWIG_0(arg1,(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &)*arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1MonitorEnter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jarg2 : &tempnull2; 
  {
    try
    {
      RobotRaconteur_RobotRaconteurNode_MonitorEnter__SWIG_0(arg1,(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1MonitorExit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jarg2 : &tempnull2; 
  {
    try
    {
      RobotRaconteur_RobotRaconteurNode_MonitorExit(arg1,(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1NowUTC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::posix_time::ptime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->NowUTC();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  {
    {
      TimeSpec timespec_result1 = RobotRaconteur::ptimeToTimeSpec(result);
      *(RobotRaconteur::TimeSpec **)&jresult = new RobotRaconteur::TimeSpec((const RobotRaconteur::TimeSpec &)timespec_result1);
    }    
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1NowTimeSpec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  RobotRaconteur::TimeSpec result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->NowTimeSpec();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::TimeSpec **)&jresult = new RobotRaconteur::TimeSpec((const RobotRaconteur::TimeSpec &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1NowNodeTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::posix_time::ptime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->NowNodeTime();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  {
    {
      TimeSpec timespec_result1 = RobotRaconteur::ptimeToTimeSpec(result);
      *(RobotRaconteur::TimeSpec **)&jresult = new RobotRaconteur::TimeSpec((const RobotRaconteur::TimeSpec &)timespec_result1);
    }    
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1NodeSyncTimeUTC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::posix_time::ptime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->NodeSyncTimeUTC();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  {
    {
      TimeSpec timespec_result1 = RobotRaconteur::ptimeToTimeSpec(result);
      *(RobotRaconteur::TimeSpec **)&jresult = new RobotRaconteur::TimeSpec((const RobotRaconteur::TimeSpec &)timespec_result1);
    }    
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1NodeSyncTimeSpec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  RobotRaconteur::TimeSpec result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->NodeSyncTimeSpec();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::TimeSpec **)&jresult = new RobotRaconteur::TimeSpec((const RobotRaconteur::TimeSpec &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1AsyncRequestObjectLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jlong jarg5, jobject jarg5_, jint jarg6) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *arg2 = 0 ;
  RobotRaconteur::RobotRaconteurObjectLockFlags arg3 ;
  int32_t arg4 ;
  RobotRaconteur::AsyncStringReturnDirector *arg5 = (RobotRaconteur::AsyncStringReturnDirector *) 0 ;
  int32_t arg6 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jarg2 : &tempnull2; 
  arg3 = (RobotRaconteur::RobotRaconteurObjectLockFlags)jarg3; 
  arg4 = (int32_t)jarg4; 
  arg5 = *(RobotRaconteur::AsyncStringReturnDirector **)&jarg5; 
  arg6 = (int32_t)jarg6; 
  {
    try
    {
      RobotRaconteur_RobotRaconteurNode_AsyncRequestObjectLock(arg1,(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &)*arg2,arg3,arg4,arg5,arg6);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1AsyncReleaseObjectLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_, jint jarg5) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *arg2 = 0 ;
  int32_t arg3 ;
  RobotRaconteur::AsyncStringReturnDirector *arg4 = (RobotRaconteur::AsyncStringReturnDirector *) 0 ;
  int32_t arg5 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jarg2 : &tempnull2; 
  arg3 = (int32_t)jarg3; 
  arg4 = *(RobotRaconteur::AsyncStringReturnDirector **)&jarg4; 
  arg5 = (int32_t)jarg5; 
  {
    try
    {
      RobotRaconteur_RobotRaconteurNode_AsyncReleaseObjectLock(arg1,(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &)*arg2,arg3,arg4,arg5);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1GetServiceAttributes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > tempnull2 ;
  boost::intrusive_ptr< RobotRaconteur::MessageElement > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jarg2 : &tempnull2; 
  {
    try
    {
      result = RobotRaconteur_RobotRaconteurNode_GetServiceAttributes(arg1,(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  if (result) {
    intrusive_ptr_add_ref(result.get());
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = new boost::shared_ptr<  RobotRaconteur::MessageElement >(result.get(), SWIG_intrusive_deleter<  RobotRaconteur::MessageElement >());
  } else {
    *(boost::shared_ptr<  RobotRaconteur::MessageElement > **)&jresult = 0;
  }
  
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1GetServiceNodeID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > tempnull2 ;
  RobotRaconteur::NodeID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jarg2 : &tempnull2; 
  {
    try
    {
      result = RobotRaconteur_RobotRaconteurNode_GetServiceNodeID(arg1,(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::NodeID **)&jresult = new RobotRaconteur::NodeID((const RobotRaconteur::NodeID &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1GetServiceNodeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > tempnull2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jarg2 : &tempnull2; 
  {
    try
    {
      result = RobotRaconteur_RobotRaconteurNode_GetServiceNodeName(arg1,(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1GetServiceName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > tempnull2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jarg2 : &tempnull2; 
  {
    try
    {
      result = RobotRaconteur_RobotRaconteurNode_GetServiceName(arg1,(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1GetObjectServicePath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > tempnull2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jarg2 : &tempnull2; 
  {
    try
    {
      result = RobotRaconteur_RobotRaconteurNode_GetObjectServicePath(arg1,(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1GetObjectType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > tempnull2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jarg2 : &tempnull2; 
  {
    try
    {
      result = RobotRaconteur_RobotRaconteurNode_GetObjectType(arg1,(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1RegisterService_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::RRObject > *arg4 = 0 ;
  boost::shared_ptr< RobotRaconteur::ServiceSecurityPolicy > arg5 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::RRObject > tempnull4 ;
  boost::shared_ptr< RobotRaconteur::ServiceSecurityPolicy > *argp5 ;
  boost::shared_ptr< RobotRaconteur::ServerContext > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg5_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? *(boost::shared_ptr< RobotRaconteur::RRObject > **)&jarg4 : &tempnull4; 
  argp5 = *(boost::shared_ptr< RobotRaconteur::ServiceSecurityPolicy > **)&jarg5;
  if (argp5) arg5 = *argp5; 
  {
    try
    {
      result = (arg1)->RegisterService((std::string const &)*arg2,(std::string const &)*arg3,(boost::shared_ptr< RobotRaconteur::RRObject > const &)*arg4,arg5);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::ServerContext > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::ServerContext >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1RegisterService_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::RRObject > *arg4 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::RRObject > tempnull4 ;
  boost::shared_ptr< RobotRaconteur::ServerContext > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? *(boost::shared_ptr< RobotRaconteur::RRObject > **)&jarg4 : &tempnull4; 
  {
    try
    {
      result = (arg1)->RegisterService((std::string const &)*arg2,(std::string const &)*arg3,(boost::shared_ptr< RobotRaconteur::RRObject > const &)*arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::ServerContext > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::ServerContext >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1closeService(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      (arg1)->CloseService((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1NodeID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  RobotRaconteur::NodeID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->NodeID();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::NodeID **)&jresult = new RobotRaconteur::NodeID((const RobotRaconteur::NodeID &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1SetNodeID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  RobotRaconteur::NodeID arg2 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  RobotRaconteur::NodeID const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(RobotRaconteur::NodeID **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null RobotRaconteur::NodeID const");
    return ;
  }
  arg2 = *argp2; 
  {
    try
    {
      (arg1)->SetNodeID(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1NodeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->NodeName();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1SetNodeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      (arg1)->SetNodeName((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1getThreadPoolCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (int32_t)(arg1)->GetThreadPoolCount();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1setThreadPoolCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      (arg1)->SetThreadPoolCount(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1FindObjectType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jstring jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::RRObject > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::RRObject > tempnull2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::RRObject > **)&jarg2 : &tempnull2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try
    {
      result = (arg1)->FindObjectType((boost::shared_ptr< RobotRaconteur::RRObject > const &)*arg2,(std::string const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1FindObjectType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4) {
  jstring jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::RRObject > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::RRObject > tempnull2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::RRObject > **)&jarg2 : &tempnull2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try
    {
      result = (arg1)->FindObjectType((boost::shared_ptr< RobotRaconteur::RRObject > const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1AsyncFindObjectType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jint jarg4, jlong jarg5, jobject jarg5_, jint jarg6) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t arg4 ;
  RobotRaconteur::AsyncStringReturnDirector *arg5 = (RobotRaconteur::AsyncStringReturnDirector *) 0 ;
  int32_t arg6 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jarg2 : &tempnull2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int32_t)jarg4; 
  arg5 = *(RobotRaconteur::AsyncStringReturnDirector **)&jarg5; 
  arg6 = (int32_t)jarg6; 
  {
    try
    {
      RobotRaconteur_RobotRaconteurNode_AsyncFindObjectType__SWIG_0(arg1,(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1AsyncFindObjectType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jint jarg5, jlong jarg6, jobject jarg6_, jint jarg7) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t arg5 ;
  RobotRaconteur::AsyncStringReturnDirector *arg6 = (RobotRaconteur::AsyncStringReturnDirector *) 0 ;
  int32_t arg7 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::WrappedServiceStub > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg6_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jarg2 : &tempnull2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int32_t)jarg5; 
  arg6 = *(RobotRaconteur::AsyncStringReturnDirector **)&jarg6; 
  arg7 = (int32_t)jarg7; 
  {
    try
    {
      RobotRaconteur_RobotRaconteurNode_AsyncFindObjectType__SWIG_1(arg1,(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5,arg6,arg7);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1SetExceptionHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  RobotRaconteur::AsyncVoidReturnDirector *arg2 = (RobotRaconteur::AsyncVoidReturnDirector *) 0 ;
  int32_t arg3 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::AsyncVoidReturnDirector **)&jarg2; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      RobotRaconteur_RobotRaconteurNode_SetExceptionHandler(arg1,arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1ClearExceptionHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      RobotRaconteur_RobotRaconteurNode_ClearExceptionHandler(arg1);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1sleep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::posix_time::time_duration *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::posix_time::time_duration tmpDur2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  {
    tmpDur2=boost::posix_time::milliseconds(jarg2);
    arg2=&tmpDur2;
  }
  {
    try
    {
      (arg1)->Sleep((boost::posix_time::time_duration const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1CreateTimer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3, jlong jarg4, jobject jarg4_, jint jarg5) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::posix_time::time_duration *arg2 = 0 ;
  bool arg3 ;
  RobotRaconteur::AsyncTimerEventReturnDirector *arg4 = (RobotRaconteur::AsyncTimerEventReturnDirector *) 0 ;
  int32_t arg5 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::posix_time::time_duration tmpDur2 ;
  boost::shared_ptr< RobotRaconteur::Timer > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  {
    tmpDur2=boost::posix_time::milliseconds(jarg2);
    arg2=&tmpDur2;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = *(RobotRaconteur::AsyncTimerEventReturnDirector **)&jarg4; 
  arg5 = (int32_t)jarg5; 
  {
    try
    {
      result = RobotRaconteur_RobotRaconteurNode_CreateTimer(arg1,(boost::posix_time::time_duration const &)*arg2,arg3,arg4,arg5);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::Timer > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::Timer >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1createRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  double arg2 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::Rate > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try
    {
      result = (arg1)->CreateRate(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::Rate > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::Rate >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1createAutoResetEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::AutoResetEvent > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->CreateAutoResetEvent();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::AutoResetEvent > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::AutoResetEvent >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1PostToThreadPool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  RobotRaconteur::AsyncVoidNoErrReturnDirector *arg2 = (RobotRaconteur::AsyncVoidNoErrReturnDirector *) 0 ;
  int32_t arg3 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::AsyncVoidNoErrReturnDirector **)&jarg2; 
  arg3 = (int32_t)jarg3; 
  {
    try
    {
      RobotRaconteur_RobotRaconteurNode_PostToThreadPool(arg1,arg2,arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1_1GetRobotRaconteurVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetRobotRaconteurVersion();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1compareLogLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  RobotRaconteur::RobotRaconteur_LogLevel arg2 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (RobotRaconteur::RobotRaconteur_LogLevel)jarg2; 
  {
    try
    {
      result = (bool)(arg1)->CompareLogLevel(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1logMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  RobotRaconteur::RobotRaconteur_LogLevel arg2 ;
  std::string *arg3 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (RobotRaconteur::RobotRaconteur_LogLevel)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try
    {
      (arg1)->LogMessage(arg2,(std::string const &)*arg3);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1logRecord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  RobotRaconteur::RRLogRecord *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::RRLogRecord **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::RRLogRecord const & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->LogRecord((RobotRaconteur::RRLogRecord const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1getLogLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  RobotRaconteur::RobotRaconteur_LogLevel result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (RobotRaconteur::RobotRaconteur_LogLevel)(arg1)->GetLogLevel();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1setLogLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  RobotRaconteur::RobotRaconteur_LogLevel arg2 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (RobotRaconteur::RobotRaconteur_LogLevel)jarg2; 
  {
    try
    {
      (arg1)->SetLogLevel(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1setLogLevelFromString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  RobotRaconteur::RobotRaconteur_LogLevel result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (RobotRaconteur::RobotRaconteur_LogLevel)(arg1)->SetLogLevelFromString((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1setLogLevelFromEnvVariable_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  RobotRaconteur::RobotRaconteur_LogLevel result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try
    {
      result = (RobotRaconteur::RobotRaconteur_LogLevel)(arg1)->SetLogLevelFromEnvVariable((std::string const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1setLogLevelFromEnvVariable_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  RobotRaconteur::RobotRaconteur_LogLevel result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (RobotRaconteur::RobotRaconteur_LogLevel)(arg1)->SetLogLevelFromEnvVariable();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1getLogRecordHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::LogRecordHandler > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetLogRecordHandler();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(boost::shared_ptr< RobotRaconteur::LogRecordHandler > **)&jresult = result ? new boost::shared_ptr< RobotRaconteur::LogRecordHandler >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1setLogRecordHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::LogRecordHandler > *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  boost::shared_ptr< RobotRaconteur::LogRecordHandler > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? *(boost::shared_ptr< RobotRaconteur::LogRecordHandler > **)&jarg2 : &tempnull2; 
  {
    try
    {
      (arg1)->SetLogRecordHandler((boost::shared_ptr< RobotRaconteur::LogRecordHandler > const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1checkConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  uint32_t arg2 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  {
    try
    {
      (arg1)->CheckConnection(arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1getNodeDirectories(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  RobotRaconteur::NodeDirectories result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->GetNodeDirectories();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(RobotRaconteur::NodeDirectories **)&jresult = new RobotRaconteur::NodeDirectories((const RobotRaconteur::NodeDirectories &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RobotRaconteurNode_1setNodeDirectories(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  RobotRaconteur::NodeDirectories *arg2 = 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(RobotRaconteur::NodeDirectories **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RobotRaconteur::NodeDirectories const & reference is null");
    return ;
  } 
  {
    try
    {
      (arg1)->SetNodeDirectories((RobotRaconteur::NodeDirectories const &)*arg2);
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_new_1RobotRaconteurNode(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RobotRaconteur::RobotRaconteurNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try
    {
      result = (RobotRaconteur::RobotRaconteurNode *)new RobotRaconteur::RobotRaconteurNode();
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return 0;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  
  *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jresult = result ? new boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_delete_1RobotRaconteurNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RobotRaconteur::RobotRaconteurNode *arg1 = (RobotRaconteur::RobotRaconteurNode *) 0 ;
  boost::shared_ptr< RobotRaconteur::RobotRaconteurNode > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(boost::shared_ptr<  RobotRaconteur::RobotRaconteurNode > **)&jarg1;
  arg1 = (RobotRaconteur::RobotRaconteurNode *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (RobotRaconteur::RobotRaconteurException& e)
    {
      jclass clazz2;
      jmethodID mid2;
      jthrowable jexp;
      jlong error_info_ptr=0;
      RobotRaconteur::HandlerErrorInfo error_info(e);
      clazz2=jenv->FindClass("com/robotraconteur/RobotRaconteurExceptionUtil");
      if (!clazz2) goto rrerrfail;
      mid2 = jenv->GetStaticMethodID(clazz2, "errorInfoToException" ,"(J)Ljava/lang/RuntimeException;");
      if (!mid2) goto rrerrfail;
      error_info_ptr=(jlong)&error_info;
      jexp=(jthrowable)jenv->CallStaticObjectMethod(clazz2,mid2,error_info_ptr);
      jenv->Throw(jexp);
      return ;
      
    rrerrfail:
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
      
      
    }
    catch (std::exception& e) {
      jclass clazz = jenv->FindClass( "java/lang/RuntimeException");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementData_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    boost::shared_ptr< RobotRaconteur::MessageElementData > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(boost::shared_ptr< RobotRaconteur::MessageElementData > **)&jarg1;
    *(boost::shared_ptr< RobotRaconteur::RRValue > **)&baseptr = argp1 ? new boost::shared_ptr< RobotRaconteur::RRValue >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_RRBaseArray_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    boost::shared_ptr< RobotRaconteur::RRBaseArray > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(boost::shared_ptr< RobotRaconteur::RRBaseArray > **)&jarg1;
    *(boost::shared_ptr< RobotRaconteur::MessageElementData > **)&baseptr = argp1 ? new boost::shared_ptr< RobotRaconteur::MessageElementData >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_PropertyDefinition_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    boost::shared_ptr< RobotRaconteur::PropertyDefinition > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(boost::shared_ptr< RobotRaconteur::PropertyDefinition > **)&jarg1;
    *(boost::shared_ptr< RobotRaconteur::MemberDefinition > **)&baseptr = argp1 ? new boost::shared_ptr< RobotRaconteur::MemberDefinition >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_FunctionDefinition_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    boost::shared_ptr< RobotRaconteur::FunctionDefinition > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(boost::shared_ptr< RobotRaconteur::FunctionDefinition > **)&jarg1;
    *(boost::shared_ptr< RobotRaconteur::MemberDefinition > **)&baseptr = argp1 ? new boost::shared_ptr< RobotRaconteur::MemberDefinition >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_EventDefinition_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    boost::shared_ptr< RobotRaconteur::EventDefinition > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(boost::shared_ptr< RobotRaconteur::EventDefinition > **)&jarg1;
    *(boost::shared_ptr< RobotRaconteur::MemberDefinition > **)&baseptr = argp1 ? new boost::shared_ptr< RobotRaconteur::MemberDefinition >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_ObjRefDefinition_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    boost::shared_ptr< RobotRaconteur::ObjRefDefinition > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(boost::shared_ptr< RobotRaconteur::ObjRefDefinition > **)&jarg1;
    *(boost::shared_ptr< RobotRaconteur::MemberDefinition > **)&baseptr = argp1 ? new boost::shared_ptr< RobotRaconteur::MemberDefinition >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_PipeDefinition_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    boost::shared_ptr< RobotRaconteur::PipeDefinition > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(boost::shared_ptr< RobotRaconteur::PipeDefinition > **)&jarg1;
    *(boost::shared_ptr< RobotRaconteur::MemberDefinition > **)&baseptr = argp1 ? new boost::shared_ptr< RobotRaconteur::MemberDefinition >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_CallbackDefinition_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    boost::shared_ptr< RobotRaconteur::CallbackDefinition > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(boost::shared_ptr< RobotRaconteur::CallbackDefinition > **)&jarg1;
    *(boost::shared_ptr< RobotRaconteur::MemberDefinition > **)&baseptr = argp1 ? new boost::shared_ptr< RobotRaconteur::MemberDefinition >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WireDefinition_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    boost::shared_ptr< RobotRaconteur::WireDefinition > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(boost::shared_ptr< RobotRaconteur::WireDefinition > **)&jarg1;
    *(boost::shared_ptr< RobotRaconteur::MemberDefinition > **)&baseptr = argp1 ? new boost::shared_ptr< RobotRaconteur::MemberDefinition >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MemoryDefinition_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    boost::shared_ptr< RobotRaconteur::MemoryDefinition > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(boost::shared_ptr< RobotRaconteur::MemoryDefinition > **)&jarg1;
    *(boost::shared_ptr< RobotRaconteur::MemberDefinition > **)&baseptr = argp1 ? new boost::shared_ptr< RobotRaconteur::MemberDefinition >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_Message_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    boost::shared_ptr< RobotRaconteur::Message > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(boost::shared_ptr< RobotRaconteur::Message > **)&jarg1;
    *(boost::shared_ptr< RobotRaconteur::RRValue > **)&baseptr = argp1 ? new boost::shared_ptr< RobotRaconteur::RRValue >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageHeader_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    boost::shared_ptr< RobotRaconteur::MessageHeader > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(boost::shared_ptr< RobotRaconteur::MessageHeader > **)&jarg1;
    *(boost::shared_ptr< RobotRaconteur::RRValue > **)&baseptr = argp1 ? new boost::shared_ptr< RobotRaconteur::RRValue >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageEntry_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    boost::shared_ptr< RobotRaconteur::MessageEntry > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(boost::shared_ptr< RobotRaconteur::MessageEntry > **)&jarg1;
    *(boost::shared_ptr< RobotRaconteur::RRValue > **)&baseptr = argp1 ? new boost::shared_ptr< RobotRaconteur::RRValue >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElement_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    boost::shared_ptr< RobotRaconteur::MessageElement > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(boost::shared_ptr< RobotRaconteur::MessageElement > **)&jarg1;
    *(boost::shared_ptr< RobotRaconteur::RRValue > **)&baseptr = argp1 ? new boost::shared_ptr< RobotRaconteur::RRValue >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_MessageElementNestedElementList_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(boost::shared_ptr< RobotRaconteur::MessageElementNestedElementList > **)&jarg1;
    *(boost::shared_ptr< RobotRaconteur::MessageElementData > **)&baseptr = argp1 ? new boost::shared_ptr< RobotRaconteur::MessageElementData >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_TcpTransport_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    boost::shared_ptr< RobotRaconteur::TcpTransport > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(boost::shared_ptr< RobotRaconteur::TcpTransport > **)&jarg1;
    *(boost::shared_ptr< RobotRaconteur::Transport > **)&baseptr = argp1 ? new boost::shared_ptr< RobotRaconteur::Transport >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_LocalTransport_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    boost::shared_ptr< RobotRaconteur::LocalTransport > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(boost::shared_ptr< RobotRaconteur::LocalTransport > **)&jarg1;
    *(boost::shared_ptr< RobotRaconteur::Transport > **)&baseptr = argp1 ? new boost::shared_ptr< RobotRaconteur::Transport >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_HardwareTransport_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    boost::shared_ptr< RobotRaconteur::HardwareTransport > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(boost::shared_ptr< RobotRaconteur::HardwareTransport > **)&jarg1;
    *(boost::shared_ptr< RobotRaconteur::Transport > **)&baseptr = argp1 ? new boost::shared_ptr< RobotRaconteur::Transport >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_IntraTransport_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    boost::shared_ptr< RobotRaconteur::IntraTransport > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(boost::shared_ptr< RobotRaconteur::IntraTransport > **)&jarg1;
    *(boost::shared_ptr< RobotRaconteur::Transport > **)&baseptr = argp1 ? new boost::shared_ptr< RobotRaconteur::Transport >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WallTimer_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    boost::shared_ptr< RobotRaconteur::WallTimer > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(boost::shared_ptr< RobotRaconteur::WallTimer > **)&jarg1;
    *(boost::shared_ptr< RobotRaconteur::Timer > **)&baseptr = argp1 ? new boost::shared_ptr< RobotRaconteur::Timer >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WallRate_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    boost::shared_ptr< RobotRaconteur::WallRate > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(boost::shared_ptr< RobotRaconteur::WallRate > **)&jarg1;
    *(boost::shared_ptr< RobotRaconteur::Rate > **)&baseptr = argp1 ? new boost::shared_ptr< RobotRaconteur::Rate >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedServiceStub_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    boost::shared_ptr< RobotRaconteur::WrappedServiceStub > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > **)&jarg1;
    *(boost::shared_ptr< RobotRaconteur::RRObject > **)&baseptr = argp1 ? new boost::shared_ptr< RobotRaconteur::RRObject >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedRRObject_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    boost::shared_ptr< RobotRaconteur::WrappedRRObject > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(boost::shared_ptr< RobotRaconteur::WrappedRRObject > **)&jarg1;
    *(boost::shared_ptr< RobotRaconteur::RRObject > **)&baseptr = argp1 ? new boost::shared_ptr< RobotRaconteur::RRObject >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_PasswordFileUserAuthenticator_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    boost::shared_ptr< RobotRaconteur::PasswordFileUserAuthenticator > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(boost::shared_ptr< RobotRaconteur::PasswordFileUserAuthenticator > **)&jarg1;
    *(boost::shared_ptr< RobotRaconteur::UserAuthenticator > **)&baseptr = argp1 ? new boost::shared_ptr< RobotRaconteur::UserAuthenticator >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_WrappedUserAuthenticator_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    boost::shared_ptr< RobotRaconteur::WrappedUserAuthenticator > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(boost::shared_ptr< RobotRaconteur::WrappedUserAuthenticator > **)&jarg1;
    *(boost::shared_ptr< RobotRaconteur::UserAuthenticator > **)&baseptr = argp1 ? new boost::shared_ptr< RobotRaconteur::UserAuthenticator >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_UserLogRecordHandlerBase_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    boost::shared_ptr< RobotRaconteur::UserLogRecordHandlerBase > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(boost::shared_ptr< RobotRaconteur::UserLogRecordHandlerBase > **)&jarg1;
    *(boost::shared_ptr< RobotRaconteur::LogRecordHandler > **)&baseptr = argp1 ? new boost::shared_ptr< RobotRaconteur::LogRecordHandler >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_com_robotraconteur_RobotRaconteurJavaJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[88] = {
    {
      "SwigDirector_AsyncRequestDirector_handler", "(Lcom/robotraconteur/AsyncRequestDirector;JJ)V" 
    },
    {
      "SwigDirector_AsyncVoidReturnDirector_handler", "(Lcom/robotraconteur/AsyncVoidReturnDirector;J)V" 
    },
    {
      "SwigDirector_AsyncVoidNoErrReturnDirector_handler", "(Lcom/robotraconteur/AsyncVoidNoErrReturnDirector;)V" 
    },
    {
      "SwigDirector_AsyncStringReturnDirector_handler", "(Lcom/robotraconteur/AsyncStringReturnDirector;Ljava/lang/String;J)V" 
    },
    {
      "SwigDirector_AsyncUInt32ReturnDirector_handler", "(Lcom/robotraconteur/AsyncUInt32ReturnDirector;JJ)V" 
    },
    {
      "SwigDirector_AsyncTimerEventReturnDirector_handler", "(Lcom/robotraconteur/AsyncTimerEventReturnDirector;JJ)V" 
    },
    {
      "SwigDirector_WrappedPipeEndpointDirector_pipeEndpointClosedCallback", "(Lcom/robotraconteur/WrappedPipeEndpointDirector;)V" 
    },
    {
      "SwigDirector_WrappedPipeEndpointDirector_packetReceivedEvent", "(Lcom/robotraconteur/WrappedPipeEndpointDirector;)V" 
    },
    {
      "SwigDirector_WrappedPipeEndpointDirector_packetAckReceivedEvent", "(Lcom/robotraconteur/WrappedPipeEndpointDirector;J)V" 
    },
    {
      "SwigDirector_AsyncPipeEndpointReturnDirector_handler", "(Lcom/robotraconteur/AsyncPipeEndpointReturnDirector;JJ)V" 
    },
    {
      "SwigDirector_WrappedPipeServerConnectDirector_pipeConnectCallback", "(Lcom/robotraconteur/WrappedPipeServerConnectDirector;J)V" 
    },
    {
      "SwigDirector_WrappedPipeBroadcasterPredicateDirector_predicate", "(Lcom/robotraconteur/WrappedPipeBroadcasterPredicateDirector;JI)Z" 
    },
    {
      "SwigDirector_WrappedWireConnectionDirector_wireValueChanged", "(Lcom/robotraconteur/WrappedWireConnectionDirector;JJ)V" 
    },
    {
      "SwigDirector_WrappedWireConnectionDirector_wireConnectionClosedCallback", "(Lcom/robotraconteur/WrappedWireConnectionDirector;)V" 
    },
    {
      "SwigDirector_AsyncWireConnectionReturnDirector_handler", "(Lcom/robotraconteur/AsyncWireConnectionReturnDirector;JJ)V" 
    },
    {
      "SwigDirector_AsyncWirePeekReturnDirector_handler", "(Lcom/robotraconteur/AsyncWirePeekReturnDirector;JJJ)V" 
    },
    {
      "SwigDirector_WrappedWireServerConnectDirector_wireConnectCallback", "(Lcom/robotraconteur/WrappedWireServerConnectDirector;J)V" 
    },
    {
      "SwigDirector_WrappedWireServerPeekValueDirector_peekValue", "(Lcom/robotraconteur/WrappedWireServerPeekValueDirector;J)J" 
    },
    {
      "SwigDirector_WrappedWireServerPokeValueDirector_pokeValue", "(Lcom/robotraconteur/WrappedWireServerPokeValueDirector;JJJ)V" 
    },
    {
      "SwigDirector_WrappedWireBroadcasterPredicateDirector_predicate", "(Lcom/robotraconteur/WrappedWireBroadcasterPredicateDirector;J)Z" 
    },
    {
      "SwigDirector_WrappedPodArrayMemoryClientBuffer_unpackReadResult", "(Lcom/robotraconteur/WrappedPodArrayMemoryClientBuffer;JJJ)V" 
    },
    {
      "SwigDirector_WrappedPodArrayMemoryClientBuffer_packWriteRequest", "(Lcom/robotraconteur/WrappedPodArrayMemoryClientBuffer;JJ)J" 
    },
    {
      "SwigDirector_WrappedPodArrayMemoryClientBuffer_getBufferLength", "(Lcom/robotraconteur/WrappedPodArrayMemoryClientBuffer;)J" 
    },
    {
      "SwigDirector_WrappedPodMultiDimArrayMemoryClientBuffer_unpackReadResult", "(Lcom/robotraconteur/WrappedPodMultiDimArrayMemoryClientBuffer;JJJ)V" 
    },
    {
      "SwigDirector_WrappedPodMultiDimArrayMemoryClientBuffer_packWriteRequest", "(Lcom/robotraconteur/WrappedPodMultiDimArrayMemoryClientBuffer;JJ)J" 
    },
    {
      "SwigDirector_WrappedArrayMemoryDirector_length", "(Lcom/robotraconteur/WrappedArrayMemoryDirector;)J" 
    },
    {
      "SwigDirector_WrappedArrayMemoryDirector_read", "(Lcom/robotraconteur/WrappedArrayMemoryDirector;JJJJ)V" 
    },
    {
      "SwigDirector_WrappedArrayMemoryDirector_write", "(Lcom/robotraconteur/WrappedArrayMemoryDirector;JJJJ)V" 
    },
    {
      "SwigDirector_WrappedMultiDimArrayMemoryDirector_dimensions", "(Lcom/robotraconteur/WrappedMultiDimArrayMemoryDirector;)J" 
    },
    {
      "SwigDirector_WrappedMultiDimArrayMemoryDirector_dimCount", "(Lcom/robotraconteur/WrappedMultiDimArrayMemoryDirector;)J" 
    },
    {
      "SwigDirector_WrappedMultiDimArrayMemoryDirector_read", "(Lcom/robotraconteur/WrappedMultiDimArrayMemoryDirector;J)V" 
    },
    {
      "SwigDirector_WrappedMultiDimArrayMemoryDirector_write", "(Lcom/robotraconteur/WrappedMultiDimArrayMemoryDirector;J)V" 
    },
    {
      "SwigDirector_WrappedPodArrayMemoryDirector_length", "(Lcom/robotraconteur/WrappedPodArrayMemoryDirector;)J" 
    },
    {
      "SwigDirector_WrappedPodArrayMemoryDirector_read", "(Lcom/robotraconteur/WrappedPodArrayMemoryDirector;JJJ)J" 
    },
    {
      "SwigDirector_WrappedPodArrayMemoryDirector_write", "(Lcom/robotraconteur/WrappedPodArrayMemoryDirector;JJJJ)V" 
    },
    {
      "SwigDirector_WrappedPodMultiDimArrayMemoryDirector_dimensions", "(Lcom/robotraconteur/WrappedPodMultiDimArrayMemoryDirector;)J" 
    },
    {
      "SwigDirector_WrappedPodMultiDimArrayMemoryDirector_dimCount", "(Lcom/robotraconteur/WrappedPodMultiDimArrayMemoryDirector;)J" 
    },
    {
      "SwigDirector_WrappedPodMultiDimArrayMemoryDirector_read", "(Lcom/robotraconteur/WrappedPodMultiDimArrayMemoryDirector;JJJ)J" 
    },
    {
      "SwigDirector_WrappedPodMultiDimArrayMemoryDirector_write", "(Lcom/robotraconteur/WrappedPodMultiDimArrayMemoryDirector;JJJJ)V" 
    },
    {
      "SwigDirector_WrappedNamedArrayMemoryClientBuffer_unpackReadResult", "(Lcom/robotraconteur/WrappedNamedArrayMemoryClientBuffer;JJJ)V" 
    },
    {
      "SwigDirector_WrappedNamedArrayMemoryClientBuffer_packWriteRequest", "(Lcom/robotraconteur/WrappedNamedArrayMemoryClientBuffer;JJ)J" 
    },
    {
      "SwigDirector_WrappedNamedArrayMemoryClientBuffer_getBufferLength", "(Lcom/robotraconteur/WrappedNamedArrayMemoryClientBuffer;)J" 
    },
    {
      "SwigDirector_WrappedNamedMultiDimArrayMemoryClientBuffer_unpackReadResult", "(Lcom/robotraconteur/WrappedNamedMultiDimArrayMemoryClientBuffer;JJJ)V" 
    },
    {
      "SwigDirector_WrappedNamedMultiDimArrayMemoryClientBuffer_packWriteRequest", "(Lcom/robotraconteur/WrappedNamedMultiDimArrayMemoryClientBuffer;JJ)J" 
    },
    {
      "SwigDirector_WrappedNamedArrayMemoryDirector_length", "(Lcom/robotraconteur/WrappedNamedArrayMemoryDirector;)J" 
    },
    {
      "SwigDirector_WrappedNamedArrayMemoryDirector_read", "(Lcom/robotraconteur/WrappedNamedArrayMemoryDirector;JJJ)J" 
    },
    {
      "SwigDirector_WrappedNamedArrayMemoryDirector_write", "(Lcom/robotraconteur/WrappedNamedArrayMemoryDirector;JJJJ)V" 
    },
    {
      "SwigDirector_WrappedNamedMultiDimArrayMemoryDirector_dimensions", "(Lcom/robotraconteur/WrappedNamedMultiDimArrayMemoryDirector;)J" 
    },
    {
      "SwigDirector_WrappedNamedMultiDimArrayMemoryDirector_dimCount", "(Lcom/robotraconteur/WrappedNamedMultiDimArrayMemoryDirector;)J" 
    },
    {
      "SwigDirector_WrappedNamedMultiDimArrayMemoryDirector_read", "(Lcom/robotraconteur/WrappedNamedMultiDimArrayMemoryDirector;JJJ)J" 
    },
    {
      "SwigDirector_WrappedNamedMultiDimArrayMemoryDirector_write", "(Lcom/robotraconteur/WrappedNamedMultiDimArrayMemoryDirector;JJJJ)V" 
    },
    {
      "SwigDirector_AsyncGeneratorClientReturnDirector_handler", "(Lcom/robotraconteur/AsyncGeneratorClientReturnDirector;JJ)V" 
    },
    {
      "SwigDirector_WrappedGeneratorServerDirector_next", "(Lcom/robotraconteur/WrappedGeneratorServerDirector;JJ)J" 
    },
    {
      "SwigDirector_WrappedGeneratorServerDirector_abort", "(Lcom/robotraconteur/WrappedGeneratorServerDirector;J)V" 
    },
    {
      "SwigDirector_WrappedGeneratorServerDirector_close", "(Lcom/robotraconteur/WrappedGeneratorServerDirector;J)V" 
    },
    {
      "SwigDirector_WrappedServiceStubDirector_dispatchEvent", "(Lcom/robotraconteur/WrappedServiceStubDirector;Ljava/lang/String;J)V" 
    },
    {
      "SwigDirector_WrappedServiceStubDirector_callbackCall", "(Lcom/robotraconteur/WrappedServiceStubDirector;Ljava/lang/String;J)J" 
    },
    {
      "SwigDirector_AsyncStubReturnDirector_handler", "(Lcom/robotraconteur/AsyncStubReturnDirector;JJ)V" 
    },
    {
      "SwigDirector_WrappedServiceSkelDirector_init", "(Lcom/robotraconteur/WrappedServiceSkelDirector;J)V" 
    },
    {
      "SwigDirector_WrappedServiceSkelDirector__CallGetProperty", "(Lcom/robotraconteur/WrappedServiceSkelDirector;Ljava/lang/String;J)J" 
    },
    {
      "SwigDirector_WrappedServiceSkelDirector__CallSetProperty", "(Lcom/robotraconteur/WrappedServiceSkelDirector;Ljava/lang/String;JJ)V" 
    },
    {
      "SwigDirector_WrappedServiceSkelDirector__CallFunction", "(Lcom/robotraconteur/WrappedServiceSkelDirector;Ljava/lang/String;JJ)J" 
    },
    {
      "SwigDirector_WrappedServiceSkelDirector__GetSubObj", "(Lcom/robotraconteur/WrappedServiceSkelDirector;Ljava/lang/String;Ljava/lang/String;)J" 
    },
    {
      "SwigDirector_WrappedServiceSkelDirector__GetArrayMemory", "(Lcom/robotraconteur/WrappedServiceSkelDirector;Ljava/lang/String;)J" 
    },
    {
      "SwigDirector_WrappedServiceSkelDirector__GetMultiDimArrayMemory", "(Lcom/robotraconteur/WrappedServiceSkelDirector;Ljava/lang/String;)J" 
    },
    {
      "SwigDirector_WrappedServiceSkelDirector__GetPodArrayMemory", "(Lcom/robotraconteur/WrappedServiceSkelDirector;Ljava/lang/String;)J" 
    },
    {
      "SwigDirector_WrappedServiceSkelDirector__GetPodMultiDimArrayMemory", "(Lcom/robotraconteur/WrappedServiceSkelDirector;Ljava/lang/String;)J" 
    },
    {
      "SwigDirector_WrappedServiceSkelDirector__GetNamedArrayMemory", "(Lcom/robotraconteur/WrappedServiceSkelDirector;Ljava/lang/String;)J" 
    },
    {
      "SwigDirector_WrappedServiceSkelDirector__GetNamedMultiDimArrayMemory", "(Lcom/robotraconteur/WrappedServiceSkelDirector;Ljava/lang/String;)J" 
    },
    {
      "SwigDirector_WrappedServiceSkelDirector_monitorEnter", "(Lcom/robotraconteur/WrappedServiceSkelDirector;I)V" 
    },
    {
      "SwigDirector_WrappedServiceSkelDirector_monitorExit", "(Lcom/robotraconteur/WrappedServiceSkelDirector;)V" 
    },
    {
      "SwigDirector_WrappedServiceSkelDirector_releaseCastObject", "(Lcom/robotraconteur/WrappedServiceSkelDirector;)V" 
    },
    {
      "SwigDirector_ServerServiceListenerDirector_callback", "(Lcom/robotraconteur/ServerServiceListenerDirector;IJ)V" 
    },
    {
      "SwigDirector_WrappedUserAuthenticatorDirector_authenticateUser", "(Lcom/robotraconteur/WrappedUserAuthenticatorDirector;Ljava/lang/String;JJ)J" 
    },
    {
      "SwigDirector_AsyncServiceInfo2VectorReturnDirector_handler", "(Lcom/robotraconteur/AsyncServiceInfo2VectorReturnDirector;J)V" 
    },
    {
      "SwigDirector_AsyncNodeInfo2VectorReturnDirector_handler", "(Lcom/robotraconteur/AsyncNodeInfo2VectorReturnDirector;J)V" 
    },
    {
      "SwigDirector_WrappedServiceSubscriptionFilterPredicateDirector_predicate", "(Lcom/robotraconteur/WrappedServiceSubscriptionFilterPredicateDirector;J)Z" 
    },
    {
      "SwigDirector_WrappedServiceInfo2SubscriptionDirector_serviceDetected", "(Lcom/robotraconteur/WrappedServiceInfo2SubscriptionDirector;JJJ)V" 
    },
    {
      "SwigDirector_WrappedServiceInfo2SubscriptionDirector_serviceLost", "(Lcom/robotraconteur/WrappedServiceInfo2SubscriptionDirector;JJJ)V" 
    },
    {
      "SwigDirector_WrappedServiceSubscriptionDirector_clientConnected", "(Lcom/robotraconteur/WrappedServiceSubscriptionDirector;JJJ)V" 
    },
    {
      "SwigDirector_WrappedServiceSubscriptionDirector_clientDisconnected", "(Lcom/robotraconteur/WrappedServiceSubscriptionDirector;JJJ)V" 
    },
    {
      "SwigDirector_WrappedServiceSubscriptionDirector_clientConnectFailed", "(Lcom/robotraconteur/WrappedServiceSubscriptionDirector;JJJJ)V" 
    },
    {
      "SwigDirector_WrappedWireSubscriptionDirector_wireValueChanged", "(Lcom/robotraconteur/WrappedWireSubscriptionDirector;JJJ)V" 
    },
    {
      "SwigDirector_WrappedPipeSubscriptionDirector_pipePacketReceived", "(Lcom/robotraconteur/WrappedPipeSubscriptionDirector;J)V" 
    },
    {
      "SwigDirector_UserLogRecordHandlerDirector_handleLogRecord", "(Lcom/robotraconteur/UserLogRecordHandlerDirector;J)V" 
    },
    {
      "SwigDirector_RRNativeObjectHeapSupport_deleteObject_i", "(Lcom/robotraconteur/RRNativeObjectHeapSupport;I)V" 
    },
    {
      "SwigDirector_ClientServiceListenerDirector_callback", "(Lcom/robotraconteur/ClientServiceListenerDirector;I)V" 
    },
    {
      "SwigDirector_ClientServiceListenerDirector_callback2", "(Lcom/robotraconteur/ClientServiceListenerDirector;ILjava/lang/String;)V" 
    }
  };
  Swig::jclass_RobotRaconteurJavaJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_RobotRaconteurJavaJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

