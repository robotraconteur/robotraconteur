/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.robotraconteur;

public class RobotRaconteurJavaJNI {
  public final static native short MessageFlags_ROUTING_INFO_get();
  public final static native short MessageFlags_ENDPOINT_INFO_get();
  public final static native short MessageFlags_PRIORITY_get();
  public final static native short MessageFlags_UNRELIABLE_get();
  public final static native short MessageFlags_META_INFO_get();
  public final static native short MessageFlags_STRING_TABLE_get();
  public final static native short MessageFlags_MULTIPLE_ENTRIES_get();
  public final static native short MessageFlags_EXTENDED_get();
  public final static native short MessageFlags_Version2Compat_get();
  public final static native short MessageEntryFlags_SERVICE_PATH_STR_get();
  public final static native short MessageEntryFlags_SERVICE_PATH_CODE_get();
  public final static native short MessageEntryFlags_MEMBER_NAME_STR_get();
  public final static native short MessageEntryFlags_MEMBER_NAME_CODE_get();
  public final static native short MessageEntryFlags_REQUEST_ID_get();
  public final static native short MessageEntryFlags_ERROR_get();
  public final static native short MessageEntryFlags_META_INFO_get();
  public final static native short MessageEntryFlags_EXTENDED_get();
  public final static native short MessageEntryFlags_Version2Compat_get();
  public final static native short MessageElementFlags_ELEMENT_NAME_STR_get();
  public final static native short MessageElementFlags_ELEMENT_NAME_CODE_get();
  public final static native short MessageElementFlags_ELEMENT_NUMBER_get();
  public final static native short MessageElementFlags_ELEMENT_TYPE_NAME_STR_get();
  public final static native short MessageElementFlags_ELEMENT_TYPE_NAME_CODE_get();
  public final static native short MessageElementFlags_META_INFO_get();
  public final static native short MessageElementFlags_EXTENDED_get();
  public final static native short MessageElementFlags_Version2Compat_get();
  public final static native long TranspartCapabilityCode_PAGE_MASK_get();
  public final static native long TransportCapabilityCode_MESSAGE2_BASIC_PAGE_get();
  public final static native long TransportCapabilityCode_MESSAGE2_BASIC_ENABLE_get();
  public final static native long TransportCapabilityCode_MESSAGE2_BASIC_CONNECTCOMBINED_get();
  public final static native long TransportCapabilityCode_MESSAGE4_BASIC_PAGE_get();
  public final static native long TransportCapabilityCode_MESSAGE4_BASIC_ENABLE_get();
  public final static native long TransportCapabilityCode_MESSAGE4_BASIC_CONNECTCOMBINED_get();
  public final static native long TransportCapabilityCode_MESSAGE4_STRINGTABLE_PAGE_get();
  public final static native long TransportCapabilityCode_MESSAGE4_STRINGTABLE_ENABLE_get();
  public final static native long TransportCapabilityCode_MESSAGE4_STRINGTABLE_MESSAGE_LOCAL_get();
  public final static native long TransportCapabilityCode_MESSAGE4_STRINGTABLE_STANDARD_TABLE_get();
  public final static native long new_FilesystemPath(String jarg1);
  public final static native String FilesystemPath_string(long jarg1, FilesystemPath jarg1_);
  public final static native void delete_FilesystemPath(long jarg1);
  public final static native void RRDirectorExceptionHelper_reset();
  public final static native void RRDirectorExceptionHelper_setError(long jarg1, MessageEntry jarg1_, String jarg2);
  public final static native boolean RRDirectorExceptionHelper_isErrorPending();
  public final static native long RRDirectorExceptionHelper_getError();
  public final static native long new_RRDirectorExceptionHelper();
  public final static native void delete_RRDirectorExceptionHelper(long jarg1);
  public final static native long new_vectorstring__SWIG_0();
  public final static native long new_vectorstring__SWIG_1(long jarg1, vectorstring jarg1_);
  public final static native long vectorstring_capacity(long jarg1, vectorstring jarg1_);
  public final static native void vectorstring_reserve(long jarg1, vectorstring jarg1_, long jarg2);
  public final static native boolean vectorstring_isEmpty(long jarg1, vectorstring jarg1_);
  public final static native void vectorstring_clear(long jarg1, vectorstring jarg1_);
  public final static native long new_vectorstring__SWIG_2(int jarg1, String jarg2);
  public final static native int vectorstring_doSize(long jarg1, vectorstring jarg1_);
  public final static native void vectorstring_doAdd__SWIG_0(long jarg1, vectorstring jarg1_, String jarg2);
  public final static native void vectorstring_doAdd__SWIG_1(long jarg1, vectorstring jarg1_, int jarg2, String jarg3);
  public final static native String vectorstring_doRemove(long jarg1, vectorstring jarg1_, int jarg2);
  public final static native String vectorstring_doGet(long jarg1, vectorstring jarg1_, int jarg2);
  public final static native String vectorstring_doSet(long jarg1, vectorstring jarg1_, int jarg2, String jarg3);
  public final static native void vectorstring_doRemoveRange(long jarg1, vectorstring jarg1_, int jarg2, int jarg3);
  public final static native void delete_vectorstring(long jarg1);
  public final static native long new_vectorint32__SWIG_0();
  public final static native long new_vectorint32__SWIG_1(long jarg1, vectorint32 jarg1_);
  public final static native long vectorint32_capacity(long jarg1, vectorint32 jarg1_);
  public final static native void vectorint32_reserve(long jarg1, vectorint32 jarg1_, long jarg2);
  public final static native boolean vectorint32_isEmpty(long jarg1, vectorint32 jarg1_);
  public final static native void vectorint32_clear(long jarg1, vectorint32 jarg1_);
  public final static native long new_vectorint32__SWIG_2(int jarg1, int jarg2);
  public final static native int vectorint32_doSize(long jarg1, vectorint32 jarg1_);
  public final static native void vectorint32_doAdd__SWIG_0(long jarg1, vectorint32 jarg1_, int jarg2);
  public final static native void vectorint32_doAdd__SWIG_1(long jarg1, vectorint32 jarg1_, int jarg2, int jarg3);
  public final static native int vectorint32_doRemove(long jarg1, vectorint32 jarg1_, int jarg2);
  public final static native int vectorint32_doGet(long jarg1, vectorint32 jarg1_, int jarg2);
  public final static native int vectorint32_doSet(long jarg1, vectorint32 jarg1_, int jarg2, int jarg3);
  public final static native void vectorint32_doRemoveRange(long jarg1, vectorint32 jarg1_, int jarg2, int jarg3);
  public final static native void delete_vectorint32(long jarg1);
  public final static native long new_vectoruint32__SWIG_0();
  public final static native long new_vectoruint32__SWIG_1(long jarg1, vectoruint32 jarg1_);
  public final static native long vectoruint32_capacity(long jarg1, vectoruint32 jarg1_);
  public final static native void vectoruint32_reserve(long jarg1, vectoruint32 jarg1_, long jarg2);
  public final static native boolean vectoruint32_isEmpty(long jarg1, vectoruint32 jarg1_);
  public final static native void vectoruint32_clear(long jarg1, vectoruint32 jarg1_);
  public final static native long new_vectoruint32__SWIG_2(int jarg1, long jarg2);
  public final static native int vectoruint32_doSize(long jarg1, vectoruint32 jarg1_);
  public final static native void vectoruint32_doAdd__SWIG_0(long jarg1, vectoruint32 jarg1_, long jarg2);
  public final static native void vectoruint32_doAdd__SWIG_1(long jarg1, vectoruint32 jarg1_, int jarg2, long jarg3);
  public final static native long vectoruint32_doRemove(long jarg1, vectoruint32 jarg1_, int jarg2);
  public final static native long vectoruint32_doGet(long jarg1, vectoruint32 jarg1_, int jarg2);
  public final static native long vectoruint32_doSet(long jarg1, vectoruint32 jarg1_, int jarg2, long jarg3);
  public final static native void vectoruint32_doRemoveRange(long jarg1, vectoruint32 jarg1_, int jarg2, int jarg3);
  public final static native void delete_vectoruint32(long jarg1);
  public final static native long new_vector_int8_t__SWIG_0();
  public final static native long new_vector_int8_t__SWIG_1(long jarg1, vector_int8_t jarg1_);
  public final static native long vector_int8_t_capacity(long jarg1, vector_int8_t jarg1_);
  public final static native void vector_int8_t_reserve(long jarg1, vector_int8_t jarg1_, long jarg2);
  public final static native boolean vector_int8_t_isEmpty(long jarg1, vector_int8_t jarg1_);
  public final static native void vector_int8_t_clear(long jarg1, vector_int8_t jarg1_);
  public final static native long new_vector_int8_t__SWIG_2(int jarg1, byte jarg2);
  public final static native int vector_int8_t_doSize(long jarg1, vector_int8_t jarg1_);
  public final static native void vector_int8_t_doAdd__SWIG_0(long jarg1, vector_int8_t jarg1_, byte jarg2);
  public final static native void vector_int8_t_doAdd__SWIG_1(long jarg1, vector_int8_t jarg1_, int jarg2, byte jarg3);
  public final static native byte vector_int8_t_doRemove(long jarg1, vector_int8_t jarg1_, int jarg2);
  public final static native byte vector_int8_t_doGet(long jarg1, vector_int8_t jarg1_, int jarg2);
  public final static native byte vector_int8_t_doSet(long jarg1, vector_int8_t jarg1_, int jarg2, byte jarg3);
  public final static native void vector_int8_t_doRemoveRange(long jarg1, vector_int8_t jarg1_, int jarg2, int jarg3);
  public final static native void delete_vector_int8_t(long jarg1);
  public final static native long new_vector_uint8_t__SWIG_0();
  public final static native long new_vector_uint8_t__SWIG_1(long jarg1, vector_uint8_t jarg1_);
  public final static native long vector_uint8_t_capacity(long jarg1, vector_uint8_t jarg1_);
  public final static native void vector_uint8_t_reserve(long jarg1, vector_uint8_t jarg1_, long jarg2);
  public final static native boolean vector_uint8_t_isEmpty(long jarg1, vector_uint8_t jarg1_);
  public final static native void vector_uint8_t_clear(long jarg1, vector_uint8_t jarg1_);
  public final static native long new_vector_uint8_t__SWIG_2(int jarg1, short jarg2);
  public final static native int vector_uint8_t_doSize(long jarg1, vector_uint8_t jarg1_);
  public final static native void vector_uint8_t_doAdd__SWIG_0(long jarg1, vector_uint8_t jarg1_, short jarg2);
  public final static native void vector_uint8_t_doAdd__SWIG_1(long jarg1, vector_uint8_t jarg1_, int jarg2, short jarg3);
  public final static native short vector_uint8_t_doRemove(long jarg1, vector_uint8_t jarg1_, int jarg2);
  public final static native short vector_uint8_t_doGet(long jarg1, vector_uint8_t jarg1_, int jarg2);
  public final static native short vector_uint8_t_doSet(long jarg1, vector_uint8_t jarg1_, int jarg2, short jarg3);
  public final static native void vector_uint8_t_doRemoveRange(long jarg1, vector_uint8_t jarg1_, int jarg2, int jarg3);
  public final static native void delete_vector_uint8_t(long jarg1);
  public final static native long new_vector_uint64_t__SWIG_0();
  public final static native long new_vector_uint64_t__SWIG_1(long jarg1, vector_uint64_t jarg1_);
  public final static native long vector_uint64_t_capacity(long jarg1, vector_uint64_t jarg1_);
  public final static native void vector_uint64_t_reserve(long jarg1, vector_uint64_t jarg1_, long jarg2);
  public final static native boolean vector_uint64_t_isEmpty(long jarg1, vector_uint64_t jarg1_);
  public final static native void vector_uint64_t_clear(long jarg1, vector_uint64_t jarg1_);
  public final static native long new_vector_uint64_t__SWIG_2(int jarg1, long jarg2);
  public final static native int vector_uint64_t_doSize(long jarg1, vector_uint64_t jarg1_);
  public final static native void vector_uint64_t_doAdd__SWIG_0(long jarg1, vector_uint64_t jarg1_, long jarg2);
  public final static native void vector_uint64_t_doAdd__SWIG_1(long jarg1, vector_uint64_t jarg1_, int jarg2, long jarg3);
  public final static native long vector_uint64_t_doRemove(long jarg1, vector_uint64_t jarg1_, int jarg2);
  public final static native long vector_uint64_t_doGet(long jarg1, vector_uint64_t jarg1_, int jarg2);
  public final static native long vector_uint64_t_doSet(long jarg1, vector_uint64_t jarg1_, int jarg2, long jarg3);
  public final static native void vector_uint64_t_doRemoveRange(long jarg1, vector_uint64_t jarg1_, int jarg2, int jarg3);
  public final static native void delete_vector_uint64_t(long jarg1);
  public final static native long new_map_strstr__SWIG_0();
  public final static native long new_map_strstr__SWIG_1(long jarg1, map_strstr jarg1_);
  public final static native long map_strstr_Iterator_getNextUnchecked(long jarg1, map_strstr.Iterator jarg1_);
  public final static native boolean map_strstr_Iterator_isNot(long jarg1, map_strstr.Iterator jarg1_, long jarg2, map_strstr.Iterator jarg2_);
  public final static native String map_strstr_Iterator_getKey(long jarg1, map_strstr.Iterator jarg1_);
  public final static native String map_strstr_Iterator_getValue(long jarg1, map_strstr.Iterator jarg1_);
  public final static native void map_strstr_Iterator_setValue(long jarg1, map_strstr.Iterator jarg1_, String jarg2);
  public final static native void delete_map_strstr_Iterator(long jarg1);
  public final static native boolean map_strstr_isEmpty(long jarg1, map_strstr jarg1_);
  public final static native void map_strstr_clear(long jarg1, map_strstr jarg1_);
  public final static native long map_strstr_find(long jarg1, map_strstr jarg1_, String jarg2);
  public final static native long map_strstr_begin(long jarg1, map_strstr jarg1_);
  public final static native long map_strstr_end(long jarg1, map_strstr jarg1_);
  public final static native int map_strstr_sizeImpl(long jarg1, map_strstr jarg1_);
  public final static native boolean map_strstr_containsImpl(long jarg1, map_strstr jarg1_, String jarg2);
  public final static native void map_strstr_putUnchecked(long jarg1, map_strstr jarg1_, String jarg2, String jarg3);
  public final static native void map_strstr_removeUnchecked(long jarg1, map_strstr jarg1_, long jarg2, map_strstr.Iterator jarg2_);
  public final static native void delete_map_strstr(long jarg1);
  public final static native String getRRDataTypeString(int jarg1);
  public final static native boolean isTypeRRArray(int jarg1);
  public final static native boolean isTypeNumeric(int jarg1);
  public final static native void delete_RRObject(long jarg1);
  public final static native void delete_RRValue(long jarg1);
  public final static native String MessageElementData_getTypeString(long jarg1, MessageElementData jarg1_);
  public final static native int MessageElementData_getTypeID(long jarg1, MessageElementData jarg1_);
  public final static native void delete_MessageElementData(long jarg1);
  public final static native String RRBaseArray_getTypeString(long jarg1, RRBaseArray jarg1_);
  public final static native long RRBaseArray_size(long jarg1, RRBaseArray jarg1_);
  public final static native long RRBaseArray_void_ptr(long jarg1, RRBaseArray jarg1_);
  public final static native long RRBaseArray_elementSize(long jarg1, RRBaseArray jarg1_);
  public final static native int RRBaseArray_getTypeID(long jarg1, RRBaseArray jarg1_);
  public final static native void delete_RRBaseArray(long jarg1);
  public final static native long allocateRRArrayByType(int jarg1, long jarg2);
  public final static native void RRMultiDimArrayUntyped_Dims_set(long jarg1, RRMultiDimArrayUntyped jarg1_, long jarg2, RRBaseArray jarg2_);
  public final static native long RRMultiDimArrayUntyped_Dims_get(long jarg1, RRMultiDimArrayUntyped jarg1_);
  public final static native void RRMultiDimArrayUntyped_Array_set(long jarg1, RRMultiDimArrayUntyped jarg1_, long jarg2, RRBaseArray jarg2_);
  public final static native long RRMultiDimArrayUntyped_Array_get(long jarg1, RRMultiDimArrayUntyped jarg1_);
  public final static native long new_RRMultiDimArrayUntyped();
  public final static native void delete_RRMultiDimArrayUntyped(long jarg1);
  public final static native boolean MultiDimArray_CalculateCopyIndicesIter_next(long jarg1, MultiDimArray_CalculateCopyIndicesIter jarg1_, long[] jarg2, long[] jarg3, long[] jarg4);
  public final static native void delete_MultiDimArray_CalculateCopyIndicesIter(long jarg1);
  public final static native long multiDimArray_CalculateCopyIndicesBeginIter(long jarg1, vectoruint32 jarg1_, long jarg2, vectoruint32 jarg2_, long jarg3, vectoruint32 jarg3_, long jarg4, vectoruint32 jarg4_, long jarg5, vectoruint32 jarg5_);

	static class NativeLoader {
		public NativeLoader()
		{
			try
			{
				RobotRaconteurNativeLoader.load();
			}
			catch(Exception e) {}
		}
	}
	
	static NativeLoader myLoader=new NativeLoader();

  public final static native long new_vectorptr_typedefinition__SWIG_0();
  public final static native long new_vectorptr_typedefinition__SWIG_1(long jarg1, vectorptr_typedefinition jarg1_);
  public final static native long vectorptr_typedefinition_capacity(long jarg1, vectorptr_typedefinition jarg1_);
  public final static native void vectorptr_typedefinition_reserve(long jarg1, vectorptr_typedefinition jarg1_, long jarg2);
  public final static native boolean vectorptr_typedefinition_isEmpty(long jarg1, vectorptr_typedefinition jarg1_);
  public final static native void vectorptr_typedefinition_clear(long jarg1, vectorptr_typedefinition jarg1_);
  public final static native long new_vectorptr_typedefinition__SWIG_2(int jarg1, long jarg2, TypeDefinition jarg2_);
  public final static native int vectorptr_typedefinition_doSize(long jarg1, vectorptr_typedefinition jarg1_);
  public final static native void vectorptr_typedefinition_doAdd__SWIG_0(long jarg1, vectorptr_typedefinition jarg1_, long jarg2, TypeDefinition jarg2_);
  public final static native void vectorptr_typedefinition_doAdd__SWIG_1(long jarg1, vectorptr_typedefinition jarg1_, int jarg2, long jarg3, TypeDefinition jarg3_);
  public final static native long vectorptr_typedefinition_doRemove(long jarg1, vectorptr_typedefinition jarg1_, int jarg2);
  public final static native long vectorptr_typedefinition_doGet(long jarg1, vectorptr_typedefinition jarg1_, int jarg2);
  public final static native long vectorptr_typedefinition_doSet(long jarg1, vectorptr_typedefinition jarg1_, int jarg2, long jarg3, TypeDefinition jarg3_);
  public final static native void vectorptr_typedefinition_doRemoveRange(long jarg1, vectorptr_typedefinition jarg1_, int jarg2, int jarg3);
  public final static native void delete_vectorptr_typedefinition(long jarg1);
  public final static native long new_vectorptr_memberdefinition__SWIG_0();
  public final static native long new_vectorptr_memberdefinition__SWIG_1(long jarg1, vectorptr_memberdefinition jarg1_);
  public final static native long vectorptr_memberdefinition_capacity(long jarg1, vectorptr_memberdefinition jarg1_);
  public final static native void vectorptr_memberdefinition_reserve(long jarg1, vectorptr_memberdefinition jarg1_, long jarg2);
  public final static native boolean vectorptr_memberdefinition_isEmpty(long jarg1, vectorptr_memberdefinition jarg1_);
  public final static native void vectorptr_memberdefinition_clear(long jarg1, vectorptr_memberdefinition jarg1_);
  public final static native long new_vectorptr_memberdefinition__SWIG_2(int jarg1, long jarg2, MemberDefinition jarg2_);
  public final static native int vectorptr_memberdefinition_doSize(long jarg1, vectorptr_memberdefinition jarg1_);
  public final static native void vectorptr_memberdefinition_doAdd__SWIG_0(long jarg1, vectorptr_memberdefinition jarg1_, long jarg2, MemberDefinition jarg2_);
  public final static native void vectorptr_memberdefinition_doAdd__SWIG_1(long jarg1, vectorptr_memberdefinition jarg1_, int jarg2, long jarg3, MemberDefinition jarg3_);
  public final static native long vectorptr_memberdefinition_doRemove(long jarg1, vectorptr_memberdefinition jarg1_, int jarg2);
  public final static native long vectorptr_memberdefinition__doGet(long jarg1, vectorptr_memberdefinition jarg1_, int jarg2);
  public final static native long vectorptr_memberdefinition_doSet(long jarg1, vectorptr_memberdefinition jarg1_, int jarg2, long jarg3, MemberDefinition jarg3_);
  public final static native void vectorptr_memberdefinition_doRemoveRange(long jarg1, vectorptr_memberdefinition jarg1_, int jarg2, int jarg3);
  public final static native void delete_vectorptr_memberdefinition(long jarg1);
  public final static native long new_vectorptr_serviceentrydefinition__SWIG_0();
  public final static native long new_vectorptr_serviceentrydefinition__SWIG_1(long jarg1, vectorptr_serviceentrydefinition jarg1_);
  public final static native long vectorptr_serviceentrydefinition_capacity(long jarg1, vectorptr_serviceentrydefinition jarg1_);
  public final static native void vectorptr_serviceentrydefinition_reserve(long jarg1, vectorptr_serviceentrydefinition jarg1_, long jarg2);
  public final static native boolean vectorptr_serviceentrydefinition_isEmpty(long jarg1, vectorptr_serviceentrydefinition jarg1_);
  public final static native void vectorptr_serviceentrydefinition_clear(long jarg1, vectorptr_serviceentrydefinition jarg1_);
  public final static native long new_vectorptr_serviceentrydefinition__SWIG_2(int jarg1, long jarg2, ServiceEntryDefinition jarg2_);
  public final static native int vectorptr_serviceentrydefinition_doSize(long jarg1, vectorptr_serviceentrydefinition jarg1_);
  public final static native void vectorptr_serviceentrydefinition_doAdd__SWIG_0(long jarg1, vectorptr_serviceentrydefinition jarg1_, long jarg2, ServiceEntryDefinition jarg2_);
  public final static native void vectorptr_serviceentrydefinition_doAdd__SWIG_1(long jarg1, vectorptr_serviceentrydefinition jarg1_, int jarg2, long jarg3, ServiceEntryDefinition jarg3_);
  public final static native long vectorptr_serviceentrydefinition_doRemove(long jarg1, vectorptr_serviceentrydefinition jarg1_, int jarg2);
  public final static native long vectorptr_serviceentrydefinition_doGet(long jarg1, vectorptr_serviceentrydefinition jarg1_, int jarg2);
  public final static native long vectorptr_serviceentrydefinition_doSet(long jarg1, vectorptr_serviceentrydefinition jarg1_, int jarg2, long jarg3, ServiceEntryDefinition jarg3_);
  public final static native void vectorptr_serviceentrydefinition_doRemoveRange(long jarg1, vectorptr_serviceentrydefinition jarg1_, int jarg2, int jarg3);
  public final static native void delete_vectorptr_serviceentrydefinition(long jarg1);
  public final static native long new_vectorptr_constantdefinition__SWIG_0();
  public final static native long new_vectorptr_constantdefinition__SWIG_1(long jarg1, vectorptr_constantdefinition jarg1_);
  public final static native long vectorptr_constantdefinition_capacity(long jarg1, vectorptr_constantdefinition jarg1_);
  public final static native void vectorptr_constantdefinition_reserve(long jarg1, vectorptr_constantdefinition jarg1_, long jarg2);
  public final static native boolean vectorptr_constantdefinition_isEmpty(long jarg1, vectorptr_constantdefinition jarg1_);
  public final static native void vectorptr_constantdefinition_clear(long jarg1, vectorptr_constantdefinition jarg1_);
  public final static native long new_vectorptr_constantdefinition__SWIG_2(int jarg1, long jarg2, ConstantDefinition jarg2_);
  public final static native int vectorptr_constantdefinition_doSize(long jarg1, vectorptr_constantdefinition jarg1_);
  public final static native void vectorptr_constantdefinition_doAdd__SWIG_0(long jarg1, vectorptr_constantdefinition jarg1_, long jarg2, ConstantDefinition jarg2_);
  public final static native void vectorptr_constantdefinition_doAdd__SWIG_1(long jarg1, vectorptr_constantdefinition jarg1_, int jarg2, long jarg3, ConstantDefinition jarg3_);
  public final static native long vectorptr_constantdefinition_doRemove(long jarg1, vectorptr_constantdefinition jarg1_, int jarg2);
  public final static native long vectorptr_constantdefinition_doGet(long jarg1, vectorptr_constantdefinition jarg1_, int jarg2);
  public final static native long vectorptr_constantdefinition_doSet(long jarg1, vectorptr_constantdefinition jarg1_, int jarg2, long jarg3, ConstantDefinition jarg3_);
  public final static native void vectorptr_constantdefinition_doRemoveRange(long jarg1, vectorptr_constantdefinition jarg1_, int jarg2, int jarg3);
  public final static native void delete_vectorptr_constantdefinition(long jarg1);
  public final static native long new_vectorptr_enumdefinition__SWIG_0();
  public final static native long new_vectorptr_enumdefinition__SWIG_1(long jarg1, vectorptr_enumdefinition jarg1_);
  public final static native long vectorptr_enumdefinition_capacity(long jarg1, vectorptr_enumdefinition jarg1_);
  public final static native void vectorptr_enumdefinition_reserve(long jarg1, vectorptr_enumdefinition jarg1_, long jarg2);
  public final static native boolean vectorptr_enumdefinition_isEmpty(long jarg1, vectorptr_enumdefinition jarg1_);
  public final static native void vectorptr_enumdefinition_clear(long jarg1, vectorptr_enumdefinition jarg1_);
  public final static native long new_vectorptr_enumdefinition__SWIG_2(int jarg1, long jarg2, EnumDefinition jarg2_);
  public final static native int vectorptr_enumdefinition_doSize(long jarg1, vectorptr_enumdefinition jarg1_);
  public final static native void vectorptr_enumdefinition_doAdd__SWIG_0(long jarg1, vectorptr_enumdefinition jarg1_, long jarg2, EnumDefinition jarg2_);
  public final static native void vectorptr_enumdefinition_doAdd__SWIG_1(long jarg1, vectorptr_enumdefinition jarg1_, int jarg2, long jarg3, EnumDefinition jarg3_);
  public final static native long vectorptr_enumdefinition_doRemove(long jarg1, vectorptr_enumdefinition jarg1_, int jarg2);
  public final static native long vectorptr_enumdefinition_doGet(long jarg1, vectorptr_enumdefinition jarg1_, int jarg2);
  public final static native long vectorptr_enumdefinition_doSet(long jarg1, vectorptr_enumdefinition jarg1_, int jarg2, long jarg3, EnumDefinition jarg3_);
  public final static native void vectorptr_enumdefinition_doRemoveRange(long jarg1, vectorptr_enumdefinition jarg1_, int jarg2, int jarg3);
  public final static native void delete_vectorptr_enumdefinition(long jarg1);
  public final static native long new_vector_constantdefinition_structfield__SWIG_0();
  public final static native long new_vector_constantdefinition_structfield__SWIG_1(long jarg1, vector_constantdefinition_structfield jarg1_);
  public final static native long vector_constantdefinition_structfield_capacity(long jarg1, vector_constantdefinition_structfield jarg1_);
  public final static native void vector_constantdefinition_structfield_reserve(long jarg1, vector_constantdefinition_structfield jarg1_, long jarg2);
  public final static native boolean vector_constantdefinition_structfield_isEmpty(long jarg1, vector_constantdefinition_structfield jarg1_);
  public final static native void vector_constantdefinition_structfield_clear(long jarg1, vector_constantdefinition_structfield jarg1_);
  public final static native long new_vector_constantdefinition_structfield__SWIG_2(int jarg1, long jarg2, ConstantDefinition_StructField jarg2_);
  public final static native int vector_constantdefinition_structfield_doSize(long jarg1, vector_constantdefinition_structfield jarg1_);
  public final static native void vector_constantdefinition_structfield_doAdd__SWIG_0(long jarg1, vector_constantdefinition_structfield jarg1_, long jarg2, ConstantDefinition_StructField jarg2_);
  public final static native void vector_constantdefinition_structfield_doAdd__SWIG_1(long jarg1, vector_constantdefinition_structfield jarg1_, int jarg2, long jarg3, ConstantDefinition_StructField jarg3_);
  public final static native long vector_constantdefinition_structfield_doRemove(long jarg1, vector_constantdefinition_structfield jarg1_, int jarg2);
  public final static native long vector_constantdefinition_structfield_doGet(long jarg1, vector_constantdefinition_structfield jarg1_, int jarg2);
  public final static native long vector_constantdefinition_structfield_doSet(long jarg1, vector_constantdefinition_structfield jarg1_, int jarg2, long jarg3, ConstantDefinition_StructField jarg3_);
  public final static native void vector_constantdefinition_structfield_doRemoveRange(long jarg1, vector_constantdefinition_structfield jarg1_, int jarg2, int jarg3);
  public final static native void delete_vector_constantdefinition_structfield(long jarg1);
  public final static native long new_vector_enumdefinitionvalues__SWIG_0();
  public final static native long new_vector_enumdefinitionvalues__SWIG_1(long jarg1, vector_enumdefinitionvalues jarg1_);
  public final static native long vector_enumdefinitionvalues_capacity(long jarg1, vector_enumdefinitionvalues jarg1_);
  public final static native void vector_enumdefinitionvalues_reserve(long jarg1, vector_enumdefinitionvalues jarg1_, long jarg2);
  public final static native boolean vector_enumdefinitionvalues_isEmpty(long jarg1, vector_enumdefinitionvalues jarg1_);
  public final static native void vector_enumdefinitionvalues_clear(long jarg1, vector_enumdefinitionvalues jarg1_);
  public final static native long new_vector_enumdefinitionvalues__SWIG_2(int jarg1, long jarg2, EnumDefinitionValue jarg2_);
  public final static native int vector_enumdefinitionvalues_doSize(long jarg1, vector_enumdefinitionvalues jarg1_);
  public final static native void vector_enumdefinitionvalues_doAdd__SWIG_0(long jarg1, vector_enumdefinitionvalues jarg1_, long jarg2, EnumDefinitionValue jarg2_);
  public final static native void vector_enumdefinitionvalues_doAdd__SWIG_1(long jarg1, vector_enumdefinitionvalues jarg1_, int jarg2, long jarg3, EnumDefinitionValue jarg3_);
  public final static native long vector_enumdefinitionvalues_doRemove(long jarg1, vector_enumdefinitionvalues jarg1_, int jarg2);
  public final static native long vector_enumdefinitionvalues_doGet(long jarg1, vector_enumdefinitionvalues jarg1_, int jarg2);
  public final static native long vector_enumdefinitionvalues_doSet(long jarg1, vector_enumdefinitionvalues jarg1_, int jarg2, long jarg3, EnumDefinitionValue jarg3_);
  public final static native void vector_enumdefinitionvalues_doRemoveRange(long jarg1, vector_enumdefinitionvalues jarg1_, int jarg2, int jarg3);
  public final static native void delete_vector_enumdefinitionvalues(long jarg1);
  public final static native long new_vector_usingdefinition__SWIG_0();
  public final static native long new_vector_usingdefinition__SWIG_1(long jarg1, vector_usingdefinition jarg1_);
  public final static native long vector_usingdefinition_capacity(long jarg1, vector_usingdefinition jarg1_);
  public final static native void vector_usingdefinition_reserve(long jarg1, vector_usingdefinition jarg1_, long jarg2);
  public final static native boolean vector_usingdefinition_isEmpty(long jarg1, vector_usingdefinition jarg1_);
  public final static native void vector_usingdefinition_clear(long jarg1, vector_usingdefinition jarg1_);
  public final static native long new_vector_usingdefinition__SWIG_2(int jarg1, long jarg2, UsingDefinition jarg2_);
  public final static native int vector_usingdefinition_doSize(long jarg1, vector_usingdefinition jarg1_);
  public final static native void vector_usingdefinition_doAdd__SWIG_0(long jarg1, vector_usingdefinition jarg1_, long jarg2, UsingDefinition jarg2_);
  public final static native void vector_usingdefinition_doAdd__SWIG_1(long jarg1, vector_usingdefinition jarg1_, int jarg2, long jarg3, UsingDefinition jarg3_);
  public final static native long vector_usingdefinition_doRemove(long jarg1, vector_usingdefinition jarg1_, int jarg2);
  public final static native long vector_usingdefinition_doGet(long jarg1, vector_usingdefinition jarg1_, int jarg2);
  public final static native long vector_usingdefinition_doSet(long jarg1, vector_usingdefinition jarg1_, int jarg2, long jarg3, UsingDefinition jarg3_);
  public final static native void vector_usingdefinition_doRemoveRange(long jarg1, vector_usingdefinition jarg1_, int jarg2, int jarg3);
  public final static native void delete_vector_usingdefinition(long jarg1);
  public final static native long new_vectorptr_exceptiondefinition__SWIG_0();
  public final static native long new_vectorptr_exceptiondefinition__SWIG_1(long jarg1, vectorptr_exceptiondefinition jarg1_);
  public final static native long vectorptr_exceptiondefinition_capacity(long jarg1, vectorptr_exceptiondefinition jarg1_);
  public final static native void vectorptr_exceptiondefinition_reserve(long jarg1, vectorptr_exceptiondefinition jarg1_, long jarg2);
  public final static native boolean vectorptr_exceptiondefinition_isEmpty(long jarg1, vectorptr_exceptiondefinition jarg1_);
  public final static native void vectorptr_exceptiondefinition_clear(long jarg1, vectorptr_exceptiondefinition jarg1_);
  public final static native long new_vectorptr_exceptiondefinition__SWIG_2(int jarg1, long jarg2, ExceptionDefinition jarg2_);
  public final static native int vectorptr_exceptiondefinition_doSize(long jarg1, vectorptr_exceptiondefinition jarg1_);
  public final static native void vectorptr_exceptiondefinition_doAdd__SWIG_0(long jarg1, vectorptr_exceptiondefinition jarg1_, long jarg2, ExceptionDefinition jarg2_);
  public final static native void vectorptr_exceptiondefinition_doAdd__SWIG_1(long jarg1, vectorptr_exceptiondefinition jarg1_, int jarg2, long jarg3, ExceptionDefinition jarg3_);
  public final static native long vectorptr_exceptiondefinition_doRemove(long jarg1, vectorptr_exceptiondefinition jarg1_, int jarg2);
  public final static native long vectorptr_exceptiondefinition_doGet(long jarg1, vectorptr_exceptiondefinition jarg1_, int jarg2);
  public final static native long vectorptr_exceptiondefinition_doSet(long jarg1, vectorptr_exceptiondefinition jarg1_, int jarg2, long jarg3, ExceptionDefinition jarg3_);
  public final static native void vectorptr_exceptiondefinition_doRemoveRange(long jarg1, vectorptr_exceptiondefinition jarg1_, int jarg2, int jarg3);
  public final static native void delete_vectorptr_exceptiondefinition(long jarg1);
  public final static native long new_vectorptr_servicedefinition__SWIG_0();
  public final static native long new_vectorptr_servicedefinition__SWIG_1(long jarg1, vectorptr_servicedefinition jarg1_);
  public final static native long vectorptr_servicedefinition_capacity(long jarg1, vectorptr_servicedefinition jarg1_);
  public final static native void vectorptr_servicedefinition_reserve(long jarg1, vectorptr_servicedefinition jarg1_, long jarg2);
  public final static native boolean vectorptr_servicedefinition_isEmpty(long jarg1, vectorptr_servicedefinition jarg1_);
  public final static native void vectorptr_servicedefinition_clear(long jarg1, vectorptr_servicedefinition jarg1_);
  public final static native long new_vectorptr_servicedefinition__SWIG_2(int jarg1, long jarg2, ServiceDefinition jarg2_);
  public final static native int vectorptr_servicedefinition_doSize(long jarg1, vectorptr_servicedefinition jarg1_);
  public final static native void vectorptr_servicedefinition_doAdd__SWIG_0(long jarg1, vectorptr_servicedefinition jarg1_, long jarg2, ServiceDefinition jarg2_);
  public final static native void vectorptr_servicedefinition_doAdd__SWIG_1(long jarg1, vectorptr_servicedefinition jarg1_, int jarg2, long jarg3, ServiceDefinition jarg3_);
  public final static native long vectorptr_servicedefinition_doRemove(long jarg1, vectorptr_servicedefinition jarg1_, int jarg2);
  public final static native long vectorptr_servicedefinition_doGet(long jarg1, vectorptr_servicedefinition jarg1_, int jarg2);
  public final static native long vectorptr_servicedefinition_doSet(long jarg1, vectorptr_servicedefinition jarg1_, int jarg2, long jarg3, ServiceDefinition jarg3_);
  public final static native void vectorptr_servicedefinition_doRemoveRange(long jarg1, vectorptr_servicedefinition jarg1_, int jarg2, int jarg3);
  public final static native void delete_vectorptr_servicedefinition(long jarg1);
  public final static native void ServiceDefinitionParseInfo_ServiceName_set(long jarg1, ServiceDefinitionParseInfo jarg1_, String jarg2);
  public final static native String ServiceDefinitionParseInfo_ServiceName_get(long jarg1, ServiceDefinitionParseInfo jarg1_);
  public final static native void ServiceDefinitionParseInfo_RobDefFilePath_set(long jarg1, ServiceDefinitionParseInfo jarg1_, String jarg2);
  public final static native String ServiceDefinitionParseInfo_RobDefFilePath_get(long jarg1, ServiceDefinitionParseInfo jarg1_);
  public final static native void ServiceDefinitionParseInfo_Line_set(long jarg1, ServiceDefinitionParseInfo jarg1_, String jarg2);
  public final static native String ServiceDefinitionParseInfo_Line_get(long jarg1, ServiceDefinitionParseInfo jarg1_);
  public final static native void ServiceDefinitionParseInfo_LineNumber_set(long jarg1, ServiceDefinitionParseInfo jarg1_, int jarg2);
  public final static native int ServiceDefinitionParseInfo_LineNumber_get(long jarg1, ServiceDefinitionParseInfo jarg1_);
  public final static native long new_ServiceDefinitionParseInfo();
  public final static native void ServiceDefinitionParseInfo_reset(long jarg1, ServiceDefinitionParseInfo jarg1_);
  public final static native void delete_ServiceDefinitionParseInfo(long jarg1);
  public final static native long new_RobotRaconteurVersion__SWIG_0();
  public final static native long new_RobotRaconteurVersion__SWIG_1(long jarg1, long jarg2, long jarg3, long jarg4);
  public final static native long new_RobotRaconteurVersion__SWIG_2(long jarg1, long jarg2, long jarg3);
  public final static native long new_RobotRaconteurVersion__SWIG_3(long jarg1, long jarg2);
  public final static native long new_RobotRaconteurVersion__SWIG_4(String jarg1);
  public final static native String RobotRaconteurVersion_toString(long jarg1, RobotRaconteurVersion jarg1_);
  public final static native void RobotRaconteurVersion_fromString__SWIG_0(long jarg1, RobotRaconteurVersion jarg1_, String jarg2, long jarg3, ServiceDefinitionParseInfo jarg3_);
  public final static native void RobotRaconteurVersion_fromString__SWIG_1(long jarg1, RobotRaconteurVersion jarg1_, String jarg2);
  public final static native void RobotRaconteurVersion_major_set(long jarg1, RobotRaconteurVersion jarg1_, long jarg2);
  public final static native long RobotRaconteurVersion_major_get(long jarg1, RobotRaconteurVersion jarg1_);
  public final static native void RobotRaconteurVersion_minor_set(long jarg1, RobotRaconteurVersion jarg1_, long jarg2);
  public final static native long RobotRaconteurVersion_minor_get(long jarg1, RobotRaconteurVersion jarg1_);
  public final static native void RobotRaconteurVersion_patch_set(long jarg1, RobotRaconteurVersion jarg1_, long jarg2);
  public final static native long RobotRaconteurVersion_patch_get(long jarg1, RobotRaconteurVersion jarg1_);
  public final static native void RobotRaconteurVersion_tweak_set(long jarg1, RobotRaconteurVersion jarg1_, long jarg2);
  public final static native long RobotRaconteurVersion_tweak_get(long jarg1, RobotRaconteurVersion jarg1_);
  public final static native void RobotRaconteurVersion_ParseInfo_set(long jarg1, RobotRaconteurVersion jarg1_, long jarg2, ServiceDefinitionParseInfo jarg2_);
  public final static native long RobotRaconteurVersion_ParseInfo_get(long jarg1, RobotRaconteurVersion jarg1_);
  public final static native void delete_RobotRaconteurVersion(long jarg1);
  public final static native boolean RobotRaconteurVersion_eq(long jarg1, RobotRaconteurVersion jarg1_, long jarg2, RobotRaconteurVersion jarg2_);
  public final static native boolean RobotRaconteurVersion_ne(long jarg1, RobotRaconteurVersion jarg1_, long jarg2, RobotRaconteurVersion jarg2_);
  public final static native boolean RobotRaconteurVersion_gt(long jarg1, RobotRaconteurVersion jarg1_, long jarg2, RobotRaconteurVersion jarg2_);
  public final static native boolean RobotRaconteurVersion_ge(long jarg1, RobotRaconteurVersion jarg1_, long jarg2, RobotRaconteurVersion jarg2_);
  public final static native boolean RobotRaconteurVersion_lt(long jarg1, RobotRaconteurVersion jarg1_, long jarg2, RobotRaconteurVersion jarg2_);
  public final static native boolean RobotRaconteurVersion_le(long jarg1, RobotRaconteurVersion jarg1_, long jarg2, RobotRaconteurVersion jarg2_);
  public final static native void ServiceDefinition_Name_set(long jarg1, ServiceDefinition jarg1_, String jarg2);
  public final static native String ServiceDefinition_Name_get(long jarg1, ServiceDefinition jarg1_);
  public final static native void ServiceDefinition_NamedArrays_set(long jarg1, ServiceDefinition jarg1_, long jarg2, vectorptr_serviceentrydefinition jarg2_);
  public final static native long ServiceDefinition_NamedArrays_get(long jarg1, ServiceDefinition jarg1_);
  public final static native void ServiceDefinition_Pods_set(long jarg1, ServiceDefinition jarg1_, long jarg2, vectorptr_serviceentrydefinition jarg2_);
  public final static native long ServiceDefinition_Pods_get(long jarg1, ServiceDefinition jarg1_);
  public final static native void ServiceDefinition_Structures_set(long jarg1, ServiceDefinition jarg1_, long jarg2, vectorptr_serviceentrydefinition jarg2_);
  public final static native long ServiceDefinition_Structures_get(long jarg1, ServiceDefinition jarg1_);
  public final static native void ServiceDefinition_Objects_set(long jarg1, ServiceDefinition jarg1_, long jarg2, vectorptr_serviceentrydefinition jarg2_);
  public final static native long ServiceDefinition_Objects_get(long jarg1, ServiceDefinition jarg1_);
  public final static native void ServiceDefinition_Options_set(long jarg1, ServiceDefinition jarg1_, long jarg2, vectorstring jarg2_);
  public final static native long ServiceDefinition_Options_get(long jarg1, ServiceDefinition jarg1_);
  public final static native void ServiceDefinition_Imports_set(long jarg1, ServiceDefinition jarg1_, long jarg2, vectorstring jarg2_);
  public final static native long ServiceDefinition_Imports_get(long jarg1, ServiceDefinition jarg1_);
  public final static native void ServiceDefinition_Exceptions_set(long jarg1, ServiceDefinition jarg1_, long jarg2, vectorptr_exceptiondefinition jarg2_);
  public final static native long ServiceDefinition_Exceptions_get(long jarg1, ServiceDefinition jarg1_);
  public final static native void ServiceDefinition_Using_set(long jarg1, ServiceDefinition jarg1_, long jarg2, vector_usingdefinition jarg2_);
  public final static native long ServiceDefinition_Using_get(long jarg1, ServiceDefinition jarg1_);
  public final static native void ServiceDefinition_Constants_set(long jarg1, ServiceDefinition jarg1_, long jarg2, vectorptr_constantdefinition jarg2_);
  public final static native long ServiceDefinition_Constants_get(long jarg1, ServiceDefinition jarg1_);
  public final static native void ServiceDefinition_Enums_set(long jarg1, ServiceDefinition jarg1_, long jarg2, vectorptr_enumdefinition jarg2_);
  public final static native long ServiceDefinition_Enums_get(long jarg1, ServiceDefinition jarg1_);
  public final static native void ServiceDefinition_StdVer_set(long jarg1, ServiceDefinition jarg1_, long jarg2, RobotRaconteurVersion jarg2_);
  public final static native long ServiceDefinition_StdVer_get(long jarg1, ServiceDefinition jarg1_);
  public final static native void ServiceDefinition_ParseInfo_set(long jarg1, ServiceDefinition jarg1_, long jarg2, ServiceDefinitionParseInfo jarg2_);
  public final static native long ServiceDefinition_ParseInfo_get(long jarg1, ServiceDefinition jarg1_);
  public final static native void ServiceDefinition_DocString_set(long jarg1, ServiceDefinition jarg1_, String jarg2);
  public final static native String ServiceDefinition_DocString_get(long jarg1, ServiceDefinition jarg1_);
  public final static native String ServiceDefinition_toString(long jarg1, ServiceDefinition jarg1_);
  public final static native void ServiceDefinition_fromString__SWIG_0(long jarg1, ServiceDefinition jarg1_, String jarg2, long jarg3, ServiceDefinitionParseInfo jarg3_);
  public final static native void ServiceDefinition_fromString__SWIG_1(long jarg1, ServiceDefinition jarg1_, String jarg2);
  public final static native long new_ServiceDefinition();
  public final static native void ServiceDefinition_reset(long jarg1, ServiceDefinition jarg1_);
  public final static native void delete_ServiceDefinition(long jarg1);
  public final static native void ServiceEntryDefinition_Name_set(long jarg1, ServiceEntryDefinition jarg1_, String jarg2);
  public final static native String ServiceEntryDefinition_Name_get(long jarg1, ServiceEntryDefinition jarg1_);
  public final static native void ServiceEntryDefinition_Members_set(long jarg1, ServiceEntryDefinition jarg1_, long jarg2, vectorptr_memberdefinition jarg2_);
  public final static native long ServiceEntryDefinition_Members_get(long jarg1, ServiceEntryDefinition jarg1_);
  public final static native void ServiceEntryDefinition_EntryType_set(long jarg1, ServiceEntryDefinition jarg1_, int jarg2);
  public final static native int ServiceEntryDefinition_EntryType_get(long jarg1, ServiceEntryDefinition jarg1_);
  public final static native void ServiceEntryDefinition_Implements_set(long jarg1, ServiceEntryDefinition jarg1_, long jarg2, vectorstring jarg2_);
  public final static native long ServiceEntryDefinition_Implements_get(long jarg1, ServiceEntryDefinition jarg1_);
  public final static native void ServiceEntryDefinition_Options_set(long jarg1, ServiceEntryDefinition jarg1_, long jarg2, vectorstring jarg2_);
  public final static native long ServiceEntryDefinition_Options_get(long jarg1, ServiceEntryDefinition jarg1_);
  public final static native void ServiceEntryDefinition_Constants_set(long jarg1, ServiceEntryDefinition jarg1_, long jarg2, vectorptr_constantdefinition jarg2_);
  public final static native long ServiceEntryDefinition_Constants_get(long jarg1, ServiceEntryDefinition jarg1_);
  public final static native void ServiceEntryDefinition_ParseInfo_set(long jarg1, ServiceEntryDefinition jarg1_, long jarg2, ServiceDefinitionParseInfo jarg2_);
  public final static native long ServiceEntryDefinition_ParseInfo_get(long jarg1, ServiceEntryDefinition jarg1_);
  public final static native void ServiceEntryDefinition_DocString_set(long jarg1, ServiceEntryDefinition jarg1_, String jarg2);
  public final static native String ServiceEntryDefinition_DocString_get(long jarg1, ServiceEntryDefinition jarg1_);
  public final static native long new_ServiceEntryDefinition(long jarg1, ServiceDefinition jarg1_);
  public final static native String ServiceEntryDefinition_toString(long jarg1, ServiceEntryDefinition jarg1_);
  public final static native void ServiceEntryDefinition_fromString__SWIG_0(long jarg1, ServiceEntryDefinition jarg1_, String jarg2, long jarg3, ServiceDefinitionParseInfo jarg3_);
  public final static native void ServiceEntryDefinition_fromString__SWIG_1(long jarg1, ServiceEntryDefinition jarg1_, String jarg2);
  public final static native long ServiceEntryDefinition_getServiceDefinition(long jarg1, ServiceEntryDefinition jarg1_);
  public final static native void ServiceEntryDefinition_setServiceDefinition(long jarg1, ServiceEntryDefinition jarg1_, long jarg2, ServiceDefinition jarg2_);
  public final static native void ServiceEntryDefinition_reset(long jarg1, ServiceEntryDefinition jarg1_);
  public final static native void delete_ServiceEntryDefinition(long jarg1);
  public final static native void MemberDefinition_Name_set(long jarg1, MemberDefinition jarg1_, String jarg2);
  public final static native String MemberDefinition_Name_get(long jarg1, MemberDefinition jarg1_);
  public final static native void MemberDefinition_DocString_set(long jarg1, MemberDefinition jarg1_, String jarg2);
  public final static native String MemberDefinition_DocString_get(long jarg1, MemberDefinition jarg1_);
  public final static native long new_MemberDefinition(long jarg1, ServiceEntryDefinition jarg1_);
  public final static native int MemberDefinition_noLock(long jarg1, MemberDefinition jarg1_);
  public final static native String MemberDefinition_toString(long jarg1, MemberDefinition jarg1_);
  public final static native long MemberDefinition_getServiceEntry(long jarg1, MemberDefinition jarg1_);
  public final static native void MemberDefinition_setServiceEntry(long jarg1, MemberDefinition jarg1_, long jarg2, ServiceEntryDefinition jarg2_);
  public final static native void MemberDefinition_Modifiers_set(long jarg1, MemberDefinition jarg1_, long jarg2, vectorstring jarg2_);
  public final static native long MemberDefinition_Modifiers_get(long jarg1, MemberDefinition jarg1_);
  public final static native void MemberDefinition_ParseInfo_set(long jarg1, MemberDefinition jarg1_, long jarg2, ServiceDefinitionParseInfo jarg2_);
  public final static native long MemberDefinition_ParseInfo_get(long jarg1, MemberDefinition jarg1_);
  public final static native void MemberDefinition_reset(long jarg1, MemberDefinition jarg1_);
  public final static native void delete_MemberDefinition(long jarg1);
  public final static native void PropertyDefinition_Type_set(long jarg1, PropertyDefinition jarg1_, long jarg2, TypeDefinition jarg2_);
  public final static native long PropertyDefinition_Type_get(long jarg1, PropertyDefinition jarg1_);
  public final static native long new_PropertyDefinition(long jarg1, ServiceEntryDefinition jarg1_);
  public final static native String PropertyDefinition_toString__SWIG_0(long jarg1, PropertyDefinition jarg1_);
  public final static native String PropertyDefinition_toString__SWIG_1(long jarg1, PropertyDefinition jarg1_, boolean jarg2);
  public final static native void PropertyDefinition_fromString__SWIG_0(long jarg1, PropertyDefinition jarg1_, String jarg2, long jarg3, ServiceDefinitionParseInfo jarg3_);
  public final static native void PropertyDefinition_fromString__SWIG_1(long jarg1, PropertyDefinition jarg1_, String jarg2);
  public final static native void delete_PropertyDefinition(long jarg1);
  public final static native void FunctionDefinition_ReturnType_set(long jarg1, FunctionDefinition jarg1_, long jarg2, TypeDefinition jarg2_);
  public final static native long FunctionDefinition_ReturnType_get(long jarg1, FunctionDefinition jarg1_);
  public final static native void FunctionDefinition_Parameters_set(long jarg1, FunctionDefinition jarg1_, long jarg2, vectorptr_typedefinition jarg2_);
  public final static native long FunctionDefinition_Parameters_get(long jarg1, FunctionDefinition jarg1_);
  public final static native long new_FunctionDefinition(long jarg1, ServiceEntryDefinition jarg1_);
  public final static native String FunctionDefinition_toString(long jarg1, FunctionDefinition jarg1_);
  public final static native void FunctionDefinition_fromString__SWIG_0(long jarg1, FunctionDefinition jarg1_, String jarg2, long jarg3, ServiceDefinitionParseInfo jarg3_);
  public final static native void FunctionDefinition_fromString__SWIG_1(long jarg1, FunctionDefinition jarg1_, String jarg2);
  public final static native boolean FunctionDefinition_isGenerator(long jarg1, FunctionDefinition jarg1_);
  public final static native void delete_FunctionDefinition(long jarg1);
  public final static native void EventDefinition_Parameters_set(long jarg1, EventDefinition jarg1_, long jarg2, vectorptr_typedefinition jarg2_);
  public final static native long EventDefinition_Parameters_get(long jarg1, EventDefinition jarg1_);
  public final static native long new_EventDefinition(long jarg1, ServiceEntryDefinition jarg1_);
  public final static native String EventDefinition_toString(long jarg1, EventDefinition jarg1_);
  public final static native void EventDefinition_fromString__SWIG_0(long jarg1, EventDefinition jarg1_, String jarg2, long jarg3, ServiceDefinitionParseInfo jarg3_);
  public final static native void EventDefinition_fromString__SWIG_1(long jarg1, EventDefinition jarg1_, String jarg2);
  public final static native void delete_EventDefinition(long jarg1);
  public final static native void ObjRefDefinition_ObjectType_set(long jarg1, ObjRefDefinition jarg1_, String jarg2);
  public final static native String ObjRefDefinition_ObjectType_get(long jarg1, ObjRefDefinition jarg1_);
  public final static native void ObjRefDefinition_ArrayType_set(long jarg1, ObjRefDefinition jarg1_, int jarg2);
  public final static native int ObjRefDefinition_ArrayType_get(long jarg1, ObjRefDefinition jarg1_);
  public final static native void ObjRefDefinition_ContainerType_set(long jarg1, ObjRefDefinition jarg1_, int jarg2);
  public final static native int ObjRefDefinition_ContainerType_get(long jarg1, ObjRefDefinition jarg1_);
  public final static native long new_ObjRefDefinition(long jarg1, ServiceEntryDefinition jarg1_);
  public final static native String ObjRefDefinition_toString(long jarg1, ObjRefDefinition jarg1_);
  public final static native void ObjRefDefinition_fromString__SWIG_0(long jarg1, ObjRefDefinition jarg1_, String jarg2, long jarg3, ServiceDefinitionParseInfo jarg3_);
  public final static native void ObjRefDefinition_fromString__SWIG_1(long jarg1, ObjRefDefinition jarg1_, String jarg2);
  public final static native void delete_ObjRefDefinition(long jarg1);
  public final static native void PipeDefinition_Type_set(long jarg1, PipeDefinition jarg1_, long jarg2, TypeDefinition jarg2_);
  public final static native long PipeDefinition_Type_get(long jarg1, PipeDefinition jarg1_);
  public final static native long new_PipeDefinition(long jarg1, ServiceEntryDefinition jarg1_);
  public final static native String PipeDefinition_toString(long jarg1, PipeDefinition jarg1_);
  public final static native void PipeDefinition_fromString__SWIG_0(long jarg1, PipeDefinition jarg1_, String jarg2, long jarg3, ServiceDefinitionParseInfo jarg3_);
  public final static native void PipeDefinition_fromString__SWIG_1(long jarg1, PipeDefinition jarg1_, String jarg2);
  public final static native void delete_PipeDefinition(long jarg1);
  public final static native void CallbackDefinition_ReturnType_set(long jarg1, CallbackDefinition jarg1_, long jarg2, TypeDefinition jarg2_);
  public final static native long CallbackDefinition_ReturnType_get(long jarg1, CallbackDefinition jarg1_);
  public final static native void CallbackDefinition_Parameters_set(long jarg1, CallbackDefinition jarg1_, long jarg2, vectorptr_typedefinition jarg2_);
  public final static native long CallbackDefinition_Parameters_get(long jarg1, CallbackDefinition jarg1_);
  public final static native long new_CallbackDefinition(long jarg1, ServiceEntryDefinition jarg1_);
  public final static native String CallbackDefinition_toString(long jarg1, CallbackDefinition jarg1_);
  public final static native void CallbackDefinition_fromString__SWIG_0(long jarg1, CallbackDefinition jarg1_, String jarg2, long jarg3, ServiceDefinitionParseInfo jarg3_);
  public final static native void CallbackDefinition_fromString__SWIG_1(long jarg1, CallbackDefinition jarg1_, String jarg2);
  public final static native void delete_CallbackDefinition(long jarg1);
  public final static native void WireDefinition_Type_set(long jarg1, WireDefinition jarg1_, long jarg2, TypeDefinition jarg2_);
  public final static native long WireDefinition_Type_get(long jarg1, WireDefinition jarg1_);
  public final static native long new_WireDefinition(long jarg1, ServiceEntryDefinition jarg1_);
  public final static native String WireDefinition_toString(long jarg1, WireDefinition jarg1_);
  public final static native void WireDefinition_fromString__SWIG_0(long jarg1, WireDefinition jarg1_, String jarg2, long jarg3, ServiceDefinitionParseInfo jarg3_);
  public final static native void WireDefinition_fromString__SWIG_1(long jarg1, WireDefinition jarg1_, String jarg2);
  public final static native void delete_WireDefinition(long jarg1);
  public final static native void MemoryDefinition_Type_set(long jarg1, MemoryDefinition jarg1_, long jarg2, TypeDefinition jarg2_);
  public final static native long MemoryDefinition_Type_get(long jarg1, MemoryDefinition jarg1_);
  public final static native long new_MemoryDefinition(long jarg1, ServiceEntryDefinition jarg1_);
  public final static native String MemoryDefinition_toString(long jarg1, MemoryDefinition jarg1_);
  public final static native void MemoryDefinition_fromString__SWIG_0(long jarg1, MemoryDefinition jarg1_, String jarg2, long jarg3, ServiceDefinitionParseInfo jarg3_);
  public final static native void MemoryDefinition_fromString__SWIG_1(long jarg1, MemoryDefinition jarg1_, String jarg2);
  public final static native void delete_MemoryDefinition(long jarg1);
  public final static native void TypeDefinition_Name_set(long jarg1, TypeDefinition jarg1_, String jarg2);
  public final static native String TypeDefinition_Name_get(long jarg1, TypeDefinition jarg1_);
  public final static native void TypeDefinition_Type_set(long jarg1, TypeDefinition jarg1_, int jarg2);
  public final static native int TypeDefinition_Type_get(long jarg1, TypeDefinition jarg1_);
  public final static native void TypeDefinition_TypeString_set(long jarg1, TypeDefinition jarg1_, String jarg2);
  public final static native String TypeDefinition_TypeString_get(long jarg1, TypeDefinition jarg1_);
  public final static native void TypeDefinition_ArrayType_set(long jarg1, TypeDefinition jarg1_, int jarg2);
  public final static native int TypeDefinition_ArrayType_get(long jarg1, TypeDefinition jarg1_);
  public final static native void TypeDefinition_ArrayVarLength_set(long jarg1, TypeDefinition jarg1_, boolean jarg2);
  public final static native boolean TypeDefinition_ArrayVarLength_get(long jarg1, TypeDefinition jarg1_);
  public final static native void TypeDefinition_ArrayLength_set(long jarg1, TypeDefinition jarg1_, long jarg2, vectorint32 jarg2_);
  public final static native long TypeDefinition_ArrayLength_get(long jarg1, TypeDefinition jarg1_);
  public final static native void TypeDefinition_ContainerType_set(long jarg1, TypeDefinition jarg1_, int jarg2);
  public final static native int TypeDefinition_ContainerType_get(long jarg1, TypeDefinition jarg1_);
  public final static native long new_TypeDefinition__SWIG_0();
  public final static native String TypeDefinition_toString(long jarg1, TypeDefinition jarg1_);
  public final static native void TypeDefinition_fromString__SWIG_0(long jarg1, TypeDefinition jarg1_, String jarg2, long jarg3, ServiceDefinitionParseInfo jarg3_);
  public final static native void TypeDefinition_fromString__SWIG_1(long jarg1, TypeDefinition jarg1_, String jarg2);
  public final static native int TypeDefinition_dataTypeFromString(String jarg1);
  public final static native String TypeDefinition_stringFromDataType(int jarg1);
  public final static native long TypeDefinition_getMember(long jarg1, TypeDefinition jarg1_);
  public final static native void TypeDefinition_setMember(long jarg1, TypeDefinition jarg1_, long jarg2, MemberDefinition jarg2_);
  public final static native void TypeDefinition_copyTo(long jarg1, TypeDefinition jarg1_, long jarg2, TypeDefinition jarg2_);
  public final static native long TypeDefinition_clone(long jarg1, TypeDefinition jarg1_);
  public final static native void TypeDefinition_rename(long jarg1, TypeDefinition jarg1_, String jarg2);
  public final static native void TypeDefinition_removeContainers(long jarg1, TypeDefinition jarg1_);
  public final static native void TypeDefinition_removeArray(long jarg1, TypeDefinition jarg1_);
  public final static native void TypeDefinition_qualifyTypeStringWithUsing(long jarg1, TypeDefinition jarg1_);
  public final static native void TypeDefinition_unqualifyTypeStringWithUsing(long jarg1, TypeDefinition jarg1_);
  public final static native void TypeDefinition_reset(long jarg1, TypeDefinition jarg1_);
  public final static native long new_TypeDefinition__SWIG_1(long jarg1, TypeDefinition jarg1_);
  public final static native void delete_TypeDefinition(long jarg1);
  public final static native void delete_UsingDefinition(long jarg1);
  public final static native void UsingDefinition_QualifiedName_set(long jarg1, UsingDefinition jarg1_, String jarg2);
  public final static native String UsingDefinition_QualifiedName_get(long jarg1, UsingDefinition jarg1_);
  public final static native void UsingDefinition_UnqualifiedName_set(long jarg1, UsingDefinition jarg1_, String jarg2);
  public final static native String UsingDefinition_UnqualifiedName_get(long jarg1, UsingDefinition jarg1_);
  public final static native void UsingDefinition_ParseInfo_set(long jarg1, UsingDefinition jarg1_, long jarg2, ServiceDefinitionParseInfo jarg2_);
  public final static native long UsingDefinition_ParseInfo_get(long jarg1, UsingDefinition jarg1_);
  public final static native long UsingDefinition_getService(long jarg1, UsingDefinition jarg1_);
  public final static native void UsingDefinition_setService(long jarg1, UsingDefinition jarg1_, long jarg2, ServiceDefinition jarg2_);
  public final static native long new_UsingDefinition(long jarg1, ServiceDefinition jarg1_);
  public final static native String UsingDefinition_toString(long jarg1, UsingDefinition jarg1_);
  public final static native void UsingDefinition_fromString__SWIG_0(long jarg1, UsingDefinition jarg1_, String jarg2, long jarg3, ServiceDefinitionParseInfo jarg3_);
  public final static native void UsingDefinition_fromString__SWIG_1(long jarg1, UsingDefinition jarg1_, String jarg2);
  public final static native void ConstantDefinition_StructField_Name_set(long jarg1, ConstantDefinition_StructField jarg1_, String jarg2);
  public final static native String ConstantDefinition_StructField_Name_get(long jarg1, ConstantDefinition_StructField jarg1_);
  public final static native void ConstantDefinition_StructField_ConstantRefName_set(long jarg1, ConstantDefinition_StructField jarg1_, String jarg2);
  public final static native String ConstantDefinition_StructField_ConstantRefName_get(long jarg1, ConstantDefinition_StructField jarg1_);
  public final static native long new_ConstantDefinition_StructField();
  public final static native void delete_ConstantDefinition_StructField(long jarg1);
  public final static native void delete_ConstantDefinition(long jarg1);
  public final static native void ConstantDefinition_Name_set(long jarg1, ConstantDefinition jarg1_, String jarg2);
  public final static native String ConstantDefinition_Name_get(long jarg1, ConstantDefinition jarg1_);
  public final static native void ConstantDefinition_DocString_set(long jarg1, ConstantDefinition jarg1_, String jarg2);
  public final static native String ConstantDefinition_DocString_get(long jarg1, ConstantDefinition jarg1_);
  public final static native void ConstantDefinition_Type_set(long jarg1, ConstantDefinition jarg1_, long jarg2, TypeDefinition jarg2_);
  public final static native long ConstantDefinition_Type_get(long jarg1, ConstantDefinition jarg1_);
  public final static native void ConstantDefinition_Value_set(long jarg1, ConstantDefinition jarg1_, String jarg2);
  public final static native String ConstantDefinition_Value_get(long jarg1, ConstantDefinition jarg1_);
  public final static native void ConstantDefinition_ParseInfo_set(long jarg1, ConstantDefinition jarg1_, long jarg2, ServiceDefinitionParseInfo jarg2_);
  public final static native long ConstantDefinition_ParseInfo_get(long jarg1, ConstantDefinition jarg1_);
  public final static native long ConstantDefinition_getService(long jarg1, ConstantDefinition jarg1_);
  public final static native void ConstantDefinition_setService(long jarg1, ConstantDefinition jarg1_, long jarg2, ServiceDefinition jarg2_);
  public final static native long ConstantDefinition_getServiceEntry(long jarg1, ConstantDefinition jarg1_);
  public final static native void ConstantDefinition_setServiceEntry(long jarg1, ConstantDefinition jarg1_, long jarg2, ServiceEntryDefinition jarg2_);
  public final static native long new_ConstantDefinition__SWIG_0(long jarg1, ServiceDefinition jarg1_);
  public final static native long new_ConstantDefinition__SWIG_1(long jarg1, ServiceEntryDefinition jarg1_);
  public final static native String ConstantDefinition_toString(long jarg1, ConstantDefinition jarg1_);
  public final static native void ConstantDefinition_fromString__SWIG_0(long jarg1, ConstantDefinition jarg1_, String jarg2, long jarg3, ServiceDefinitionParseInfo jarg3_);
  public final static native void ConstantDefinition_fromString__SWIG_1(long jarg1, ConstantDefinition jarg1_, String jarg2);
  public final static native void ConstantDefinition_reset(long jarg1, ConstantDefinition jarg1_);
  public final static native boolean ConstantDefinition_verifyValue(long jarg1, ConstantDefinition jarg1_);
  public final static native String ConstantDefinition_valueToString(long jarg1, ConstantDefinition jarg1_);
  public final static native long ConstantDefinition_valueToStructFields(long jarg1, ConstantDefinition jarg1_);
  public final static native String ConstantDefinition_unescapeString(String jarg1);
  public final static native String ConstantDefinition_escapeString(String jarg1);
  public final static native void delete_EnumDefinition(long jarg1);
  public final static native void EnumDefinition_Name_set(long jarg1, EnumDefinition jarg1_, String jarg2);
  public final static native String EnumDefinition_Name_get(long jarg1, EnumDefinition jarg1_);
  public final static native void EnumDefinition_DocString_set(long jarg1, EnumDefinition jarg1_, String jarg2);
  public final static native String EnumDefinition_DocString_get(long jarg1, EnumDefinition jarg1_);
  public final static native void EnumDefinition_Values_set(long jarg1, EnumDefinition jarg1_, long jarg2, vector_enumdefinitionvalues jarg2_);
  public final static native long EnumDefinition_Values_get(long jarg1, EnumDefinition jarg1_);
  public final static native void EnumDefinition_ParseInfo_set(long jarg1, EnumDefinition jarg1_, long jarg2, ServiceDefinitionParseInfo jarg2_);
  public final static native long EnumDefinition_ParseInfo_get(long jarg1, EnumDefinition jarg1_);
  public final static native long EnumDefinition_getService(long jarg1, EnumDefinition jarg1_);
  public final static native void EnumDefinition_setService(long jarg1, EnumDefinition jarg1_, long jarg2, ServiceDefinition jarg2_);
  public final static native long new_EnumDefinition(long jarg1, ServiceDefinition jarg1_);
  public final static native String EnumDefinition_toString(long jarg1, EnumDefinition jarg1_);
  public final static native void EnumDefinition_fromString__SWIG_0(long jarg1, EnumDefinition jarg1_, String jarg2, long jarg3, ServiceDefinitionParseInfo jarg3_);
  public final static native void EnumDefinition_fromString__SWIG_1(long jarg1, EnumDefinition jarg1_, String jarg2);
  public final static native boolean EnumDefinition_verifyValues(long jarg1, EnumDefinition jarg1_);
  public final static native void EnumDefinition_reset(long jarg1, EnumDefinition jarg1_);
  public final static native long new_EnumDefinitionValue();
  public final static native void EnumDefinitionValue_Name_set(long jarg1, EnumDefinitionValue jarg1_, String jarg2);
  public final static native String EnumDefinitionValue_Name_get(long jarg1, EnumDefinitionValue jarg1_);
  public final static native void EnumDefinitionValue_DocString_set(long jarg1, EnumDefinitionValue jarg1_, String jarg2);
  public final static native String EnumDefinitionValue_DocString_get(long jarg1, EnumDefinitionValue jarg1_);
  public final static native void EnumDefinitionValue_Value_set(long jarg1, EnumDefinitionValue jarg1_, int jarg2);
  public final static native int EnumDefinitionValue_Value_get(long jarg1, EnumDefinitionValue jarg1_);
  public final static native void EnumDefinitionValue_ImplicitValue_set(long jarg1, EnumDefinitionValue jarg1_, boolean jarg2);
  public final static native boolean EnumDefinitionValue_ImplicitValue_get(long jarg1, EnumDefinitionValue jarg1_);
  public final static native void EnumDefinitionValue_HexValue_set(long jarg1, EnumDefinitionValue jarg1_, boolean jarg2);
  public final static native boolean EnumDefinitionValue_HexValue_get(long jarg1, EnumDefinitionValue jarg1_);
  public final static native void delete_EnumDefinitionValue(long jarg1);
  public final static native void delete_ExceptionDefinition(long jarg1);
  public final static native void ExceptionDefinition_Name_set(long jarg1, ExceptionDefinition jarg1_, String jarg2);
  public final static native String ExceptionDefinition_Name_get(long jarg1, ExceptionDefinition jarg1_);
  public final static native void ExceptionDefinition_DocString_set(long jarg1, ExceptionDefinition jarg1_, String jarg2);
  public final static native String ExceptionDefinition_DocString_get(long jarg1, ExceptionDefinition jarg1_);
  public final static native void ExceptionDefinition_ParseInfo_set(long jarg1, ExceptionDefinition jarg1_, long jarg2, ServiceDefinitionParseInfo jarg2_);
  public final static native long ExceptionDefinition_ParseInfo_get(long jarg1, ExceptionDefinition jarg1_);
  public final static native long ExceptionDefinition_getService(long jarg1, ExceptionDefinition jarg1_);
  public final static native void ExceptionDefinition_setService(long jarg1, ExceptionDefinition jarg1_, long jarg2, ServiceDefinition jarg2_);
  public final static native long new_ExceptionDefinition(long jarg1, ServiceDefinition jarg1_);
  public final static native String ExceptionDefinition_toString(long jarg1, ExceptionDefinition jarg1_);
  public final static native void ExceptionDefinition_fromString__SWIG_0(long jarg1, ExceptionDefinition jarg1_, String jarg2, long jarg3, ServiceDefinitionParseInfo jarg3_);
  public final static native void ExceptionDefinition_fromString__SWIG_1(long jarg1, ExceptionDefinition jarg1_, String jarg2);
  public final static native void ExceptionDefinition_reset(long jarg1, ExceptionDefinition jarg1_);
  public final static native long MemberDefinitionUtil_toProperty(long jarg1, MemberDefinition jarg1_);
  public final static native long MemberDefinitionUtil_toFunction(long jarg1, MemberDefinition jarg1_);
  public final static native long MemberDefinitionUtil_toObjRef(long jarg1, MemberDefinition jarg1_);
  public final static native long MemberDefinitionUtil_toEvent(long jarg1, MemberDefinition jarg1_);
  public final static native long MemberDefinitionUtil_toPipe(long jarg1, MemberDefinition jarg1_);
  public final static native long MemberDefinitionUtil_toCallback(long jarg1, MemberDefinition jarg1_);
  public final static native long MemberDefinitionUtil_toWire(long jarg1, MemberDefinition jarg1_);
  public final static native long MemberDefinitionUtil_toMemory(long jarg1, MemberDefinition jarg1_);
  public final static native long new_MemberDefinitionUtil();
  public final static native void delete_MemberDefinitionUtil(long jarg1);
  public final static native long new_NodeID__SWIG_0();
  public final static native String NodeID_toString(long jarg1, NodeID jarg1_);
  public final static native long NodeID_newUniqueID();
  public final static native boolean NodeID_equals(long jarg1, NodeID jarg1_, long jarg2, NodeID jarg2_);
  public final static native boolean NodeID_ne(long jarg1, NodeID jarg1_, long jarg2, NodeID jarg2_);
  public final static native boolean NodeID_lt(long jarg1, NodeID jarg1_, long jarg2, NodeID jarg2_);
  public final static native boolean NodeID_isAnyNode(long jarg1, NodeID jarg1_);
  public final static native long NodeID_getAny();
  public final static native long new_NodeID__SWIG_1(String jarg1);
  public final static native long new_NodeID__SWIG_2(long jarg1, NodeID jarg1_);
  public final static native void delete_NodeID(long jarg1);
  public final static native long new_vectorptr_messageentry__SWIG_0();
  public final static native long new_vectorptr_messageentry__SWIG_1(long jarg1, vectorptr_messageentry jarg1_);
  public final static native long vectorptr_messageentry_capacity(long jarg1, vectorptr_messageentry jarg1_);
  public final static native void vectorptr_messageentry_reserve(long jarg1, vectorptr_messageentry jarg1_, long jarg2);
  public final static native boolean vectorptr_messageentry_isEmpty(long jarg1, vectorptr_messageentry jarg1_);
  public final static native void vectorptr_messageentry_clear(long jarg1, vectorptr_messageentry jarg1_);
  public final static native long new_vectorptr_messageentry__SWIG_2(int jarg1, long jarg2, MessageEntry jarg2_);
  public final static native int vectorptr_messageentry_doSize(long jarg1, vectorptr_messageentry jarg1_);
  public final static native void vectorptr_messageentry_doAdd__SWIG_0(long jarg1, vectorptr_messageentry jarg1_, long jarg2, MessageEntry jarg2_);
  public final static native void vectorptr_messageentry_doAdd__SWIG_1(long jarg1, vectorptr_messageentry jarg1_, int jarg2, long jarg3, MessageEntry jarg3_);
  public final static native long vectorptr_messageentry_doRemove(long jarg1, vectorptr_messageentry jarg1_, int jarg2);
  public final static native long vectorptr_messageentry_doGet(long jarg1, vectorptr_messageentry jarg1_, int jarg2);
  public final static native long vectorptr_messageentry_doSet(long jarg1, vectorptr_messageentry jarg1_, int jarg2, long jarg3, MessageEntry jarg3_);
  public final static native void vectorptr_messageentry_doRemoveRange(long jarg1, vectorptr_messageentry jarg1_, int jarg2, int jarg3);
  public final static native void delete_vectorptr_messageentry(long jarg1);
  public final static native long new_vectorptr_messageelement__SWIG_0();
  public final static native long new_vectorptr_messageelement__SWIG_1(long jarg1, vectorptr_messageelement jarg1_);
  public final static native long vectorptr_messageelement_capacity(long jarg1, vectorptr_messageelement jarg1_);
  public final static native void vectorptr_messageelement_reserve(long jarg1, vectorptr_messageelement jarg1_, long jarg2);
  public final static native boolean vectorptr_messageelement_isEmpty(long jarg1, vectorptr_messageelement jarg1_);
  public final static native void vectorptr_messageelement_clear(long jarg1, vectorptr_messageelement jarg1_);
  public final static native long new_vectorptr_messageelement__SWIG_2(int jarg1, long jarg2, MessageElement jarg2_);
  public final static native int vectorptr_messageelement_doSize(long jarg1, vectorptr_messageelement jarg1_);
  public final static native void vectorptr_messageelement_doAdd__SWIG_0(long jarg1, vectorptr_messageelement jarg1_, long jarg2, MessageElement jarg2_);
  public final static native void vectorptr_messageelement_doAdd__SWIG_1(long jarg1, vectorptr_messageelement jarg1_, int jarg2, long jarg3, MessageElement jarg3_);
  public final static native long vectorptr_messageelement_doRemove(long jarg1, vectorptr_messageelement jarg1_, int jarg2);
  public final static native long vectorptr_messageelement_doGet(long jarg1, vectorptr_messageelement jarg1_, int jarg2);
  public final static native long vectorptr_messageelement_doSet(long jarg1, vectorptr_messageelement jarg1_, int jarg2, long jarg3, MessageElement jarg3_);
  public final static native void vectorptr_messageelement_doRemoveRange(long jarg1, vectorptr_messageelement jarg1_, int jarg2, int jarg3);
  public final static native void delete_vectorptr_messageelement(long jarg1);
  public final static native void Message_header_set(long jarg1, Message jarg1_, long jarg2, MessageHeader jarg2_);
  public final static native long Message_header_get(long jarg1, Message jarg1_);
  public final static native void Message_entries_set(long jarg1, Message jarg1_, long jarg2, vectorptr_messageentry jarg2_);
  public final static native long Message_entries_get(long jarg1, Message jarg1_);
  public final static native long new_Message();
  public final static native long Message_computeSize(long jarg1, Message jarg1_);
  public final static native long Message_findEntry(long jarg1, Message jarg1_, String jarg2);
  public final static native long Message_addEntry(long jarg1, Message jarg1_, int jarg2, String jarg3);
  public final static native void delete_Message(long jarg1);
  public final static native void MessageHeader_HeaderSize_set(long jarg1, MessageHeader jarg1_, int jarg2);
  public final static native int MessageHeader_HeaderSize_get(long jarg1, MessageHeader jarg1_);
  public final static native void MessageHeader_MessageFlags_set(long jarg1, MessageHeader jarg1_, short jarg2);
  public final static native short MessageHeader_MessageFlags_get(long jarg1, MessageHeader jarg1_);
  public final static native void MessageHeader_SenderEndpoint_set(long jarg1, MessageHeader jarg1_, long jarg2);
  public final static native long MessageHeader_SenderEndpoint_get(long jarg1, MessageHeader jarg1_);
  public final static native void MessageHeader_ReceiverEndpoint_set(long jarg1, MessageHeader jarg1_, long jarg2);
  public final static native long MessageHeader_ReceiverEndpoint_get(long jarg1, MessageHeader jarg1_);
  public final static native void MessageHeader_SenderNodeName_set(long jarg1, MessageHeader jarg1_, String jarg2);
  public final static native String MessageHeader_SenderNodeName_get(long jarg1, MessageHeader jarg1_);
  public final static native void MessageHeader_ReceiverNodeName_set(long jarg1, MessageHeader jarg1_, String jarg2);
  public final static native String MessageHeader_ReceiverNodeName_get(long jarg1, MessageHeader jarg1_);
  public final static native void MessageHeader_SenderNodeID_set(long jarg1, MessageHeader jarg1_, long jarg2, NodeID jarg2_);
  public final static native long MessageHeader_SenderNodeID_get(long jarg1, MessageHeader jarg1_);
  public final static native void MessageHeader_ReceiverNodeID_set(long jarg1, MessageHeader jarg1_, long jarg2, NodeID jarg2_);
  public final static native long MessageHeader_ReceiverNodeID_get(long jarg1, MessageHeader jarg1_);
  public final static native void MessageHeader_MetaData_set(long jarg1, MessageHeader jarg1_, String jarg2);
  public final static native String MessageHeader_MetaData_get(long jarg1, MessageHeader jarg1_);
  public final static native void MessageHeader_EntryCount_set(long jarg1, MessageHeader jarg1_, int jarg2);
  public final static native int MessageHeader_EntryCount_get(long jarg1, MessageHeader jarg1_);
  public final static native void MessageHeader_MessageID_set(long jarg1, MessageHeader jarg1_, int jarg2);
  public final static native int MessageHeader_MessageID_get(long jarg1, MessageHeader jarg1_);
  public final static native void MessageHeader_MessageResID_set(long jarg1, MessageHeader jarg1_, int jarg2);
  public final static native int MessageHeader_MessageResID_get(long jarg1, MessageHeader jarg1_);
  public final static native void MessageHeader_MessageSize_set(long jarg1, MessageHeader jarg1_, long jarg2);
  public final static native long MessageHeader_MessageSize_get(long jarg1, MessageHeader jarg1_);
  public final static native void MessageHeader_Priority_set(long jarg1, MessageHeader jarg1_, int jarg2);
  public final static native int MessageHeader_Priority_get(long jarg1, MessageHeader jarg1_);
  public final static native void MessageHeader_Extended_set(long jarg1, MessageHeader jarg1_, long jarg2, vector_uint8_t jarg2_);
  public final static native long MessageHeader_Extended_get(long jarg1, MessageHeader jarg1_);
  public final static native int MessageHeader_computeSize(long jarg1, MessageHeader jarg1_);
  public final static native void MessageHeader_updateHeader(long jarg1, MessageHeader jarg1_, long jarg2, int jarg3);
  public final static native long new_MessageHeader();
  public final static native void delete_MessageHeader(long jarg1);
  public final static native void MessageEntry_EntrySize_set(long jarg1, MessageEntry jarg1_, long jarg2);
  public final static native long MessageEntry_EntrySize_get(long jarg1, MessageEntry jarg1_);
  public final static native void MessageEntry_EntryFlags_set(long jarg1, MessageEntry jarg1_, short jarg2);
  public final static native short MessageEntry_EntryFlags_get(long jarg1, MessageEntry jarg1_);
  public final static native void MessageEntry_EntryType_set(long jarg1, MessageEntry jarg1_, int jarg2);
  public final static native int MessageEntry_EntryType_get(long jarg1, MessageEntry jarg1_);
  public final static native void MessageEntry_ServicePath_set(long jarg1, MessageEntry jarg1_, String jarg2);
  public final static native String MessageEntry_ServicePath_get(long jarg1, MessageEntry jarg1_);
  public final static native void MessageEntry_MemberName_set(long jarg1, MessageEntry jarg1_, String jarg2);
  public final static native String MessageEntry_MemberName_get(long jarg1, MessageEntry jarg1_);
  public final static native void MessageEntry_MemberNameCode_set(long jarg1, MessageEntry jarg1_, long jarg2);
  public final static native long MessageEntry_MemberNameCode_get(long jarg1, MessageEntry jarg1_);
  public final static native void MessageEntry_RequestID_set(long jarg1, MessageEntry jarg1_, long jarg2);
  public final static native long MessageEntry_RequestID_get(long jarg1, MessageEntry jarg1_);
  public final static native void MessageEntry_Error_set(long jarg1, MessageEntry jarg1_, int jarg2);
  public final static native int MessageEntry_Error_get(long jarg1, MessageEntry jarg1_);
  public final static native void MessageEntry_MetaData_set(long jarg1, MessageEntry jarg1_, String jarg2);
  public final static native String MessageEntry_MetaData_get(long jarg1, MessageEntry jarg1_);
  public final static native void MessageEntry_Extended_set(long jarg1, MessageEntry jarg1_, long jarg2, vector_uint8_t jarg2_);
  public final static native long MessageEntry_Extended_get(long jarg1, MessageEntry jarg1_);
  public final static native void MessageEntry_elements_set(long jarg1, MessageEntry jarg1_, long jarg2, vectorptr_messageelement jarg2_);
  public final static native long MessageEntry_elements_get(long jarg1, MessageEntry jarg1_);
  public final static native long new_MessageEntry__SWIG_0();
  public final static native long new_MessageEntry__SWIG_1(int jarg1, String jarg2);
  public final static native long MessageEntry_computeSize(long jarg1, MessageEntry jarg1_);
  public final static native long MessageEntry_findElement(long jarg1, MessageEntry jarg1_, String jarg2);
  public final static native long MessageEntry_addElement(long jarg1, MessageEntry jarg1_, long jarg2, MessageElement jarg2_);
  public final static native void delete_MessageEntry(long jarg1);
  public final static native void MessageElement_ElementSize_set(long jarg1, MessageElement jarg1_, long jarg2);
  public final static native long MessageElement_ElementSize_get(long jarg1, MessageElement jarg1_);
  public final static native void MessageElement_ElementFlags_set(long jarg1, MessageElement jarg1_, short jarg2);
  public final static native short MessageElement_ElementFlags_get(long jarg1, MessageElement jarg1_);
  public final static native void MessageElement_ElementName_set(long jarg1, MessageElement jarg1_, String jarg2);
  public final static native String MessageElement_ElementName_get(long jarg1, MessageElement jarg1_);
  public final static native void MessageElement_ElementNameCode_set(long jarg1, MessageElement jarg1_, long jarg2);
  public final static native long MessageElement_ElementNameCode_get(long jarg1, MessageElement jarg1_);
  public final static native void MessageElement_ElementNumber_set(long jarg1, MessageElement jarg1_, int jarg2);
  public final static native int MessageElement_ElementNumber_get(long jarg1, MessageElement jarg1_);
  public final static native void MessageElement_ElementType_set(long jarg1, MessageElement jarg1_, int jarg2);
  public final static native int MessageElement_ElementType_get(long jarg1, MessageElement jarg1_);
  public final static native void MessageElement_ElementTypeName_set(long jarg1, MessageElement jarg1_, String jarg2);
  public final static native String MessageElement_ElementTypeName_get(long jarg1, MessageElement jarg1_);
  public final static native void MessageElement_ElementTypeNameCode_set(long jarg1, MessageElement jarg1_, long jarg2);
  public final static native long MessageElement_ElementTypeNameCode_get(long jarg1, MessageElement jarg1_);
  public final static native void MessageElement_MetaData_set(long jarg1, MessageElement jarg1_, String jarg2);
  public final static native String MessageElement_MetaData_get(long jarg1, MessageElement jarg1_);
  public final static native void MessageElement_Extended_set(long jarg1, MessageElement jarg1_, long jarg2, vector_uint8_t jarg2_);
  public final static native long MessageElement_Extended_get(long jarg1, MessageElement jarg1_);
  public final static native void MessageElement_DataCount_set(long jarg1, MessageElement jarg1_, long jarg2);
  public final static native long MessageElement_DataCount_get(long jarg1, MessageElement jarg1_);
  public final static native long new_MessageElement();
  public final static native long MessageElement__GetData(long jarg1, MessageElement jarg1_);
  public final static native void MessageElement__SetData(long jarg1, MessageElement jarg1_, long jarg2, MessageElementData jarg2_);
  public final static native long MessageElement_computeSize(long jarg1, MessageElement jarg1_);
  public final static native void MessageElement_updateData(long jarg1, MessageElement jarg1_);
  public final static native long MessageElement_findElement(long jarg1, vectorptr_messageelement jarg1_, String jarg2);
  public final static native boolean MessageElement_containsElement(long jarg1, vectorptr_messageelement jarg1_, String jarg2);
  public final static native void delete_MessageElement(long jarg1);
  public final static native void MessageElementNestedElementList_Type_set(long jarg1, MessageElementNestedElementList jarg1_, int jarg2);
  public final static native int MessageElementNestedElementList_Type_get(long jarg1, MessageElementNestedElementList jarg1_);
  public final static native void MessageElementNestedElementList_TypeName_set(long jarg1, MessageElementNestedElementList jarg1_, String jarg2);
  public final static native String MessageElementNestedElementList_TypeName_get(long jarg1, MessageElementNestedElementList jarg1_);
  public final static native void MessageElementNestedElementList_Elements_set(long jarg1, MessageElementNestedElementList jarg1_, long jarg2, vectorptr_messageelement jarg2_);
  public final static native long MessageElementNestedElementList_Elements_get(long jarg1, MessageElementNestedElementList jarg1_);
  public final static native long new_MessageElementNestedElementList(int jarg1, String jarg2, long jarg3, vectorptr_messageelement jarg3_);
  public final static native String MessageElementNestedElementList_getTypeString(long jarg1, MessageElementNestedElementList jarg1_);
  public final static native int MessageElementNestedElementList_getTypeID(long jarg1, MessageElementNestedElementList jarg1_);
  public final static native void delete_MessageElementNestedElementList(long jarg1);
  public final static native long MessageElementDataUtil_toRRBaseArray(long jarg1, MessageElementData jarg1_);
  public final static native long MessageElementDataUtil_toMessageElementNestedElementList(long jarg1, MessageElementData jarg1_);
  public final static native String MessageElementDataUtil_rRBaseArrayToString(long jarg1, RRBaseArray jarg1_);
  public final static native void MessageElementDataUtil_rRBaseArrayToDoubles(long jarg1, RRBaseArray jarg1_, double[] jarg2, int jarg3);
  public final static native void MessageElementDataUtil_rRBaseArrayToFloats(long jarg1, RRBaseArray jarg1_, float[] jarg2, int jarg3);
  public final static native void MessageElementDataUtil_rRBaseArrayToBytes__SWIG_0(long jarg1, RRBaseArray jarg1_, byte[] jarg2, int jarg3);
  public final static native void MessageElementDataUtil_rRBaseArrayToBytes__SWIG_1(long jarg1, RRBaseArray jarg1_, short[] jarg2, int jarg3);
  public final static native void MessageElementDataUtil_rRBaseArrayToShorts__SWIG_0(long jarg1, RRBaseArray jarg1_, short[] jarg2, int jarg3);
  public final static native void MessageElementDataUtil_rRBaseArrayToShorts__SWIG_1(long jarg1, RRBaseArray jarg1_, int[] jarg2, int jarg3);
  public final static native void MessageElementDataUtil_rRBaseArrayToInts__SWIG_0(long jarg1, RRBaseArray jarg1_, int[] jarg2, int jarg3);
  public final static native void MessageElementDataUtil_rRBaseArrayToInts__SWIG_1(long jarg1, RRBaseArray jarg1_, long[] jarg2, int jarg3);
  public final static native void MessageElementDataUtil_rRBaseArrayToLongs(long jarg1, RRBaseArray jarg1_, int[] jarg2, int jarg3);
  public final static native void MessageElementDataUtil_rRBaseArrayComplexToDoubles(long jarg1, RRBaseArray jarg1_, double[] jarg2, int jarg3);
  public final static native void MessageElementDataUtil_rRBaseArrayComplexToFloats(long jarg1, RRBaseArray jarg1_, float[] jarg2, int jarg3);
  public final static native void MessageElementDataUtil_rRBaseArrayBoolToBytes__SWIG_0(long jarg1, RRBaseArray jarg1_, short[] jarg2, int jarg3);
  public final static native void MessageElementDataUtil_rRBaseArrayBoolToBytes__SWIG_1(long jarg1, RRBaseArray jarg1_, byte[] jarg2, int jarg3);
  public final static native long MessageElementDataUtil_stringToRRBaseArray(String jarg1);
  public final static native long MessageElementDataUtil_doublesToRRBaseArray__SWIG_0(double[] jarg1, int jarg2);
  public final static native long MessageElementDataUtil_floatsToRRBaseArray__SWIG_0(float[] jarg1, int jarg2);
  public final static native long MessageElementDataUtil_bytesToRRBaseArray__SWIG_0(byte[] jarg1, int jarg2, int jarg3);
  public final static native long MessageElementDataUtil_bytesToRRBaseArray__SWIG_1(short[] jarg1, int jarg2);
  public final static native long MessageElementDataUtil_shortsToRRBaseArray__SWIG_0(short[] jarg1, int jarg2, int jarg3);
  public final static native long MessageElementDataUtil_shortsToRRBaseArray__SWIG_1(int[] jarg1, int jarg2);
  public final static native long MessageElementDataUtil_intsToRRBaseArray__SWIG_0(int[] jarg1, int jarg2, int jarg3);
  public final static native long MessageElementDataUtil_intsToRRBaseArray__SWIG_1(long[] jarg1, int jarg2);
  public final static native long MessageElementDataUtil_longsToRRBaseArray__SWIG_0(int[] jarg1, int jarg2, int jarg3);
  public final static native long MessageElementDataUtil_doublesToComplexRRBaseArray__SWIG_0(double[] jarg1, int jarg2);
  public final static native long MessageElementDataUtil_floatsToComplexRRBaseArray__SWIG_0(float[] jarg1, int jarg2);
  public final static native long MessageElementDataUtil_bytesToBoolRRBaseArray__SWIG_0(short[] jarg1, int jarg2);
  public final static native long MessageElementDataUtil_bytesToBoolRRBaseArray__SWIG_1(byte[] jarg1, int jarg2);
  public final static native void MessageElementDataUtil_doublesToRRBaseArray__SWIG_1(double[] jarg1, int jarg2, long jarg3, RRBaseArray jarg3_);
  public final static native void MessageElementDataUtil_floatsToRRBaseArray__SWIG_1(float[] jarg1, int jarg2, long jarg3, RRBaseArray jarg3_);
  public final static native void MessageElementDataUtil_bytesToRRBaseArray__SWIG_2(byte[] jarg1, int jarg2, long jarg3, RRBaseArray jarg3_);
  public final static native void MessageElementDataUtil_bytesToRRBaseArray__SWIG_3(short[] jarg1, int jarg2, long jarg3, RRBaseArray jarg3_);
  public final static native void MessageElementDataUtil_shortsToRRBaseArray__SWIG_2(short[] jarg1, int jarg2, long jarg3, RRBaseArray jarg3_);
  public final static native void MessageElementDataUtil_shortsToRRBaseArray__SWIG_3(int[] jarg1, int jarg2, long jarg3, RRBaseArray jarg3_);
  public final static native void MessageElementDataUtil_intsToRRBaseArray__SWIG_2(int[] jarg1, int jarg2, long jarg3, RRBaseArray jarg3_);
  public final static native void MessageElementDataUtil_intsToRRBaseArray__SWIG_3(long[] jarg1, int jarg2, long jarg3, RRBaseArray jarg3_);
  public final static native void MessageElementDataUtil_longsToRRBaseArray__SWIG_1(int[] jarg1, int jarg2, long jarg3, RRBaseArray jarg3_);
  public final static native void MessageElementDataUtil_doublesToComplexRRBaseArray__SWIG_1(double[] jarg1, int jarg2, long jarg3, RRBaseArray jarg3_);
  public final static native void MessageElementDataUtil_floatsToComplexRRBaseArray__SWIG_1(float[] jarg1, int jarg2, long jarg3, RRBaseArray jarg3_);
  public final static native void MessageElementDataUtil_bytesToBoolRRBaseArray__SWIG_2(byte[] jarg1, int jarg2, long jarg3, RRBaseArray jarg3_);
  public final static native void MessageElementDataUtil_bytesToBoolRRBaseArray__SWIG_3(short[] jarg1, int jarg2, long jarg3, RRBaseArray jarg3_);
  public final static native long new_MessageElementDataUtil();
  public final static native void delete_MessageElementDataUtil(long jarg1);
  public final static native void HandlerErrorInfo_error_code_set(long jarg1, HandlerErrorInfo jarg1_, long jarg2);
  public final static native long HandlerErrorInfo_error_code_get(long jarg1, HandlerErrorInfo jarg1_);
  public final static native void HandlerErrorInfo_errorname_set(long jarg1, HandlerErrorInfo jarg1_, String jarg2);
  public final static native String HandlerErrorInfo_errorname_get(long jarg1, HandlerErrorInfo jarg1_);
  public final static native void HandlerErrorInfo_errormessage_set(long jarg1, HandlerErrorInfo jarg1_, String jarg2);
  public final static native String HandlerErrorInfo_errormessage_get(long jarg1, HandlerErrorInfo jarg1_);
  public final static native void HandlerErrorInfo_errorsubname_set(long jarg1, HandlerErrorInfo jarg1_, String jarg2);
  public final static native String HandlerErrorInfo_errorsubname_get(long jarg1, HandlerErrorInfo jarg1_);
  public final static native void HandlerErrorInfo_param__set(long jarg1, HandlerErrorInfo jarg1_, long jarg2, MessageElement jarg2_);
  public final static native long HandlerErrorInfo_param__get(long jarg1, HandlerErrorInfo jarg1_);
  public final static native long new_HandlerErrorInfo();
  public final static native void delete_HandlerErrorInfo(long jarg1);
  public final static native void delete_AsyncRequestDirector(long jarg1);
  public final static native void AsyncRequestDirector_handler(long jarg1, AsyncRequestDirector jarg1_, long jarg2, MessageElement jarg2_, long jarg3, HandlerErrorInfo jarg3_);
  public final static native long new_AsyncRequestDirector();
  public final static native void AsyncRequestDirector_director_connect(AsyncRequestDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void AsyncRequestDirector_change_ownership(AsyncRequestDirector obj, long cptr, boolean take_or_release);
  public final static native void delete_AsyncVoidReturnDirector(long jarg1);
  public final static native void AsyncVoidReturnDirector_handler(long jarg1, AsyncVoidReturnDirector jarg1_, long jarg2, HandlerErrorInfo jarg2_);
  public final static native long new_AsyncVoidReturnDirector();
  public final static native void AsyncVoidReturnDirector_director_connect(AsyncVoidReturnDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void AsyncVoidReturnDirector_change_ownership(AsyncVoidReturnDirector obj, long cptr, boolean take_or_release);
  public final static native void delete_AsyncVoidNoErrReturnDirector(long jarg1);
  public final static native void AsyncVoidNoErrReturnDirector_handler(long jarg1, AsyncVoidNoErrReturnDirector jarg1_);
  public final static native long new_AsyncVoidNoErrReturnDirector();
  public final static native void AsyncVoidNoErrReturnDirector_director_connect(AsyncVoidNoErrReturnDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void AsyncVoidNoErrReturnDirector_change_ownership(AsyncVoidNoErrReturnDirector obj, long cptr, boolean take_or_release);
  public final static native void delete_AsyncStringReturnDirector(long jarg1);
  public final static native void AsyncStringReturnDirector_handler(long jarg1, AsyncStringReturnDirector jarg1_, String jarg2, long jarg3, HandlerErrorInfo jarg3_);
  public final static native long new_AsyncStringReturnDirector();
  public final static native void AsyncStringReturnDirector_director_connect(AsyncStringReturnDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void AsyncStringReturnDirector_change_ownership(AsyncStringReturnDirector obj, long cptr, boolean take_or_release);
  public final static native void delete_AsyncUInt32ReturnDirector(long jarg1);
  public final static native void AsyncUInt32ReturnDirector_handler(long jarg1, AsyncUInt32ReturnDirector jarg1_, long jarg2, long jarg3, HandlerErrorInfo jarg3_);
  public final static native long new_AsyncUInt32ReturnDirector();
  public final static native void AsyncUInt32ReturnDirector_director_connect(AsyncUInt32ReturnDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void AsyncUInt32ReturnDirector_change_ownership(AsyncUInt32ReturnDirector obj, long cptr, boolean take_or_release);
  public final static native String Transport_getUrlSchemeString(long jarg1, Transport jarg1_);
  public final static native String Transport_getCurrentTransportConnectionURL();
  public final static native long Transport_getServerListenUrls(long jarg1, Transport jarg1_);
  public final static native void delete_Transport(long jarg1);
  public final static native long new_TcpTransport__SWIG_0();
  public final static native long new_TcpTransport__SWIG_1(long jarg1, RobotRaconteurNode jarg1_);
  public final static native int TcpTransport_getDefaultReceiveTimeout(long jarg1, TcpTransport jarg1_);
  public final static native void TcpTransport_setDefaultReceiveTimeout(long jarg1, TcpTransport jarg1_, int jarg2);
  public final static native int TcpTransport_getDefaultConnectTimeout(long jarg1, TcpTransport jarg1_);
  public final static native void TcpTransport_setDefaultConnectTimeout(long jarg1, TcpTransport jarg1_, int jarg2);
  public final static native int TcpTransport_getDefaultHeartbeatPeriod(long jarg1, TcpTransport jarg1_);
  public final static native void TcpTransport_setDefaultHeartbeatPeriod(long jarg1, TcpTransport jarg1_, int jarg2);
  public final static native String TcpTransport_getUrlSchemeString(long jarg1, TcpTransport jarg1_);
  public final static native long TcpTransport_getServerListenUrls(long jarg1, TcpTransport jarg1_);
  public final static native int TcpTransport_getListenPort(long jarg1, TcpTransport jarg1_);
  public final static native void TcpTransport_startServer__SWIG_0(long jarg1, TcpTransport jarg1_, int jarg2, boolean jarg3);
  public final static native void TcpTransport_startServer__SWIG_1(long jarg1, TcpTransport jarg1_, int jarg2);
  public final static native void TcpTransport_close(long jarg1, TcpTransport jarg1_);
  public final static native void TcpTransport_enableNodeDiscoveryListening__SWIG_0(long jarg1, TcpTransport jarg1_, long jarg2);
  public final static native void TcpTransport_enableNodeDiscoveryListening__SWIG_1(long jarg1, TcpTransport jarg1_);
  public final static native void TcpTransport_disableNodeDiscoveryListening(long jarg1, TcpTransport jarg1_);
  public final static native void TcpTransport_enableNodeAnnounce__SWIG_0(long jarg1, TcpTransport jarg1_, long jarg2);
  public final static native void TcpTransport_enableNodeAnnounce__SWIG_1(long jarg1, TcpTransport jarg1_);
  public final static native void TcpTransport_disableNodeAnnounce(long jarg1, TcpTransport jarg1_);
  public final static native int TcpTransport_getNodeAnnouncePeriod(long jarg1, TcpTransport jarg1_);
  public final static native void TcpTransport_setNodeAnnouncePeriod(long jarg1, TcpTransport jarg1_, int jarg2);
  public final static native int TcpTransport_getMaxMessageSize(long jarg1, TcpTransport jarg1_);
  public final static native void TcpTransport_setMaxMessageSize(long jarg1, TcpTransport jarg1_, int jarg2);
  public final static native int TcpTransport_getMaxConnectionCount(long jarg1, TcpTransport jarg1_);
  public final static native void TcpTransport_setMaxConnectionCount(long jarg1, TcpTransport jarg1_, int jarg2);
  public final static native boolean TcpTransport_getRequireTls(long jarg1, TcpTransport jarg1_);
  public final static native void TcpTransport_setRequireTls(long jarg1, TcpTransport jarg1_, boolean jarg2);
  public final static native void TcpTransport_loadTlsNodeCertificate(long jarg1, TcpTransport jarg1_);
  public final static native boolean TcpTransport__IsTlsNodeCertificateLoaded(long jarg1, TcpTransport jarg1_);
  public final static native boolean TcpTransport_isTransportConnectionSecure(long jarg1, TcpTransport jarg1_, long jarg2);
  public final static native boolean TcpTransport__IsTransportConnectionSecure(long jarg1, TcpTransport jarg1_, long jarg2, RRObject jarg2_);
  public final static native boolean TcpTransport_isSecurePeerIdentityVerified(long jarg1, TcpTransport jarg1_, long jarg2);
  public final static native boolean TcpTransport__IsSecurePeerIdentityVerified(long jarg1, TcpTransport jarg1_, long jarg2, RRObject jarg2_);
  public final static native String TcpTransport_getSecurePeerIdentity(long jarg1, TcpTransport jarg1_, long jarg2);
  public final static native String TcpTransport__GetSecurePeerIdentity(long jarg1, TcpTransport jarg1_, long jarg2, RRObject jarg2_);
  public final static native void TcpTransport_startServerUsingPortSharer(long jarg1, TcpTransport jarg1_);
  public final static native boolean TcpTransport__IsPortSharerRunning(long jarg1, TcpTransport jarg1_);
  public final static native boolean TcpTransport_getAcceptWebSockets(long jarg1, TcpTransport jarg1_);
  public final static native void TcpTransport_setAcceptWebSockets(long jarg1, TcpTransport jarg1_, boolean jarg2);
  public final static native long TcpTransport_getWebSocketAllowedOrigins(long jarg1, TcpTransport jarg1_);
  public final static native void TcpTransport_addWebSocketAllowedOrigin(long jarg1, TcpTransport jarg1_, String jarg2);
  public final static native void TcpTransport_removeWebSocketAllowedOrigin(long jarg1, TcpTransport jarg1_, String jarg2);
  public final static native boolean TcpTransport_getDisableMessage4(long jarg1, TcpTransport jarg1_);
  public final static native void TcpTransport_setDisableMessage4(long jarg1, TcpTransport jarg1_, boolean jarg2);
  public final static native boolean TcpTransport_getDisableStringTable(long jarg1, TcpTransport jarg1_);
  public final static native void TcpTransport_setDisableStringTable(long jarg1, TcpTransport jarg1_, boolean jarg2);
  public final static native boolean TcpTransport_getDisableAsyncMessageIO(long jarg1, TcpTransport jarg1_);
  public final static native void TcpTransport_setDisableAsyncMessageIO(long jarg1, TcpTransport jarg1_, boolean jarg2);
  public final static native long TcpTransport_getLocalAdapterIPAddresses();
  public final static native void delete_TcpTransport(long jarg1);
  public final static native long new_LocalTransport__SWIG_0();
  public final static native long new_LocalTransport__SWIG_1(long jarg1, RobotRaconteurNode jarg1_);
  public final static native boolean LocalTransport_isLocalTransportSupported();
  public final static native String LocalTransport_getUrlSchemeString(long jarg1, LocalTransport jarg1_);
  public final static native long LocalTransport_getServerListenUrls(long jarg1, LocalTransport jarg1_);
  public final static native void LocalTransport_startClientAsNodeName(long jarg1, LocalTransport jarg1_, String jarg2);
  public final static native void LocalTransport_startServerAsNodeName__SWIG_0(long jarg1, LocalTransport jarg1_, String jarg2, boolean jarg3);
  public final static native void LocalTransport_startServerAsNodeName__SWIG_1(long jarg1, LocalTransport jarg1_, String jarg2);
  public final static native void LocalTransport_startServerAsNodeID__SWIG_0(long jarg1, LocalTransport jarg1_, long jarg2, NodeID jarg2_, boolean jarg3);
  public final static native void LocalTransport_startServerAsNodeID__SWIG_1(long jarg1, LocalTransport jarg1_, long jarg2, NodeID jarg2_);
  public final static native void LocalTransport_close(long jarg1, LocalTransport jarg1_);
  public final static native int LocalTransport_getMaxMessageSize(long jarg1, LocalTransport jarg1_);
  public final static native void LocalTransport_setMaxMessageSize(long jarg1, LocalTransport jarg1_, int jarg2);
  public final static native boolean LocalTransport_getDisableMessage4(long jarg1, LocalTransport jarg1_);
  public final static native void LocalTransport_setDisableMessage4(long jarg1, LocalTransport jarg1_, boolean jarg2);
  public final static native boolean LocalTransport_getDisableStringTable(long jarg1, LocalTransport jarg1_);
  public final static native void LocalTransport_setDisableStringTable(long jarg1, LocalTransport jarg1_, boolean jarg2);
  public final static native boolean LocalTransport_getDisableAsyncMessageIO(long jarg1, LocalTransport jarg1_);
  public final static native void LocalTransport_setDisableAsyncMessageIO(long jarg1, LocalTransport jarg1_, boolean jarg2);
  public final static native void LocalTransport_enableNodeDiscoveryListening(long jarg1, LocalTransport jarg1_);
  public final static native void LocalTransport_disableNodeDiscoveryListening(long jarg1, LocalTransport jarg1_);
  public final static native void delete_LocalTransport(long jarg1);
  public final static native long new_HardwareTransport__SWIG_0();
  public final static native long new_HardwareTransport__SWIG_1(long jarg1, RobotRaconteurNode jarg1_);
  public final static native String HardwareTransport_getUrlSchemeString(long jarg1, HardwareTransport jarg1_);
  public final static native long HardwareTransport_getServerListenUrls(long jarg1, HardwareTransport jarg1_);
  public final static native void HardwareTransport_close(long jarg1, HardwareTransport jarg1_);
  public final static native int HardwareTransport_getMaxMessageSize(long jarg1, HardwareTransport jarg1_);
  public final static native void HardwareTransport_setMaxMessageSize(long jarg1, HardwareTransport jarg1_, int jarg2);
  public final static native boolean HardwareTransport_getDisableMessage4(long jarg1, HardwareTransport jarg1_);
  public final static native void HardwareTransport_setDisableMessage4(long jarg1, HardwareTransport jarg1_, boolean jarg2);
  public final static native boolean HardwareTransport_getDisableStringTable(long jarg1, HardwareTransport jarg1_);
  public final static native void HardwareTransport_setDisableStringTable(long jarg1, HardwareTransport jarg1_, boolean jarg2);
  public final static native boolean HardwareTransport_getDisableAsyncMessageIO(long jarg1, HardwareTransport jarg1_);
  public final static native void HardwareTransport_setDisableAsyncMessageIO(long jarg1, HardwareTransport jarg1_, boolean jarg2);
  public final static native void delete_HardwareTransport(long jarg1);
  public final static native long new_IntraTransport__SWIG_0();
  public final static native long new_IntraTransport__SWIG_1(long jarg1, RobotRaconteurNode jarg1_);
  public final static native String IntraTransport_getUrlSchemeString(long jarg1, IntraTransport jarg1_);
  public final static native long IntraTransport_getServerListenUrls(long jarg1, IntraTransport jarg1_);
  public final static native void IntraTransport_close(long jarg1, IntraTransport jarg1_);
  public final static native void IntraTransport_startClient(long jarg1, IntraTransport jarg1_);
  public final static native void IntraTransport_startServer(long jarg1, IntraTransport jarg1_);
  public final static native void delete_IntraTransport(long jarg1);
  public final static native void WallTimer_initstruct_handler_set(long jarg1, WallTimer_initstruct jarg1_, long jarg2, AsyncTimerEventReturnDirector jarg2_);
  public final static native long WallTimer_initstruct_handler_get(long jarg1, WallTimer_initstruct jarg1_);
  public final static native void WallTimer_initstruct_id_set(long jarg1, WallTimer_initstruct jarg1_, int jarg2);
  public final static native int WallTimer_initstruct_id_get(long jarg1, WallTimer_initstruct jarg1_);
  public final static native long new_WallTimer_initstruct();
  public final static native void delete_WallTimer_initstruct(long jarg1);
  public final static native boolean TimerEvent_stopped_get(long jarg1, TimerEvent jarg1_);
  public final static native long TimerEvent_last_expected_get(long jarg1, TimerEvent jarg1_);
  public final static native long TimerEvent_last_real_get(long jarg1, TimerEvent jarg1_);
  public final static native long TimerEvent_current_expected_get(long jarg1, TimerEvent jarg1_);
  public final static native long TimerEvent_current_real_get(long jarg1, TimerEvent jarg1_);
  public final static native long new_TimerEvent();
  public final static native void delete_TimerEvent(long jarg1);
  public final static native void delete_AsyncTimerEventReturnDirector(long jarg1);
  public final static native void AsyncTimerEventReturnDirector_handler(long jarg1, AsyncTimerEventReturnDirector jarg1_, long jarg2, TimerEvent jarg2_, long jarg3, HandlerErrorInfo jarg3_);
  public final static native long new_AsyncTimerEventReturnDirector();
  public final static native void AsyncTimerEventReturnDirector_director_connect(AsyncTimerEventReturnDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void AsyncTimerEventReturnDirector_change_ownership(AsyncTimerEventReturnDirector obj, long cptr, boolean take_or_release);
  public final static native void Timer_start(long jarg1, Timer jarg1_);
  public final static native void Timer_stop(long jarg1, Timer jarg1_);
  public final static native int Timer_getPeriod(long jarg1, Timer jarg1_);
  public final static native void Timer_setPeriod(long jarg1, Timer jarg1_, int jarg2);
  public final static native boolean Timer_isRunning(long jarg1, Timer jarg1_);
  public final static native void delete_Timer(long jarg1);
  public final static native void WallTimer_start(long jarg1, WallTimer jarg1_);
  public final static native void WallTimer_stop(long jarg1, WallTimer jarg1_);
  public final static native int WallTimer_getPeriod(long jarg1, WallTimer jarg1_);
  public final static native void WallTimer_setPeriod(long jarg1, WallTimer jarg1_, int jarg2);
  public final static native boolean WallTimer_isRunning(long jarg1, WallTimer jarg1_);
  public final static native void delete_WallTimer(long jarg1);
  public final static native long new_WallTimer(int jarg1, boolean jarg2, long jarg3, RobotRaconteurNode jarg3_, long jarg4, WallTimer_initstruct jarg4_);
  public final static native void Rate_sleep(long jarg1, Rate jarg1_);
  public final static native void delete_Rate(long jarg1);
  public final static native long new_WallRate__SWIG_0(double jarg1, long jarg2, RobotRaconteurNode jarg2_);
  public final static native long new_WallRate__SWIG_1(double jarg1);
  public final static native void WallRate_sleep(long jarg1, WallRate jarg1_);
  public final static native void delete_WallRate(long jarg1);
  public final static native long new_AutoResetEvent();
  public final static native void delete_AutoResetEvent(long jarg1);
  public final static native void AutoResetEvent_set(long jarg1, AutoResetEvent jarg1_);
  public final static native void AutoResetEvent_reset(long jarg1, AutoResetEvent jarg1_);
  public final static native void AutoResetEvent_waitOne__SWIG_0(long jarg1, AutoResetEvent jarg1_);
  public final static native boolean AutoResetEvent_waitOne__SWIG_1(long jarg1, AutoResetEvent jarg1_, int jarg2);
  public final static native void TimeSpec_seconds_set(long jarg1, TimeSpec jarg1_, int jarg2);
  public final static native int TimeSpec_seconds_get(long jarg1, TimeSpec jarg1_);
  public final static native void TimeSpec_nanoseconds_set(long jarg1, TimeSpec jarg1_, int jarg2);
  public final static native int TimeSpec_nanoseconds_get(long jarg1, TimeSpec jarg1_);
  public final static native long new_TimeSpec__SWIG_0();
  public final static native long new_TimeSpec__SWIG_1(int jarg1, int jarg2);
  public final static native boolean TimeSpec_equals(long jarg1, TimeSpec jarg1_, long jarg2, TimeSpec jarg2_);
  public final static native boolean TimeSpec_ne(long jarg1, TimeSpec jarg1_, long jarg2, TimeSpec jarg2_);
  public final static native long TimeSpec_sub(long jarg1, TimeSpec jarg1_, long jarg2, TimeSpec jarg2_);
  public final static native long TimeSpec_add(long jarg1, TimeSpec jarg1_, long jarg2, TimeSpec jarg2_);
  public final static native boolean TimeSpec_gt(long jarg1, TimeSpec jarg1_, long jarg2, TimeSpec jarg2_);
  public final static native boolean TimeSpec_ge(long jarg1, TimeSpec jarg1_, long jarg2, TimeSpec jarg2_);
  public final static native boolean TimeSpec_lt(long jarg1, TimeSpec jarg1_, long jarg2, TimeSpec jarg2_);
  public final static native boolean TimeSpec_le(long jarg1, TimeSpec jarg1_, long jarg2, TimeSpec jarg2_);
  public final static native void TimeSpec_cleanup_nanosecs(long jarg1, TimeSpec jarg1_);
  public final static native void delete_TimeSpec(long jarg1);
  public final static native void WrappedService_typed_packet_packet_set(long jarg1, WrappedService_typed_packet jarg1_, long jarg2, MessageElement jarg2_);
  public final static native long WrappedService_typed_packet_packet_get(long jarg1, WrappedService_typed_packet jarg1_);
  public final static native void WrappedService_typed_packet_type_set(long jarg1, WrappedService_typed_packet jarg1_, long jarg2, TypeDefinition jarg2_);
  public final static native long WrappedService_typed_packet_type_get(long jarg1, WrappedService_typed_packet jarg1_);
  public final static native void WrappedService_typed_packet_stub_set(long jarg1, WrappedService_typed_packet jarg1_, long jarg2, WrappedServiceStub jarg2_);
  public final static native long WrappedService_typed_packet_stub_get(long jarg1, WrappedService_typed_packet jarg1_);
  public final static native void WrappedService_typed_packet_client_set(long jarg1, WrappedService_typed_packet jarg1_, long jarg2);
  public final static native long WrappedService_typed_packet_client_get(long jarg1, WrappedService_typed_packet jarg1_);
  public final static native long new_WrappedService_typed_packet();
  public final static native void delete_WrappedService_typed_packet(long jarg1);
  public final static native void delete_WrappedPipeEndpointDirector(long jarg1);
  public final static native void WrappedPipeEndpointDirector_pipeEndpointClosedCallback(long jarg1, WrappedPipeEndpointDirector jarg1_);
  public final static native void WrappedPipeEndpointDirector_packetReceivedEvent(long jarg1, WrappedPipeEndpointDirector jarg1_);
  public final static native void WrappedPipeEndpointDirector_packetAckReceivedEvent(long jarg1, WrappedPipeEndpointDirector jarg1_, long jarg2);
  public final static native long new_WrappedPipeEndpointDirector();
  public final static native void WrappedPipeEndpointDirector_director_connect(WrappedPipeEndpointDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void WrappedPipeEndpointDirector_change_ownership(WrappedPipeEndpointDirector obj, long cptr, boolean take_or_release);
  public final static native void delete_AsyncPipeEndpointReturnDirector(long jarg1);
  public final static native void AsyncPipeEndpointReturnDirector_handler(long jarg1, AsyncPipeEndpointReturnDirector jarg1_, long jarg2, WrappedPipeEndpoint jarg2_, long jarg3, HandlerErrorInfo jarg3_);
  public final static native long new_AsyncPipeEndpointReturnDirector();
  public final static native void AsyncPipeEndpointReturnDirector_director_connect(AsyncPipeEndpointReturnDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void AsyncPipeEndpointReturnDirector_change_ownership(AsyncPipeEndpointReturnDirector obj, long cptr, boolean take_or_release);
  public final static native void WrappedTryReceivePacketWaitResult_res_set(long jarg1, WrappedTryReceivePacketWaitResult jarg1_, boolean jarg2);
  public final static native boolean WrappedTryReceivePacketWaitResult_res_get(long jarg1, WrappedTryReceivePacketWaitResult jarg1_);
  public final static native void WrappedTryReceivePacketWaitResult_packet_set(long jarg1, WrappedTryReceivePacketWaitResult jarg1_, long jarg2, MessageElement jarg2_);
  public final static native long WrappedTryReceivePacketWaitResult_packet_get(long jarg1, WrappedTryReceivePacketWaitResult jarg1_);
  public final static native long new_WrappedTryReceivePacketWaitResult();
  public final static native void delete_WrappedTryReceivePacketWaitResult(long jarg1);
  public final static native long WrappedPipeEndpoint_sendPacket(long jarg1, WrappedPipeEndpoint jarg1_, long jarg2, MessageElement jarg2_);
  public final static native long WrappedPipeEndpoint_receivePacket(long jarg1, WrappedPipeEndpoint jarg1_);
  public final static native long WrappedPipeEndpoint_peekNextPacket(long jarg1, WrappedPipeEndpoint jarg1_);
  public final static native long WrappedPipeEndpoint_receivePacketWait__SWIG_0(long jarg1, WrappedPipeEndpoint jarg1_, int jarg2);
  public final static native long WrappedPipeEndpoint_receivePacketWait__SWIG_1(long jarg1, WrappedPipeEndpoint jarg1_);
  public final static native long WrappedPipeEndpoint_peekNextPacketWait__SWIG_0(long jarg1, WrappedPipeEndpoint jarg1_, int jarg2);
  public final static native long WrappedPipeEndpoint_peekNextPacketWait__SWIG_1(long jarg1, WrappedPipeEndpoint jarg1_);
  public final static native long WrappedPipeEndpoint_tryReceivePacketWait__SWIG_0(long jarg1, WrappedPipeEndpoint jarg1_, int jarg2, boolean jarg3);
  public final static native long WrappedPipeEndpoint_tryReceivePacketWait__SWIG_1(long jarg1, WrappedPipeEndpoint jarg1_, int jarg2);
  public final static native long WrappedPipeEndpoint_tryReceivePacketWait__SWIG_2(long jarg1, WrappedPipeEndpoint jarg1_);
  public final static native void WrappedPipeEndpoint_close(long jarg1, WrappedPipeEndpoint jarg1_);
  public final static native int WrappedPipeEndpoint_getIndex(long jarg1, WrappedPipeEndpoint jarg1_);
  public final static native long WrappedPipeEndpoint_getEndpoint(long jarg1, WrappedPipeEndpoint jarg1_);
  public final static native long WrappedPipeEndpoint_available(long jarg1, WrappedPipeEndpoint jarg1_);
  public final static native boolean WrappedPipeEndpoint_getRequestPacketAck(long jarg1, WrappedPipeEndpoint jarg1_);
  public final static native void WrappedPipeEndpoint_setRequestPacketAck(long jarg1, WrappedPipeEndpoint jarg1_, boolean jarg2);
  public final static native void WrappedPipeEndpoint_Type_set(long jarg1, WrappedPipeEndpoint jarg1_, long jarg2, TypeDefinition jarg2_);
  public final static native long WrappedPipeEndpoint_Type_get(long jarg1, WrappedPipeEndpoint jarg1_);
  public final static native void WrappedPipeEndpoint_setRRDirector(long jarg1, WrappedPipeEndpoint jarg1_, long jarg2, WrappedPipeEndpointDirector jarg2_, int jarg3);
  public final static native boolean WrappedPipeEndpoint_isUnreliable(long jarg1, WrappedPipeEndpoint jarg1_);
  public final static native int WrappedPipeEndpoint_direction(long jarg1, WrappedPipeEndpoint jarg1_);
  public final static native void WrappedPipeEndpoint_asyncSendPacket(long jarg1, WrappedPipeEndpoint jarg1_, long jarg2, MessageElement jarg2_, long jarg3, AsyncUInt32ReturnDirector jarg3_, int jarg4);
  public final static native void WrappedPipeEndpoint_asyncClose(long jarg1, WrappedPipeEndpoint jarg1_, int jarg2, long jarg3, AsyncVoidReturnDirector jarg3_, int jarg4);
  public final static native long WrappedPipeEndpoint_getNode(long jarg1, WrappedPipeEndpoint jarg1_);
  public final static native boolean WrappedPipeEndpoint_getIgnoreReceived(long jarg1, WrappedPipeEndpoint jarg1_);
  public final static native void WrappedPipeEndpoint_setIgnoreReceived(long jarg1, WrappedPipeEndpoint jarg1_, boolean jarg2);
  public final static native void delete_WrappedPipeEndpoint(long jarg1);
  public final static native long WrappedPipeClient_connect(long jarg1, WrappedPipeClient jarg1_, int jarg2);
  public final static native void WrappedPipeClient_asyncConnect(long jarg1, WrappedPipeClient jarg1_, int jarg2, int jarg3, long jarg4, AsyncPipeEndpointReturnDirector jarg4_, int jarg5);
  public final static native String WrappedPipeClient_getMemberName(long jarg1, WrappedPipeClient jarg1_);
  public final static native void WrappedPipeClient_Type_set(long jarg1, WrappedPipeClient jarg1_, long jarg2, TypeDefinition jarg2_);
  public final static native long WrappedPipeClient_Type_get(long jarg1, WrappedPipeClient jarg1_);
  public final static native long WrappedPipeClient_getNode(long jarg1, WrappedPipeClient jarg1_);
  public final static native int WrappedPipeClient_direction(long jarg1, WrappedPipeClient jarg1_);
  public final static native void delete_WrappedPipeClient(long jarg1);
  public final static native void delete_WrappedPipeServerConnectDirector(long jarg1);
  public final static native void WrappedPipeServerConnectDirector_pipeConnectCallback(long jarg1, WrappedPipeServerConnectDirector jarg1_, long jarg2, WrappedPipeEndpoint jarg2_);
  public final static native long new_WrappedPipeServerConnectDirector();
  public final static native void WrappedPipeServerConnectDirector_director_connect(WrappedPipeServerConnectDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void WrappedPipeServerConnectDirector_change_ownership(WrappedPipeServerConnectDirector obj, long cptr, boolean take_or_release);
  public final static native String WrappedPipeServer_getMemberName(long jarg1, WrappedPipeServer jarg1_);
  public final static native void WrappedPipeServer_Type_set(long jarg1, WrappedPipeServer jarg1_, long jarg2, TypeDefinition jarg2_);
  public final static native long WrappedPipeServer_Type_get(long jarg1, WrappedPipeServer jarg1_);
  public final static native void WrappedPipeServer_setWrappedPipeConnectCallback(long jarg1, WrappedPipeServer jarg1_, long jarg2, WrappedPipeServerConnectDirector jarg2_, int jarg3);
  public final static native long WrappedPipeServer_getNode(long jarg1, WrappedPipeServer jarg1_);
  public final static native int WrappedPipeServer_direction(long jarg1, WrappedPipeServer jarg1_);
  public final static native void delete_WrappedPipeServer(long jarg1);
  public final static native boolean WrappedPipeBroadcasterPredicateDirector_predicate(long jarg1, WrappedPipeBroadcasterPredicateDirector jarg1_, long jarg2, int jarg3);
  public final static native void delete_WrappedPipeBroadcasterPredicateDirector(long jarg1);
  public final static native long new_WrappedPipeBroadcasterPredicateDirector();
  public final static native void WrappedPipeBroadcasterPredicateDirector_director_connect(WrappedPipeBroadcasterPredicateDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void WrappedPipeBroadcasterPredicateDirector_change_ownership(WrappedPipeBroadcasterPredicateDirector obj, long cptr, boolean take_or_release);
  public final static native void WrappedPipeBroadcaster_init__SWIG_0(long jarg1, WrappedPipeBroadcaster jarg1_, long jarg2, WrappedPipeServer jarg2_, int jarg3);
  public final static native void WrappedPipeBroadcaster_init__SWIG_1(long jarg1, WrappedPipeBroadcaster jarg1_, long jarg2, WrappedPipeServer jarg2_);
  public final static native void WrappedPipeBroadcaster_sendPacket(long jarg1, WrappedPipeBroadcaster jarg1_, long jarg2, MessageElement jarg2_);
  public final static native void WrappedPipeBroadcaster_asyncSendPacket(long jarg1, WrappedPipeBroadcaster jarg1_, long jarg2, MessageElement jarg2_, long jarg3, AsyncVoidNoErrReturnDirector jarg3_, int jarg4);
  public final static native long WrappedPipeBroadcaster_getActivePipeEndpointCount(long jarg1, WrappedPipeBroadcaster jarg1_);
  public final static native void WrappedPipeBroadcaster_setPredicateDirector(long jarg1, WrappedPipeBroadcaster jarg1_, long jarg2, WrappedPipeBroadcasterPredicateDirector jarg2_, int jarg3);
  public final static native int WrappedPipeBroadcaster_getMaxBacklog(long jarg1, WrappedPipeBroadcaster jarg1_);
  public final static native void WrappedPipeBroadcaster_setMaxBacklog(long jarg1, WrappedPipeBroadcaster jarg1_, int jarg2);
  public final static native long new_WrappedPipeBroadcaster();
  public final static native void delete_WrappedPipeBroadcaster(long jarg1);
  public final static native void delete_WrappedWireConnectionDirector(long jarg1);
  public final static native void WrappedWireConnectionDirector_wireValueChanged(long jarg1, WrappedWireConnectionDirector jarg1_, long jarg2, MessageElement jarg2_, long jarg3, TimeSpec jarg3_);
  public final static native void WrappedWireConnectionDirector_wireConnectionClosedCallback(long jarg1, WrappedWireConnectionDirector jarg1_);
  public final static native long new_WrappedWireConnectionDirector();
  public final static native void WrappedWireConnectionDirector_director_connect(WrappedWireConnectionDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void WrappedWireConnectionDirector_change_ownership(WrappedWireConnectionDirector obj, long cptr, boolean take_or_release);
  public final static native void delete_AsyncWireConnectionReturnDirector(long jarg1);
  public final static native void AsyncWireConnectionReturnDirector_handler(long jarg1, AsyncWireConnectionReturnDirector jarg1_, long jarg2, WrappedWireConnection jarg2_, long jarg3, HandlerErrorInfo jarg3_);
  public final static native long new_AsyncWireConnectionReturnDirector();
  public final static native void AsyncWireConnectionReturnDirector_director_connect(AsyncWireConnectionReturnDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void AsyncWireConnectionReturnDirector_change_ownership(AsyncWireConnectionReturnDirector obj, long cptr, boolean take_or_release);
  public final static native void delete_AsyncWirePeekReturnDirector(long jarg1);
  public final static native void AsyncWirePeekReturnDirector_handler(long jarg1, AsyncWirePeekReturnDirector jarg1_, long jarg2, MessageElement jarg2_, long jarg3, TimeSpec jarg3_, long jarg4, HandlerErrorInfo jarg4_);
  public final static native long new_AsyncWirePeekReturnDirector();
  public final static native void AsyncWirePeekReturnDirector_director_connect(AsyncWirePeekReturnDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void AsyncWirePeekReturnDirector_change_ownership(AsyncWirePeekReturnDirector obj, long cptr, boolean take_or_release);
  public final static native void TryGetValueResult_res_set(long jarg1, TryGetValueResult jarg1_, boolean jarg2);
  public final static native boolean TryGetValueResult_res_get(long jarg1, TryGetValueResult jarg1_);
  public final static native void TryGetValueResult_value_set(long jarg1, TryGetValueResult jarg1_, long jarg2, MessageElement jarg2_);
  public final static native long TryGetValueResult_value_get(long jarg1, TryGetValueResult jarg1_);
  public final static native void TryGetValueResult_ts_set(long jarg1, TryGetValueResult jarg1_, long jarg2, TimeSpec jarg2_);
  public final static native long TryGetValueResult_ts_get(long jarg1, TryGetValueResult jarg1_);
  public final static native long new_TryGetValueResult();
  public final static native void delete_TryGetValueResult(long jarg1);
  public final static native long WrappedWireConnection_getInValue(long jarg1, WrappedWireConnection jarg1_);
  public final static native long WrappedWireConnection_getOutValue(long jarg1, WrappedWireConnection jarg1_);
  public final static native void WrappedWireConnection_setOutValue(long jarg1, WrappedWireConnection jarg1_, long jarg2, MessageElement jarg2_);
  public final static native void WrappedWireConnection_setRRDirector(long jarg1, WrappedWireConnection jarg1_, long jarg2, WrappedWireConnectionDirector jarg2_, int jarg3);
  public final static native void WrappedWireConnection_Type_set(long jarg1, WrappedWireConnection jarg1_, long jarg2, TypeDefinition jarg2_);
  public final static native long WrappedWireConnection_Type_get(long jarg1, WrappedWireConnection jarg1_);
  public final static native void WrappedWireConnection_close(long jarg1, WrappedWireConnection jarg1_);
  public final static native long WrappedWireConnection_getEndpoint(long jarg1, WrappedWireConnection jarg1_);
  public final static native long WrappedWireConnection_getLastValueReceivedTime(long jarg1, WrappedWireConnection jarg1_);
  public final static native long WrappedWireConnection_getLastValueSentTime(long jarg1, WrappedWireConnection jarg1_);
  public final static native boolean WrappedWireConnection_getInValueValid(long jarg1, WrappedWireConnection jarg1_);
  public final static native boolean WrappedWireConnection_getOutValueValid(long jarg1, WrappedWireConnection jarg1_);
  public final static native long WrappedWireConnection_tryGetInValue(long jarg1, WrappedWireConnection jarg1_);
  public final static native long WrappedWireConnection_tryGetOutValue(long jarg1, WrappedWireConnection jarg1_);
  public final static native void WrappedWireConnection_asyncClose(long jarg1, WrappedWireConnection jarg1_, int jarg2, long jarg3, AsyncVoidReturnDirector jarg3_, int jarg4);
  public final static native long WrappedWireConnection_getNode(long jarg1, WrappedWireConnection jarg1_);
  public final static native boolean WrappedWireConnection_getIgnoreInValue(long jarg1, WrappedWireConnection jarg1_);
  public final static native void WrappedWireConnection_setIgnoreInValue(long jarg1, WrappedWireConnection jarg1_, boolean jarg2);
  public final static native int WrappedWireConnection_getInValueLifespan(long jarg1, WrappedWireConnection jarg1_);
  public final static native void WrappedWireConnection_setInValueLifespan(long jarg1, WrappedWireConnection jarg1_, int jarg2);
  public final static native int WrappedWireConnection_getOutValueLifespan(long jarg1, WrappedWireConnection jarg1_);
  public final static native void WrappedWireConnection_setOutValueLifespan(long jarg1, WrappedWireConnection jarg1_, int jarg2);
  public final static native boolean WrappedWireConnection_waitInValueValid__SWIG_0(long jarg1, WrappedWireConnection jarg1_, int jarg2);
  public final static native boolean WrappedWireConnection_waitInValueValid__SWIG_1(long jarg1, WrappedWireConnection jarg1_);
  public final static native boolean WrappedWireConnection_waitOutValueValid__SWIG_0(long jarg1, WrappedWireConnection jarg1_, int jarg2);
  public final static native boolean WrappedWireConnection_waitOutValueValid__SWIG_1(long jarg1, WrappedWireConnection jarg1_);
  public final static native int WrappedWireConnection_direction(long jarg1, WrappedWireConnection jarg1_);
  public final static native void delete_WrappedWireConnection(long jarg1);
  public final static native long WrappedWireClient_connect(long jarg1, WrappedWireClient jarg1_);
  public final static native void WrappedWireClient_asyncConnect(long jarg1, WrappedWireClient jarg1_, int jarg2, long jarg3, AsyncWireConnectionReturnDirector jarg3_, int jarg4);
  public final static native String WrappedWireClient_getMemberName(long jarg1, WrappedWireClient jarg1_);
  public final static native long WrappedWireClient_peekInValue(long jarg1, WrappedWireClient jarg1_, long jarg2, TimeSpec jarg2_);
  public final static native long WrappedWireClient_peekOutValue(long jarg1, WrappedWireClient jarg1_, long jarg2, TimeSpec jarg2_);
  public final static native void WrappedWireClient_pokeOutValue(long jarg1, WrappedWireClient jarg1_, long jarg2, MessageElement jarg2_);
  public final static native void WrappedWireClient_asyncPeekInValue(long jarg1, WrappedWireClient jarg1_, int jarg2, long jarg3, AsyncWirePeekReturnDirector jarg3_, int jarg4);
  public final static native void WrappedWireClient_asyncPeekOutValue(long jarg1, WrappedWireClient jarg1_, int jarg2, long jarg3, AsyncWirePeekReturnDirector jarg3_, int jarg4);
  public final static native void WrappedWireClient_asyncPokeOutValue(long jarg1, WrappedWireClient jarg1_, long jarg2, MessageElement jarg2_, int jarg3, long jarg4, AsyncVoidReturnDirector jarg4_, int jarg5);
  public final static native void WrappedWireClient_Type_set(long jarg1, WrappedWireClient jarg1_, long jarg2, TypeDefinition jarg2_);
  public final static native long WrappedWireClient_Type_get(long jarg1, WrappedWireClient jarg1_);
  public final static native long WrappedWireClient_getNode(long jarg1, WrappedWireClient jarg1_);
  public final static native int WrappedWireClient_direction(long jarg1, WrappedWireClient jarg1_);
  public final static native void delete_WrappedWireClient(long jarg1);
  public final static native void delete_WrappedWireServerConnectDirector(long jarg1);
  public final static native void WrappedWireServerConnectDirector_wireConnectCallback(long jarg1, WrappedWireServerConnectDirector jarg1_, long jarg2, WrappedWireConnection jarg2_);
  public final static native long new_WrappedWireServerConnectDirector();
  public final static native void WrappedWireServerConnectDirector_director_connect(WrappedWireServerConnectDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void WrappedWireServerConnectDirector_change_ownership(WrappedWireServerConnectDirector obj, long cptr, boolean take_or_release);
  public final static native void delete_WrappedWireServerPeekValueDirector(long jarg1);
  public final static native long WrappedWireServerPeekValueDirector_peekValue(long jarg1, WrappedWireServerPeekValueDirector jarg1_, long jarg2);
  public final static native long new_WrappedWireServerPeekValueDirector();
  public final static native void WrappedWireServerPeekValueDirector_director_connect(WrappedWireServerPeekValueDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void WrappedWireServerPeekValueDirector_change_ownership(WrappedWireServerPeekValueDirector obj, long cptr, boolean take_or_release);
  public final static native void delete_WrappedWireServerPokeValueDirector(long jarg1);
  public final static native void WrappedWireServerPokeValueDirector_pokeValue(long jarg1, WrappedWireServerPokeValueDirector jarg1_, long jarg2, MessageElement jarg2_, long jarg3, TimeSpec jarg3_, long jarg4);
  public final static native long new_WrappedWireServerPokeValueDirector();
  public final static native void WrappedWireServerPokeValueDirector_director_connect(WrappedWireServerPokeValueDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void WrappedWireServerPokeValueDirector_change_ownership(WrappedWireServerPokeValueDirector obj, long cptr, boolean take_or_release);
  public final static native String WrappedWireServer_getMemberName(long jarg1, WrappedWireServer jarg1_);
  public final static native void WrappedWireServer_Type_set(long jarg1, WrappedWireServer jarg1_, long jarg2, TypeDefinition jarg2_);
  public final static native long WrappedWireServer_Type_get(long jarg1, WrappedWireServer jarg1_);
  public final static native void WrappedWireServer_setWrappedWireConnectCallback(long jarg1, WrappedWireServer jarg1_, long jarg2, WrappedWireServerConnectDirector jarg2_, int jarg3);
  public final static native long WrappedWireServer_getNode(long jarg1, WrappedWireServer jarg1_);
  public final static native void WrappedWireServer_setPeekInValueCallback(long jarg1, WrappedWireServer jarg1_, long jarg2, WrappedWireServerPeekValueDirector jarg2_, int jarg3);
  public final static native void WrappedWireServer_setPeekOutValueCallback(long jarg1, WrappedWireServer jarg1_, long jarg2, WrappedWireServerPeekValueDirector jarg2_, int jarg3);
  public final static native void WrappedWireServer_setPokeOutValueCallback(long jarg1, WrappedWireServer jarg1_, long jarg2, WrappedWireServerPokeValueDirector jarg2_, int jarg3);
  public final static native int WrappedWireServer_direction(long jarg1, WrappedWireServer jarg1_);
  public final static native void delete_WrappedWireServer(long jarg1);
  public final static native boolean WrappedWireBroadcasterPredicateDirector_predicate(long jarg1, WrappedWireBroadcasterPredicateDirector jarg1_, long jarg2);
  public final static native void delete_WrappedWireBroadcasterPredicateDirector(long jarg1);
  public final static native long new_WrappedWireBroadcasterPredicateDirector();
  public final static native void WrappedWireBroadcasterPredicateDirector_director_connect(WrappedWireBroadcasterPredicateDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void WrappedWireBroadcasterPredicateDirector_change_ownership(WrappedWireBroadcasterPredicateDirector obj, long cptr, boolean take_or_release);
  public final static native void WrappedWireBroadcaster_init(long jarg1, WrappedWireBroadcaster jarg1_, long jarg2, WrappedWireServer jarg2_);
  public final static native void WrappedWireBroadcaster_setOutValue(long jarg1, WrappedWireBroadcaster jarg1_, long jarg2, MessageElement jarg2_);
  public final static native long WrappedWireBroadcaster_getActiveWireConnectionCount(long jarg1, WrappedWireBroadcaster jarg1_);
  public final static native void WrappedWireBroadcaster_setPredicateDirector(long jarg1, WrappedWireBroadcaster jarg1_, long jarg2, WrappedWireBroadcasterPredicateDirector jarg2_, int jarg3);
  public final static native int WrappedWireBroadcaster_getOutValueLifespan(long jarg1, WrappedWireBroadcaster jarg1_);
  public final static native void WrappedWireBroadcaster_setOutValueLifespan(long jarg1, WrappedWireBroadcaster jarg1_, int jarg2);
  public final static native void WrappedWireBroadcaster_setPeekInValueCallback(long jarg1, WrappedWireBroadcaster jarg1_, long jarg2, WrappedWireServerPeekValueDirector jarg2_, int jarg3);
  public final static native long new_WrappedWireBroadcaster();
  public final static native void delete_WrappedWireBroadcaster(long jarg1);
  public final static native void WrappedWireUnicastReceiver_init(long jarg1, WrappedWireUnicastReceiver jarg1_, long jarg2, WrappedWireServer jarg2_);
  public final static native long WrappedWireUnicastReceiver_getInValue(long jarg1, WrappedWireUnicastReceiver jarg1_, long jarg2, TimeSpec jarg2_, long[] jarg3);
  public final static native void WrappedWireUnicastReceiver_addInValueChangedListener(long jarg1, WrappedWireUnicastReceiver jarg1_, long jarg2, WrappedWireServerPokeValueDirector jarg2_, int jarg3);
  public final static native int WrappedWireUnicastReceiver_getInValueLifespan(long jarg1, WrappedWireUnicastReceiver jarg1_);
  public final static native void WrappedWireUnicastReceiver_setInValueLifespan(long jarg1, WrappedWireUnicastReceiver jarg1_, int jarg2);
  public final static native boolean WrappedWireUnicastReceiver_tryGetInValue(long jarg1, WrappedWireUnicastReceiver jarg1_, long jarg2, WrappedService_typed_packet jarg2_, long jarg3, TimeSpec jarg3_);
  public final static native long new_WrappedWireUnicastReceiver();
  public final static native void delete_WrappedWireUnicastReceiver(long jarg1);
  public final static native long ArrayMemoryBase_length(long jarg1, ArrayMemoryBase jarg1_);
  public final static native int ArrayMemoryBase_elementTypeID(long jarg1, ArrayMemoryBase jarg1_);
  public final static native void delete_ArrayMemoryBase(long jarg1);
  public final static native long MultiDimArrayMemoryBase_dimensions(long jarg1, MultiDimArrayMemoryBase jarg1_);
  public final static native long MultiDimArrayMemoryBase_dimCount(long jarg1, MultiDimArrayMemoryBase jarg1_);
  public final static native int MultiDimArrayMemoryBase_elementTypeID(long jarg1, MultiDimArrayMemoryBase jarg1_);
  public final static native void delete_MultiDimArrayMemoryBase(long jarg1);
  public final static native long WrappedArrayMemoryClientUtil_read(long jarg1, ArrayMemoryBase jarg1_, long jarg2, long jarg3);
  public final static native void WrappedArrayMemoryClientUtil_write(long jarg1, ArrayMemoryBase jarg1_, long jarg2, long jarg3, RRBaseArray jarg3_, long jarg4, long jarg5);
  public final static native int WrappedArrayMemoryClientUtil_direction(long jarg1, ArrayMemoryBase jarg1_);
  public final static native long new_WrappedArrayMemoryClientUtil();
  public final static native void delete_WrappedArrayMemoryClientUtil(long jarg1);
  public final static native long WrappedMultiDimArrayMemoryClientUtil_read(long jarg1, MultiDimArrayMemoryBase jarg1_, long jarg2, vector_uint64_t jarg2_, long jarg3, vector_uint64_t jarg3_);
  public final static native void WrappedMultiDimArrayMemoryClientUtil_write(long jarg1, MultiDimArrayMemoryBase jarg1_, long jarg2, vector_uint64_t jarg2_, long jarg3, RRMultiDimArrayUntyped jarg3_, long jarg4, vector_uint64_t jarg4_, long jarg5, vector_uint64_t jarg5_);
  public final static native int WrappedMultiDimArrayMemoryClientUtil_direction(long jarg1, MultiDimArrayMemoryBase jarg1_);
  public final static native long new_WrappedMultiDimArrayMemoryClientUtil();
  public final static native void delete_WrappedMultiDimArrayMemoryClientUtil(long jarg1);
  public final static native void WrappedPodArrayMemoryClientBuffer_unpackReadResult(long jarg1, WrappedPodArrayMemoryClientBuffer jarg1_, long jarg2, MessageElementNestedElementList jarg2_, long jarg3, long jarg4);
  public final static native long WrappedPodArrayMemoryClientBuffer_packWriteRequest(long jarg1, WrappedPodArrayMemoryClientBuffer jarg1_, long jarg2, long jarg3);
  public final static native long WrappedPodArrayMemoryClientBuffer_getBufferLength(long jarg1, WrappedPodArrayMemoryClientBuffer jarg1_);
  public final static native void delete_WrappedPodArrayMemoryClientBuffer(long jarg1);
  public final static native long new_WrappedPodArrayMemoryClientBuffer();
  public final static native void WrappedPodArrayMemoryClientBuffer_director_connect(WrappedPodArrayMemoryClientBuffer obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void WrappedPodArrayMemoryClientBuffer_change_ownership(WrappedPodArrayMemoryClientBuffer obj, long cptr, boolean take_or_release);
  public final static native long WrappedPodArrayMemoryClient_length(long jarg1, WrappedPodArrayMemoryClient jarg1_);
  public final static native int WrappedPodArrayMemoryClient_direction(long jarg1, WrappedPodArrayMemoryClient jarg1_);
  public final static native void WrappedPodArrayMemoryClient_read(long jarg1, WrappedPodArrayMemoryClient jarg1_, long jarg2, long jarg3, WrappedPodArrayMemoryClientBuffer jarg3_, long jarg4, long jarg5);
  public final static native void WrappedPodArrayMemoryClient_write(long jarg1, WrappedPodArrayMemoryClient jarg1_, long jarg2, long jarg3, WrappedPodArrayMemoryClientBuffer jarg3_, long jarg4, long jarg5);
  public final static native void delete_WrappedPodArrayMemoryClient(long jarg1);
  public final static native void WrappedPodMultiDimArrayMemoryClientBuffer_unpackReadResult(long jarg1, WrappedPodMultiDimArrayMemoryClientBuffer jarg1_, long jarg2, MessageElementNestedElementList jarg2_, long jarg3, vector_uint64_t jarg3_, long jarg4, vector_uint64_t jarg4_);
  public final static native long WrappedPodMultiDimArrayMemoryClientBuffer_packWriteRequest(long jarg1, WrappedPodMultiDimArrayMemoryClientBuffer jarg1_, long jarg2, vector_uint64_t jarg2_, long jarg3, vector_uint64_t jarg3_);
  public final static native void delete_WrappedPodMultiDimArrayMemoryClientBuffer(long jarg1);
  public final static native long new_WrappedPodMultiDimArrayMemoryClientBuffer();
  public final static native void WrappedPodMultiDimArrayMemoryClientBuffer_director_connect(WrappedPodMultiDimArrayMemoryClientBuffer obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void WrappedPodMultiDimArrayMemoryClientBuffer_change_ownership(WrappedPodMultiDimArrayMemoryClientBuffer obj, long cptr, boolean take_or_release);
  public final static native long WrappedPodMultiDimArrayMemoryClient_dimensions(long jarg1, WrappedPodMultiDimArrayMemoryClient jarg1_);
  public final static native long WrappedPodMultiDimArrayMemoryClient_dimCount(long jarg1, WrappedPodMultiDimArrayMemoryClient jarg1_);
  public final static native int WrappedPodMultiDimArrayMemoryClient_direction(long jarg1, WrappedPodMultiDimArrayMemoryClient jarg1_);
  public final static native void WrappedPodMultiDimArrayMemoryClient_read(long jarg1, WrappedPodMultiDimArrayMemoryClient jarg1_, long jarg2, vector_uint64_t jarg2_, long jarg3, WrappedPodMultiDimArrayMemoryClientBuffer jarg3_, long jarg4, vector_uint64_t jarg4_, long jarg5, vector_uint64_t jarg5_);
  public final static native void WrappedPodMultiDimArrayMemoryClient_write(long jarg1, WrappedPodMultiDimArrayMemoryClient jarg1_, long jarg2, vector_uint64_t jarg2_, long jarg3, WrappedPodMultiDimArrayMemoryClientBuffer jarg3_, long jarg4, vector_uint64_t jarg4_, long jarg5, vector_uint64_t jarg5_);
  public final static native void delete_WrappedPodMultiDimArrayMemoryClient(long jarg1);
  public final static native void delete_WrappedArrayMemoryDirector(long jarg1);
  public final static native long WrappedArrayMemoryDirector_length(long jarg1, WrappedArrayMemoryDirector jarg1_);
  public final static native void WrappedArrayMemoryDirector_read(long jarg1, WrappedArrayMemoryDirector jarg1_, long jarg2, long jarg3, RRBaseArray jarg3_, long jarg4, long jarg5);
  public final static native void WrappedArrayMemoryDirector_write(long jarg1, WrappedArrayMemoryDirector jarg1_, long jarg2, long jarg3, RRBaseArray jarg3_, long jarg4, long jarg5);
  public final static native void WrappedArrayMemoryDirector_objectheapid_set(long jarg1, WrappedArrayMemoryDirector jarg1_, int jarg2);
  public final static native int WrappedArrayMemoryDirector_objectheapid_get(long jarg1, WrappedArrayMemoryDirector jarg1_);
  public final static native long new_WrappedArrayMemoryDirector();
  public final static native void WrappedArrayMemoryDirector_director_connect(WrappedArrayMemoryDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void WrappedArrayMemoryDirector_change_ownership(WrappedArrayMemoryDirector obj, long cptr, boolean take_or_release);
  public final static native void WrappedMultiDimArrayMemoryParams_memorypos_set(long jarg1, WrappedMultiDimArrayMemoryParams jarg1_, long jarg2, vector_uint64_t jarg2_);
  public final static native long WrappedMultiDimArrayMemoryParams_memorypos_get(long jarg1, WrappedMultiDimArrayMemoryParams jarg1_);
  public final static native void WrappedMultiDimArrayMemoryParams_buffer_set(long jarg1, WrappedMultiDimArrayMemoryParams jarg1_, long jarg2, RRMultiDimArrayUntyped jarg2_);
  public final static native long WrappedMultiDimArrayMemoryParams_buffer_get(long jarg1, WrappedMultiDimArrayMemoryParams jarg1_);
  public final static native void WrappedMultiDimArrayMemoryParams_bufferpos_set(long jarg1, WrappedMultiDimArrayMemoryParams jarg1_, long jarg2, vector_uint64_t jarg2_);
  public final static native long WrappedMultiDimArrayMemoryParams_bufferpos_get(long jarg1, WrappedMultiDimArrayMemoryParams jarg1_);
  public final static native void WrappedMultiDimArrayMemoryParams_count_set(long jarg1, WrappedMultiDimArrayMemoryParams jarg1_, long jarg2, vector_uint64_t jarg2_);
  public final static native long WrappedMultiDimArrayMemoryParams_count_get(long jarg1, WrappedMultiDimArrayMemoryParams jarg1_);
  public final static native long new_WrappedMultiDimArrayMemoryParams();
  public final static native void delete_WrappedMultiDimArrayMemoryParams(long jarg1);
  public final static native void delete_WrappedMultiDimArrayMemoryDirector(long jarg1);
  public final static native long WrappedMultiDimArrayMemoryDirector_dimensions(long jarg1, WrappedMultiDimArrayMemoryDirector jarg1_);
  public final static native long WrappedMultiDimArrayMemoryDirector_dimCount(long jarg1, WrappedMultiDimArrayMemoryDirector jarg1_);
  public final static native void WrappedMultiDimArrayMemoryDirector_read(long jarg1, WrappedMultiDimArrayMemoryDirector jarg1_, long jarg2, WrappedMultiDimArrayMemoryParams jarg2_);
  public final static native void WrappedMultiDimArrayMemoryDirector_write(long jarg1, WrappedMultiDimArrayMemoryDirector jarg1_, long jarg2, WrappedMultiDimArrayMemoryParams jarg2_);
  public final static native void WrappedMultiDimArrayMemoryDirector_objectheapid_set(long jarg1, WrappedMultiDimArrayMemoryDirector jarg1_, int jarg2);
  public final static native int WrappedMultiDimArrayMemoryDirector_objectheapid_get(long jarg1, WrappedMultiDimArrayMemoryDirector jarg1_);
  public final static native long new_WrappedMultiDimArrayMemoryDirector();
  public final static native void WrappedMultiDimArrayMemoryDirector_director_connect(WrappedMultiDimArrayMemoryDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void WrappedMultiDimArrayMemoryDirector_change_ownership(WrappedMultiDimArrayMemoryDirector obj, long cptr, boolean take_or_release);
  public final static native long new_WrappedPodArrayMemoryDirector();
  public final static native void delete_WrappedPodArrayMemoryDirector(long jarg1);
  public final static native long WrappedPodArrayMemoryDirector_length(long jarg1, WrappedPodArrayMemoryDirector jarg1_);
  public final static native long WrappedPodArrayMemoryDirector_read(long jarg1, WrappedPodArrayMemoryDirector jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void WrappedPodArrayMemoryDirector_write(long jarg1, WrappedPodArrayMemoryDirector jarg1_, long jarg2, long jarg3, MessageElementNestedElementList jarg3_, long jarg4, long jarg5);
  public final static native void WrappedPodArrayMemoryDirector_objectheapid_set(long jarg1, WrappedPodArrayMemoryDirector jarg1_, int jarg2);
  public final static native int WrappedPodArrayMemoryDirector_objectheapid_get(long jarg1, WrappedPodArrayMemoryDirector jarg1_);
  public final static native void WrappedPodArrayMemoryDirector_director_connect(WrappedPodArrayMemoryDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void WrappedPodArrayMemoryDirector_change_ownership(WrappedPodArrayMemoryDirector obj, long cptr, boolean take_or_release);
  public final static native void delete_WrappedPodMultiDimArrayMemoryDirector(long jarg1);
  public final static native long WrappedPodMultiDimArrayMemoryDirector_dimensions(long jarg1, WrappedPodMultiDimArrayMemoryDirector jarg1_);
  public final static native long WrappedPodMultiDimArrayMemoryDirector_dimCount(long jarg1, WrappedPodMultiDimArrayMemoryDirector jarg1_);
  public final static native long WrappedPodMultiDimArrayMemoryDirector_read(long jarg1, WrappedPodMultiDimArrayMemoryDirector jarg1_, long jarg2, vector_uint64_t jarg2_, long jarg3, vector_uint64_t jarg3_, long jarg4, vector_uint64_t jarg4_);
  public final static native void WrappedPodMultiDimArrayMemoryDirector_write(long jarg1, WrappedPodMultiDimArrayMemoryDirector jarg1_, long jarg2, vector_uint64_t jarg2_, long jarg3, MessageElementNestedElementList jarg3_, long jarg4, vector_uint64_t jarg4_, long jarg5, vector_uint64_t jarg5_);
  public final static native void WrappedPodMultiDimArrayMemoryDirector_objectheapid_set(long jarg1, WrappedPodMultiDimArrayMemoryDirector jarg1_, int jarg2);
  public final static native int WrappedPodMultiDimArrayMemoryDirector_objectheapid_get(long jarg1, WrappedPodMultiDimArrayMemoryDirector jarg1_);
  public final static native long new_WrappedPodMultiDimArrayMemoryDirector();
  public final static native void WrappedPodMultiDimArrayMemoryDirector_director_connect(WrappedPodMultiDimArrayMemoryDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void WrappedPodMultiDimArrayMemoryDirector_change_ownership(WrappedPodMultiDimArrayMemoryDirector obj, long cptr, boolean take_or_release);
  public final static native void WrappedNamedArrayMemoryClientBuffer_unpackReadResult(long jarg1, WrappedNamedArrayMemoryClientBuffer jarg1_, long jarg2, MessageElementNestedElementList jarg2_, long jarg3, long jarg4);
  public final static native long WrappedNamedArrayMemoryClientBuffer_packWriteRequest(long jarg1, WrappedNamedArrayMemoryClientBuffer jarg1_, long jarg2, long jarg3);
  public final static native long WrappedNamedArrayMemoryClientBuffer_getBufferLength(long jarg1, WrappedNamedArrayMemoryClientBuffer jarg1_);
  public final static native void delete_WrappedNamedArrayMemoryClientBuffer(long jarg1);
  public final static native long new_WrappedNamedArrayMemoryClientBuffer();
  public final static native void WrappedNamedArrayMemoryClientBuffer_director_connect(WrappedNamedArrayMemoryClientBuffer obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void WrappedNamedArrayMemoryClientBuffer_change_ownership(WrappedNamedArrayMemoryClientBuffer obj, long cptr, boolean take_or_release);
  public final static native long WrappedNamedArrayMemoryClient_length(long jarg1, WrappedNamedArrayMemoryClient jarg1_);
  public final static native int WrappedNamedArrayMemoryClient_direction(long jarg1, WrappedNamedArrayMemoryClient jarg1_);
  public final static native void WrappedNamedArrayMemoryClient_read(long jarg1, WrappedNamedArrayMemoryClient jarg1_, long jarg2, long jarg3, WrappedNamedArrayMemoryClientBuffer jarg3_, long jarg4, long jarg5);
  public final static native void WrappedNamedArrayMemoryClient_write(long jarg1, WrappedNamedArrayMemoryClient jarg1_, long jarg2, long jarg3, WrappedNamedArrayMemoryClientBuffer jarg3_, long jarg4, long jarg5);
  public final static native void delete_WrappedNamedArrayMemoryClient(long jarg1);
  public final static native void WrappedNamedMultiDimArrayMemoryClientBuffer_unpackReadResult(long jarg1, WrappedNamedMultiDimArrayMemoryClientBuffer jarg1_, long jarg2, MessageElementNestedElementList jarg2_, long jarg3, vector_uint64_t jarg3_, long jarg4, vector_uint64_t jarg4_);
  public final static native long WrappedNamedMultiDimArrayMemoryClientBuffer_packWriteRequest(long jarg1, WrappedNamedMultiDimArrayMemoryClientBuffer jarg1_, long jarg2, vector_uint64_t jarg2_, long jarg3, vector_uint64_t jarg3_);
  public final static native void delete_WrappedNamedMultiDimArrayMemoryClientBuffer(long jarg1);
  public final static native long new_WrappedNamedMultiDimArrayMemoryClientBuffer();
  public final static native void WrappedNamedMultiDimArrayMemoryClientBuffer_director_connect(WrappedNamedMultiDimArrayMemoryClientBuffer obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void WrappedNamedMultiDimArrayMemoryClientBuffer_change_ownership(WrappedNamedMultiDimArrayMemoryClientBuffer obj, long cptr, boolean take_or_release);
  public final static native long WrappedNamedMultiDimArrayMemoryClient_dimensions(long jarg1, WrappedNamedMultiDimArrayMemoryClient jarg1_);
  public final static native long WrappedNamedMultiDimArrayMemoryClient_dimCount(long jarg1, WrappedNamedMultiDimArrayMemoryClient jarg1_);
  public final static native int WrappedNamedMultiDimArrayMemoryClient_direction(long jarg1, WrappedNamedMultiDimArrayMemoryClient jarg1_);
  public final static native void WrappedNamedMultiDimArrayMemoryClient_read(long jarg1, WrappedNamedMultiDimArrayMemoryClient jarg1_, long jarg2, vector_uint64_t jarg2_, long jarg3, WrappedNamedMultiDimArrayMemoryClientBuffer jarg3_, long jarg4, vector_uint64_t jarg4_, long jarg5, vector_uint64_t jarg5_);
  public final static native void WrappedNamedMultiDimArrayMemoryClient_write(long jarg1, WrappedNamedMultiDimArrayMemoryClient jarg1_, long jarg2, vector_uint64_t jarg2_, long jarg3, WrappedNamedMultiDimArrayMemoryClientBuffer jarg3_, long jarg4, vector_uint64_t jarg4_, long jarg5, vector_uint64_t jarg5_);
  public final static native void delete_WrappedNamedMultiDimArrayMemoryClient(long jarg1);
  public final static native long new_WrappedNamedArrayMemoryDirector();
  public final static native void delete_WrappedNamedArrayMemoryDirector(long jarg1);
  public final static native long WrappedNamedArrayMemoryDirector_length(long jarg1, WrappedNamedArrayMemoryDirector jarg1_);
  public final static native long WrappedNamedArrayMemoryDirector_read(long jarg1, WrappedNamedArrayMemoryDirector jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void WrappedNamedArrayMemoryDirector_write(long jarg1, WrappedNamedArrayMemoryDirector jarg1_, long jarg2, long jarg3, MessageElementNestedElementList jarg3_, long jarg4, long jarg5);
  public final static native void WrappedNamedArrayMemoryDirector_objectheapid_set(long jarg1, WrappedNamedArrayMemoryDirector jarg1_, int jarg2);
  public final static native int WrappedNamedArrayMemoryDirector_objectheapid_get(long jarg1, WrappedNamedArrayMemoryDirector jarg1_);
  public final static native void WrappedNamedArrayMemoryDirector_director_connect(WrappedNamedArrayMemoryDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void WrappedNamedArrayMemoryDirector_change_ownership(WrappedNamedArrayMemoryDirector obj, long cptr, boolean take_or_release);
  public final static native void delete_WrappedNamedMultiDimArrayMemoryDirector(long jarg1);
  public final static native long WrappedNamedMultiDimArrayMemoryDirector_dimensions(long jarg1, WrappedNamedMultiDimArrayMemoryDirector jarg1_);
  public final static native long WrappedNamedMultiDimArrayMemoryDirector_dimCount(long jarg1, WrappedNamedMultiDimArrayMemoryDirector jarg1_);
  public final static native long WrappedNamedMultiDimArrayMemoryDirector_read(long jarg1, WrappedNamedMultiDimArrayMemoryDirector jarg1_, long jarg2, vector_uint64_t jarg2_, long jarg3, vector_uint64_t jarg3_, long jarg4, vector_uint64_t jarg4_);
  public final static native void WrappedNamedMultiDimArrayMemoryDirector_write(long jarg1, WrappedNamedMultiDimArrayMemoryDirector jarg1_, long jarg2, vector_uint64_t jarg2_, long jarg3, MessageElementNestedElementList jarg3_, long jarg4, vector_uint64_t jarg4_, long jarg5, vector_uint64_t jarg5_);
  public final static native void WrappedNamedMultiDimArrayMemoryDirector_objectheapid_set(long jarg1, WrappedNamedMultiDimArrayMemoryDirector jarg1_, int jarg2);
  public final static native int WrappedNamedMultiDimArrayMemoryDirector_objectheapid_get(long jarg1, WrappedNamedMultiDimArrayMemoryDirector jarg1_);
  public final static native long new_WrappedNamedMultiDimArrayMemoryDirector();
  public final static native void WrappedNamedMultiDimArrayMemoryDirector_director_connect(WrappedNamedMultiDimArrayMemoryDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void WrappedNamedMultiDimArrayMemoryDirector_change_ownership(WrappedNamedMultiDimArrayMemoryDirector obj, long cptr, boolean take_or_release);
  public final static native void WrappedGeneratorClient_TryGetNextResult_value_set(long jarg1, WrappedGeneratorClient_TryGetNextResult jarg1_, long jarg2, MessageElement jarg2_);
  public final static native long WrappedGeneratorClient_TryGetNextResult_value_get(long jarg1, WrappedGeneratorClient_TryGetNextResult jarg1_);
  public final static native void WrappedGeneratorClient_TryGetNextResult_res_set(long jarg1, WrappedGeneratorClient_TryGetNextResult jarg1_, boolean jarg2);
  public final static native boolean WrappedGeneratorClient_TryGetNextResult_res_get(long jarg1, WrappedGeneratorClient_TryGetNextResult jarg1_);
  public final static native void delete_WrappedGeneratorClient_TryGetNextResult(long jarg1);
  public final static native long WrappedGeneratorClient_next(long jarg1, WrappedGeneratorClient jarg1_, long jarg2, MessageElement jarg2_);
  public final static native long WrappedGeneratorClient_tryNext(long jarg1, WrappedGeneratorClient jarg1_, long jarg2, MessageElement jarg2_);
  public final static native void WrappedGeneratorClient_asyncNext(long jarg1, WrappedGeneratorClient jarg1_, long jarg2, MessageElement jarg2_, int jarg3, long jarg4, AsyncRequestDirector jarg4_, int jarg5);
  public final static native void WrappedGeneratorClient_abort(long jarg1, WrappedGeneratorClient jarg1_);
  public final static native void WrappedGeneratorClient_asyncAbort(long jarg1, WrappedGeneratorClient jarg1_, int jarg2, long jarg3, AsyncVoidReturnDirector jarg3_, int jarg4);
  public final static native void WrappedGeneratorClient_close(long jarg1, WrappedGeneratorClient jarg1_);
  public final static native void WrappedGeneratorClient_asyncClose(long jarg1, WrappedGeneratorClient jarg1_, int jarg2, long jarg3, AsyncVoidReturnDirector jarg3_, int jarg4);
  public final static native long WrappedGeneratorClient_nextAll(long jarg1, WrappedGeneratorClient jarg1_);
  public final static native void delete_WrappedGeneratorClient(long jarg1);
  public final static native void delete_AsyncGeneratorClientReturnDirector(long jarg1);
  public final static native void AsyncGeneratorClientReturnDirector_handler(long jarg1, AsyncGeneratorClientReturnDirector jarg1_, long jarg2, WrappedGeneratorClient jarg2_, long jarg3, HandlerErrorInfo jarg3_);
  public final static native long new_AsyncGeneratorClientReturnDirector();
  public final static native void AsyncGeneratorClientReturnDirector_director_connect(AsyncGeneratorClientReturnDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void AsyncGeneratorClientReturnDirector_change_ownership(AsyncGeneratorClientReturnDirector obj, long cptr, boolean take_or_release);
  public final static native long new_WrappedGeneratorServerDirector();
  public final static native void delete_WrappedGeneratorServerDirector(long jarg1);
  public final static native long WrappedGeneratorServerDirector_next(long jarg1, WrappedGeneratorServerDirector jarg1_, long jarg2, MessageElement jarg2_, long jarg3, WrappedServiceSkelAsyncAdapter jarg3_);
  public final static native void WrappedGeneratorServerDirector_abort(long jarg1, WrappedGeneratorServerDirector jarg1_, long jarg2, WrappedServiceSkelAsyncAdapter jarg2_);
  public final static native void WrappedGeneratorServerDirector_close(long jarg1, WrappedGeneratorServerDirector jarg1_, long jarg2, WrappedServiceSkelAsyncAdapter jarg2_);
  public final static native void WrappedGeneratorServerDirector_objectheapid_set(long jarg1, WrappedGeneratorServerDirector jarg1_, int jarg2);
  public final static native int WrappedGeneratorServerDirector_objectheapid_get(long jarg1, WrappedGeneratorServerDirector jarg1_);
  public final static native void WrappedGeneratorServerDirector_director_connect(WrappedGeneratorServerDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void WrappedGeneratorServerDirector_change_ownership(WrappedGeneratorServerDirector obj, long cptr, boolean take_or_release);
  public final static native void delete_WrappedServiceStubDirector(long jarg1);
  public final static native void WrappedServiceStubDirector_dispatchEvent(long jarg1, WrappedServiceStubDirector jarg1_, String jarg2, long jarg3, vectorptr_messageelement jarg3_);
  public final static native long WrappedServiceStubDirector_callbackCall(long jarg1, WrappedServiceStubDirector jarg1_, String jarg2, long jarg3, vectorptr_messageelement jarg3_);
  public final static native long new_WrappedServiceStubDirector();
  public final static native void WrappedServiceStubDirector_director_connect(WrappedServiceStubDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void WrappedServiceStubDirector_change_ownership(WrappedServiceStubDirector obj, long cptr, boolean take_or_release);
  public final static native void delete_AsyncStubReturnDirector(long jarg1);
  public final static native void AsyncStubReturnDirector_handler(long jarg1, AsyncStubReturnDirector jarg1_, long jarg2, WrappedServiceStub jarg2_, long jarg3, HandlerErrorInfo jarg3_);
  public final static native long new_AsyncStubReturnDirector();
  public final static native void AsyncStubReturnDirector_director_connect(AsyncStubReturnDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void AsyncStubReturnDirector_change_ownership(AsyncStubReturnDirector obj, long cptr, boolean take_or_release);
  public final static native long WrappedServiceStub_propertyGet(long jarg1, WrappedServiceStub jarg1_, String jarg2);
  public final static native void WrappedServiceStub_propertySet(long jarg1, WrappedServiceStub jarg1_, String jarg2, long jarg3, MessageElement jarg3_);
  public final static native long WrappedServiceStub_functionCall(long jarg1, WrappedServiceStub jarg1_, String jarg2, long jarg3, vectorptr_messageelement jarg3_);
  public final static native long WrappedServiceStub_generatorFunctionCall(long jarg1, WrappedServiceStub jarg1_, String jarg2, long jarg3, vectorptr_messageelement jarg3_);
  public final static native void WrappedServiceStub_async_PropertyGet(long jarg1, WrappedServiceStub jarg1_, String jarg2, int jarg3, long jarg4, AsyncRequestDirector jarg4_, int jarg5);
  public final static native void WrappedServiceStub_async_PropertySet(long jarg1, WrappedServiceStub jarg1_, String jarg2, long jarg3, MessageElement jarg3_, int jarg4, long jarg5, AsyncRequestDirector jarg5_, int jarg6);
  public final static native void WrappedServiceStub_async_FunctionCall(long jarg1, WrappedServiceStub jarg1_, String jarg2, long jarg3, vectorptr_messageelement jarg3_, int jarg4, long jarg5, AsyncRequestDirector jarg5_, int jarg6);
  public final static native void WrappedServiceStub_async_GeneratorFunctionCall(long jarg1, WrappedServiceStub jarg1_, String jarg2, long jarg3, vectorptr_messageelement jarg3_, int jarg4, long jarg5, AsyncGeneratorClientReturnDirector jarg5_, int jarg6);
  public final static native void WrappedServiceStub_async_FindObjRef__SWIG_0(long jarg1, WrappedServiceStub jarg1_, String jarg2, int jarg3, long jarg4, AsyncStubReturnDirector jarg4_, int jarg5);
  public final static native void WrappedServiceStub_async_FindObjRef__SWIG_1(long jarg1, WrappedServiceStub jarg1_, String jarg2, String jarg3, int jarg4, long jarg5, AsyncStubReturnDirector jarg5_, int jarg6);
  public final static native void WrappedServiceStub_async_FindObjRefTyped__SWIG_0(long jarg1, WrappedServiceStub jarg1_, String jarg2, String jarg3, int jarg4, long jarg5, AsyncStubReturnDirector jarg5_, int jarg6);
  public final static native void WrappedServiceStub_async_FindObjRefTyped__SWIG_1(long jarg1, WrappedServiceStub jarg1_, String jarg2, String jarg3, String jarg4, int jarg5, long jarg6, AsyncStubReturnDirector jarg6_, int jarg7);
  public final static native long WrappedServiceStub_getPipe(long jarg1, WrappedServiceStub jarg1_, String jarg2);
  public final static native long WrappedServiceStub_getWire(long jarg1, WrappedServiceStub jarg1_, String jarg2);
  public final static native int WrappedServiceStub_getObjectHeapID(long jarg1, WrappedServiceStub jarg1_);
  public final static native long WrappedServiceStub_findObjRef__SWIG_0(long jarg1, WrappedServiceStub jarg1_, String jarg2);
  public final static native long WrappedServiceStub_findObjRef__SWIG_1(long jarg1, WrappedServiceStub jarg1_, String jarg2, String jarg3);
  public final static native long WrappedServiceStub_findObjRefTyped__SWIG_0(long jarg1, WrappedServiceStub jarg1_, String jarg2, String jarg3);
  public final static native long WrappedServiceStub_findObjRefTyped__SWIG_1(long jarg1, WrappedServiceStub jarg1_, String jarg2, String jarg3, String jarg4);
  public final static native long WrappedServiceStub_getArrayMemory(long jarg1, WrappedServiceStub jarg1_, String jarg2);
  public final static native long WrappedServiceStub_getMultiDimArrayMemory(long jarg1, WrappedServiceStub jarg1_, String jarg2);
  public final static native long WrappedServiceStub_getPodArrayMemory(long jarg1, WrappedServiceStub jarg1_, String jarg2);
  public final static native long WrappedServiceStub_getPodMultiDimArrayMemory(long jarg1, WrappedServiceStub jarg1_, String jarg2);
  public final static native long WrappedServiceStub_getNamedArrayMemory(long jarg1, WrappedServiceStub jarg1_, String jarg2);
  public final static native long WrappedServiceStub_getNamedMultiDimArrayMemory(long jarg1, WrappedServiceStub jarg1_, String jarg2);
  public final static native void WrappedServiceStub_rRClose(long jarg1, WrappedServiceStub jarg1_);
  public final static native void WrappedServiceStub_RR_objecttype_set(long jarg1, WrappedServiceStub jarg1_, long jarg2, ServiceEntryDefinition jarg2_);
  public final static native long WrappedServiceStub_RR_objecttype_get(long jarg1, WrappedServiceStub jarg1_);
  public final static native void WrappedServiceStub_setRRDirector(long jarg1, WrappedServiceStub jarg1_, long jarg2, WrappedServiceStubDirector jarg2_, int jarg3);
  public final static native long WrappedServiceStub_rRGetNode(long jarg1, WrappedServiceStub jarg1_);
  public final static native void delete_WrappedServiceStub(long jarg1);
  public final static native void delete_WrappedServiceSkelDirector(long jarg1);
  public final static native void WrappedServiceSkelDirector_init(long jarg1, WrappedServiceSkelDirector jarg1_, long jarg2, WrappedServiceSkel jarg2_);
  public final static native long WrappedServiceSkelDirector__CallGetProperty(long jarg1, WrappedServiceSkelDirector jarg1_, String jarg2, long jarg3, WrappedServiceSkelAsyncAdapter jarg3_);
  public final static native void WrappedServiceSkelDirector__CallSetProperty(long jarg1, WrappedServiceSkelDirector jarg1_, String jarg2, long jarg3, MessageElement jarg3_, long jarg4, WrappedServiceSkelAsyncAdapter jarg4_);
  public final static native long WrappedServiceSkelDirector__CallFunction(long jarg1, WrappedServiceSkelDirector jarg1_, String jarg2, long jarg3, vectorptr_messageelement jarg3_, long jarg4, WrappedServiceSkelAsyncAdapter jarg4_);
  public final static native long WrappedServiceSkelDirector__GetSubObj(long jarg1, WrappedServiceSkelDirector jarg1_, String jarg2, String jarg3);
  public final static native long WrappedServiceSkelDirector__GetArrayMemory(long jarg1, WrappedServiceSkelDirector jarg1_, String jarg2);
  public final static native long WrappedServiceSkelDirector__GetMultiDimArrayMemory(long jarg1, WrappedServiceSkelDirector jarg1_, String jarg2);
  public final static native long WrappedServiceSkelDirector__GetPodArrayMemory(long jarg1, WrappedServiceSkelDirector jarg1_, String jarg2);
  public final static native long WrappedServiceSkelDirector__GetPodMultiDimArrayMemory(long jarg1, WrappedServiceSkelDirector jarg1_, String jarg2);
  public final static native long WrappedServiceSkelDirector__GetNamedArrayMemory(long jarg1, WrappedServiceSkelDirector jarg1_, String jarg2);
  public final static native long WrappedServiceSkelDirector__GetNamedMultiDimArrayMemory(long jarg1, WrappedServiceSkelDirector jarg1_, String jarg2);
  public final static native void WrappedServiceSkelDirector_monitorEnter(long jarg1, WrappedServiceSkelDirector jarg1_, int jarg2);
  public final static native void WrappedServiceSkelDirector_monitorExit(long jarg1, WrappedServiceSkelDirector jarg1_);
  public final static native void WrappedServiceSkelDirector_releaseCastObject(long jarg1, WrappedServiceSkelDirector jarg1_);
  public final static native long new_WrappedServiceSkelDirector();
  public final static native void WrappedServiceSkelDirector_director_connect(WrappedServiceSkelDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void WrappedServiceSkelDirector_change_ownership(WrappedServiceSkelDirector obj, long cptr, boolean take_or_release);
  public final static native long new_WrappedRRObject(String jarg1, long jarg2, WrappedServiceSkelDirector jarg2_, int jarg3);
  public final static native void WrappedRRObject_Type_set(long jarg1, WrappedRRObject jarg1_, String jarg2);
  public final static native String WrappedRRObject_Type_get(long jarg1, WrappedRRObject jarg1_);
  public final static native void delete_WrappedRRObject(long jarg1);
  public final static native void WrappedServiceSkel_Type_set(long jarg1, WrappedServiceSkel jarg1_, long jarg2, ServiceEntryDefinition jarg2_);
  public final static native long WrappedServiceSkel_Type_get(long jarg1, WrappedServiceSkel jarg1_);
  public final static native void WrappedServiceSkel_castobj_set(long jarg1, WrappedServiceSkel jarg1_, long jarg2, WrappedRRObject jarg2_);
  public final static native long WrappedServiceSkel_castobj_get(long jarg1, WrappedServiceSkel jarg1_);
  public final static native long WrappedServiceSkel_getPipe(long jarg1, WrappedServiceSkel jarg1_, String jarg2);
  public final static native long WrappedServiceSkel_getWire(long jarg1, WrappedServiceSkel jarg1_, String jarg2);
  public final static native void WrappedServiceSkel_wrappedDispatchEvent(long jarg1, WrappedServiceSkel jarg1_, String jarg2, long jarg3, vectorptr_messageelement jarg3_);
  public final static native long WrappedServiceSkel_wrappedCallbackCall(long jarg1, WrappedServiceSkel jarg1_, String jarg2, long jarg3, long jarg4, vectorptr_messageelement jarg4_);
  public final static native long WrappedServiceSkel_rRGetNode(long jarg1, WrappedServiceSkel jarg1_);
  public final static native int WrappedServiceSkel_registerGeneratorServer(long jarg1, WrappedServiceSkel jarg1_, String jarg2, long jarg3, WrappedGeneratorServerDirector jarg3_);
  public final static native String WrappedServiceSkel_getServicePath(long jarg1, WrappedServiceSkel jarg1_);
  public final static native long WrappedServiceSkel_getContext(long jarg1, WrappedServiceSkel jarg1_);
  public final static native long new_WrappedServiceSkel();
  public final static native void delete_WrappedServiceSkel(long jarg1);
  public final static native void ServerServiceListenerDirector_objectheapid_set(long jarg1, ServerServiceListenerDirector jarg1_, int jarg2);
  public final static native int ServerServiceListenerDirector_objectheapid_get(long jarg1, ServerServiceListenerDirector jarg1_);
  public final static native long new_ServerServiceListenerDirector();
  public final static native void ServerServiceListenerDirector_callback(long jarg1, ServerServiceListenerDirector jarg1_, int jarg2, long jarg3);
  public final static native void ServerServiceListenerDirector_callbackSwigExplicitServerServiceListenerDirector(long jarg1, ServerServiceListenerDirector jarg1_, int jarg2, long jarg3);
  public final static native void delete_ServerServiceListenerDirector(long jarg1);
  public final static native void ServerServiceListenerDirector_director_connect(ServerServiceListenerDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ServerServiceListenerDirector_change_ownership(ServerServiceListenerDirector obj, long cptr, boolean take_or_release);
  public final static native String ServerContext_getCurrentServicePath();
  public final static native void ServerContext__ReleaseServicePath__SWIG_0(long jarg1, ServerContext jarg1_, String jarg2);
  public final static native void ServerContext__ReleaseServicePath__SWIG_1(long jarg1, ServerContext jarg1_, String jarg2, long jarg3, vectoruint32 jarg3_);
  public final static native long ServerContext_getCurrentServerContext();
  public final static native void ServerContext_kickUser(long jarg1, ServerContext jarg1_, String jarg2);
  public final static native void ServerContext__AddServerServiceListener(long jarg1, ServerContext jarg1_, long jarg2, ServerServiceListenerDirector jarg2_);
  public final static native void ServerContext__SetServiceAttributes(long jarg1, ServerContext jarg1_, long jarg2, MessageElement jarg2_);
  public final static native void ServerContext_requestObjectLock(long jarg1, ServerContext jarg1_, String jarg2, String jarg3);
  public final static native void ServerContext_requestClientObjectLock(long jarg1, ServerContext jarg1_, String jarg2, String jarg3, long jarg4);
  public final static native void ServerContext_releaseObjectLock(long jarg1, ServerContext jarg1_, String jarg2, String jarg3, boolean jarg4);
  public final static native String ServerContext_getObjectLockUsername(long jarg1, ServerContext jarg1_, String jarg2);
  public final static native long ServerContext_getNode(long jarg1, ServerContext jarg1_);
  public final static native long ServerContext_getExtraImports(long jarg1, ServerContext jarg1_);
  public final static native void ServerContext_addExtraImport(long jarg1, ServerContext jarg1_, String jarg2);
  public final static native boolean ServerContext_removeExtraImport(long jarg1, ServerContext jarg1_, String jarg2);
  public final static native void delete_ServerContext(long jarg1);
  public final static native String AuthenticatedUser__GetUsername(long jarg1, AuthenticatedUser jarg1_);
  public final static native long AuthenticatedUser__GetPrivileges(long jarg1, AuthenticatedUser jarg1_);
  public final static native long AuthenticatedUser__GetProperties(long jarg1, AuthenticatedUser jarg1_);
  public final static native long AuthenticatedUser__GetLoginTime(long jarg1, AuthenticatedUser jarg1_);
  public final static native long AuthenticatedUser__GetLastAccessTime(long jarg1, AuthenticatedUser jarg1_);
  public final static native void delete_AuthenticatedUser(long jarg1);
  public final static native long ServerEndpoint_getCurrentEndpoint();
  public final static native long ServerEndpoint_getCurrentAuthenticatedUser();
  public final static native void delete_ServerEndpoint(long jarg1);
  public final static native void WrappedServiceSkelAsyncAdapter_makeAsync(long jarg1, WrappedServiceSkelAsyncAdapter jarg1_);
  public final static native boolean WrappedServiceSkelAsyncAdapter_isAsync(long jarg1, WrappedServiceSkelAsyncAdapter jarg1_);
  public final static native void WrappedServiceSkelAsyncAdapter_end__SWIG_0(long jarg1, WrappedServiceSkelAsyncAdapter jarg1_, long jarg2, HandlerErrorInfo jarg2_);
  public final static native void WrappedServiceSkelAsyncAdapter_end__SWIG_1(long jarg1, WrappedServiceSkelAsyncAdapter jarg1_, long jarg2, MessageElement jarg2_, long jarg3, HandlerErrorInfo jarg3_);
  public final static native void delete_WrappedServiceSkelAsyncAdapter(long jarg1);
  public final static native long NativeUserAuthenticator__AuthenticateUser(long jarg1, NativeUserAuthenticator jarg1_, String jarg2, long jarg3, MessageElement jarg3_, long jarg4, ServerContext jarg4_);
  public final static native void delete_NativeUserAuthenticator(long jarg1);
  public final static native long new_ServiceSecurityPolicy(long jarg1, NativeUserAuthenticator jarg1_, long jarg2, map_strstr jarg2_);
  public final static native void delete_ServiceSecurityPolicy(long jarg1);
  public final static native long new_PasswordFileUserAuthenticator__SWIG_0(String jarg1, boolean jarg2);
  public final static native long new_PasswordFileUserAuthenticator__SWIG_1(String jarg1);
  public final static native void delete_PasswordFileUserAuthenticator(long jarg1);
  public final static native void delete_WrappedUserAuthenticatorDirector(long jarg1);
  public final static native long WrappedUserAuthenticatorDirector_authenticateUser(long jarg1, WrappedUserAuthenticatorDirector jarg1_, String jarg2, long jarg3, MessageElement jarg3_, long jarg4, ServerContext jarg4_);
  public final static native long new_WrappedUserAuthenticatorDirector();
  public final static native void WrappedUserAuthenticatorDirector_director_connect(WrappedUserAuthenticatorDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void WrappedUserAuthenticatorDirector_change_ownership(WrappedUserAuthenticatorDirector obj, long cptr, boolean take_or_release);
  public final static native void WrappedUserAuthenticator_setRRDirector(long jarg1, WrappedUserAuthenticator jarg1_, long jarg2, WrappedUserAuthenticatorDirector jarg2_, int jarg3);
  public final static native long new_WrappedUserAuthenticator();
  public final static native void delete_WrappedUserAuthenticator(long jarg1);
  public final static native void delete_AsyncServiceInfo2VectorReturnDirector(long jarg1);
  public final static native void AsyncServiceInfo2VectorReturnDirector_handler(long jarg1, AsyncServiceInfo2VectorReturnDirector jarg1_, long jarg2, vectorserviceinfo2wrapped jarg2_);
  public final static native long new_AsyncServiceInfo2VectorReturnDirector();
  public final static native void AsyncServiceInfo2VectorReturnDirector_director_connect(AsyncServiceInfo2VectorReturnDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void AsyncServiceInfo2VectorReturnDirector_change_ownership(AsyncServiceInfo2VectorReturnDirector obj, long cptr, boolean take_or_release);
  public final static native void delete_AsyncNodeInfo2VectorReturnDirector(long jarg1);
  public final static native void AsyncNodeInfo2VectorReturnDirector_handler(long jarg1, AsyncNodeInfo2VectorReturnDirector jarg1_, long jarg2, vectornodeinfo2 jarg2_);
  public final static native long new_AsyncNodeInfo2VectorReturnDirector();
  public final static native void AsyncNodeInfo2VectorReturnDirector_director_connect(AsyncNodeInfo2VectorReturnDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void AsyncNodeInfo2VectorReturnDirector_change_ownership(AsyncNodeInfo2VectorReturnDirector obj, long cptr, boolean take_or_release);
  public final static native void ServiceInfo2Wrapped_Name_set(long jarg1, ServiceInfo2Wrapped jarg1_, String jarg2);
  public final static native String ServiceInfo2Wrapped_Name_get(long jarg1, ServiceInfo2Wrapped jarg1_);
  public final static native void ServiceInfo2Wrapped_RootObjectType_set(long jarg1, ServiceInfo2Wrapped jarg1_, String jarg2);
  public final static native String ServiceInfo2Wrapped_RootObjectType_get(long jarg1, ServiceInfo2Wrapped jarg1_);
  public final static native void ServiceInfo2Wrapped_RootObjectImplements_set(long jarg1, ServiceInfo2Wrapped jarg1_, long jarg2, vectorstring jarg2_);
  public final static native long ServiceInfo2Wrapped_RootObjectImplements_get(long jarg1, ServiceInfo2Wrapped jarg1_);
  public final static native void ServiceInfo2Wrapped_ConnectionURL_set(long jarg1, ServiceInfo2Wrapped jarg1_, long jarg2, vectorstring jarg2_);
  public final static native long ServiceInfo2Wrapped_ConnectionURL_get(long jarg1, ServiceInfo2Wrapped jarg1_);
  public final static native void ServiceInfo2Wrapped_Attributes_set(long jarg1, ServiceInfo2Wrapped jarg1_, long jarg2, MessageElement jarg2_);
  public final static native long ServiceInfo2Wrapped_Attributes_get(long jarg1, ServiceInfo2Wrapped jarg1_);
  public final static native void ServiceInfo2Wrapped_NodeID_set(long jarg1, ServiceInfo2Wrapped jarg1_, long jarg2, NodeID jarg2_);
  public final static native long ServiceInfo2Wrapped_NodeID_get(long jarg1, ServiceInfo2Wrapped jarg1_);
  public final static native void ServiceInfo2Wrapped_NodeName_set(long jarg1, ServiceInfo2Wrapped jarg1_, String jarg2);
  public final static native String ServiceInfo2Wrapped_NodeName_get(long jarg1, ServiceInfo2Wrapped jarg1_);
  public final static native long new_ServiceInfo2Wrapped();
  public final static native void delete_ServiceInfo2Wrapped(long jarg1);
  public final static native long wrappedFindServiceByType(long jarg1, RobotRaconteurNode jarg1_, String jarg2, long jarg3, vectorstring jarg3_);
  public final static native void asyncWrappedFindServiceByType(long jarg1, RobotRaconteurNode jarg1_, String jarg2, long jarg3, vectorstring jarg3_, int jarg4, long jarg5, AsyncServiceInfo2VectorReturnDirector jarg5_, int jarg6);
  public final static native long new_vectorserviceinfo2wrapped__SWIG_0();
  public final static native long new_vectorserviceinfo2wrapped__SWIG_1(long jarg1, vectorserviceinfo2wrapped jarg1_);
  public final static native long vectorserviceinfo2wrapped_capacity(long jarg1, vectorserviceinfo2wrapped jarg1_);
  public final static native void vectorserviceinfo2wrapped_reserve(long jarg1, vectorserviceinfo2wrapped jarg1_, long jarg2);
  public final static native boolean vectorserviceinfo2wrapped_isEmpty(long jarg1, vectorserviceinfo2wrapped jarg1_);
  public final static native void vectorserviceinfo2wrapped_clear(long jarg1, vectorserviceinfo2wrapped jarg1_);
  public final static native long new_vectorserviceinfo2wrapped__SWIG_2(int jarg1, long jarg2, ServiceInfo2Wrapped jarg2_);
  public final static native int vectorserviceinfo2wrapped_doSize(long jarg1, vectorserviceinfo2wrapped jarg1_);
  public final static native void vectorserviceinfo2wrapped_doAdd__SWIG_0(long jarg1, vectorserviceinfo2wrapped jarg1_, long jarg2, ServiceInfo2Wrapped jarg2_);
  public final static native void vectorserviceinfo2wrapped_doAdd__SWIG_1(long jarg1, vectorserviceinfo2wrapped jarg1_, int jarg2, long jarg3, ServiceInfo2Wrapped jarg3_);
  public final static native long vectorserviceinfo2wrapped_doRemove(long jarg1, vectorserviceinfo2wrapped jarg1_, int jarg2);
  public final static native long vectorserviceinfo2wrapped_doGet(long jarg1, vectorserviceinfo2wrapped jarg1_, int jarg2);
  public final static native long vectorserviceinfo2wrapped_doSet(long jarg1, vectorserviceinfo2wrapped jarg1_, int jarg2, long jarg3, ServiceInfo2Wrapped jarg3_);
  public final static native void vectorserviceinfo2wrapped_doRemoveRange(long jarg1, vectorserviceinfo2wrapped jarg1_, int jarg2, int jarg3);
  public final static native void delete_vectorserviceinfo2wrapped(long jarg1);
  public final static native void WrappedNodeInfo2_NodeID_set(long jarg1, WrappedNodeInfo2 jarg1_, long jarg2, NodeID jarg2_);
  public final static native long WrappedNodeInfo2_NodeID_get(long jarg1, WrappedNodeInfo2 jarg1_);
  public final static native void WrappedNodeInfo2_NodeName_set(long jarg1, WrappedNodeInfo2 jarg1_, String jarg2);
  public final static native String WrappedNodeInfo2_NodeName_get(long jarg1, WrappedNodeInfo2 jarg1_);
  public final static native void WrappedNodeInfo2_ConnectionURL_set(long jarg1, WrappedNodeInfo2 jarg1_, long jarg2, vectorstring jarg2_);
  public final static native long WrappedNodeInfo2_ConnectionURL_get(long jarg1, WrappedNodeInfo2 jarg1_);
  public final static native long new_WrappedNodeInfo2();
  public final static native void delete_WrappedNodeInfo2(long jarg1);
  public final static native long wrappedFindNodeByID(long jarg1, RobotRaconteurNode jarg1_, long jarg2, NodeID jarg2_, long jarg3, vectorstring jarg3_);
  public final static native long wrappedFindNodeByName(long jarg1, RobotRaconteurNode jarg1_, String jarg2, long jarg3, vectorstring jarg3_);
  public final static native void asyncWrappedFindNodeByID(long jarg1, RobotRaconteurNode jarg1_, long jarg2, NodeID jarg2_, long jarg3, vectorstring jarg3_, int jarg4, long jarg5, AsyncNodeInfo2VectorReturnDirector jarg5_, int jarg6);
  public final static native void asyncWrappedFindNodeByName(long jarg1, RobotRaconteurNode jarg1_, String jarg2, long jarg3, vectorstring jarg3_, int jarg4, long jarg5, AsyncNodeInfo2VectorReturnDirector jarg5_, int jarg6);
  public final static native void wrappedUpdateDetectedNodes(long jarg1, RobotRaconteurNode jarg1_, long jarg2, vectorstring jarg2_);
  public final static native void asyncWrappedUpdateDetectedNodes(long jarg1, RobotRaconteurNode jarg1_, long jarg2, vectorstring jarg2_, int jarg3, long jarg4, AsyncVoidNoErrReturnDirector jarg4_, int jarg5);
  public final static native long wrappedGetDetectedNodes(long jarg1, RobotRaconteurNode jarg1_);
  public final static native long wrappedGetDetectedNodeCacheInfo(long jarg1, RobotRaconteurNode jarg1_, long jarg2, NodeID jarg2_);
  public final static native boolean wrappedTryGetDetectedNodeCacheInfo(long jarg1, RobotRaconteurNode jarg1_, long jarg2, NodeID jarg2_, long jarg3, WrappedNodeInfo2 jarg3_);
  public final static native long new_vectornodeinfo2__SWIG_0();
  public final static native long new_vectornodeinfo2__SWIG_1(long jarg1, vectornodeinfo2 jarg1_);
  public final static native long vectornodeinfo2_capacity(long jarg1, vectornodeinfo2 jarg1_);
  public final static native void vectornodeinfo2_reserve(long jarg1, vectornodeinfo2 jarg1_, long jarg2);
  public final static native boolean vectornodeinfo2_isEmpty(long jarg1, vectornodeinfo2 jarg1_);
  public final static native void vectornodeinfo2_clear(long jarg1, vectornodeinfo2 jarg1_);
  public final static native long new_vectornodeinfo2__SWIG_2(int jarg1, long jarg2, WrappedNodeInfo2 jarg2_);
  public final static native int vectornodeinfo2_doSize(long jarg1, vectornodeinfo2 jarg1_);
  public final static native void vectornodeinfo2_doAdd__SWIG_0(long jarg1, vectornodeinfo2 jarg1_, long jarg2, WrappedNodeInfo2 jarg2_);
  public final static native void vectornodeinfo2_doAdd__SWIG_1(long jarg1, vectornodeinfo2 jarg1_, int jarg2, long jarg3, WrappedNodeInfo2 jarg3_);
  public final static native long vectornodeinfo2_doRemove(long jarg1, vectornodeinfo2 jarg1_, int jarg2);
  public final static native long vectornodeinfo2_doGet(long jarg1, vectornodeinfo2 jarg1_, int jarg2);
  public final static native long vectornodeinfo2_doSet(long jarg1, vectornodeinfo2 jarg1_, int jarg2, long jarg3, WrappedNodeInfo2 jarg3_);
  public final static native void vectornodeinfo2_doRemoveRange(long jarg1, vectornodeinfo2 jarg1_, int jarg2, int jarg3);
  public final static native void delete_vectornodeinfo2(long jarg1);
  public final static native long new_map_subscriptionserviceinfo2__SWIG_0();
  public final static native long new_map_subscriptionserviceinfo2__SWIG_1(long jarg1, map_subscriptionserviceinfo2 jarg1_);
  public final static native long map_subscriptionserviceinfo2_Iterator_getNextUnchecked(long jarg1, map_subscriptionserviceinfo2.Iterator jarg1_);
  public final static native boolean map_subscriptionserviceinfo2_Iterator_isNot(long jarg1, map_subscriptionserviceinfo2.Iterator jarg1_, long jarg2, map_subscriptionserviceinfo2.Iterator jarg2_);
  public final static native long map_subscriptionserviceinfo2_Iterator_getKey(long jarg1, map_subscriptionserviceinfo2.Iterator jarg1_);
  public final static native long map_subscriptionserviceinfo2_Iterator_getValue(long jarg1, map_subscriptionserviceinfo2.Iterator jarg1_);
  public final static native void map_subscriptionserviceinfo2_Iterator_setValue(long jarg1, map_subscriptionserviceinfo2.Iterator jarg1_, long jarg2, ServiceInfo2Wrapped jarg2_);
  public final static native void delete_map_subscriptionserviceinfo2_Iterator(long jarg1);
  public final static native boolean map_subscriptionserviceinfo2_isEmpty(long jarg1, map_subscriptionserviceinfo2 jarg1_);
  public final static native void map_subscriptionserviceinfo2_clear(long jarg1, map_subscriptionserviceinfo2 jarg1_);
  public final static native long map_subscriptionserviceinfo2_find(long jarg1, map_subscriptionserviceinfo2 jarg1_, long jarg2, WrappedServiceSubscriptionClientID jarg2_);
  public final static native long map_subscriptionserviceinfo2_begin(long jarg1, map_subscriptionserviceinfo2 jarg1_);
  public final static native long map_subscriptionserviceinfo2_end(long jarg1, map_subscriptionserviceinfo2 jarg1_);
  public final static native int map_subscriptionserviceinfo2_sizeImpl(long jarg1, map_subscriptionserviceinfo2 jarg1_);
  public final static native boolean map_subscriptionserviceinfo2_containsImpl(long jarg1, map_subscriptionserviceinfo2 jarg1_, long jarg2, WrappedServiceSubscriptionClientID jarg2_);
  public final static native void map_subscriptionserviceinfo2_putUnchecked(long jarg1, map_subscriptionserviceinfo2 jarg1_, long jarg2, WrappedServiceSubscriptionClientID jarg2_, long jarg3, ServiceInfo2Wrapped jarg3_);
  public final static native void map_subscriptionserviceinfo2_removeUnchecked(long jarg1, map_subscriptionserviceinfo2 jarg1_, long jarg2, map_subscriptionserviceinfo2.Iterator jarg2_);
  public final static native void delete_map_subscriptionserviceinfo2(long jarg1);
  public final static native long new_map_subscriptionclients__SWIG_0();
  public final static native long new_map_subscriptionclients__SWIG_1(long jarg1, map_subscriptionclients jarg1_);
  public final static native long map_subscriptionclients_Iterator_getNextUnchecked(long jarg1, map_subscriptionclients.Iterator jarg1_);
  public final static native boolean map_subscriptionclients_Iterator_isNot(long jarg1, map_subscriptionclients.Iterator jarg1_, long jarg2, map_subscriptionclients.Iterator jarg2_);
  public final static native long map_subscriptionclients_Iterator_getKey(long jarg1, map_subscriptionclients.Iterator jarg1_);
  public final static native long map_subscriptionclients_Iterator_getValue(long jarg1, map_subscriptionclients.Iterator jarg1_);
  public final static native void map_subscriptionclients_Iterator_setValue(long jarg1, map_subscriptionclients.Iterator jarg1_, long jarg2, WrappedServiceStub jarg2_);
  public final static native void delete_map_subscriptionclients_Iterator(long jarg1);
  public final static native boolean map_subscriptionclients_isEmpty(long jarg1, map_subscriptionclients jarg1_);
  public final static native void map_subscriptionclients_clear(long jarg1, map_subscriptionclients jarg1_);
  public final static native long map_subscriptionclients_find(long jarg1, map_subscriptionclients jarg1_, long jarg2, WrappedServiceSubscriptionClientID jarg2_);
  public final static native long map_subscriptionclients_begin(long jarg1, map_subscriptionclients jarg1_);
  public final static native long map_subscriptionclients_end(long jarg1, map_subscriptionclients jarg1_);
  public final static native int map_subscriptionclients_sizeImpl(long jarg1, map_subscriptionclients jarg1_);
  public final static native boolean map_subscriptionclients_containsImpl(long jarg1, map_subscriptionclients jarg1_, long jarg2, WrappedServiceSubscriptionClientID jarg2_);
  public final static native void map_subscriptionclients_putUnchecked(long jarg1, map_subscriptionclients jarg1_, long jarg2, WrappedServiceSubscriptionClientID jarg2_, long jarg3, WrappedServiceStub jarg3_);
  public final static native void map_subscriptionclients_removeUnchecked(long jarg1, map_subscriptionclients jarg1_, long jarg2, map_subscriptionclients.Iterator jarg2_);
  public final static native void delete_map_subscriptionclients(long jarg1);
  public final static native long new_vectorptr_wrappedservicesubscriptionnode__SWIG_0();
  public final static native long new_vectorptr_wrappedservicesubscriptionnode__SWIG_1(long jarg1, vectorptr_wrappedservicesubscriptionnode jarg1_);
  public final static native long vectorptr_wrappedservicesubscriptionnode_capacity(long jarg1, vectorptr_wrappedservicesubscriptionnode jarg1_);
  public final static native void vectorptr_wrappedservicesubscriptionnode_reserve(long jarg1, vectorptr_wrappedservicesubscriptionnode jarg1_, long jarg2);
  public final static native boolean vectorptr_wrappedservicesubscriptionnode_isEmpty(long jarg1, vectorptr_wrappedservicesubscriptionnode jarg1_);
  public final static native void vectorptr_wrappedservicesubscriptionnode_clear(long jarg1, vectorptr_wrappedservicesubscriptionnode jarg1_);
  public final static native long new_vectorptr_wrappedservicesubscriptionnode__SWIG_2(int jarg1, long jarg2, WrappedServiceSubscriptionFilterNode jarg2_);
  public final static native int vectorptr_wrappedservicesubscriptionnode_doSize(long jarg1, vectorptr_wrappedservicesubscriptionnode jarg1_);
  public final static native void vectorptr_wrappedservicesubscriptionnode_doAdd__SWIG_0(long jarg1, vectorptr_wrappedservicesubscriptionnode jarg1_, long jarg2, WrappedServiceSubscriptionFilterNode jarg2_);
  public final static native void vectorptr_wrappedservicesubscriptionnode_doAdd__SWIG_1(long jarg1, vectorptr_wrappedservicesubscriptionnode jarg1_, int jarg2, long jarg3, WrappedServiceSubscriptionFilterNode jarg3_);
  public final static native long vectorptr_wrappedservicesubscriptionnode_doRemove(long jarg1, vectorptr_wrappedservicesubscriptionnode jarg1_, int jarg2);
  public final static native long vectorptr_wrappedservicesubscriptionnode_doGet(long jarg1, vectorptr_wrappedservicesubscriptionnode jarg1_, int jarg2);
  public final static native long vectorptr_wrappedservicesubscriptionnode_doSet(long jarg1, vectorptr_wrappedservicesubscriptionnode jarg1_, int jarg2, long jarg3, WrappedServiceSubscriptionFilterNode jarg3_);
  public final static native void vectorptr_wrappedservicesubscriptionnode_doRemoveRange(long jarg1, vectorptr_wrappedservicesubscriptionnode jarg1_, int jarg2, int jarg3);
  public final static native void delete_vectorptr_wrappedservicesubscriptionnode(long jarg1);
  public final static native long new_vectorptr_subscriptionclientid__SWIG_0();
  public final static native long new_vectorptr_subscriptionclientid__SWIG_1(long jarg1, vectorptr_subscriptionclientid jarg1_);
  public final static native long vectorptr_subscriptionclientid_capacity(long jarg1, vectorptr_subscriptionclientid jarg1_);
  public final static native void vectorptr_subscriptionclientid_reserve(long jarg1, vectorptr_subscriptionclientid jarg1_, long jarg2);
  public final static native boolean vectorptr_subscriptionclientid_isEmpty(long jarg1, vectorptr_subscriptionclientid jarg1_);
  public final static native void vectorptr_subscriptionclientid_clear(long jarg1, vectorptr_subscriptionclientid jarg1_);
  public final static native long new_vectorptr_subscriptionclientid__SWIG_2(int jarg1, long jarg2, WrappedServiceSubscriptionClientID jarg2_);
  public final static native int vectorptr_subscriptionclientid_doSize(long jarg1, vectorptr_subscriptionclientid jarg1_);
  public final static native void vectorptr_subscriptionclientid_doAdd__SWIG_0(long jarg1, vectorptr_subscriptionclientid jarg1_, long jarg2, WrappedServiceSubscriptionClientID jarg2_);
  public final static native void vectorptr_subscriptionclientid_doAdd__SWIG_1(long jarg1, vectorptr_subscriptionclientid jarg1_, int jarg2, long jarg3, WrappedServiceSubscriptionClientID jarg3_);
  public final static native long vectorptr_subscriptionclientid_doRemove(long jarg1, vectorptr_subscriptionclientid jarg1_, int jarg2);
  public final static native long vectorptr_subscriptionclientid_doGet(long jarg1, vectorptr_subscriptionclientid jarg1_, int jarg2);
  public final static native long vectorptr_subscriptionclientid_doSet(long jarg1, vectorptr_subscriptionclientid jarg1_, int jarg2, long jarg3, WrappedServiceSubscriptionClientID jarg3_);
  public final static native void vectorptr_subscriptionclientid_doRemoveRange(long jarg1, vectorptr_subscriptionclientid jarg1_, int jarg2, int jarg3);
  public final static native void delete_vectorptr_subscriptionclientid(long jarg1);
  public final static native void ServiceSubscriptionFilterAttribute_Name_set(long jarg1, ServiceSubscriptionFilterAttribute jarg1_, String jarg2);
  public final static native String ServiceSubscriptionFilterAttribute_Name_get(long jarg1, ServiceSubscriptionFilterAttribute jarg1_);
  public final static native void ServiceSubscriptionFilterAttribute_Value_set(long jarg1, ServiceSubscriptionFilterAttribute jarg1_, String jarg2);
  public final static native String ServiceSubscriptionFilterAttribute_Value_get(long jarg1, ServiceSubscriptionFilterAttribute jarg1_);
  public final static native void ServiceSubscriptionFilterAttribute_UseRegex_set(long jarg1, ServiceSubscriptionFilterAttribute jarg1_, boolean jarg2);
  public final static native boolean ServiceSubscriptionFilterAttribute_UseRegex_get(long jarg1, ServiceSubscriptionFilterAttribute jarg1_);
  public final static native long new_ServiceSubscriptionFilterAttribute__SWIG_0(String jarg1);
  public final static native long new_ServiceSubscriptionFilterAttribute__SWIG_1(String jarg1, String jarg2);
  public final static native boolean ServiceSubscriptionFilterAttribute_isMatch__SWIG_0(long jarg1, ServiceSubscriptionFilterAttribute jarg1_, String jarg2);
  public final static native boolean ServiceSubscriptionFilterAttribute_isMatch__SWIG_1(long jarg1, ServiceSubscriptionFilterAttribute jarg1_, String jarg2, String jarg3);
  public final static native boolean ServiceSubscriptionFilterAttribute_isMatch__SWIG_2(long jarg1, ServiceSubscriptionFilterAttribute jarg1_, long jarg2, vectorstring jarg2_);
  public final static native boolean ServiceSubscriptionFilterAttribute_isMatch__SWIG_3(long jarg1, ServiceSubscriptionFilterAttribute jarg1_, long jarg2, map_strstr jarg2_);
  public final static native void delete_ServiceSubscriptionFilterAttribute(long jarg1);
  public final static native long createServiceSubscriptionFilterAttributeRegex__SWIG_0(String jarg1);
  public final static native long createServiceSubscriptionFilterAttributeRegex__SWIG_1(String jarg1, String jarg2);
  public final static native long new_vector_subscriptionattribute__SWIG_0();
  public final static native long new_vector_subscriptionattribute__SWIG_1(long jarg1, vector_subscriptionattribute jarg1_);
  public final static native long vector_subscriptionattribute_capacity(long jarg1, vector_subscriptionattribute jarg1_);
  public final static native void vector_subscriptionattribute_reserve(long jarg1, vector_subscriptionattribute jarg1_, long jarg2);
  public final static native boolean vector_subscriptionattribute_isEmpty(long jarg1, vector_subscriptionattribute jarg1_);
  public final static native void vector_subscriptionattribute_clear(long jarg1, vector_subscriptionattribute jarg1_);
  public final static native long new_vector_subscriptionattribute__SWIG_2(int jarg1, long jarg2, ServiceSubscriptionFilterAttribute jarg2_);
  public final static native int vector_subscriptionattribute_doSize(long jarg1, vector_subscriptionattribute jarg1_);
  public final static native void vector_subscriptionattribute_doAdd__SWIG_0(long jarg1, vector_subscriptionattribute jarg1_, long jarg2, ServiceSubscriptionFilterAttribute jarg2_);
  public final static native void vector_subscriptionattribute_doAdd__SWIG_1(long jarg1, vector_subscriptionattribute jarg1_, int jarg2, long jarg3, ServiceSubscriptionFilterAttribute jarg3_);
  public final static native long vector_subscriptionattribute_doRemove(long jarg1, vector_subscriptionattribute jarg1_, int jarg2);
  public final static native long vector_subscriptionattribute_doGet(long jarg1, vector_subscriptionattribute jarg1_, int jarg2);
  public final static native long vector_subscriptionattribute_doSet(long jarg1, vector_subscriptionattribute jarg1_, int jarg2, long jarg3, ServiceSubscriptionFilterAttribute jarg3_);
  public final static native void vector_subscriptionattribute_doRemoveRange(long jarg1, vector_subscriptionattribute jarg1_, int jarg2, int jarg3);
  public final static native void delete_vector_subscriptionattribute(long jarg1);
  public final static native long new_map_subscriptionattribute__SWIG_0();
  public final static native long new_map_subscriptionattribute__SWIG_1(long jarg1, map_subscriptionattribute jarg1_);
  public final static native long map_subscriptionattribute_Iterator_getNextUnchecked(long jarg1, map_subscriptionattribute.Iterator jarg1_);
  public final static native boolean map_subscriptionattribute_Iterator_isNot(long jarg1, map_subscriptionattribute.Iterator jarg1_, long jarg2, map_subscriptionattribute.Iterator jarg2_);
  public final static native String map_subscriptionattribute_Iterator_getKey(long jarg1, map_subscriptionattribute.Iterator jarg1_);
  public final static native long map_subscriptionattribute_Iterator_getValue(long jarg1, map_subscriptionattribute.Iterator jarg1_);
  public final static native void map_subscriptionattribute_Iterator_setValue(long jarg1, map_subscriptionattribute.Iterator jarg1_, long jarg2, ServiceSubscriptionFilterAttribute jarg2_);
  public final static native void delete_map_subscriptionattribute_Iterator(long jarg1);
  public final static native boolean map_subscriptionattribute_isEmpty(long jarg1, map_subscriptionattribute jarg1_);
  public final static native void map_subscriptionattribute_clear(long jarg1, map_subscriptionattribute jarg1_);
  public final static native long map_subscriptionattribute_find(long jarg1, map_subscriptionattribute jarg1_, String jarg2);
  public final static native long map_subscriptionattribute_begin(long jarg1, map_subscriptionattribute jarg1_);
  public final static native long map_subscriptionattribute_end(long jarg1, map_subscriptionattribute jarg1_);
  public final static native int map_subscriptionattribute_sizeImpl(long jarg1, map_subscriptionattribute jarg1_);
  public final static native boolean map_subscriptionattribute_containsImpl(long jarg1, map_subscriptionattribute jarg1_, String jarg2);
  public final static native void map_subscriptionattribute_putUnchecked(long jarg1, map_subscriptionattribute jarg1_, String jarg2, long jarg3, ServiceSubscriptionFilterAttribute jarg3_);
  public final static native void map_subscriptionattribute_removeUnchecked(long jarg1, map_subscriptionattribute jarg1_, long jarg2, map_subscriptionattribute.Iterator jarg2_);
  public final static native void delete_map_subscriptionattribute(long jarg1);
  public final static native void ServiceSubscriptionFilterAttributeGroup_Attributes_set(long jarg1, ServiceSubscriptionFilterAttributeGroup jarg1_, long jarg2, vector_subscriptionattribute jarg2_);
  public final static native long ServiceSubscriptionFilterAttributeGroup_Attributes_get(long jarg1, ServiceSubscriptionFilterAttributeGroup jarg1_);
  public final static native void ServiceSubscriptionFilterAttributeGroup_Groups_set(long jarg1, ServiceSubscriptionFilterAttributeGroup jarg1_, long jarg2);
  public final static native long ServiceSubscriptionFilterAttributeGroup_Groups_get(long jarg1, ServiceSubscriptionFilterAttributeGroup jarg1_);
  public final static native void ServiceSubscriptionFilterAttributeGroup_Operation_set(long jarg1, ServiceSubscriptionFilterAttributeGroup jarg1_, int jarg2);
  public final static native int ServiceSubscriptionFilterAttributeGroup_Operation_get(long jarg1, ServiceSubscriptionFilterAttributeGroup jarg1_);
  public final static native void ServiceSubscriptionFilterAttributeGroup_SplitStringAttribute_set(long jarg1, ServiceSubscriptionFilterAttributeGroup jarg1_, boolean jarg2);
  public final static native boolean ServiceSubscriptionFilterAttributeGroup_SplitStringAttribute_get(long jarg1, ServiceSubscriptionFilterAttributeGroup jarg1_);
  public final static native void ServiceSubscriptionFilterAttributeGroup_SplitStringDelimiter_set(long jarg1, ServiceSubscriptionFilterAttributeGroup jarg1_, char jarg2);
  public final static native char ServiceSubscriptionFilterAttributeGroup_SplitStringDelimiter_get(long jarg1, ServiceSubscriptionFilterAttributeGroup jarg1_);
  public final static native long new_ServiceSubscriptionFilterAttributeGroup__SWIG_0();
  public final static native long new_ServiceSubscriptionFilterAttributeGroup__SWIG_1(int jarg1);
  public final static native long new_ServiceSubscriptionFilterAttributeGroup__SWIG_2(int jarg1, long jarg2, vector_subscriptionattribute jarg2_);
  public final static native long new_ServiceSubscriptionFilterAttributeGroup__SWIG_3(int jarg1, long jarg2);
  public final static native boolean ServiceSubscriptionFilterAttributeGroup_isMatch__SWIG_0(long jarg1, ServiceSubscriptionFilterAttributeGroup jarg1_, String jarg2);
  public final static native boolean ServiceSubscriptionFilterAttributeGroup_isMatch__SWIG_1(long jarg1, ServiceSubscriptionFilterAttributeGroup jarg1_, long jarg2, vectorstring jarg2_);
  public final static native boolean ServiceSubscriptionFilterAttributeGroup_isMatch__SWIG_2(long jarg1, ServiceSubscriptionFilterAttributeGroup jarg1_, long jarg2, map_strstr jarg2_);
  public final static native void delete_ServiceSubscriptionFilterAttributeGroup(long jarg1);
  public final static native long new_map_subscriptionattributegroup__SWIG_0();
  public final static native long new_map_subscriptionattributegroup__SWIG_1(long jarg1, map_subscriptionattributegroup jarg1_);
  public final static native long map_subscriptionattributegroup_Iterator_getNextUnchecked(long jarg1, map_subscriptionattributegroup.Iterator jarg1_);
  public final static native boolean map_subscriptionattributegroup_Iterator_isNot(long jarg1, map_subscriptionattributegroup.Iterator jarg1_, long jarg2, map_subscriptionattributegroup.Iterator jarg2_);
  public final static native String map_subscriptionattributegroup_Iterator_getKey(long jarg1, map_subscriptionattributegroup.Iterator jarg1_);
  public final static native long map_subscriptionattributegroup_Iterator_getValue(long jarg1, map_subscriptionattributegroup.Iterator jarg1_);
  public final static native void map_subscriptionattributegroup_Iterator_setValue(long jarg1, map_subscriptionattributegroup.Iterator jarg1_, long jarg2, ServiceSubscriptionFilterAttributeGroup jarg2_);
  public final static native void delete_map_subscriptionattributegroup_Iterator(long jarg1);
  public final static native boolean map_subscriptionattributegroup_isEmpty(long jarg1, map_subscriptionattributegroup jarg1_);
  public final static native void map_subscriptionattributegroup_clear(long jarg1, map_subscriptionattributegroup jarg1_);
  public final static native long map_subscriptionattributegroup_find(long jarg1, map_subscriptionattributegroup jarg1_, String jarg2);
  public final static native long map_subscriptionattributegroup_begin(long jarg1, map_subscriptionattributegroup jarg1_);
  public final static native long map_subscriptionattributegroup_end(long jarg1, map_subscriptionattributegroup jarg1_);
  public final static native int map_subscriptionattributegroup_sizeImpl(long jarg1, map_subscriptionattributegroup jarg1_);
  public final static native boolean map_subscriptionattributegroup_containsImpl(long jarg1, map_subscriptionattributegroup jarg1_, String jarg2);
  public final static native void map_subscriptionattributegroup_putUnchecked(long jarg1, map_subscriptionattributegroup jarg1_, String jarg2, long jarg3, ServiceSubscriptionFilterAttributeGroup jarg3_);
  public final static native void map_subscriptionattributegroup_removeUnchecked(long jarg1, map_subscriptionattributegroup jarg1_, long jarg2, map_subscriptionattributegroup.Iterator jarg2_);
  public final static native void delete_map_subscriptionattributegroup(long jarg1);
  public final static native boolean WrappedServiceSubscriptionFilterPredicateDirector_predicate(long jarg1, WrappedServiceSubscriptionFilterPredicateDirector jarg1_, long jarg2, ServiceInfo2Wrapped jarg2_);
  public final static native void delete_WrappedServiceSubscriptionFilterPredicateDirector(long jarg1);
  public final static native long new_WrappedServiceSubscriptionFilterPredicateDirector();
  public final static native void WrappedServiceSubscriptionFilterPredicateDirector_director_connect(WrappedServiceSubscriptionFilterPredicateDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void WrappedServiceSubscriptionFilterPredicateDirector_change_ownership(WrappedServiceSubscriptionFilterPredicateDirector obj, long cptr, boolean take_or_release);
  public final static native void WrappedServiceSubscriptionFilterNode_NodeID_set(long jarg1, WrappedServiceSubscriptionFilterNode jarg1_, long jarg2, NodeID jarg2_);
  public final static native long WrappedServiceSubscriptionFilterNode_NodeID_get(long jarg1, WrappedServiceSubscriptionFilterNode jarg1_);
  public final static native void WrappedServiceSubscriptionFilterNode_NodeName_set(long jarg1, WrappedServiceSubscriptionFilterNode jarg1_, String jarg2);
  public final static native String WrappedServiceSubscriptionFilterNode_NodeName_get(long jarg1, WrappedServiceSubscriptionFilterNode jarg1_);
  public final static native void WrappedServiceSubscriptionFilterNode_Username_set(long jarg1, WrappedServiceSubscriptionFilterNode jarg1_, String jarg2);
  public final static native String WrappedServiceSubscriptionFilterNode_Username_get(long jarg1, WrappedServiceSubscriptionFilterNode jarg1_);
  public final static native void WrappedServiceSubscriptionFilterNode_Credentials_set(long jarg1, WrappedServiceSubscriptionFilterNode jarg1_, long jarg2, MessageElementData jarg2_);
  public final static native long WrappedServiceSubscriptionFilterNode_Credentials_get(long jarg1, WrappedServiceSubscriptionFilterNode jarg1_);
  public final static native long new_WrappedServiceSubscriptionFilterNode();
  public final static native void delete_WrappedServiceSubscriptionFilterNode(long jarg1);
  public final static native void WrappedServiceSubscriptionFilter_Nodes_set(long jarg1, WrappedServiceSubscriptionFilter jarg1_, long jarg2, vectorptr_wrappedservicesubscriptionnode jarg2_);
  public final static native long WrappedServiceSubscriptionFilter_Nodes_get(long jarg1, WrappedServiceSubscriptionFilter jarg1_);
  public final static native void WrappedServiceSubscriptionFilter_ServiceNames_set(long jarg1, WrappedServiceSubscriptionFilter jarg1_, long jarg2, vectorstring jarg2_);
  public final static native long WrappedServiceSubscriptionFilter_ServiceNames_get(long jarg1, WrappedServiceSubscriptionFilter jarg1_);
  public final static native void WrappedServiceSubscriptionFilter_TransportSchemes_set(long jarg1, WrappedServiceSubscriptionFilter jarg1_, long jarg2, vectorstring jarg2_);
  public final static native long WrappedServiceSubscriptionFilter_TransportSchemes_get(long jarg1, WrappedServiceSubscriptionFilter jarg1_);
  public final static native void WrappedServiceSubscriptionFilter_Attributes_set(long jarg1, WrappedServiceSubscriptionFilter jarg1_, long jarg2, map_subscriptionattributegroup jarg2_);
  public final static native long WrappedServiceSubscriptionFilter_Attributes_get(long jarg1, WrappedServiceSubscriptionFilter jarg1_);
  public final static native void WrappedServiceSubscriptionFilter_AttributesMatchOperation_set(long jarg1, WrappedServiceSubscriptionFilter jarg1_, int jarg2);
  public final static native int WrappedServiceSubscriptionFilter_AttributesMatchOperation_get(long jarg1, WrappedServiceSubscriptionFilter jarg1_);
  public final static native void WrappedServiceSubscriptionFilter_setRRPredicateDirector(long jarg1, WrappedServiceSubscriptionFilter jarg1_, long jarg2, WrappedServiceSubscriptionFilterPredicateDirector jarg2_, int jarg3);
  public final static native void WrappedServiceSubscriptionFilter_MaxConnections_set(long jarg1, WrappedServiceSubscriptionFilter jarg1_, long jarg2);
  public final static native long WrappedServiceSubscriptionFilter_MaxConnections_get(long jarg1, WrappedServiceSubscriptionFilter jarg1_);
  public final static native long new_WrappedServiceSubscriptionFilter();
  public final static native void delete_WrappedServiceSubscriptionFilter(long jarg1);
  public final static native void WrappedServiceSubscriptionClientID_NodeID_set(long jarg1, WrappedServiceSubscriptionClientID jarg1_, long jarg2, NodeID jarg2_);
  public final static native long WrappedServiceSubscriptionClientID_NodeID_get(long jarg1, WrappedServiceSubscriptionClientID jarg1_);
  public final static native void WrappedServiceSubscriptionClientID_ServiceName_set(long jarg1, WrappedServiceSubscriptionClientID jarg1_, String jarg2);
  public final static native String WrappedServiceSubscriptionClientID_ServiceName_get(long jarg1, WrappedServiceSubscriptionClientID jarg1_);
  public final static native boolean WrappedServiceSubscriptionClientID_eq(long jarg1, WrappedServiceSubscriptionClientID jarg1_, long jarg2, WrappedServiceSubscriptionClientID jarg2_);
  public final static native boolean WrappedServiceSubscriptionClientID_ne(long jarg1, WrappedServiceSubscriptionClientID jarg1_, long jarg2, WrappedServiceSubscriptionClientID jarg2_);
  public final static native void delete_WrappedServiceSubscriptionClientID(long jarg1);
  public final static native void WrappedServiceInfo2SubscriptionDirector_serviceDetected(long jarg1, WrappedServiceInfo2SubscriptionDirector jarg1_, long jarg2, WrappedServiceInfo2Subscription jarg2_, long jarg3, WrappedServiceSubscriptionClientID jarg3_, long jarg4, ServiceInfo2Wrapped jarg4_);
  public final static native void WrappedServiceInfo2SubscriptionDirector_serviceLost(long jarg1, WrappedServiceInfo2SubscriptionDirector jarg1_, long jarg2, WrappedServiceInfo2Subscription jarg2_, long jarg3, WrappedServiceSubscriptionClientID jarg3_, long jarg4, ServiceInfo2Wrapped jarg4_);
  public final static native void delete_WrappedServiceInfo2SubscriptionDirector(long jarg1);
  public final static native long new_WrappedServiceInfo2SubscriptionDirector();
  public final static native void WrappedServiceInfo2SubscriptionDirector_director_connect(WrappedServiceInfo2SubscriptionDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void WrappedServiceInfo2SubscriptionDirector_change_ownership(WrappedServiceInfo2SubscriptionDirector obj, long cptr, boolean take_or_release);
  public final static native long WrappedServiceInfo2Subscription_getDetectedServiceInfo2(long jarg1, WrappedServiceInfo2Subscription jarg1_);
  public final static native void WrappedServiceInfo2Subscription_close(long jarg1, WrappedServiceInfo2Subscription jarg1_);
  public final static native void WrappedServiceInfo2Subscription_setRRDirector(long jarg1, WrappedServiceInfo2Subscription jarg1_, long jarg2, WrappedServiceInfo2SubscriptionDirector jarg2_, int jarg3);
  public final static native long WrappedServiceInfo2Subscription_getNode(long jarg1, WrappedServiceInfo2Subscription jarg1_);
  public final static native void delete_WrappedServiceInfo2Subscription(long jarg1);
  public final static native void WrappedServiceSubscriptionDirector_clientConnected(long jarg1, WrappedServiceSubscriptionDirector jarg1_, long jarg2, WrappedServiceSubscription jarg2_, long jarg3, WrappedServiceSubscriptionClientID jarg3_, long jarg4, WrappedServiceStub jarg4_);
  public final static native void WrappedServiceSubscriptionDirector_clientDisconnected(long jarg1, WrappedServiceSubscriptionDirector jarg1_, long jarg2, WrappedServiceSubscription jarg2_, long jarg3, WrappedServiceSubscriptionClientID jarg3_, long jarg4, WrappedServiceStub jarg4_);
  public final static native void WrappedServiceSubscriptionDirector_clientConnectFailed(long jarg1, WrappedServiceSubscriptionDirector jarg1_, long jarg2, WrappedServiceSubscription jarg2_, long jarg3, WrappedServiceSubscriptionClientID jarg3_, long jarg4, vectorstring jarg4_, long jarg5, HandlerErrorInfo jarg5_);
  public final static native void delete_WrappedServiceSubscriptionDirector(long jarg1);
  public final static native long new_WrappedServiceSubscriptionDirector();
  public final static native void WrappedServiceSubscriptionDirector_director_connect(WrappedServiceSubscriptionDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void WrappedServiceSubscriptionDirector_change_ownership(WrappedServiceSubscriptionDirector obj, long cptr, boolean take_or_release);
  public final static native void WrappedServiceSubscription_TryDefaultClientRes_res_set(long jarg1, WrappedServiceSubscription_TryDefaultClientRes jarg1_, boolean jarg2);
  public final static native boolean WrappedServiceSubscription_TryDefaultClientRes_res_get(long jarg1, WrappedServiceSubscription_TryDefaultClientRes jarg1_);
  public final static native void WrappedServiceSubscription_TryDefaultClientRes_client_set(long jarg1, WrappedServiceSubscription_TryDefaultClientRes jarg1_, long jarg2, WrappedServiceStub jarg2_);
  public final static native long WrappedServiceSubscription_TryDefaultClientRes_client_get(long jarg1, WrappedServiceSubscription_TryDefaultClientRes jarg1_);
  public final static native long new_WrappedServiceSubscription_TryDefaultClientRes();
  public final static native void delete_WrappedServiceSubscription_TryDefaultClientRes(long jarg1);
  public final static native long WrappedServiceSubscription_getConnectedClients(long jarg1, WrappedServiceSubscription jarg1_);
  public final static native void WrappedServiceSubscription_close(long jarg1, WrappedServiceSubscription jarg1_);
  public final static native void WrappedServiceSubscription_claimClient(long jarg1, WrappedServiceSubscription jarg1_, long jarg2, WrappedServiceStub jarg2_);
  public final static native void WrappedServiceSubscription_releaseClient(long jarg1, WrappedServiceSubscription jarg1_, long jarg2, WrappedServiceStub jarg2_);
  public final static native long WrappedServiceSubscription_getConnectRetryDelay(long jarg1, WrappedServiceSubscription jarg1_);
  public final static native void WrappedServiceSubscription_setConnectRetryDelay(long jarg1, WrappedServiceSubscription jarg1_, long jarg2);
  public final static native long WrappedServiceSubscription_subscribeWire(long jarg1, WrappedServiceSubscription jarg1_, String jarg2, String jarg3);
  public final static native long WrappedServiceSubscription_subscribePipe__SWIG_0(long jarg1, WrappedServiceSubscription jarg1_, String jarg2, String jarg3, int jarg4);
  public final static native long WrappedServiceSubscription_subscribePipe__SWIG_1(long jarg1, WrappedServiceSubscription jarg1_, String jarg2, String jarg3);
  public final static native long WrappedServiceSubscription_getDefaultClient(long jarg1, WrappedServiceSubscription jarg1_);
  public final static native long WrappedServiceSubscription_tryGetDefaultClient(long jarg1, WrappedServiceSubscription jarg1_);
  public final static native long WrappedServiceSubscription_getDefaultClientWait__SWIG_0(long jarg1, WrappedServiceSubscription jarg1_, int jarg2);
  public final static native long WrappedServiceSubscription_getDefaultClientWait__SWIG_1(long jarg1, WrappedServiceSubscription jarg1_);
  public final static native long WrappedServiceSubscription_tryGetDefaultClientWait__SWIG_0(long jarg1, WrappedServiceSubscription jarg1_, int jarg2);
  public final static native long WrappedServiceSubscription_tryGetDefaultClientWait__SWIG_1(long jarg1, WrappedServiceSubscription jarg1_);
  public final static native void WrappedServiceSubscription_asyncGetDefaultClient(long jarg1, WrappedServiceSubscription jarg1_, int jarg2, long jarg3, AsyncStubReturnDirector jarg3_, int jarg4);
  public final static native void WrappedServiceSubscription_setRRDirector(long jarg1, WrappedServiceSubscription jarg1_, long jarg2, WrappedServiceSubscriptionDirector jarg2_, int jarg3);
  public final static native long WrappedServiceSubscription_getNode(long jarg1, WrappedServiceSubscription jarg1_);
  public final static native long WrappedServiceSubscription_getServiceURL(long jarg1, WrappedServiceSubscription jarg1_);
  public final static native void WrappedServiceSubscription_updateServiceURL__SWIG_0(long jarg1, WrappedServiceSubscription jarg1_, long jarg2, vectorstring jarg2_, String jarg3, long jarg4, MessageElementData jarg4_, String jarg5, boolean jarg6);
  public final static native void WrappedServiceSubscription_updateServiceURL__SWIG_1(long jarg1, WrappedServiceSubscription jarg1_, long jarg2, vectorstring jarg2_, String jarg3, long jarg4, MessageElementData jarg4_, String jarg5);
  public final static native void WrappedServiceSubscription_updateServiceURL__SWIG_2(long jarg1, WrappedServiceSubscription jarg1_, long jarg2, vectorstring jarg2_, String jarg3, long jarg4, MessageElementData jarg4_);
  public final static native void WrappedServiceSubscription_updateServiceURL__SWIG_3(long jarg1, WrappedServiceSubscription jarg1_, long jarg2, vectorstring jarg2_, String jarg3);
  public final static native void WrappedServiceSubscription_updateServiceURL__SWIG_4(long jarg1, WrappedServiceSubscription jarg1_, long jarg2, vectorstring jarg2_);
  public final static native void WrappedServiceSubscription_updateServiceURL__SWIG_5(long jarg1, WrappedServiceSubscription jarg1_, String jarg2, String jarg3, long jarg4, MessageElementData jarg4_, String jarg5, boolean jarg6);
  public final static native void WrappedServiceSubscription_updateServiceURL__SWIG_6(long jarg1, WrappedServiceSubscription jarg1_, String jarg2, String jarg3, long jarg4, MessageElementData jarg4_, String jarg5);
  public final static native void WrappedServiceSubscription_updateServiceURL__SWIG_7(long jarg1, WrappedServiceSubscription jarg1_, String jarg2, String jarg3, long jarg4, MessageElementData jarg4_);
  public final static native void WrappedServiceSubscription_updateServiceURL__SWIG_8(long jarg1, WrappedServiceSubscription jarg1_, String jarg2, String jarg3);
  public final static native void WrappedServiceSubscription_updateServiceURL__SWIG_9(long jarg1, WrappedServiceSubscription jarg1_, String jarg2);
  public final static native void WrappedServiceSubscription_updateServiceByType__SWIG_0(long jarg1, WrappedServiceSubscription jarg1_, long jarg2, vectorstring jarg2_, long jarg3, WrappedServiceSubscriptionFilter jarg3_);
  public final static native void WrappedServiceSubscription_updateServiceByType__SWIG_1(long jarg1, WrappedServiceSubscription jarg1_, long jarg2, vectorstring jarg2_);
  public final static native void delete_WrappedServiceSubscription(long jarg1);
  public final static native void WrappedWireSubscriptionDirector_wireValueChanged(long jarg1, WrappedWireSubscriptionDirector jarg1_, long jarg2, WrappedWireSubscription jarg2_, long jarg3, WrappedService_typed_packet jarg3_, long jarg4, TimeSpec jarg4_);
  public final static native void delete_WrappedWireSubscriptionDirector(long jarg1);
  public final static native long new_WrappedWireSubscriptionDirector();
  public final static native void WrappedWireSubscriptionDirector_director_connect(WrappedWireSubscriptionDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void WrappedWireSubscriptionDirector_change_ownership(WrappedWireSubscriptionDirector obj, long cptr, boolean take_or_release);
  public final static native long WrappedWireSubscription_getInValue__SWIG_0(long jarg1, WrappedWireSubscription jarg1_, long jarg2, TimeSpec jarg2_);
  public final static native long WrappedWireSubscription_getInValue__SWIG_1(long jarg1, WrappedWireSubscription jarg1_);
  public final static native boolean WrappedWireSubscription_tryGetInValue__SWIG_0(long jarg1, WrappedWireSubscription jarg1_, long jarg2, WrappedService_typed_packet jarg2_, long jarg3, TimeSpec jarg3_);
  public final static native boolean WrappedWireSubscription_tryGetInValue__SWIG_1(long jarg1, WrappedWireSubscription jarg1_, long jarg2, WrappedService_typed_packet jarg2_);
  public final static native boolean WrappedWireSubscription_waitInValueValid__SWIG_0(long jarg1, WrappedWireSubscription jarg1_, int jarg2);
  public final static native boolean WrappedWireSubscription_waitInValueValid__SWIG_1(long jarg1, WrappedWireSubscription jarg1_);
  public final static native boolean WrappedWireSubscription_getIgnoreInValue(long jarg1, WrappedWireSubscription jarg1_);
  public final static native void WrappedWireSubscription_setIgnoreInValue(long jarg1, WrappedWireSubscription jarg1_, boolean jarg2);
  public final static native int WrappedWireSubscription_getInValueLifespan(long jarg1, WrappedWireSubscription jarg1_);
  public final static native void WrappedWireSubscription_setInValueLifespan(long jarg1, WrappedWireSubscription jarg1_, int jarg2);
  public final static native long WrappedWireSubscription_getActiveWireConnectionCount(long jarg1, WrappedWireSubscription jarg1_);
  public final static native void WrappedWireSubscription_close(long jarg1, WrappedWireSubscription jarg1_);
  public final static native void WrappedWireSubscription_setRRDirector(long jarg1, WrappedWireSubscription jarg1_, long jarg2, WrappedWireSubscriptionDirector jarg2_, int jarg3);
  public final static native long WrappedWireSubscription_getNode(long jarg1, WrappedWireSubscription jarg1_);
  public final static native void delete_WrappedWireSubscription(long jarg1);
  public final static native long new_WrappedWireSubscription_send_iterator(long jarg1, WrappedWireSubscription jarg1_);
  public final static native long WrappedWireSubscription_send_iterator_next(long jarg1, WrappedWireSubscription_send_iterator jarg1_);
  public final static native void WrappedWireSubscription_send_iterator_setOutValue(long jarg1, WrappedWireSubscription_send_iterator jarg1_, long jarg2, MessageElement jarg2_);
  public final static native long WrappedWireSubscription_send_iterator_getType(long jarg1, WrappedWireSubscription_send_iterator jarg1_);
  public final static native long WrappedWireSubscription_send_iterator_getStub(long jarg1, WrappedWireSubscription_send_iterator jarg1_);
  public final static native void delete_WrappedWireSubscription_send_iterator(long jarg1);
  public final static native void WrappedPipeSubscriptionDirector_pipePacketReceived(long jarg1, WrappedPipeSubscriptionDirector jarg1_, long jarg2, WrappedPipeSubscription jarg2_);
  public final static native void delete_WrappedPipeSubscriptionDirector(long jarg1);
  public final static native long new_WrappedPipeSubscriptionDirector();
  public final static native void WrappedPipeSubscriptionDirector_director_connect(WrappedPipeSubscriptionDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void WrappedPipeSubscriptionDirector_change_ownership(WrappedPipeSubscriptionDirector obj, long cptr, boolean take_or_release);
  public final static native long WrappedPipeSubscription_receivePacket(long jarg1, WrappedPipeSubscription jarg1_);
  public final static native boolean WrappedPipeSubscription_tryReceivePacket(long jarg1, WrappedPipeSubscription jarg1_, long jarg2, WrappedService_typed_packet jarg2_);
  public final static native boolean WrappedPipeSubscription_tryReceivePacketWait__SWIG_0(long jarg1, WrappedPipeSubscription jarg1_, long jarg2, WrappedService_typed_packet jarg2_, int jarg3, boolean jarg4);
  public final static native boolean WrappedPipeSubscription_tryReceivePacketWait__SWIG_1(long jarg1, WrappedPipeSubscription jarg1_, long jarg2, WrappedService_typed_packet jarg2_, int jarg3);
  public final static native boolean WrappedPipeSubscription_tryReceivePacketWait__SWIG_2(long jarg1, WrappedPipeSubscription jarg1_, long jarg2, WrappedService_typed_packet jarg2_);
  public final static native long WrappedPipeSubscription_available(long jarg1, WrappedPipeSubscription jarg1_);
  public final static native long WrappedPipeSubscription_getActivePipeEndpointCount(long jarg1, WrappedPipeSubscription jarg1_);
  public final static native boolean WrappedPipeSubscription_getIgnoreReceived(long jarg1, WrappedPipeSubscription jarg1_);
  public final static native void WrappedPipeSubscription_setIgnoreReceived(long jarg1, WrappedPipeSubscription jarg1_, boolean jarg2);
  public final static native void WrappedPipeSubscription_close(long jarg1, WrappedPipeSubscription jarg1_);
  public final static native void WrappedPipeSubscription_setRRDirector(long jarg1, WrappedPipeSubscription jarg1_, long jarg2, WrappedPipeSubscriptionDirector jarg2_, int jarg3);
  public final static native long WrappedPipeSubscription_getNode(long jarg1, WrappedPipeSubscription jarg1_);
  public final static native void delete_WrappedPipeSubscription(long jarg1);
  public final static native long new_WrappedPipeSubscription_send_iterator(long jarg1, WrappedPipeSubscription jarg1_);
  public final static native long WrappedPipeSubscription_send_iterator_next(long jarg1, WrappedPipeSubscription_send_iterator jarg1_);
  public final static native void WrappedPipeSubscription_send_iterator_asyncSendPacket(long jarg1, WrappedPipeSubscription_send_iterator jarg1_, long jarg2, MessageElement jarg2_);
  public final static native long WrappedPipeSubscription_send_iterator_getType(long jarg1, WrappedPipeSubscription_send_iterator jarg1_);
  public final static native long WrappedPipeSubscription_send_iterator_getStub(long jarg1, WrappedPipeSubscription_send_iterator jarg1_);
  public final static native void delete_WrappedPipeSubscription_send_iterator(long jarg1);
  public final static native long wrappedServiceInfo2SubscriptionServicesToVector(long jarg1, map_subscriptionserviceinfo2 jarg1_);
  public final static native long wrappedSubscribeServiceInfo2__SWIG_0(long jarg1, RobotRaconteurNode jarg1_, long jarg2, vectorstring jarg2_, long jarg3, WrappedServiceSubscriptionFilter jarg3_);
  public final static native long wrappedSubscribeServiceInfo2__SWIG_1(long jarg1, RobotRaconteurNode jarg1_, long jarg2, vectorstring jarg2_);
  public final static native long wrappedServiceSubscriptionClientsToVector(long jarg1, map_subscriptionclients jarg1_);
  public final static native long wrappedSubscribeServiceByType__SWIG_0(long jarg1, RobotRaconteurNode jarg1_, long jarg2, vectorstring jarg2_, long jarg3, WrappedServiceSubscriptionFilter jarg3_);
  public final static native long wrappedSubscribeServiceByType__SWIG_1(long jarg1, RobotRaconteurNode jarg1_, long jarg2, vectorstring jarg2_);
  public final static native long wrappedSubscribeService__SWIG_0(long jarg1, RobotRaconteurNode jarg1_, long jarg2, vectorstring jarg2_, String jarg3, long jarg4, MessageElementData jarg4_, String jarg5);
  public final static native long wrappedSubscribeService__SWIG_1(long jarg1, RobotRaconteurNode jarg1_, long jarg2, vectorstring jarg2_, String jarg3, long jarg4, MessageElementData jarg4_);
  public final static native long wrappedSubscribeService__SWIG_2(long jarg1, RobotRaconteurNode jarg1_, long jarg2, vectorstring jarg2_, String jarg3);
  public final static native long wrappedSubscribeService__SWIG_3(long jarg1, RobotRaconteurNode jarg1_, long jarg2, vectorstring jarg2_);
  public final static native long wrappedSubscribeService__SWIG_4(long jarg1, RobotRaconteurNode jarg1_, String jarg2, String jarg3, long jarg4, MessageElementData jarg4_, String jarg5);
  public final static native long wrappedSubscribeService__SWIG_5(long jarg1, RobotRaconteurNode jarg1_, String jarg2, String jarg3, long jarg4, MessageElementData jarg4_);
  public final static native long wrappedSubscribeService__SWIG_6(long jarg1, RobotRaconteurNode jarg1_, String jarg2, String jarg3);
  public final static native long wrappedSubscribeService__SWIG_7(long jarg1, RobotRaconteurNode jarg1_, String jarg2);
  public final static native long RRLogRecord_getNode(long jarg1, RRLogRecord jarg1_);
  public final static native void RRLogRecord_setNode(long jarg1, RRLogRecord jarg1_, long jarg2, RobotRaconteurNode jarg2_);
  public final static native void RRLogRecord_Level_set(long jarg1, RRLogRecord jarg1_, int jarg2);
  public final static native int RRLogRecord_Level_get(long jarg1, RRLogRecord jarg1_);
  public final static native void RRLogRecord_Component_set(long jarg1, RRLogRecord jarg1_, int jarg2);
  public final static native int RRLogRecord_Component_get(long jarg1, RRLogRecord jarg1_);
  public final static native void RRLogRecord_ComponentName_set(long jarg1, RRLogRecord jarg1_, String jarg2);
  public final static native String RRLogRecord_ComponentName_get(long jarg1, RRLogRecord jarg1_);
  public final static native void RRLogRecord_ComponentObjectID_set(long jarg1, RRLogRecord jarg1_, String jarg2);
  public final static native String RRLogRecord_ComponentObjectID_get(long jarg1, RRLogRecord jarg1_);
  public final static native void RRLogRecord_Endpoint_set(long jarg1, RRLogRecord jarg1_, int jarg2);
  public final static native int RRLogRecord_Endpoint_get(long jarg1, RRLogRecord jarg1_);
  public final static native void RRLogRecord_ServicePath_set(long jarg1, RRLogRecord jarg1_, String jarg2);
  public final static native String RRLogRecord_ServicePath_get(long jarg1, RRLogRecord jarg1_);
  public final static native void RRLogRecord_Member_set(long jarg1, RRLogRecord jarg1_, String jarg2);
  public final static native String RRLogRecord_Member_get(long jarg1, RRLogRecord jarg1_);
  public final static native void RRLogRecord_Message_set(long jarg1, RRLogRecord jarg1_, String jarg2);
  public final static native String RRLogRecord_Message_get(long jarg1, RRLogRecord jarg1_);
  public final static native void RRLogRecord_Time_set(long jarg1, RRLogRecord jarg1_, long jarg2);
  public final static native long RRLogRecord_Time_get(long jarg1, RRLogRecord jarg1_);
  public final static native void RRLogRecord_SourceFile_set(long jarg1, RRLogRecord jarg1_, String jarg2);
  public final static native String RRLogRecord_SourceFile_get(long jarg1, RRLogRecord jarg1_);
  public final static native void RRLogRecord_SourceLine_set(long jarg1, RRLogRecord jarg1_, long jarg2);
  public final static native long RRLogRecord_SourceLine_get(long jarg1, RRLogRecord jarg1_);
  public final static native void RRLogRecord_ThreadID_set(long jarg1, RRLogRecord jarg1_, String jarg2);
  public final static native String RRLogRecord_ThreadID_get(long jarg1, RRLogRecord jarg1_);
  public final static native void RRLogRecord_FiberID_set(long jarg1, RRLogRecord jarg1_, String jarg2);
  public final static native String RRLogRecord_FiberID_get(long jarg1, RRLogRecord jarg1_);
  public final static native String RRLogRecord_toString(long jarg1, RRLogRecord jarg1_);
  public final static native long new_RRLogRecord();
  public final static native void delete_RRLogRecord(long jarg1);
  public final static native void delete_LogRecordHandler(long jarg1);
  public final static native void FileLogRecordHandler_openFile__SWIG_0(long jarg1, FileLogRecordHandler jarg1_, String jarg2, boolean jarg3);
  public final static native void FileLogRecordHandler_openFile__SWIG_1(long jarg1, FileLogRecordHandler jarg1_, String jarg2);
  public final static native long new_FileLogRecordHandler();
  public final static native void delete_FileLogRecordHandler(long jarg1);
  public final static native void UserLogRecordHandlerDirector_handleLogRecord(long jarg1, UserLogRecordHandlerDirector jarg1_, long jarg2, RRLogRecord jarg2_);
  public final static native void delete_UserLogRecordHandlerDirector(long jarg1);
  public final static native long new_UserLogRecordHandlerDirector();
  public final static native void UserLogRecordHandlerDirector_director_connect(UserLogRecordHandlerDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void UserLogRecordHandlerDirector_change_ownership(UserLogRecordHandlerDirector obj, long cptr, boolean take_or_release);
  public final static native void UserLogRecordHandlerBase__SetHandler(long jarg1, UserLogRecordHandlerBase jarg1_, long jarg2, UserLogRecordHandlerDirector jarg2_, int jarg3);
  public final static native long new_UserLogRecordHandlerBase();
  public final static native void delete_UserLogRecordHandlerBase(long jarg1);
  public final static native long new_CommandLineConfigParser__SWIG_0(long jarg1, String jarg2);
  public final static native long new_CommandLineConfigParser__SWIG_1(long jarg1);
  public final static native void CommandLineConfigParser_setDefaults(long jarg1, CommandLineConfigParser jarg1_, String jarg2, int jarg3, long jarg4);
  public final static native void CommandLineConfigParser_addStringOption(long jarg1, CommandLineConfigParser jarg1_, String jarg2, String jarg3);
  public final static native void CommandLineConfigParser_addBoolOption(long jarg1, CommandLineConfigParser jarg1_, String jarg2, String jarg3);
  public final static native void CommandLineConfigParser_addIntOption(long jarg1, CommandLineConfigParser jarg1_, String jarg2, String jarg3);
  public final static native void CommandLineConfigParser__ParseCommandLine(long jarg1, CommandLineConfigParser jarg1_, long jarg2, vectorstring jarg2_);
  public final static native String CommandLineConfigParser_getOptionOrDefaultAsString__SWIG_0(long jarg1, CommandLineConfigParser jarg1_, String jarg2);
  public final static native String CommandLineConfigParser_getOptionOrDefaultAsString__SWIG_1(long jarg1, CommandLineConfigParser jarg1_, String jarg2, String jarg3);
  public final static native boolean CommandLineConfigParser_getOptionOrDefaultAsBool__SWIG_0(long jarg1, CommandLineConfigParser jarg1_, String jarg2);
  public final static native boolean CommandLineConfigParser_getOptionOrDefaultAsBool__SWIG_1(long jarg1, CommandLineConfigParser jarg1_, String jarg2, boolean jarg3);
  public final static native int CommandLineConfigParser_getOptionOrDefaultAsInt__SWIG_0(long jarg1, CommandLineConfigParser jarg1_, String jarg2);
  public final static native int CommandLineConfigParser_getOptionOrDefaultAsInt__SWIG_1(long jarg1, CommandLineConfigParser jarg1_, String jarg2, int jarg3);
  public final static native void delete_CommandLineConfigParser(long jarg1);
  public final static native long WrappedRobotRaconteurNodeSetup_getLocalTransport(long jarg1, WrappedRobotRaconteurNodeSetup jarg1_);
  public final static native long WrappedRobotRaconteurNodeSetup_getIntraTransport(long jarg1, WrappedRobotRaconteurNodeSetup jarg1_);
  public final static native long WrappedRobotRaconteurNodeSetup_getTcpTransport(long jarg1, WrappedRobotRaconteurNodeSetup jarg1_);
  public final static native long WrappedRobotRaconteurNodeSetup_getHardwareTransport(long jarg1, WrappedRobotRaconteurNodeSetup jarg1_);
  public final static native long WrappedRobotRaconteurNodeSetup_getCommandLineConfig(long jarg1, WrappedRobotRaconteurNodeSetup jarg1_);
  public final static native void WrappedRobotRaconteurNodeSetup_releaseNode(long jarg1, WrappedRobotRaconteurNodeSetup jarg1_);
  public final static native void delete_WrappedRobotRaconteurNodeSetup(long jarg1);
  public final static native long new_WrappedRobotRaconteurNodeSetup__SWIG_0(long jarg1, RobotRaconteurNode jarg1_, String jarg2, int jarg3, long jarg4);
  public final static native long new_WrappedRobotRaconteurNodeSetup__SWIG_1(long jarg1, RobotRaconteurNode jarg1_, long jarg2, CommandLineConfigParser jarg2_);
  public final static native long new_WrappedRobotRaconteurNodeSetup__SWIG_2(long jarg1, RobotRaconteurNode jarg1_, String jarg2, int jarg3, long jarg4, long jarg5, long jarg6, vectorstring jarg6_);
  public final static native long new_BroadcastDownsampler();
  public final static native void BroadcastDownsampler__Init__SWIG_0(long jarg1, BroadcastDownsampler jarg1_, long jarg2, ServerContext jarg2_, long jarg3);
  public final static native void BroadcastDownsampler__Init__SWIG_1(long jarg1, BroadcastDownsampler jarg1_, long jarg2, ServerContext jarg2_);
  public final static native long BroadcastDownsampler_getClientDownsample(long jarg1, BroadcastDownsampler jarg1_, long jarg2);
  public final static native void BroadcastDownsampler_setClientDownsample(long jarg1, BroadcastDownsampler jarg1_, long jarg2, long jarg3);
  public final static native void BroadcastDownsampler_beginStep(long jarg1, BroadcastDownsampler jarg1_);
  public final static native void BroadcastDownsampler_endStep(long jarg1, BroadcastDownsampler jarg1_);
  public final static native void BroadcastDownsampler__AddPipeBroadcaster(long jarg1, BroadcastDownsampler jarg1_, long jarg2, WrappedPipeBroadcaster jarg2_);
  public final static native void BroadcastDownsampler__AddWireBroadcaster(long jarg1, BroadcastDownsampler jarg1_, long jarg2, WrappedWireBroadcaster jarg2_);
  public final static native void delete_BroadcastDownsampler(long jarg1);
  public final static native void RRMonitor_lock(long jarg1, RRMonitor jarg1_);
  public final static native boolean RRMonitor_tryLock(long jarg1, RRMonitor jarg1_, int jarg2);
  public final static native void RRMonitor_unlock(long jarg1, RRMonitor jarg1_);
  public final static native long new_RRMonitor();
  public final static native void delete_RRMonitor(long jarg1);
  public final static native void RRNativeObjectHeapSupport_set_Support(long jarg1, RRNativeObjectHeapSupport jarg1_);
  public final static native void RRNativeObjectHeapSupport_deleteObject_i(long jarg1, RRNativeObjectHeapSupport jarg1_, int jarg2);
  public final static native void RRNativeObjectHeapSupport_deleteObject(int jarg1);
  public final static native void delete_RRNativeObjectHeapSupport(long jarg1);
  public final static native long new_RRNativeObjectHeapSupport();
  public final static native void RRNativeObjectHeapSupport_director_connect(RRNativeObjectHeapSupport obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void RRNativeObjectHeapSupport_change_ownership(RRNativeObjectHeapSupport obj, long cptr, boolean take_or_release);
  public final static native void NodeDirectories_system_data_dir_set(long jarg1, NodeDirectories jarg1_, long jarg2, FilesystemPath jarg2_);
  public final static native long NodeDirectories_system_data_dir_get(long jarg1, NodeDirectories jarg1_);
  public final static native void NodeDirectories_system_config_dir_set(long jarg1, NodeDirectories jarg1_, long jarg2, FilesystemPath jarg2_);
  public final static native long NodeDirectories_system_config_dir_get(long jarg1, NodeDirectories jarg1_);
  public final static native void NodeDirectories_system_state_dir_set(long jarg1, NodeDirectories jarg1_, long jarg2, FilesystemPath jarg2_);
  public final static native long NodeDirectories_system_state_dir_get(long jarg1, NodeDirectories jarg1_);
  public final static native void NodeDirectories_system_cache_dir_set(long jarg1, NodeDirectories jarg1_, long jarg2, FilesystemPath jarg2_);
  public final static native long NodeDirectories_system_cache_dir_get(long jarg1, NodeDirectories jarg1_);
  public final static native void NodeDirectories_system_run_dir_set(long jarg1, NodeDirectories jarg1_, long jarg2, FilesystemPath jarg2_);
  public final static native long NodeDirectories_system_run_dir_get(long jarg1, NodeDirectories jarg1_);
  public final static native void NodeDirectories_user_data_dir_set(long jarg1, NodeDirectories jarg1_, long jarg2, FilesystemPath jarg2_);
  public final static native long NodeDirectories_user_data_dir_get(long jarg1, NodeDirectories jarg1_);
  public final static native void NodeDirectories_user_config_dir_set(long jarg1, NodeDirectories jarg1_, long jarg2, FilesystemPath jarg2_);
  public final static native long NodeDirectories_user_config_dir_get(long jarg1, NodeDirectories jarg1_);
  public final static native void NodeDirectories_user_state_dir_set(long jarg1, NodeDirectories jarg1_, long jarg2, FilesystemPath jarg2_);
  public final static native long NodeDirectories_user_state_dir_get(long jarg1, NodeDirectories jarg1_);
  public final static native void NodeDirectories_user_cache_dir_set(long jarg1, NodeDirectories jarg1_, long jarg2, FilesystemPath jarg2_);
  public final static native long NodeDirectories_user_cache_dir_get(long jarg1, NodeDirectories jarg1_);
  public final static native void NodeDirectories_user_run_dir_set(long jarg1, NodeDirectories jarg1_, long jarg2, FilesystemPath jarg2_);
  public final static native long NodeDirectories_user_run_dir_get(long jarg1, NodeDirectories jarg1_);
  public final static native long new_NodeDirectories();
  public final static native void delete_NodeDirectories(long jarg1);
  public final static native void delete_NodeDirectoriesFD(long jarg1);
  public final static native long NodeDirectoriesUtil_getDefaultNodeDirectories__SWIG_0(long jarg1, RobotRaconteurNode jarg1_);
  public final static native long NodeDirectoriesUtil_getDefaultNodeDirectories__SWIG_1();
  public final static native String NodeDirectoriesUtil_getLogonUserName();
  public final static native boolean NodeDirectoriesUtil_isLogonUserRoot();
  public final static native boolean NodeDirectoriesUtil_readInfoFile(long jarg1, FilesystemPath jarg1_, long jarg2, map_strstr jarg2_);
  public final static native long NodeDirectoriesUtil_createPidFile(long jarg1, FilesystemPath jarg1_);
  public final static native long NodeDirectoriesUtil_createInfoFile(long jarg1, FilesystemPath jarg1_, long jarg2, map_strstr jarg2_);
  public final static native void NodeDirectoriesUtil_refreshInfoFile(long jarg1, NodeDirectoriesFD jarg1_, long jarg2, map_strstr jarg2_);
  public final static native long new_NodeDirectoriesUtil();
  public final static native void delete_NodeDirectoriesUtil(long jarg1);
  public final static native void GetUuidForNameAndLockResult_uuid_set(long jarg1, GetUuidForNameAndLockResult jarg1_, long jarg2, NodeID jarg2_);
  public final static native long GetUuidForNameAndLockResult_uuid_get(long jarg1, GetUuidForNameAndLockResult jarg1_);
  public final static native void GetUuidForNameAndLockResult_name_set(long jarg1, GetUuidForNameAndLockResult jarg1_, String jarg2);
  public final static native String GetUuidForNameAndLockResult_name_get(long jarg1, GetUuidForNameAndLockResult jarg1_);
  public final static native void GetUuidForNameAndLockResult_scope_set(long jarg1, GetUuidForNameAndLockResult jarg1_, long jarg2, vectorstring jarg2_);
  public final static native long GetUuidForNameAndLockResult_scope_get(long jarg1, GetUuidForNameAndLockResult jarg1_);
  public final static native void GetUuidForNameAndLockResult_fd_set(long jarg1, GetUuidForNameAndLockResult jarg1_, long jarg2, NodeDirectoriesFD jarg2_);
  public final static native long GetUuidForNameAndLockResult_fd_get(long jarg1, GetUuidForNameAndLockResult jarg1_);
  public final static native long new_GetUuidForNameAndLockResult();
  public final static native void delete_GetUuidForNameAndLockResult(long jarg1);
  public final static native long getUuidForNameAndLock(long jarg1, NodeDirectories jarg1_, String jarg2, long jarg3, vectorstring jarg3_);
  public final static native long new_NodeDirectoriesResourceAlreadyInUse();
  public final static native void delete_NodeDirectoriesResourceAlreadyInUse(long jarg1);
  public final static native void ClientServiceListenerDirector_objectheapid_set(long jarg1, ClientServiceListenerDirector jarg1_, int jarg2);
  public final static native int ClientServiceListenerDirector_objectheapid_get(long jarg1, ClientServiceListenerDirector jarg1_);
  public final static native long new_ClientServiceListenerDirector();
  public final static native void ClientServiceListenerDirector_callback(long jarg1, ClientServiceListenerDirector jarg1_, int jarg2);
  public final static native void ClientServiceListenerDirector_callbackSwigExplicitClientServiceListenerDirector(long jarg1, ClientServiceListenerDirector jarg1_, int jarg2);
  public final static native void ClientServiceListenerDirector_callback2(long jarg1, ClientServiceListenerDirector jarg1_, int jarg2, String jarg3);
  public final static native void ClientServiceListenerDirector_callback2SwigExplicitClientServiceListenerDirector(long jarg1, ClientServiceListenerDirector jarg1_, int jarg2, String jarg3);
  public final static native void delete_ClientServiceListenerDirector(long jarg1);
  public final static native void ClientServiceListenerDirector_director_connect(ClientServiceListenerDirector obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ClientServiceListenerDirector_change_ownership(ClientServiceListenerDirector obj, long cptr, boolean take_or_release);
  public final static native long RobotRaconteurNode_registerTransport(long jarg1, RobotRaconteurNode jarg1_, long jarg2, Transport jarg2_);
  public final static native long RobotRaconteurNode_getRequestTimeout(long jarg1, RobotRaconteurNode jarg1_);
  public final static native void RobotRaconteurNode_setRequestTimeout(long jarg1, RobotRaconteurNode jarg1_, long jarg2);
  public final static native long RobotRaconteurNode_getTransportInactivityTimeout(long jarg1, RobotRaconteurNode jarg1_);
  public final static native void RobotRaconteurNode_setTransportInactivityTimeout(long jarg1, RobotRaconteurNode jarg1_, long jarg2);
  public final static native long RobotRaconteurNode_getEndpointInactivityTimeout(long jarg1, RobotRaconteurNode jarg1_);
  public final static native void RobotRaconteurNode_setEndpointInactivityTimeout(long jarg1, RobotRaconteurNode jarg1_, long jarg2);
  public final static native long RobotRaconteurNode_getMemoryMaxTransferSize(long jarg1, RobotRaconteurNode jarg1_);
  public final static native void RobotRaconteurNode_setMemoryMaxTransferSize(long jarg1, RobotRaconteurNode jarg1_, long jarg2);
  public final static native long RobotRaconteurNode_getNodeDiscoveryMaxCacheCount(long jarg1, RobotRaconteurNode jarg1_);
  public final static native void RobotRaconteurNode_setNodeDiscoveryMaxCacheCount(long jarg1, RobotRaconteurNode jarg1_, long jarg2);
  public final static native void RobotRaconteurNode_unregisterServiceType(long jarg1, RobotRaconteurNode jarg1_, String jarg2);
  public final static native long RobotRaconteurNode__ConnectService__SWIG_0(long jarg1, RobotRaconteurNode jarg1_, String jarg2, String jarg3, long jarg4, MessageElementData jarg4_, long jarg5, ClientServiceListenerDirector jarg5_, String jarg6);
  public final static native long RobotRaconteurNode__ConnectService__SWIG_1(long jarg1, RobotRaconteurNode jarg1_, String jarg2, String jarg3, long jarg4, MessageElementData jarg4_, long jarg5, ClientServiceListenerDirector jarg5_);
  public final static native long RobotRaconteurNode__ConnectService__SWIG_2(long jarg1, RobotRaconteurNode jarg1_, String jarg2, String jarg3, long jarg4, MessageElementData jarg4_);
  public final static native long RobotRaconteurNode__ConnectService__SWIG_3(long jarg1, RobotRaconteurNode jarg1_, String jarg2, String jarg3);
  public final static native long RobotRaconteurNode__ConnectService__SWIG_4(long jarg1, RobotRaconteurNode jarg1_, String jarg2);
  public final static native long RobotRaconteurNode__ConnectService__SWIG_5(long jarg1, RobotRaconteurNode jarg1_, long jarg2, vectorstring jarg2_, String jarg3, long jarg4, MessageElementData jarg4_, long jarg5, ClientServiceListenerDirector jarg5_, String jarg6);
  public final static native long RobotRaconteurNode__ConnectService__SWIG_6(long jarg1, RobotRaconteurNode jarg1_, long jarg2, vectorstring jarg2_, String jarg3, long jarg4, MessageElementData jarg4_, long jarg5, ClientServiceListenerDirector jarg5_);
  public final static native long RobotRaconteurNode__ConnectService__SWIG_7(long jarg1, RobotRaconteurNode jarg1_, long jarg2, vectorstring jarg2_, String jarg3, long jarg4, MessageElementData jarg4_);
  public final static native long RobotRaconteurNode__ConnectService__SWIG_8(long jarg1, RobotRaconteurNode jarg1_, long jarg2, vectorstring jarg2_, String jarg3);
  public final static native long RobotRaconteurNode__ConnectService__SWIG_9(long jarg1, RobotRaconteurNode jarg1_, long jarg2, vectorstring jarg2_);
  public final static native void RobotRaconteurNode__AsyncConnectService__SWIG_0(long jarg1, RobotRaconteurNode jarg1_, String jarg2, String jarg3, long jarg4, MessageElementData jarg4_, long jarg5, ClientServiceListenerDirector jarg5_, String jarg6, int jarg7, long jarg8, AsyncStubReturnDirector jarg8_, int jarg9);
  public final static native void RobotRaconteurNode__AsyncConnectService__SWIG_1(long jarg1, RobotRaconteurNode jarg1_, long jarg2, vectorstring jarg2_, String jarg3, long jarg4, MessageElementData jarg4_, long jarg5, ClientServiceListenerDirector jarg5_, String jarg6, int jarg7, long jarg8, AsyncStubReturnDirector jarg8_, int jarg9);
  public final static native void RobotRaconteurNode__DisconnectService(long jarg1, RobotRaconteurNode jarg1_, long jarg2, WrappedServiceStub jarg2_);
  public final static native void RobotRaconteurNode__AsyncDisconnectService(long jarg1, RobotRaconteurNode jarg1_, long jarg2, WrappedServiceStub jarg2_, long jarg3, AsyncVoidNoErrReturnDirector jarg3_, int jarg4);
  public final static native String RobotRaconteurNode_selectRemoteNodeURL(long jarg1, vectorstring jarg1_);
  public final static native void RobotRaconteurNode__RegisterServiceType(long jarg1, RobotRaconteurNode jarg1_, long jarg2, ServiceDefinition jarg2_);
  public final static native void RobotRaconteurNode__RegisterServiceTypes(long jarg1, RobotRaconteurNode jarg1_, long jarg2, vectorptr_servicedefinition jarg2_);
  public final static native long RobotRaconteurNode__GetServiceType(long jarg1, RobotRaconteurNode jarg1_, String jarg2);
  public final static native long RobotRaconteurNode__GetPulledServiceType(long jarg1, RobotRaconteurNode jarg1_, long jarg2, RRObject jarg2_, String jarg3);
  public final static native boolean RobotRaconteurNode_isServiceTypeRegistered(long jarg1, RobotRaconteurNode jarg1_, String jarg2);
  public final static native long RobotRaconteurNode__GetRegisteredServiceTypes(long jarg1, RobotRaconteurNode jarg1_);
  public final static native long RobotRaconteurNode__GetPulledServiceTypes(long jarg1, RobotRaconteurNode jarg1_, long jarg2, RRObject jarg2_);
  public final static native long RobotRaconteurNode__get_s();
  public final static native void RobotRaconteurNode__Shutdown(long jarg1, RobotRaconteurNode jarg1_);
  public final static native String RobotRaconteurNode__RequestObjectLock(long jarg1, RobotRaconteurNode jarg1_, long jarg2, WrappedServiceStub jarg2_, int jarg3);
  public final static native String RobotRaconteurNode__ReleaseObjectLock(long jarg1, RobotRaconteurNode jarg1_, long jarg2, WrappedServiceStub jarg2_);
  public final static native void RobotRaconteurNode__MonitorEnter__SWIG_0(long jarg1, RobotRaconteurNode jarg1_, long jarg2, WrappedServiceStub jarg2_, int jarg3);
  public final static native void RobotRaconteurNode__MonitorEnter__SWIG_1(long jarg1, RobotRaconteurNode jarg1_, long jarg2, WrappedServiceStub jarg2_);
  public final static native void RobotRaconteurNode__MonitorExit(long jarg1, RobotRaconteurNode jarg1_, long jarg2, WrappedServiceStub jarg2_);
  public final static native long RobotRaconteurNode__NowUTC(long jarg1, RobotRaconteurNode jarg1_);
  public final static native long RobotRaconteurNode__NowTimeSpec(long jarg1, RobotRaconteurNode jarg1_);
  public final static native long RobotRaconteurNode__NowNodeTime(long jarg1, RobotRaconteurNode jarg1_);
  public final static native long RobotRaconteurNode__NodeSyncTimeUTC(long jarg1, RobotRaconteurNode jarg1_);
  public final static native long RobotRaconteurNode__NodeSyncTimeSpec(long jarg1, RobotRaconteurNode jarg1_);
  public final static native void RobotRaconteurNode__AsyncRequestObjectLock(long jarg1, RobotRaconteurNode jarg1_, long jarg2, WrappedServiceStub jarg2_, int jarg3, int jarg4, long jarg5, AsyncStringReturnDirector jarg5_, int jarg6);
  public final static native void RobotRaconteurNode__AsyncReleaseObjectLock(long jarg1, RobotRaconteurNode jarg1_, long jarg2, WrappedServiceStub jarg2_, int jarg3, long jarg4, AsyncStringReturnDirector jarg4_, int jarg5);
  public final static native long RobotRaconteurNode__GetServiceAttributes(long jarg1, RobotRaconteurNode jarg1_, long jarg2, WrappedServiceStub jarg2_);
  public final static native long RobotRaconteurNode__GetServiceNodeID(long jarg1, RobotRaconteurNode jarg1_, long jarg2, WrappedServiceStub jarg2_);
  public final static native String RobotRaconteurNode__GetServiceNodeName(long jarg1, RobotRaconteurNode jarg1_, long jarg2, WrappedServiceStub jarg2_);
  public final static native String RobotRaconteurNode__GetServiceName(long jarg1, RobotRaconteurNode jarg1_, long jarg2, WrappedServiceStub jarg2_);
  public final static native String RobotRaconteurNode__GetObjectServicePath(long jarg1, RobotRaconteurNode jarg1_, long jarg2, WrappedServiceStub jarg2_);
  public final static native String RobotRaconteurNode__GetObjectType(long jarg1, RobotRaconteurNode jarg1_, long jarg2, WrappedServiceStub jarg2_);
  public final static native long RobotRaconteurNode__RegisterService__SWIG_0(long jarg1, RobotRaconteurNode jarg1_, String jarg2, String jarg3, long jarg4, RRObject jarg4_, long jarg5, ServiceSecurityPolicy jarg5_);
  public final static native long RobotRaconteurNode__RegisterService__SWIG_1(long jarg1, RobotRaconteurNode jarg1_, String jarg2, String jarg3, long jarg4, RRObject jarg4_);
  public final static native void RobotRaconteurNode_closeService(long jarg1, RobotRaconteurNode jarg1_, String jarg2);
  public final static native long RobotRaconteurNode__NodeID(long jarg1, RobotRaconteurNode jarg1_);
  public final static native void RobotRaconteurNode__SetNodeID(long jarg1, RobotRaconteurNode jarg1_, long jarg2, NodeID jarg2_);
  public final static native String RobotRaconteurNode__NodeName(long jarg1, RobotRaconteurNode jarg1_);
  public final static native void RobotRaconteurNode__SetNodeName(long jarg1, RobotRaconteurNode jarg1_, String jarg2);
  public final static native int RobotRaconteurNode_getThreadPoolCount(long jarg1, RobotRaconteurNode jarg1_);
  public final static native void RobotRaconteurNode_setThreadPoolCount(long jarg1, RobotRaconteurNode jarg1_, int jarg2);
  public final static native String RobotRaconteurNode__FindObjectType__SWIG_0(long jarg1, RobotRaconteurNode jarg1_, long jarg2, RRObject jarg2_, String jarg3);
  public final static native String RobotRaconteurNode__FindObjectType__SWIG_1(long jarg1, RobotRaconteurNode jarg1_, long jarg2, RRObject jarg2_, String jarg3, String jarg4);
  public final static native void RobotRaconteurNode__AsyncFindObjectType__SWIG_0(long jarg1, RobotRaconteurNode jarg1_, long jarg2, WrappedServiceStub jarg2_, String jarg3, int jarg4, long jarg5, AsyncStringReturnDirector jarg5_, int jarg6);
  public final static native void RobotRaconteurNode__AsyncFindObjectType__SWIG_1(long jarg1, RobotRaconteurNode jarg1_, long jarg2, WrappedServiceStub jarg2_, String jarg3, String jarg4, int jarg5, long jarg6, AsyncStringReturnDirector jarg6_, int jarg7);
  public final static native void RobotRaconteurNode__SetExceptionHandler(long jarg1, RobotRaconteurNode jarg1_, long jarg2, AsyncVoidReturnDirector jarg2_, int jarg3);
  public final static native void RobotRaconteurNode__ClearExceptionHandler(long jarg1, RobotRaconteurNode jarg1_);
  public final static native void RobotRaconteurNode_sleep(long jarg1, RobotRaconteurNode jarg1_, int jarg2);
  public final static native long RobotRaconteurNode__CreateTimer(long jarg1, RobotRaconteurNode jarg1_, int jarg2, boolean jarg3, long jarg4, AsyncTimerEventReturnDirector jarg4_, int jarg5);
  public final static native long RobotRaconteurNode_createRate(long jarg1, RobotRaconteurNode jarg1_, double jarg2);
  public final static native long RobotRaconteurNode_createAutoResetEvent(long jarg1, RobotRaconteurNode jarg1_);
  public final static native void RobotRaconteurNode__PostToThreadPool(long jarg1, RobotRaconteurNode jarg1_, long jarg2, AsyncVoidNoErrReturnDirector jarg2_, int jarg3);
  public final static native String RobotRaconteurNode__GetRobotRaconteurVersion(long jarg1, RobotRaconteurNode jarg1_);
  public final static native boolean RobotRaconteurNode_compareLogLevel(long jarg1, RobotRaconteurNode jarg1_, int jarg2);
  public final static native void RobotRaconteurNode_logMessage(long jarg1, RobotRaconteurNode jarg1_, int jarg2, String jarg3);
  public final static native void RobotRaconteurNode_logRecord(long jarg1, RobotRaconteurNode jarg1_, long jarg2, RRLogRecord jarg2_);
  public final static native int RobotRaconteurNode_getLogLevel(long jarg1, RobotRaconteurNode jarg1_);
  public final static native void RobotRaconteurNode_setLogLevel(long jarg1, RobotRaconteurNode jarg1_, int jarg2);
  public final static native int RobotRaconteurNode_setLogLevelFromString(long jarg1, RobotRaconteurNode jarg1_, String jarg2);
  public final static native int RobotRaconteurNode_setLogLevelFromEnvVariable__SWIG_0(long jarg1, RobotRaconteurNode jarg1_, String jarg2);
  public final static native int RobotRaconteurNode_setLogLevelFromEnvVariable__SWIG_1(long jarg1, RobotRaconteurNode jarg1_);
  public final static native long RobotRaconteurNode_getLogRecordHandler(long jarg1, RobotRaconteurNode jarg1_);
  public final static native void RobotRaconteurNode_setLogRecordHandler(long jarg1, RobotRaconteurNode jarg1_, long jarg2, LogRecordHandler jarg2_);
  public final static native void RobotRaconteurNode_checkConnection(long jarg1, RobotRaconteurNode jarg1_, long jarg2);
  public final static native long RobotRaconteurNode_getNodeDirectories(long jarg1, RobotRaconteurNode jarg1_);
  public final static native void RobotRaconteurNode_setNodeDirectories(long jarg1, RobotRaconteurNode jarg1_, long jarg2, NodeDirectories jarg2_);
  public final static native long new_RobotRaconteurNode();
  public final static native void delete_RobotRaconteurNode(long jarg1);
  public final static native long MessageElementData_SWIGSmartPtrUpcast(long jarg1);
  public final static native long RRBaseArray_SWIGSmartPtrUpcast(long jarg1);
  public final static native long PropertyDefinition_SWIGSmartPtrUpcast(long jarg1);
  public final static native long FunctionDefinition_SWIGSmartPtrUpcast(long jarg1);
  public final static native long EventDefinition_SWIGSmartPtrUpcast(long jarg1);
  public final static native long ObjRefDefinition_SWIGSmartPtrUpcast(long jarg1);
  public final static native long PipeDefinition_SWIGSmartPtrUpcast(long jarg1);
  public final static native long CallbackDefinition_SWIGSmartPtrUpcast(long jarg1);
  public final static native long WireDefinition_SWIGSmartPtrUpcast(long jarg1);
  public final static native long MemoryDefinition_SWIGSmartPtrUpcast(long jarg1);
  public final static native long Message_SWIGSmartPtrUpcast(long jarg1);
  public final static native long MessageHeader_SWIGSmartPtrUpcast(long jarg1);
  public final static native long MessageEntry_SWIGSmartPtrUpcast(long jarg1);
  public final static native long MessageElement_SWIGSmartPtrUpcast(long jarg1);
  public final static native long MessageElementNestedElementList_SWIGSmartPtrUpcast(long jarg1);
  public final static native long TcpTransport_SWIGSmartPtrUpcast(long jarg1);
  public final static native long LocalTransport_SWIGSmartPtrUpcast(long jarg1);
  public final static native long HardwareTransport_SWIGSmartPtrUpcast(long jarg1);
  public final static native long IntraTransport_SWIGSmartPtrUpcast(long jarg1);
  public final static native long WallTimer_SWIGSmartPtrUpcast(long jarg1);
  public final static native long WallRate_SWIGSmartPtrUpcast(long jarg1);
  public final static native long WrappedServiceStub_SWIGSmartPtrUpcast(long jarg1);
  public final static native long WrappedRRObject_SWIGSmartPtrUpcast(long jarg1);
  public final static native long PasswordFileUserAuthenticator_SWIGSmartPtrUpcast(long jarg1);
  public final static native long WrappedUserAuthenticator_SWIGSmartPtrUpcast(long jarg1);
  public final static native long UserLogRecordHandlerBase_SWIGSmartPtrUpcast(long jarg1);

  public static void SwigDirector_AsyncRequestDirector_handler(AsyncRequestDirector jself, long ret, long error) {
    jself.handler((ret == 0) ? null : new MessageElement(ret, true), new HandlerErrorInfo(error, false));
  }
  public static void SwigDirector_AsyncVoidReturnDirector_handler(AsyncVoidReturnDirector jself, long error) {
    jself.handler(new HandlerErrorInfo(error, false));
  }
  public static void SwigDirector_AsyncVoidNoErrReturnDirector_handler(AsyncVoidNoErrReturnDirector jself) {
    jself.handler();
  }
  public static void SwigDirector_AsyncStringReturnDirector_handler(AsyncStringReturnDirector jself, String ret, long error) {
    jself.handler(ret, new HandlerErrorInfo(error, false));
  }
  public static void SwigDirector_AsyncUInt32ReturnDirector_handler(AsyncUInt32ReturnDirector jself, long ret, long error) {
    jself.handler(ret, new HandlerErrorInfo(error, false));
  }
  public static void SwigDirector_AsyncTimerEventReturnDirector_handler(AsyncTimerEventReturnDirector jself, long ret, long error) {
    jself.handler(new TimerEvent(ret, false), new HandlerErrorInfo(error, false));
  }
  public static void SwigDirector_WrappedPipeEndpointDirector_pipeEndpointClosedCallback(WrappedPipeEndpointDirector jself) {
    jself.pipeEndpointClosedCallback();
  }
  public static void SwigDirector_WrappedPipeEndpointDirector_packetReceivedEvent(WrappedPipeEndpointDirector jself) {
    jself.packetReceivedEvent();
  }
  public static void SwigDirector_WrappedPipeEndpointDirector_packetAckReceivedEvent(WrappedPipeEndpointDirector jself, long packetnum) {
    jself.packetAckReceivedEvent(packetnum);
  }
  public static void SwigDirector_AsyncPipeEndpointReturnDirector_handler(AsyncPipeEndpointReturnDirector jself, long ep, long error) {
    jself.handler((ep == 0) ? null : new WrappedPipeEndpoint(ep, true), new HandlerErrorInfo(error, false));
  }
  public static void SwigDirector_WrappedPipeServerConnectDirector_pipeConnectCallback(WrappedPipeServerConnectDirector jself, long pipeendpoint) {
    jself.pipeConnectCallback((pipeendpoint == 0) ? null : new WrappedPipeEndpoint(pipeendpoint, true));
  }
  public static boolean SwigDirector_WrappedPipeBroadcasterPredicateDirector_predicate(WrappedPipeBroadcasterPredicateDirector jself, long client_endpoint, int index) {
    return jself.predicate(client_endpoint, index);
  }
  public static void SwigDirector_WrappedWireConnectionDirector_wireValueChanged(WrappedWireConnectionDirector jself, long value, long time) {
    jself.wireValueChanged((value == 0) ? null : new MessageElement(value, true), new TimeSpec(time, false));
  }
  public static void SwigDirector_WrappedWireConnectionDirector_wireConnectionClosedCallback(WrappedWireConnectionDirector jself) {
    jself.wireConnectionClosedCallback();
  }
  public static void SwigDirector_AsyncWireConnectionReturnDirector_handler(AsyncWireConnectionReturnDirector jself, long ep, long error) {
    jself.handler((ep == 0) ? null : new WrappedWireConnection(ep, true), new HandlerErrorInfo(error, false));
  }
  public static void SwigDirector_AsyncWirePeekReturnDirector_handler(AsyncWirePeekReturnDirector jself, long value, long ts, long error) {
    jself.handler((value == 0) ? null : new MessageElement(value, true), new TimeSpec(ts, false), new HandlerErrorInfo(error, false));
  }
  public static void SwigDirector_WrappedWireServerConnectDirector_wireConnectCallback(WrappedWireServerConnectDirector jself, long c) {
    jself.wireConnectCallback((c == 0) ? null : new WrappedWireConnection(c, true));
  }
  public static long SwigDirector_WrappedWireServerPeekValueDirector_peekValue(WrappedWireServerPeekValueDirector jself, long ep) {
    return MessageElement.getCPtr(jself.peekValue(ep));
  }
  public static void SwigDirector_WrappedWireServerPokeValueDirector_pokeValue(WrappedWireServerPokeValueDirector jself, long value, long ts, long ep) {
    jself.pokeValue((value == 0) ? null : new MessageElement(value, true), new TimeSpec(ts, false), ep);
  }
  public static boolean SwigDirector_WrappedWireBroadcasterPredicateDirector_predicate(WrappedWireBroadcasterPredicateDirector jself, long client_endpoint) {
    return jself.predicate(client_endpoint);
  }
  public static void SwigDirector_WrappedPodArrayMemoryClientBuffer_unpackReadResult(WrappedPodArrayMemoryClientBuffer jself, long res, long bufferpos, long count) {
    jself.unpackReadResult((res == 0) ? null : new MessageElementNestedElementList(res, true), bufferpos, count);
  }
  public static long SwigDirector_WrappedPodArrayMemoryClientBuffer_packWriteRequest(WrappedPodArrayMemoryClientBuffer jself, long bufferpos, long count) {
    return MessageElementNestedElementList.getCPtr(jself.packWriteRequest(bufferpos, count));
  }
  public static long SwigDirector_WrappedPodArrayMemoryClientBuffer_getBufferLength(WrappedPodArrayMemoryClientBuffer jself) {
    return jself.getBufferLength();
  }
  public static void SwigDirector_WrappedPodMultiDimArrayMemoryClientBuffer_unpackReadResult(WrappedPodMultiDimArrayMemoryClientBuffer jself, long res, long bufferpos, long count) {
    jself.unpackReadResult((res == 0) ? null : new MessageElementNestedElementList(res, true), new vector_uint64_t(bufferpos, false), new vector_uint64_t(count, false));
  }
  public static long SwigDirector_WrappedPodMultiDimArrayMemoryClientBuffer_packWriteRequest(WrappedPodMultiDimArrayMemoryClientBuffer jself, long bufferpos, long count) {
    return MessageElementNestedElementList.getCPtr(jself.packWriteRequest(new vector_uint64_t(bufferpos, false), new vector_uint64_t(count, false)));
  }
  public static long SwigDirector_WrappedArrayMemoryDirector_length(WrappedArrayMemoryDirector jself) {
    return jself.length();
  }
  public static void SwigDirector_WrappedArrayMemoryDirector_read(WrappedArrayMemoryDirector jself, long memorypos, long buffer, long bufferpos, long count) {
    jself.read(memorypos, (buffer == 0) ? null : new RRBaseArray(buffer, true), bufferpos, count);
  }
  public static void SwigDirector_WrappedArrayMemoryDirector_write(WrappedArrayMemoryDirector jself, long memorypos, long buffer, long bufferpos, long count) {
    jself.write(memorypos, (buffer == 0) ? null : new RRBaseArray(buffer, true), bufferpos, count);
  }
  public static long SwigDirector_WrappedMultiDimArrayMemoryDirector_dimensions(WrappedMultiDimArrayMemoryDirector jself) {
    return vector_uint64_t.getCPtr(jself.dimensions());
  }
  public static long SwigDirector_WrappedMultiDimArrayMemoryDirector_dimCount(WrappedMultiDimArrayMemoryDirector jself) {
    return jself.dimCount();
  }
  public static void SwigDirector_WrappedMultiDimArrayMemoryDirector_read(WrappedMultiDimArrayMemoryDirector jself, long p) {
    jself.read((p == 0) ? null : new WrappedMultiDimArrayMemoryParams(p, false));
  }
  public static void SwigDirector_WrappedMultiDimArrayMemoryDirector_write(WrappedMultiDimArrayMemoryDirector jself, long p) {
    jself.write((p == 0) ? null : new WrappedMultiDimArrayMemoryParams(p, false));
  }
  public static long SwigDirector_WrappedPodArrayMemoryDirector_length(WrappedPodArrayMemoryDirector jself) {
    return jself.length();
  }
  public static long SwigDirector_WrappedPodArrayMemoryDirector_read(WrappedPodArrayMemoryDirector jself, long memorypos, long bufferpos, long count) {
    return MessageElementNestedElementList.getCPtr(jself.read(memorypos, bufferpos, count));
  }
  public static void SwigDirector_WrappedPodArrayMemoryDirector_write(WrappedPodArrayMemoryDirector jself, long memorypos, long buffer, long bufferpos, long count) {
    jself.write(memorypos, (buffer == 0) ? null : new MessageElementNestedElementList(buffer, true), bufferpos, count);
  }
  public static long SwigDirector_WrappedPodMultiDimArrayMemoryDirector_dimensions(WrappedPodMultiDimArrayMemoryDirector jself) {
    return vector_uint64_t.getCPtr(jself.dimensions());
  }
  public static long SwigDirector_WrappedPodMultiDimArrayMemoryDirector_dimCount(WrappedPodMultiDimArrayMemoryDirector jself) {
    return jself.dimCount();
  }
  public static long SwigDirector_WrappedPodMultiDimArrayMemoryDirector_read(WrappedPodMultiDimArrayMemoryDirector jself, long memorypos, long bufferpos, long count) {
    return MessageElementNestedElementList.getCPtr(jself.read(new vector_uint64_t(memorypos, false), new vector_uint64_t(bufferpos, false), new vector_uint64_t(count, false)));
  }
  public static void SwigDirector_WrappedPodMultiDimArrayMemoryDirector_write(WrappedPodMultiDimArrayMemoryDirector jself, long memorypos, long buffer, long bufferpos, long count) {
    jself.write(new vector_uint64_t(memorypos, false), (buffer == 0) ? null : new MessageElementNestedElementList(buffer, true), new vector_uint64_t(bufferpos, false), new vector_uint64_t(count, false));
  }
  public static void SwigDirector_WrappedNamedArrayMemoryClientBuffer_unpackReadResult(WrappedNamedArrayMemoryClientBuffer jself, long res, long bufferpos, long count) {
    jself.unpackReadResult((res == 0) ? null : new MessageElementNestedElementList(res, true), bufferpos, count);
  }
  public static long SwigDirector_WrappedNamedArrayMemoryClientBuffer_packWriteRequest(WrappedNamedArrayMemoryClientBuffer jself, long bufferpos, long count) {
    return MessageElementNestedElementList.getCPtr(jself.packWriteRequest(bufferpos, count));
  }
  public static long SwigDirector_WrappedNamedArrayMemoryClientBuffer_getBufferLength(WrappedNamedArrayMemoryClientBuffer jself) {
    return jself.getBufferLength();
  }
  public static void SwigDirector_WrappedNamedMultiDimArrayMemoryClientBuffer_unpackReadResult(WrappedNamedMultiDimArrayMemoryClientBuffer jself, long res, long bufferpos, long count) {
    jself.unpackReadResult((res == 0) ? null : new MessageElementNestedElementList(res, true), new vector_uint64_t(bufferpos, false), new vector_uint64_t(count, false));
  }
  public static long SwigDirector_WrappedNamedMultiDimArrayMemoryClientBuffer_packWriteRequest(WrappedNamedMultiDimArrayMemoryClientBuffer jself, long bufferpos, long count) {
    return MessageElementNestedElementList.getCPtr(jself.packWriteRequest(new vector_uint64_t(bufferpos, false), new vector_uint64_t(count, false)));
  }
  public static long SwigDirector_WrappedNamedArrayMemoryDirector_length(WrappedNamedArrayMemoryDirector jself) {
    return jself.length();
  }
  public static long SwigDirector_WrappedNamedArrayMemoryDirector_read(WrappedNamedArrayMemoryDirector jself, long memorypos, long bufferpos, long count) {
    return MessageElementNestedElementList.getCPtr(jself.read(memorypos, bufferpos, count));
  }
  public static void SwigDirector_WrappedNamedArrayMemoryDirector_write(WrappedNamedArrayMemoryDirector jself, long memorypos, long buffer, long bufferpos, long count) {
    jself.write(memorypos, (buffer == 0) ? null : new MessageElementNestedElementList(buffer, true), bufferpos, count);
  }
  public static long SwigDirector_WrappedNamedMultiDimArrayMemoryDirector_dimensions(WrappedNamedMultiDimArrayMemoryDirector jself) {
    return vector_uint64_t.getCPtr(jself.dimensions());
  }
  public static long SwigDirector_WrappedNamedMultiDimArrayMemoryDirector_dimCount(WrappedNamedMultiDimArrayMemoryDirector jself) {
    return jself.dimCount();
  }
  public static long SwigDirector_WrappedNamedMultiDimArrayMemoryDirector_read(WrappedNamedMultiDimArrayMemoryDirector jself, long memorypos, long bufferpos, long count) {
    return MessageElementNestedElementList.getCPtr(jself.read(new vector_uint64_t(memorypos, false), new vector_uint64_t(bufferpos, false), new vector_uint64_t(count, false)));
  }
  public static void SwigDirector_WrappedNamedMultiDimArrayMemoryDirector_write(WrappedNamedMultiDimArrayMemoryDirector jself, long memorypos, long buffer, long bufferpos, long count) {
    jself.write(new vector_uint64_t(memorypos, false), (buffer == 0) ? null : new MessageElementNestedElementList(buffer, true), new vector_uint64_t(bufferpos, false), new vector_uint64_t(count, false));
  }
  public static void SwigDirector_AsyncGeneratorClientReturnDirector_handler(AsyncGeneratorClientReturnDirector jself, long ret, long error) {
    jself.handler((ret == 0) ? null : new WrappedGeneratorClient(ret, true), new HandlerErrorInfo(error, false));
  }
  public static long SwigDirector_WrappedGeneratorServerDirector_next(WrappedGeneratorServerDirector jself, long m, long async_adaptor) {
    return MessageElement.getCPtr(jself.next((m == 0) ? null : new MessageElement(m, true), (async_adaptor == 0) ? null : new WrappedServiceSkelAsyncAdapter(async_adaptor, true)));
  }
  public static void SwigDirector_WrappedGeneratorServerDirector_abort(WrappedGeneratorServerDirector jself, long async_adapter) {
    jself.abort((async_adapter == 0) ? null : new WrappedServiceSkelAsyncAdapter(async_adapter, true));
  }
  public static void SwigDirector_WrappedGeneratorServerDirector_close(WrappedGeneratorServerDirector jself, long async_adapter) {
    jself.close((async_adapter == 0) ? null : new WrappedServiceSkelAsyncAdapter(async_adapter, true));
  }
  public static void SwigDirector_WrappedServiceStubDirector_dispatchEvent(WrappedServiceStubDirector jself, String EventName, long args) {
    jself.dispatchEvent(EventName, new vectorptr_messageelement(args, true));
  }
  public static long SwigDirector_WrappedServiceStubDirector_callbackCall(WrappedServiceStubDirector jself, String CallbackName, long args) {
    return MessageElement.getCPtr(jself.callbackCall(CallbackName, new vectorptr_messageelement(args, true)));
  }
  public static void SwigDirector_AsyncStubReturnDirector_handler(AsyncStubReturnDirector jself, long stub, long error) {
    jself.handler((stub == 0) ? null : new WrappedServiceStub(stub, true), new HandlerErrorInfo(error, false));
  }
  public static void SwigDirector_WrappedServiceSkelDirector_init(WrappedServiceSkelDirector jself, long skel) {
    jself.init((skel == 0) ? null : new WrappedServiceSkel(skel, true));
  }
  public static long SwigDirector_WrappedServiceSkelDirector__CallGetProperty(WrappedServiceSkelDirector jself, String name, long async_adaptor) {
    return MessageElement.getCPtr(jself._CallGetProperty(name, (async_adaptor == 0) ? null : new WrappedServiceSkelAsyncAdapter(async_adaptor, true)));
  }
  public static void SwigDirector_WrappedServiceSkelDirector__CallSetProperty(WrappedServiceSkelDirector jself, String name, long m, long async_adaptor) {
    jself._CallSetProperty(name, (m == 0) ? null : new MessageElement(m, true), (async_adaptor == 0) ? null : new WrappedServiceSkelAsyncAdapter(async_adaptor, true));
  }
  public static long SwigDirector_WrappedServiceSkelDirector__CallFunction(WrappedServiceSkelDirector jself, String name, long m, long async_adaptor) {
    return MessageElement.getCPtr(jself._CallFunction(name, new vectorptr_messageelement(m, false), (async_adaptor == 0) ? null : new WrappedServiceSkelAsyncAdapter(async_adaptor, true)));
  }
  public static long SwigDirector_WrappedServiceSkelDirector__GetSubObj(WrappedServiceSkelDirector jself, String name, String index) {
    return WrappedRRObject.getCPtr(jself._GetSubObj(name, index));
  }
  public static long SwigDirector_WrappedServiceSkelDirector__GetArrayMemory(WrappedServiceSkelDirector jself, String name) {
    return WrappedArrayMemoryDirector.getCPtr(jself._GetArrayMemory(name));
  }
  public static long SwigDirector_WrappedServiceSkelDirector__GetMultiDimArrayMemory(WrappedServiceSkelDirector jself, String name) {
    return WrappedMultiDimArrayMemoryDirector.getCPtr(jself._GetMultiDimArrayMemory(name));
  }
  public static long SwigDirector_WrappedServiceSkelDirector__GetPodArrayMemory(WrappedServiceSkelDirector jself, String name) {
    return WrappedPodArrayMemoryDirector.getCPtr(jself._GetPodArrayMemory(name));
  }
  public static long SwigDirector_WrappedServiceSkelDirector__GetPodMultiDimArrayMemory(WrappedServiceSkelDirector jself, String name) {
    return WrappedPodMultiDimArrayMemoryDirector.getCPtr(jself._GetPodMultiDimArrayMemory(name));
  }
  public static long SwigDirector_WrappedServiceSkelDirector__GetNamedArrayMemory(WrappedServiceSkelDirector jself, String name) {
    return WrappedNamedArrayMemoryDirector.getCPtr(jself._GetNamedArrayMemory(name));
  }
  public static long SwigDirector_WrappedServiceSkelDirector__GetNamedMultiDimArrayMemory(WrappedServiceSkelDirector jself, String name) {
    return WrappedNamedMultiDimArrayMemoryDirector.getCPtr(jself._GetNamedMultiDimArrayMemory(name));
  }
  public static void SwigDirector_WrappedServiceSkelDirector_monitorEnter(WrappedServiceSkelDirector jself, int timeout) {
    jself.monitorEnter(timeout);
  }
  public static void SwigDirector_WrappedServiceSkelDirector_monitorExit(WrappedServiceSkelDirector jself) {
    jself.monitorExit();
  }
  public static void SwigDirector_WrappedServiceSkelDirector_releaseCastObject(WrappedServiceSkelDirector jself) {
    jself.releaseCastObject();
  }
  public static void SwigDirector_ServerServiceListenerDirector_callback(ServerServiceListenerDirector jself, int code, long endpoint) {
    jself.callback(code, endpoint);
  }
  public static long SwigDirector_WrappedUserAuthenticatorDirector_authenticateUser(WrappedUserAuthenticatorDirector jself, String username, long credentials, long context) {
    return AuthenticatedUser.getCPtr(jself.authenticateUser(username, (credentials == 0) ? null : new MessageElement(credentials, true), (context == 0) ? null : new ServerContext(context, true)));
  }
  public static void SwigDirector_AsyncServiceInfo2VectorReturnDirector_handler(AsyncServiceInfo2VectorReturnDirector jself, long ret) {
    jself.handler(new vectorserviceinfo2wrapped(ret, false));
  }
  public static void SwigDirector_AsyncNodeInfo2VectorReturnDirector_handler(AsyncNodeInfo2VectorReturnDirector jself, long ret) {
    jself.handler(new vectornodeinfo2(ret, false));
  }
  public static boolean SwigDirector_WrappedServiceSubscriptionFilterPredicateDirector_predicate(WrappedServiceSubscriptionFilterPredicateDirector jself, long info) {
    return jself.predicate(new ServiceInfo2Wrapped(info, false));
  }
  public static void SwigDirector_WrappedServiceInfo2SubscriptionDirector_serviceDetected(WrappedServiceInfo2SubscriptionDirector jself, long subscription, long id, long service) {
    jself.serviceDetected((subscription == 0) ? null : new WrappedServiceInfo2Subscription(subscription, true), new WrappedServiceSubscriptionClientID(id, false), new ServiceInfo2Wrapped(service, false));
  }
  public static void SwigDirector_WrappedServiceInfo2SubscriptionDirector_serviceLost(WrappedServiceInfo2SubscriptionDirector jself, long subscription, long id, long service) {
    jself.serviceLost((subscription == 0) ? null : new WrappedServiceInfo2Subscription(subscription, true), new WrappedServiceSubscriptionClientID(id, false), new ServiceInfo2Wrapped(service, false));
  }
  public static void SwigDirector_WrappedServiceSubscriptionDirector_clientConnected(WrappedServiceSubscriptionDirector jself, long subscription, long id, long slient) {
    jself.clientConnected((subscription == 0) ? null : new WrappedServiceSubscription(subscription, true), new WrappedServiceSubscriptionClientID(id, false), (slient == 0) ? null : new WrappedServiceStub(slient, true));
  }
  public static void SwigDirector_WrappedServiceSubscriptionDirector_clientDisconnected(WrappedServiceSubscriptionDirector jself, long subscription, long id, long slient) {
    jself.clientDisconnected((subscription == 0) ? null : new WrappedServiceSubscription(subscription, true), new WrappedServiceSubscriptionClientID(id, false), (slient == 0) ? null : new WrappedServiceStub(slient, true));
  }
  public static void SwigDirector_WrappedServiceSubscriptionDirector_clientConnectFailed(WrappedServiceSubscriptionDirector jself, long subscription, long id, long url, long error) {
    jself.clientConnectFailed((subscription == 0) ? null : new WrappedServiceSubscription(subscription, true), new WrappedServiceSubscriptionClientID(id, false), new vectorstring(url, false), new HandlerErrorInfo(error, false));
  }
  public static void SwigDirector_WrappedWireSubscriptionDirector_wireValueChanged(WrappedWireSubscriptionDirector jself, long wire_subscription, long value, long time) {
    jself.wireValueChanged((wire_subscription == 0) ? null : new WrappedWireSubscription(wire_subscription, true), new WrappedService_typed_packet(value, false), new TimeSpec(time, false));
  }
  public static void SwigDirector_WrappedPipeSubscriptionDirector_pipePacketReceived(WrappedPipeSubscriptionDirector jself, long pipe_subscription) {
    jself.pipePacketReceived((pipe_subscription == 0) ? null : new WrappedPipeSubscription(pipe_subscription, true));
  }
  public static void SwigDirector_UserLogRecordHandlerDirector_handleLogRecord(UserLogRecordHandlerDirector jself, long record) {
    jself.handleLogRecord(new RRLogRecord(record, false));
  }
  public static void SwigDirector_RRNativeObjectHeapSupport_deleteObject_i(RRNativeObjectHeapSupport jself, int id) {
    jself.deleteObject_i(id);
  }
  public static void SwigDirector_ClientServiceListenerDirector_callback(ClientServiceListenerDirector jself, int code) {
    jself.callback(code);
  }
  public static void SwigDirector_ClientServiceListenerDirector_callback2(ClientServiceListenerDirector jself, int code, String p) {
    jself.callback2(code, p);
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
