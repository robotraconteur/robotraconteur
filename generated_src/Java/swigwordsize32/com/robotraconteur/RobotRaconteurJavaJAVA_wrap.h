/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_RobotRaconteurJava_WRAP_H_
#define SWIG_RobotRaconteurJava_WRAP_H_

class SwigDirector_AsyncRequestDirector : public RobotRaconteur::AsyncRequestDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_AsyncRequestDirector(JNIEnv *jenv);
    virtual ~SwigDirector_AsyncRequestDirector();
    virtual void handler(boost::intrusive_ptr< RobotRaconteur::MessageElement > ret, RobotRaconteur::HandlerErrorInfo &error);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_AsyncVoidReturnDirector : public RobotRaconteur::AsyncVoidReturnDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_AsyncVoidReturnDirector(JNIEnv *jenv);
    virtual ~SwigDirector_AsyncVoidReturnDirector();
    virtual void handler(RobotRaconteur::HandlerErrorInfo &error);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_AsyncVoidNoErrReturnDirector : public RobotRaconteur::AsyncVoidNoErrReturnDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_AsyncVoidNoErrReturnDirector(JNIEnv *jenv);
    virtual ~SwigDirector_AsyncVoidNoErrReturnDirector();
    virtual void handler();
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_AsyncStringReturnDirector : public RobotRaconteur::AsyncStringReturnDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_AsyncStringReturnDirector(JNIEnv *jenv);
    virtual ~SwigDirector_AsyncStringReturnDirector();
    virtual void handler(std::string const &ret, RobotRaconteur::HandlerErrorInfo &error);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_AsyncUInt32ReturnDirector : public RobotRaconteur::AsyncUInt32ReturnDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_AsyncUInt32ReturnDirector(JNIEnv *jenv);
    virtual ~SwigDirector_AsyncUInt32ReturnDirector();
    virtual void handler(uint32_t ret, RobotRaconteur::HandlerErrorInfo &error);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_AsyncTimerEventReturnDirector : public RobotRaconteur::AsyncTimerEventReturnDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_AsyncTimerEventReturnDirector(JNIEnv *jenv);
    virtual ~SwigDirector_AsyncTimerEventReturnDirector();
    virtual void handler(RobotRaconteur::TimerEvent const &ret, RobotRaconteur::HandlerErrorInfo &error);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_WrappedPipeEndpointDirector : public RobotRaconteur::WrappedPipeEndpointDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_WrappedPipeEndpointDirector(JNIEnv *jenv);
    virtual ~SwigDirector_WrappedPipeEndpointDirector();
    virtual void PipeEndpointClosedCallback();
    virtual void PacketReceivedEvent();
    virtual void PacketAckReceivedEvent(uint32_t packetnum);
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<3> swig_override;
};

class SwigDirector_AsyncPipeEndpointReturnDirector : public RobotRaconteur::AsyncPipeEndpointReturnDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_AsyncPipeEndpointReturnDirector(JNIEnv *jenv);
    virtual ~SwigDirector_AsyncPipeEndpointReturnDirector();
    virtual void handler(boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > const &ep, RobotRaconteur::HandlerErrorInfo &error);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_WrappedPipeServerConnectDirector : public RobotRaconteur::WrappedPipeServerConnectDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_WrappedPipeServerConnectDirector(JNIEnv *jenv);
    virtual ~SwigDirector_WrappedPipeServerConnectDirector();
    virtual void PipeConnectCallback(boost::shared_ptr< RobotRaconteur::WrappedPipeEndpoint > const &pipeendpoint);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_WrappedPipeBroadcasterPredicateDirector : public RobotRaconteur::WrappedPipeBroadcasterPredicateDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_WrappedPipeBroadcasterPredicateDirector(JNIEnv *jenv);
    virtual bool Predicate(uint32_t client_endpoint, int32_t index);
    virtual ~SwigDirector_WrappedPipeBroadcasterPredicateDirector();
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_WrappedWireConnectionDirector : public RobotRaconteur::WrappedWireConnectionDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_WrappedWireConnectionDirector(JNIEnv *jenv);
    virtual ~SwigDirector_WrappedWireConnectionDirector();
    virtual void WireValueChanged(boost::intrusive_ptr< RobotRaconteur::MessageElement > value, RobotRaconteur::TimeSpec const &time);
    virtual void WireConnectionClosedCallback();
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<2> swig_override;
};

class SwigDirector_AsyncWireConnectionReturnDirector : public RobotRaconteur::AsyncWireConnectionReturnDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_AsyncWireConnectionReturnDirector(JNIEnv *jenv);
    virtual ~SwigDirector_AsyncWireConnectionReturnDirector();
    virtual void handler(boost::shared_ptr< RobotRaconteur::WrappedWireConnection > const &ep, RobotRaconteur::HandlerErrorInfo &error);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_AsyncWirePeekReturnDirector : public RobotRaconteur::AsyncWirePeekReturnDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_AsyncWirePeekReturnDirector(JNIEnv *jenv);
    virtual ~SwigDirector_AsyncWirePeekReturnDirector();
    virtual void handler(boost::intrusive_ptr< RobotRaconteur::MessageElement > value, RobotRaconteur::TimeSpec const &ts, RobotRaconteur::HandlerErrorInfo &error);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_WrappedWireServerConnectDirector : public RobotRaconteur::WrappedWireServerConnectDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_WrappedWireServerConnectDirector(JNIEnv *jenv);
    virtual ~SwigDirector_WrappedWireServerConnectDirector();
    virtual void WireConnectCallback(boost::shared_ptr< RobotRaconteur::WrappedWireConnection > const &c);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_WrappedWireServerPeekValueDirector : public RobotRaconteur::WrappedWireServerPeekValueDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_WrappedWireServerPeekValueDirector(JNIEnv *jenv);
    virtual ~SwigDirector_WrappedWireServerPeekValueDirector();
    virtual boost::intrusive_ptr< RobotRaconteur::MessageElement > PeekValue(uint32_t const &ep);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_WrappedWireServerPokeValueDirector : public RobotRaconteur::WrappedWireServerPokeValueDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_WrappedWireServerPokeValueDirector(JNIEnv *jenv);
    virtual ~SwigDirector_WrappedWireServerPokeValueDirector();
    virtual void PokeValue(boost::intrusive_ptr< RobotRaconteur::MessageElement > value, RobotRaconteur::TimeSpec const &ts, uint32_t const &ep);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_WrappedWireBroadcasterPredicateDirector : public RobotRaconteur::WrappedWireBroadcasterPredicateDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_WrappedWireBroadcasterPredicateDirector(JNIEnv *jenv);
    virtual bool Predicate(uint32_t client_endpoint);
    virtual ~SwigDirector_WrappedWireBroadcasterPredicateDirector();
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_WrappedPodArrayMemoryClientBuffer : public RobotRaconteur::WrappedPodArrayMemoryClientBuffer, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_WrappedPodArrayMemoryClientBuffer(JNIEnv *jenv);
    virtual void UnpackReadResult(boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > res, uint64_t bufferpos, uint64_t count);
    virtual boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > PackWriteRequest(uint64_t bufferpos, uint64_t count);
    virtual uint64_t GetBufferLength();
    virtual ~SwigDirector_WrappedPodArrayMemoryClientBuffer();
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<3> swig_override;
};

class SwigDirector_WrappedPodMultiDimArrayMemoryClientBuffer : public RobotRaconteur::WrappedPodMultiDimArrayMemoryClientBuffer, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_WrappedPodMultiDimArrayMemoryClientBuffer(JNIEnv *jenv);
    virtual void UnpackReadResult(boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > res, std::vector< uint64_t > const &bufferpos, std::vector< uint64_t > const &count);
    virtual boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > PackWriteRequest(std::vector< uint64_t > const &bufferpos, std::vector< uint64_t > const &count);
    virtual ~SwigDirector_WrappedPodMultiDimArrayMemoryClientBuffer();
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<2> swig_override;
};

class SwigDirector_WrappedArrayMemoryDirector : public RobotRaconteur::WrappedArrayMemoryDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_WrappedArrayMemoryDirector(JNIEnv *jenv);
    virtual ~SwigDirector_WrappedArrayMemoryDirector();
    virtual uint64_t Length();
    virtual void Read(uint64_t memorypos, boost::intrusive_ptr< RobotRaconteur::RRBaseArray > buffer, uint64_t bufferpos, uint64_t count);
    virtual void Write(uint64_t memorypos, boost::intrusive_ptr< RobotRaconteur::RRBaseArray > buffer, uint64_t bufferpos, uint64_t count);
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<3> swig_override;
};

class SwigDirector_WrappedMultiDimArrayMemoryDirector : public RobotRaconteur::WrappedMultiDimArrayMemoryDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_WrappedMultiDimArrayMemoryDirector(JNIEnv *jenv);
    virtual ~SwigDirector_WrappedMultiDimArrayMemoryDirector();
    virtual std::vector< uint64_t > Dimensions();
    virtual uint64_t DimCount();
    virtual void Read(RobotRaconteur::WrappedMultiDimArrayMemoryParams *p);
    virtual void Write(RobotRaconteur::WrappedMultiDimArrayMemoryParams *p);
public:
    bool swig_overrides(int n) {
      return (n < 4 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<4> swig_override;
};

class SwigDirector_WrappedPodArrayMemoryDirector : public RobotRaconteur::WrappedPodArrayMemoryDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_WrappedPodArrayMemoryDirector(JNIEnv *jenv);
    virtual ~SwigDirector_WrappedPodArrayMemoryDirector();
    virtual uint64_t Length();
    virtual boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > Read(uint64_t memorypos, uint64_t bufferpos, uint64_t count);
    virtual void Write(uint64_t memorypos, boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > buffer, uint64_t bufferpos, uint64_t count);
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<3> swig_override;
};

class SwigDirector_WrappedPodMultiDimArrayMemoryDirector : public RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_WrappedPodMultiDimArrayMemoryDirector(JNIEnv *jenv);
    virtual ~SwigDirector_WrappedPodMultiDimArrayMemoryDirector();
    virtual std::vector< uint64_t > Dimensions();
    virtual uint64_t DimCount();
    virtual boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > Read(std::vector< uint64_t > const &memorypos, std::vector< uint64_t > const &bufferpos, std::vector< uint64_t > const &count);
    virtual void Write(std::vector< uint64_t > const &memorypos, boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > buffer, std::vector< uint64_t > const &bufferpos, std::vector< uint64_t > const &count);
public:
    bool swig_overrides(int n) {
      return (n < 4 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<4> swig_override;
};

class SwigDirector_WrappedNamedArrayMemoryClientBuffer : public RobotRaconteur::WrappedNamedArrayMemoryClientBuffer, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_WrappedNamedArrayMemoryClientBuffer(JNIEnv *jenv);
    virtual void UnpackReadResult(boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > res, uint64_t bufferpos, uint64_t count);
    virtual boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > PackWriteRequest(uint64_t bufferpos, uint64_t count);
    virtual uint64_t GetBufferLength();
    virtual ~SwigDirector_WrappedNamedArrayMemoryClientBuffer();
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<3> swig_override;
};

class SwigDirector_WrappedNamedMultiDimArrayMemoryClientBuffer : public RobotRaconteur::WrappedNamedMultiDimArrayMemoryClientBuffer, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_WrappedNamedMultiDimArrayMemoryClientBuffer(JNIEnv *jenv);
    virtual void UnpackReadResult(boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > res, std::vector< uint64_t > const &bufferpos, std::vector< uint64_t > const &count);
    virtual boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > PackWriteRequest(std::vector< uint64_t > const &bufferpos, std::vector< uint64_t > const &count);
    virtual ~SwigDirector_WrappedNamedMultiDimArrayMemoryClientBuffer();
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<2> swig_override;
};

class SwigDirector_WrappedNamedArrayMemoryDirector : public RobotRaconteur::WrappedNamedArrayMemoryDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_WrappedNamedArrayMemoryDirector(JNIEnv *jenv);
    virtual ~SwigDirector_WrappedNamedArrayMemoryDirector();
    virtual uint64_t Length();
    virtual boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > Read(uint64_t memorypos, uint64_t bufferpos, uint64_t count);
    virtual void Write(uint64_t memorypos, boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > buffer, uint64_t bufferpos, uint64_t count);
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<3> swig_override;
};

class SwigDirector_WrappedNamedMultiDimArrayMemoryDirector : public RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_WrappedNamedMultiDimArrayMemoryDirector(JNIEnv *jenv);
    virtual ~SwigDirector_WrappedNamedMultiDimArrayMemoryDirector();
    virtual std::vector< uint64_t > Dimensions();
    virtual uint64_t DimCount();
    virtual boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > Read(std::vector< uint64_t > const &memorypos, std::vector< uint64_t > const &bufferpos, std::vector< uint64_t > const &count);
    virtual void Write(std::vector< uint64_t > const &memorypos, boost::intrusive_ptr< RobotRaconteur::MessageElementNestedElementList > buffer, std::vector< uint64_t > const &bufferpos, std::vector< uint64_t > const &count);
public:
    bool swig_overrides(int n) {
      return (n < 4 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<4> swig_override;
};

class SwigDirector_AsyncGeneratorClientReturnDirector : public RobotRaconteur::AsyncGeneratorClientReturnDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_AsyncGeneratorClientReturnDirector(JNIEnv *jenv);
    virtual ~SwigDirector_AsyncGeneratorClientReturnDirector();
    virtual void handler(boost::shared_ptr< RobotRaconteur::WrappedGeneratorClient > const &ret, RobotRaconteur::HandlerErrorInfo &error);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_WrappedGeneratorServerDirector : public RobotRaconteur::WrappedGeneratorServerDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_WrappedGeneratorServerDirector(JNIEnv *jenv);
    virtual ~SwigDirector_WrappedGeneratorServerDirector();
    virtual boost::intrusive_ptr< RobotRaconteur::MessageElement > Next(boost::intrusive_ptr< RobotRaconteur::MessageElement > m, boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > const &async_adaptor);
    virtual void Abort(boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > const &async_adapter);
    virtual void Close(boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > const &async_adapter);
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<3> swig_override;
};

class SwigDirector_WrappedServiceStubDirector : public RobotRaconteur::WrappedServiceStubDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_WrappedServiceStubDirector(JNIEnv *jenv);
    virtual ~SwigDirector_WrappedServiceStubDirector();
    virtual void DispatchEvent(std::string const &EventName, std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > args);
    virtual boost::intrusive_ptr< RobotRaconteur::MessageElement > CallbackCall(std::string const &CallbackName, std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > args);
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<2> swig_override;
};

class SwigDirector_AsyncStubReturnDirector : public RobotRaconteur::AsyncStubReturnDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_AsyncStubReturnDirector(JNIEnv *jenv);
    virtual ~SwigDirector_AsyncStubReturnDirector();
    virtual void handler(boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &stub, RobotRaconteur::HandlerErrorInfo &error);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_WrappedServiceSkelDirector : public RobotRaconteur::WrappedServiceSkelDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_WrappedServiceSkelDirector(JNIEnv *jenv);
    virtual ~SwigDirector_WrappedServiceSkelDirector();
    virtual void Init(boost::shared_ptr< RobotRaconteur::WrappedServiceSkel > const &skel);
    virtual boost::intrusive_ptr< RobotRaconteur::MessageElement > CallGetProperty(std::string const &name, boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > const &async_adaptor);
    virtual void CallSetProperty(std::string const &name, boost::intrusive_ptr< RobotRaconteur::MessageElement > m, boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > const &async_adaptor);
    virtual boost::intrusive_ptr< RobotRaconteur::MessageElement > CallFunction(std::string const &name, std::vector< boost::intrusive_ptr< RobotRaconteur::MessageElement > > const &m, boost::shared_ptr< RobotRaconteur::WrappedServiceSkelAsyncAdapter > const &async_adaptor);
    virtual boost::shared_ptr< RobotRaconteur::WrappedRRObject > GetSubObj(std::string const &name, std::string const &index);
    virtual RobotRaconteur::WrappedArrayMemoryDirector *GetArrayMemory(std::string const &name);
    virtual RobotRaconteur::WrappedMultiDimArrayMemoryDirector *GetMultiDimArrayMemory(std::string const &name);
    virtual RobotRaconteur::WrappedPodArrayMemoryDirector *GetPodArrayMemory(std::string const &name);
    virtual RobotRaconteur::WrappedPodMultiDimArrayMemoryDirector *GetPodMultiDimArrayMemory(std::string const &name);
    virtual RobotRaconteur::WrappedNamedArrayMemoryDirector *GetNamedArrayMemory(std::string const &name);
    virtual RobotRaconteur::WrappedNamedMultiDimArrayMemoryDirector *GetNamedMultiDimArrayMemory(std::string const &name);
    virtual void MonitorEnter(int32_t timeout);
    virtual void MonitorExit();
    virtual void ReleaseCastObject();
public:
    bool swig_overrides(int n) {
      return (n < 14 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<14> swig_override;
};

class SwigDirector_ServerServiceListenerDirector : public ServerServiceListenerDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_ServerServiceListenerDirector(JNIEnv *jenv);
    virtual void Callback(int32_t code, uint32_t endpoint);
    virtual ~SwigDirector_ServerServiceListenerDirector();
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_WrappedUserAuthenticatorDirector : public RobotRaconteur::WrappedUserAuthenticatorDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_WrappedUserAuthenticatorDirector(JNIEnv *jenv);
    virtual ~SwigDirector_WrappedUserAuthenticatorDirector();
    virtual boost::shared_ptr< RobotRaconteur::AuthenticatedUser > AuthenticateUser(std::string const &username, boost::intrusive_ptr< RobotRaconteur::MessageElement > credentials, boost::shared_ptr< RobotRaconteur::ServerContext > const &context);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_AsyncServiceInfo2VectorReturnDirector : public RobotRaconteur::AsyncServiceInfo2VectorReturnDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_AsyncServiceInfo2VectorReturnDirector(JNIEnv *jenv);
    virtual ~SwigDirector_AsyncServiceInfo2VectorReturnDirector();
    virtual void handler(std::vector< RobotRaconteur::ServiceInfo2Wrapped > const &ret);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_AsyncNodeInfo2VectorReturnDirector : public RobotRaconteur::AsyncNodeInfo2VectorReturnDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_AsyncNodeInfo2VectorReturnDirector(JNIEnv *jenv);
    virtual ~SwigDirector_AsyncNodeInfo2VectorReturnDirector();
    virtual void handler(std::vector< RobotRaconteur::NodeInfo2 > const &ret);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_WrappedServiceSubscriptionFilterPredicateDirector : public RobotRaconteur::WrappedServiceSubscriptionFilterPredicateDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_WrappedServiceSubscriptionFilterPredicateDirector(JNIEnv *jenv);
    virtual bool Predicate(RobotRaconteur::ServiceInfo2Wrapped const &info);
    virtual ~SwigDirector_WrappedServiceSubscriptionFilterPredicateDirector();
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_WrappedServiceInfo2SubscriptionDirector : public RobotRaconteur::WrappedServiceInfo2SubscriptionDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_WrappedServiceInfo2SubscriptionDirector(JNIEnv *jenv);
    virtual void ServiceDetected(boost::shared_ptr< RobotRaconteur::WrappedServiceInfo2Subscription > const &subscription, RobotRaconteur::ServiceSubscriptionClientID const &id, RobotRaconteur::ServiceInfo2Wrapped const &service);
    virtual void ServiceLost(boost::shared_ptr< RobotRaconteur::WrappedServiceInfo2Subscription > const &subscription, RobotRaconteur::ServiceSubscriptionClientID const &id, RobotRaconteur::ServiceInfo2Wrapped const &service);
    virtual ~SwigDirector_WrappedServiceInfo2SubscriptionDirector();
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<2> swig_override;
};

class SwigDirector_WrappedServiceSubscriptionDirector : public RobotRaconteur::WrappedServiceSubscriptionDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_WrappedServiceSubscriptionDirector(JNIEnv *jenv);
    virtual void ClientConnected(boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > const &subscription, RobotRaconteur::ServiceSubscriptionClientID const &id, boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &slient);
    virtual void ClientDisconnected(boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > const &subscription, RobotRaconteur::ServiceSubscriptionClientID const &id, boost::shared_ptr< RobotRaconteur::WrappedServiceStub > const &slient);
    virtual void ClientConnectFailed(boost::shared_ptr< RobotRaconteur::WrappedServiceSubscription > const &subscription, RobotRaconteur::ServiceSubscriptionClientID const &id, std::vector< std::string > const &url, RobotRaconteur::HandlerErrorInfo &error);
    virtual ~SwigDirector_WrappedServiceSubscriptionDirector();
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<3> swig_override;
};

class SwigDirector_WrappedWireSubscriptionDirector : public RobotRaconteur::WrappedWireSubscriptionDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_WrappedWireSubscriptionDirector(JNIEnv *jenv);
    virtual void WireValueChanged(boost::shared_ptr< RobotRaconteur::WrappedWireSubscription > const &wire_subscription, RobotRaconteur::WrappedService_typed_packet &value, RobotRaconteur::TimeSpec const &time);
    virtual ~SwigDirector_WrappedWireSubscriptionDirector();
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_WrappedPipeSubscriptionDirector : public RobotRaconteur::WrappedPipeSubscriptionDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_WrappedPipeSubscriptionDirector(JNIEnv *jenv);
    virtual void PipePacketReceived(boost::shared_ptr< RobotRaconteur::WrappedPipeSubscription > const &pipe_subscription);
    virtual ~SwigDirector_WrappedPipeSubscriptionDirector();
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_UserLogRecordHandlerDirector : public RobotRaconteur::UserLogRecordHandlerDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_UserLogRecordHandlerDirector(JNIEnv *jenv);
    virtual void HandleLogRecord(RobotRaconteur::RRLogRecord const &record);
    virtual ~SwigDirector_UserLogRecordHandlerDirector();
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_RRNativeObjectHeapSupport : public RobotRaconteur::RRNativeObjectHeapSupport, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_RRNativeObjectHeapSupport(JNIEnv *jenv);
    virtual void DeleteObject_i(int32_t id);
    virtual ~SwigDirector_RRNativeObjectHeapSupport();
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_ClientServiceListenerDirector : public ClientServiceListenerDirector, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_ClientServiceListenerDirector(JNIEnv *jenv);
    virtual void Callback(int32_t code);
    virtual void Callback2(int32_t code, std::string const &p);
    virtual ~SwigDirector_ClientServiceListenerDirector();
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<2> swig_override;
};


#endif
