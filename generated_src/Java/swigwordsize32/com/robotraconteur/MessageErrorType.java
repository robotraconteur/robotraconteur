/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.robotraconteur;

public enum MessageErrorType {
  MessageErrorType_None(0),
  MessageErrorType_ConnectionError(1),
  MessageErrorType_ProtocolError,
  MessageErrorType_ServiceNotFound,
  MessageErrorType_ObjectNotFound,
  MessageErrorType_InvalidEndpoint,
  MessageErrorType_EndpointCommunicationFatalError,
  MessageErrorType_NodeNotFound,
  MessageErrorType_ServiceError,
  MessageErrorType_MemberNotFound,
  MessageErrorType_MemberFormatMismatch,
  MessageErrorType_DataTypeMismatch,
  MessageErrorType_DataTypeError,
  MessageErrorType_DataSerializationError,
  MessageErrorType_MessageEntryNotFound,
  MessageErrorType_MessageElementNotFound,
  MessageErrorType_UnknownError,
  MessageErrorType_InvalidOperation,
  MessageErrorType_InvalidArgument,
  MessageErrorType_OperationFailed,
  MessageErrorType_NullValue,
  MessageErrorType_InternalError,
  MessageErrorType_SystemResourcePermissionDenied,
  MessageErrorType_OutOfSystemResource,
  MessageErrorType_SystemResourceError,
  MessageErrorType_ResourceNotFound,
  MessageErrorType_IOError,
  MessageErrorType_BufferLimitViolation,
  MessageErrorType_ServiceDefinitionError,
  MessageErrorType_OutOfRange,
  MessageErrorType_KeyNotFound,
  MessageErrorType_InvalidConfiguration,
  MessageErrorType_InvalidState,
  MessageErrorType_RemoteError(100),
  MessageErrorType_RequestTimeout,
  MessageErrorType_ReadOnlyMember,
  MessageErrorType_WriteOnlyMember,
  MessageErrorType_NotImplementedError,
  MessageErrorType_MemberBusy,
  MessageErrorType_ValueNotSet,
  MessageErrorType_AbortOperation,
  MessageErrorType_OperationAborted,
  MessageErrorType_StopIteration,
  MessageErrorType_OperationTimeout,
  MessageErrorType_OperationCancelled,
  MessageErrorType_AuthenticationError(150),
  MessageErrorType_ObjectLockedError,
  MessageErrorType_PermissionDenied;

  public final int swigValue() {
    return swigValue;
  }

  public static MessageErrorType swigToEnum(int swigValue) {
    MessageErrorType[] swigValues = MessageErrorType.class.getEnumConstants();
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (MessageErrorType swigEnum : swigValues)
      if (swigEnum.swigValue == swigValue)
        return swigEnum;
    throw new IllegalArgumentException("No enum " + MessageErrorType.class + " with value " + swigValue);
  }

  @SuppressWarnings("unused")
  private MessageErrorType() {
    this.swigValue = SwigNext.next++;
  }

  @SuppressWarnings("unused")
  private MessageErrorType(int swigValue) {
    this.swigValue = swigValue;
    SwigNext.next = swigValue+1;
  }

  @SuppressWarnings("unused")
  private MessageErrorType(MessageErrorType swigEnum) {
    this.swigValue = swigEnum.swigValue;
    SwigNext.next = this.swigValue+1;
  }

  private final int swigValue;

  private static class SwigNext {
    private static int next = 0;
  }
}

