//This file is automatically generated. DO NOT EDIT!
using System;
using RobotRaconteur;
using System.Collections.Generic;
using System.Threading.Tasks;

#pragma warning disable 0108

namespace com.robotraconteur.testing.TestService1
{
public class com__robotraconteur__testing__TestService1Factory : ServiceFactory
{
    public override string DefString()
{
    const string s="#This is the standard test service for RobotRaconteur\n#It is not meant to be exhaustive, rather it tests the\n#most common operations.\n\n#Each of the members defined has a specified behavior.\n#Refer to the reference implementation for details\n#on these behaviors.  New implementations of\n#Robot Raconteur should test against the reference\n#client and server to determine compatibilty.\n\nservice com.robotraconteur.testing.TestService1\n\noption version 0.8\n\nimport com.robotraconteur.testing.TestService2\n\nexception testexception1\nexception testexception2\n\nstruct teststruct1\nfield double[] dat1\nfield string str2\nfield string{int32} vec3\nfield string{string} dict4\nfield string{list} list5\nfield teststruct2 struct1\nfield teststruct2{string} dstruct2\nfield teststruct2{list} lstruct3\nfield double[*] multidimarray\n\nfield varvalue var3\n\nend struct\n\nstruct teststruct2\nfield double[] mydat\n\nend struct\n\nobject testroot\nimplements com.robotraconteur.testing.TestService2.baseobj\n\noption constant double[] doubleconst {3.4, 4.8, 14372.8}\noption constant string strconst \"This is a constant\"\n\n#Properties to test the serialization of different data types\n\n#numbers\n\nproperty double d1\nproperty double[] d2\nproperty double[16] d3\nproperty double[16-] d4\nproperty double[*] d5\nproperty double[3,3] d6\n\nproperty single s1\nproperty single[] s2\n\nproperty int8 i8_1\nproperty int8[] i8_2\n\nproperty uint8 u8_1\nproperty uint8[] u8_2\nproperty uint8[*] u8_3\n\nproperty int16 i16_1\nproperty int16[] i16_2\n\nproperty uint16 u16_1\nproperty uint16[] u16_2\n\nproperty int32 i32_1\nproperty int32[] i32_2\nproperty int32[] i32_huge\n\nproperty uint32 u32_1\nproperty uint32[] u32_2\n\nproperty int64 i64_1\nproperty int64[] i64_2\n\nproperty uint64 u64_1\nproperty uint64[] u64_2\n\n#strings\nproperty string str1\n\n#structs\nproperty teststruct1 struct1\nproperty teststruct2 struct2\n\n#indexed sets\nproperty double{int32} is_d1\nproperty double{string} is_d2\nproperty double[]{int32} is_d3\nproperty double[]{string} is_d4\nproperty double[*]{int32} is_d5\nproperty double[*]{string} is_d6\n\nproperty string{int32} is_str1\nproperty string{string} is_str2\n\nproperty teststruct2{int32} is_struct1\nproperty teststruct2{string} is_struct2\nproperty com.robotraconteur.testing.TestService2.ostruct2 struct3\n\n#lists\nproperty double{list} list_d1\nproperty double[]{list} list_d3\nproperty double[*]{list} list_d5\n\nproperty string{list} list_str1\nproperty teststruct2{list} list_struct1\n\n#varvalue\nproperty varvalue var1\nproperty varvalue{int32} var2\nproperty varvalue var_num\nproperty varvalue var_str\nproperty varvalue var_struct\nproperty varvalue var_vector\nproperty varvalue var_dictionary\nproperty varvalue var_list\nproperty varvalue var_multidimarray\n\n#Throw an error to test error transmission\nproperty double errtest\nproperty teststruct1 nulltest\n\n#functions\nfunction void func1()\nfunction void func2(double d1, double d2)\nfunction double func3(double d1, double d2)\nfunction int32 meaning_of_life()\nfunction void func_errtest()\nfunction void func_errtest1()\nfunction void func_errtest2()\nfunction void func_errtest3()\n\n#events\n\nevent ev1()\nevent ev2(double d1, teststruct2 s2 )\n\n#objrefs\n\nobjref sub1 o1\nobjref sub1[] o2\nobjref sub1{int32} o3\nobjref sub1{string} o4\nobjref com.robotraconteur.testing.TestService2.subobj o5\n\nobjref varobject o6\n\nfunction void o6_op(int32 op)\n\n#pipes\n\npipe double[] p1\n\n#option pipe p2 unreliable\npipe teststruct2 p2\nfunction void pipe_check_error()\n\npipe double broadcastpipe\n\n#callbacks\ncallback void cb1()\ncallback void cb2(double d1, double d2)\ncallback double cb3(double d1, double d2)\ncallback int32 cb_meaning_of_life()\ncallback void cb_errtest()\n\nfunction void test_callbacks()\n\n#wires\n\nwire double[] w1\nwire teststruct2 w2\nwire int32[*] w3\n\nwire double broadcastwire\n\n#memory\n\nmemory double[] m1\nmemory double[*] m2\nmemory uint8[*] m3\n\nend object\n\nobject sub1\nproperty double[] d1\nproperty double[*] d2\n\nobjref sub2 o2_1\nobjref sub2{int32} o2_2\nobjref sub2{string} o2_3\n\nproperty string s_ind\nproperty int32 i_ind\n\nend object\n\nobject sub2\n\nproperty string s_ind\nproperty int32 i_ind\n\nproperty string data\nobjref sub3{string} o3_1\nend object\n\nobject sub3\nproperty string ind\nproperty string data2\nproperty double data3\nfunction double add(double d)\nend object\n\n";
    return s;
    }
    public override string GetServiceName() {return "com.robotraconteur.testing.TestService1";}
    public teststruct1_stub teststruct1_stubentry;
    public teststruct2_stub teststruct2_stubentry;
    public com__robotraconteur__testing__TestService1Factory()
{
    teststruct1_stubentry=new teststruct1_stub(this);
    teststruct2_stubentry=new teststruct2_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="teststruct1")    return teststruct1_stubentry;
    if (objecttype=="teststruct2")    return teststruct2_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "testroot":
    return new testroot_stub(innerstub);
    case "sub1":
    return new sub1_stub(innerstub);
    case "sub2":
    return new sub2_stub(innerstub);
    case "sub3":
    return new sub3_stub(innerstub);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "testroot":
    return new testroot_skel((testroot)obj);
    case "sub1":
    return new sub1_skel((sub1)obj);
    case "sub2":
    return new sub2_skel((sub2)obj);
    case "sub3":
    return new sub3_skel((sub3)obj);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    if (rr_stype=="testexception1") return new testexception1(rr_exp.Message,rr_exp.ErrorSubName,rr_exp.ErrorParam);
    if (rr_stype=="testexception2") return new testexception2(rr_exp.Message,rr_exp.ErrorSubName,rr_exp.ErrorParam);
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class teststruct1_stub : IStructureStub {
    public teststruct1_stub(com__robotraconteur__testing__TestService1Factory d) {def=d;}
    private com__robotraconteur__testing__TestService1Factory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    teststruct1 s = (teststruct1)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("dat1",s.dat1));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackString("str2",s.str2));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<int,string>("vec3",s.vec3));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,string>("dict4",s.dict4));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<string>("list5",s.list5));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackStructure("struct1",s.struct1));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMapType<string,teststruct2>("dstruct2",s.dstruct2));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackListType<teststruct2>("lstruct3",s.lstruct3));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackMultiDimArray("multidimarray",(MultiDimArray)s.multidimarray));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackVarType("var3",s.var3));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.testing.TestService1.teststruct1",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    teststruct1 s=new teststruct1();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.dat1 =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"dat1"));
    s.str2 =MessageElementUtil.UnpackString(MessageElement.FindElement(mm,"str2"));
    s.vec3 =MessageElementUtil.UnpackMap<int,string>(MessageElement.FindElement(mm,"vec3"));
    s.dict4 =MessageElementUtil.UnpackMap<string,string>(MessageElement.FindElement(mm,"dict4"));
    s.list5 =MessageElementUtil.UnpackList<string>(MessageElement.FindElement(mm,"list5"));
    s.struct1 =MessageElementUtil.UnpackStructure<teststruct2>(MessageElement.FindElement(mm,"struct1"));
    s.dstruct2 =MessageElementUtil.UnpackMap<string,teststruct2>(MessageElement.FindElement(mm,"dstruct2"));
    s.lstruct3 =MessageElementUtil.UnpackList<teststruct2>(MessageElement.FindElement(mm,"lstruct3"));
    s.multidimarray =MessageElementUtil.UnpackMultiDimArray(MessageElement.FindElement(mm,"multidimarray"));
    s.var3 =MessageElementUtil.UnpackVarType(MessageElement.FindElement(mm,"var3"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public class teststruct2_stub : IStructureStub {
    public teststruct2_stub(com__robotraconteur__testing__TestService1Factory d) {def=d;}
    private com__robotraconteur__testing__TestService1Factory def;
    public MessageElementNestedElementList PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    teststruct2 s = (teststruct2)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<double>("mydat",s.mydat));
    return new MessageElementNestedElementList(DataTypes.structure_t,"com.robotraconteur.testing.TestService1.teststruct2",m);
    }
    }
    public T UnpackStructure<T>(MessageElementNestedElementList m) {
    if (m == null ) return default(T);
    teststruct2 s=new teststruct2();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.mydat =MessageElementUtil.UnpackArray<double>(MessageElement.FindElement(mm,"mydat"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public interface async_testroot : com.robotraconteur.testing.TestService2.async_baseobj
{
    Task<double> async_get_d1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_d1(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<double[]> async_get_d2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_d2(double[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<double[]> async_get_d3(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_d3(double[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<double[]> async_get_d4(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_d4(double[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<MultiDimArray> async_get_d5(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_d5(MultiDimArray value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<MultiDimArray> async_get_d6(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_d6(MultiDimArray value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<float> async_get_s1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_s1(float value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<float[]> async_get_s2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_s2(float[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<sbyte> async_get_i8_1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_i8_1(sbyte value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<sbyte[]> async_get_i8_2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_i8_2(sbyte[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<byte> async_get_u8_1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_u8_1(byte value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<byte[]> async_get_u8_2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_u8_2(byte[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<MultiDimArray> async_get_u8_3(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_u8_3(MultiDimArray value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<short> async_get_i16_1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_i16_1(short value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<short[]> async_get_i16_2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_i16_2(short[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<ushort> async_get_u16_1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_u16_1(ushort value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<ushort[]> async_get_u16_2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_u16_2(ushort[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<int> async_get_i32_1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_i32_1(int value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<int[]> async_get_i32_2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_i32_2(int[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<int[]> async_get_i32_huge(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_i32_huge(int[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint> async_get_u32_1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_u32_1(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<uint[]> async_get_u32_2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_u32_2(uint[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<long> async_get_i64_1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_i64_1(long value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<long[]> async_get_i64_2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_i64_2(long[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<ulong> async_get_u64_1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_u64_1(ulong value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<ulong[]> async_get_u64_2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_u64_2(ulong[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_str1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_str1(string value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<teststruct1> async_get_struct1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_struct1(teststruct1 value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<teststruct2> async_get_struct2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_struct2(teststruct2 value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Dictionary<int,double>> async_get_is_d1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_is_d1(Dictionary<int,double> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Dictionary<string,double>> async_get_is_d2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_is_d2(Dictionary<string,double> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Dictionary<int,double[]>> async_get_is_d3(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_is_d3(Dictionary<int,double[]> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Dictionary<string,double[]>> async_get_is_d4(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_is_d4(Dictionary<string,double[]> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Dictionary<int,MultiDimArray>> async_get_is_d5(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_is_d5(Dictionary<int,MultiDimArray> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Dictionary<string,MultiDimArray>> async_get_is_d6(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_is_d6(Dictionary<string,MultiDimArray> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Dictionary<int,string>> async_get_is_str1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_is_str1(Dictionary<int,string> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Dictionary<string,string>> async_get_is_str2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_is_str2(Dictionary<string,string> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Dictionary<int,teststruct2>> async_get_is_struct1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_is_struct1(Dictionary<int,teststruct2> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Dictionary<string,teststruct2>> async_get_is_struct2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_is_struct2(Dictionary<string,teststruct2> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.testing.TestService2.ostruct2> async_get_struct3(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_struct3(com.robotraconteur.testing.TestService2.ostruct2 value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<List<double>> async_get_list_d1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_list_d1(List<double> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<List<double[]>> async_get_list_d3(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_list_d3(List<double[]> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<List<MultiDimArray>> async_get_list_d5(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_list_d5(List<MultiDimArray> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<List<string>> async_get_list_str1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_list_str1(List<string> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<List<teststruct2>> async_get_list_struct1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_list_struct1(List<teststruct2> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<object> async_get_var1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_var1(object value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<Dictionary<int,object>> async_get_var2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_var2(Dictionary<int,object> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<object> async_get_var_num(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_var_num(object value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<object> async_get_var_str(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_var_str(object value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<object> async_get_var_struct(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_var_struct(object value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<object> async_get_var_vector(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_var_vector(object value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<object> async_get_var_dictionary(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_var_dictionary(object value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<object> async_get_var_list(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_var_list(object value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<object> async_get_var_multidimarray(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_var_multidimarray(object value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<double> async_get_errtest(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_errtest(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<teststruct1> async_get_nulltest(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_nulltest(teststruct1 value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_func1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_func2(double d1, double d2,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<double> async_func3(double d1, double d2,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<int> async_meaning_of_life(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_func_errtest(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_func_errtest1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_func_errtest2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_func_errtest3(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_o6_op(int op,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_pipe_check_error(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_test_callbacks(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<sub1> async_get_o1(int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<sub1> async_get_o2(int ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<sub1> async_get_o3(int ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<sub1> async_get_o4(string ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<com.robotraconteur.testing.TestService2.subobj> async_get_o5(int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<object> async_get_o6(int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class testroot_stub : ServiceStub , testroot, async_testroot{
    private CallbackClient<Action> rr_cb1;
    private CallbackClient<Action<double, double>> rr_cb2;
    private CallbackClient<Func<double,double,double>> rr_cb3;
    private CallbackClient<Func<int>> rr_cb_meaning_of_life;
    private CallbackClient<Action> rr_cb_errtest;
    private Pipe<double[]> rr_p1;
    private Pipe<teststruct2> rr_p2;
    private Pipe<double> rr_broadcastpipe;
    private Wire<double[]> rr_w1;
    private Wire<teststruct2> rr_w2;
    private Wire<MultiDimArray> rr_w3;
    private Wire<double> rr_broadcastwire;
    private ArrayMemory<double> rr_m1;
    private MultiDimArrayMemory<double> rr_m2;
    private MultiDimArrayMemory<byte> rr_m3;
    public testroot_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_cb1=new CallbackClient<Action>("cb1");
    rr_cb2=new CallbackClient<Action<double, double>>("cb2");
    rr_cb3=new CallbackClient<Func<double,double,double>>("cb3");
    rr_cb_meaning_of_life=new CallbackClient<Func<int>>("cb_meaning_of_life");
    rr_cb_errtest=new CallbackClient<Action>("cb_errtest");
    rr_p1=new Pipe<double[]>(innerstub.GetPipe("p1"));
    rr_p2=new Pipe<teststruct2>(innerstub.GetPipe("p2"));
    rr_broadcastpipe=new Pipe<double>(innerstub.GetPipe("broadcastpipe"));
    rr_w1=new Wire<double[]>(innerstub.GetWire("w1"));
    rr_w2=new Wire<teststruct2>(innerstub.GetWire("w2"));
    rr_w3=new Wire<MultiDimArray>(innerstub.GetWire("w3"));
    rr_broadcastwire=new Wire<double>(innerstub.GetWire("broadcastwire"));
    rr_m1=new ArrayMemoryClient<double>(innerstub.GetArrayMemory("m1"));
    rr_m2=new MultiDimArrayMemoryClient<double>(innerstub.GetMultiDimArrayMemory("m2"));
    rr_m3=new MultiDimArrayMemoryClient<byte>(innerstub.GetMultiDimArrayMemory("m3"));
    }
    public double d1 {
    get {
    return (MessageElementUtil.UnpackScalar<double>(rr_innerstub.PropertyGet("d1")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<double>("value",value))
    {
    rr_innerstub.PropertySet("d1", m);
    }
    }
    }
    public double[] d2 {
    get {
    return MessageElementUtil.UnpackArray<double>(rr_innerstub.PropertyGet("d2"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackArray<double>("value",value))
    {
    rr_innerstub.PropertySet("d2", m);
    }
    }
    }
    public double[] d3 {
    get {
    return DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackArray<double>(rr_innerstub.PropertyGet("d3")), 16, false);
    }
    set {
    using(MessageElement m=MessageElementUtil.PackArray<double>("value",DataTypeUtil.VerifyArrayLength(value, 16, false)))
    {
    rr_innerstub.PropertySet("d3", m);
    }
    }
    }
    public double[] d4 {
    get {
    return DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackArray<double>(rr_innerstub.PropertyGet("d4")), 16, true);
    }
    set {
    using(MessageElement m=MessageElementUtil.PackArray<double>("value",DataTypeUtil.VerifyArrayLength(value, 16, true)))
    {
    rr_innerstub.PropertySet("d4", m);
    }
    }
    }
    public MultiDimArray d5 {
    get {
    return MessageElementUtil.UnpackMultiDimArray(rr_innerstub.PropertyGet("d5"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackMultiDimArray("value",(MultiDimArray)value))
    {
    rr_innerstub.PropertySet("d5", m);
    }
    }
    }
    public MultiDimArray d6 {
    get {
    return DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMultiDimArray(rr_innerstub.PropertyGet("d6")),9,new uint[] {3,3});
    }
    set {
    using(MessageElement m=MessageElementUtil.PackMultiDimArray("value",(MultiDimArray)DataTypeUtil.VerifyArrayLength(value,9,new uint[] {3,3})))
    {
    rr_innerstub.PropertySet("d6", m);
    }
    }
    }
    public float s1 {
    get {
    return (MessageElementUtil.UnpackScalar<float>(rr_innerstub.PropertyGet("s1")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<float>("value",value))
    {
    rr_innerstub.PropertySet("s1", m);
    }
    }
    }
    public float[] s2 {
    get {
    return MessageElementUtil.UnpackArray<float>(rr_innerstub.PropertyGet("s2"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackArray<float>("value",value))
    {
    rr_innerstub.PropertySet("s2", m);
    }
    }
    }
    public sbyte i8_1 {
    get {
    return (MessageElementUtil.UnpackScalar<sbyte>(rr_innerstub.PropertyGet("i8_1")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<sbyte>("value",value))
    {
    rr_innerstub.PropertySet("i8_1", m);
    }
    }
    }
    public sbyte[] i8_2 {
    get {
    return MessageElementUtil.UnpackArray<sbyte>(rr_innerstub.PropertyGet("i8_2"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackArray<sbyte>("value",value))
    {
    rr_innerstub.PropertySet("i8_2", m);
    }
    }
    }
    public byte u8_1 {
    get {
    return (MessageElementUtil.UnpackScalar<byte>(rr_innerstub.PropertyGet("u8_1")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<byte>("value",value))
    {
    rr_innerstub.PropertySet("u8_1", m);
    }
    }
    }
    public byte[] u8_2 {
    get {
    return MessageElementUtil.UnpackArray<byte>(rr_innerstub.PropertyGet("u8_2"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackArray<byte>("value",value))
    {
    rr_innerstub.PropertySet("u8_2", m);
    }
    }
    }
    public MultiDimArray u8_3 {
    get {
    return MessageElementUtil.UnpackMultiDimArray(rr_innerstub.PropertyGet("u8_3"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackMultiDimArray("value",(MultiDimArray)value))
    {
    rr_innerstub.PropertySet("u8_3", m);
    }
    }
    }
    public short i16_1 {
    get {
    return (MessageElementUtil.UnpackScalar<short>(rr_innerstub.PropertyGet("i16_1")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<short>("value",value))
    {
    rr_innerstub.PropertySet("i16_1", m);
    }
    }
    }
    public short[] i16_2 {
    get {
    return MessageElementUtil.UnpackArray<short>(rr_innerstub.PropertyGet("i16_2"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackArray<short>("value",value))
    {
    rr_innerstub.PropertySet("i16_2", m);
    }
    }
    }
    public ushort u16_1 {
    get {
    return (MessageElementUtil.UnpackScalar<ushort>(rr_innerstub.PropertyGet("u16_1")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<ushort>("value",value))
    {
    rr_innerstub.PropertySet("u16_1", m);
    }
    }
    }
    public ushort[] u16_2 {
    get {
    return MessageElementUtil.UnpackArray<ushort>(rr_innerstub.PropertyGet("u16_2"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackArray<ushort>("value",value))
    {
    rr_innerstub.PropertySet("u16_2", m);
    }
    }
    }
    public int i32_1 {
    get {
    return (MessageElementUtil.UnpackScalar<int>(rr_innerstub.PropertyGet("i32_1")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<int>("value",value))
    {
    rr_innerstub.PropertySet("i32_1", m);
    }
    }
    }
    public int[] i32_2 {
    get {
    return MessageElementUtil.UnpackArray<int>(rr_innerstub.PropertyGet("i32_2"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackArray<int>("value",value))
    {
    rr_innerstub.PropertySet("i32_2", m);
    }
    }
    }
    public int[] i32_huge {
    get {
    return MessageElementUtil.UnpackArray<int>(rr_innerstub.PropertyGet("i32_huge"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackArray<int>("value",value))
    {
    rr_innerstub.PropertySet("i32_huge", m);
    }
    }
    }
    public uint u32_1 {
    get {
    return (MessageElementUtil.UnpackScalar<uint>(rr_innerstub.PropertyGet("u32_1")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<uint>("value",value))
    {
    rr_innerstub.PropertySet("u32_1", m);
    }
    }
    }
    public uint[] u32_2 {
    get {
    return MessageElementUtil.UnpackArray<uint>(rr_innerstub.PropertyGet("u32_2"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackArray<uint>("value",value))
    {
    rr_innerstub.PropertySet("u32_2", m);
    }
    }
    }
    public long i64_1 {
    get {
    return (MessageElementUtil.UnpackScalar<long>(rr_innerstub.PropertyGet("i64_1")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<long>("value",value))
    {
    rr_innerstub.PropertySet("i64_1", m);
    }
    }
    }
    public long[] i64_2 {
    get {
    return MessageElementUtil.UnpackArray<long>(rr_innerstub.PropertyGet("i64_2"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackArray<long>("value",value))
    {
    rr_innerstub.PropertySet("i64_2", m);
    }
    }
    }
    public ulong u64_1 {
    get {
    return (MessageElementUtil.UnpackScalar<ulong>(rr_innerstub.PropertyGet("u64_1")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<ulong>("value",value))
    {
    rr_innerstub.PropertySet("u64_1", m);
    }
    }
    }
    public ulong[] u64_2 {
    get {
    return MessageElementUtil.UnpackArray<ulong>(rr_innerstub.PropertyGet("u64_2"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackArray<ulong>("value",value))
    {
    rr_innerstub.PropertySet("u64_2", m);
    }
    }
    }
    public string str1 {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("str1"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackString("value",value))
    {
    rr_innerstub.PropertySet("str1", m);
    }
    }
    }
    public teststruct1 struct1 {
    get {
    return MessageElementUtil.UnpackStructure<teststruct1>(rr_innerstub.PropertyGet("struct1"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackStructure("value",value))
    {
    rr_innerstub.PropertySet("struct1", m);
    }
    }
    }
    public teststruct2 struct2 {
    get {
    return MessageElementUtil.UnpackStructure<teststruct2>(rr_innerstub.PropertyGet("struct2"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackStructure("value",value))
    {
    rr_innerstub.PropertySet("struct2", m);
    }
    }
    }
    public Dictionary<int,double> is_d1 {
    get {
    return MessageElementUtil.UnpackMap<int,double>(rr_innerstub.PropertyGet("is_d1"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackMapType<int,double>("value",value))
    {
    rr_innerstub.PropertySet("is_d1", m);
    }
    }
    }
    public Dictionary<string,double> is_d2 {
    get {
    return MessageElementUtil.UnpackMap<string,double>(rr_innerstub.PropertyGet("is_d2"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackMapType<string,double>("value",value))
    {
    rr_innerstub.PropertySet("is_d2", m);
    }
    }
    }
    public Dictionary<int,double[]> is_d3 {
    get {
    return MessageElementUtil.UnpackMap<int,double[]>(rr_innerstub.PropertyGet("is_d3"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackMapType<int,double[]>("value",value))
    {
    rr_innerstub.PropertySet("is_d3", m);
    }
    }
    }
    public Dictionary<string,double[]> is_d4 {
    get {
    return MessageElementUtil.UnpackMap<string,double[]>(rr_innerstub.PropertyGet("is_d4"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackMapType<string,double[]>("value",value))
    {
    rr_innerstub.PropertySet("is_d4", m);
    }
    }
    }
    public Dictionary<int,MultiDimArray> is_d5 {
    get {
    return MessageElementUtil.UnpackMap<int,MultiDimArray>(rr_innerstub.PropertyGet("is_d5"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackMapType<int,MultiDimArray>("value",value))
    {
    rr_innerstub.PropertySet("is_d5", m);
    }
    }
    }
    public Dictionary<string,MultiDimArray> is_d6 {
    get {
    return MessageElementUtil.UnpackMap<string,MultiDimArray>(rr_innerstub.PropertyGet("is_d6"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackMapType<string,MultiDimArray>("value",value))
    {
    rr_innerstub.PropertySet("is_d6", m);
    }
    }
    }
    public Dictionary<int,string> is_str1 {
    get {
    return MessageElementUtil.UnpackMap<int,string>(rr_innerstub.PropertyGet("is_str1"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackMapType<int,string>("value",value))
    {
    rr_innerstub.PropertySet("is_str1", m);
    }
    }
    }
    public Dictionary<string,string> is_str2 {
    get {
    return MessageElementUtil.UnpackMap<string,string>(rr_innerstub.PropertyGet("is_str2"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackMapType<string,string>("value",value))
    {
    rr_innerstub.PropertySet("is_str2", m);
    }
    }
    }
    public Dictionary<int,teststruct2> is_struct1 {
    get {
    return MessageElementUtil.UnpackMap<int,teststruct2>(rr_innerstub.PropertyGet("is_struct1"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackMapType<int,teststruct2>("value",value))
    {
    rr_innerstub.PropertySet("is_struct1", m);
    }
    }
    }
    public Dictionary<string,teststruct2> is_struct2 {
    get {
    return MessageElementUtil.UnpackMap<string,teststruct2>(rr_innerstub.PropertyGet("is_struct2"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackMapType<string,teststruct2>("value",value))
    {
    rr_innerstub.PropertySet("is_struct2", m);
    }
    }
    }
    public com.robotraconteur.testing.TestService2.ostruct2 struct3 {
    get {
    return MessageElementUtil.UnpackStructure<com.robotraconteur.testing.TestService2.ostruct2>(rr_innerstub.PropertyGet("struct3"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackStructure("value",value))
    {
    rr_innerstub.PropertySet("struct3", m);
    }
    }
    }
    public List<double> list_d1 {
    get {
    return MessageElementUtil.UnpackList<double>(rr_innerstub.PropertyGet("list_d1"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackListType<double>("value",value))
    {
    rr_innerstub.PropertySet("list_d1", m);
    }
    }
    }
    public List<double[]> list_d3 {
    get {
    return MessageElementUtil.UnpackList<double[]>(rr_innerstub.PropertyGet("list_d3"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackListType<double[]>("value",value))
    {
    rr_innerstub.PropertySet("list_d3", m);
    }
    }
    }
    public List<MultiDimArray> list_d5 {
    get {
    return MessageElementUtil.UnpackList<MultiDimArray>(rr_innerstub.PropertyGet("list_d5"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackListType<MultiDimArray>("value",value))
    {
    rr_innerstub.PropertySet("list_d5", m);
    }
    }
    }
    public List<string> list_str1 {
    get {
    return MessageElementUtil.UnpackList<string>(rr_innerstub.PropertyGet("list_str1"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackListType<string>("value",value))
    {
    rr_innerstub.PropertySet("list_str1", m);
    }
    }
    }
    public List<teststruct2> list_struct1 {
    get {
    return MessageElementUtil.UnpackList<teststruct2>(rr_innerstub.PropertyGet("list_struct1"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackListType<teststruct2>("value",value))
    {
    rr_innerstub.PropertySet("list_struct1", m);
    }
    }
    }
    public object var1 {
    get {
    return MessageElementUtil.UnpackVarType(rr_innerstub.PropertyGet("var1"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackVarType("value",value))
    {
    rr_innerstub.PropertySet("var1", m);
    }
    }
    }
    public Dictionary<int,object> var2 {
    get {
    return MessageElementUtil.UnpackMap<int,object>(rr_innerstub.PropertyGet("var2"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackMapType<int,object>("value",value))
    {
    rr_innerstub.PropertySet("var2", m);
    }
    }
    }
    public object var_num {
    get {
    return MessageElementUtil.UnpackVarType(rr_innerstub.PropertyGet("var_num"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackVarType("value",value))
    {
    rr_innerstub.PropertySet("var_num", m);
    }
    }
    }
    public object var_str {
    get {
    return MessageElementUtil.UnpackVarType(rr_innerstub.PropertyGet("var_str"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackVarType("value",value))
    {
    rr_innerstub.PropertySet("var_str", m);
    }
    }
    }
    public object var_struct {
    get {
    return MessageElementUtil.UnpackVarType(rr_innerstub.PropertyGet("var_struct"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackVarType("value",value))
    {
    rr_innerstub.PropertySet("var_struct", m);
    }
    }
    }
    public object var_vector {
    get {
    return MessageElementUtil.UnpackVarType(rr_innerstub.PropertyGet("var_vector"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackVarType("value",value))
    {
    rr_innerstub.PropertySet("var_vector", m);
    }
    }
    }
    public object var_dictionary {
    get {
    return MessageElementUtil.UnpackVarType(rr_innerstub.PropertyGet("var_dictionary"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackVarType("value",value))
    {
    rr_innerstub.PropertySet("var_dictionary", m);
    }
    }
    }
    public object var_list {
    get {
    return MessageElementUtil.UnpackVarType(rr_innerstub.PropertyGet("var_list"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackVarType("value",value))
    {
    rr_innerstub.PropertySet("var_list", m);
    }
    }
    }
    public object var_multidimarray {
    get {
    return MessageElementUtil.UnpackVarType(rr_innerstub.PropertyGet("var_multidimarray"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackVarType("value",value))
    {
    rr_innerstub.PropertySet("var_multidimarray", m);
    }
    }
    }
    public double errtest {
    get {
    return (MessageElementUtil.UnpackScalar<double>(rr_innerstub.PropertyGet("errtest")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<double>("value",value))
    {
    rr_innerstub.PropertySet("errtest", m);
    }
    }
    }
    public teststruct1 nulltest {
    get {
    return MessageElementUtil.UnpackStructure<teststruct1>(rr_innerstub.PropertyGet("nulltest"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackStructure("value",value))
    {
    rr_innerstub.PropertySet("nulltest", m);
    }
    }
    }
    public void func1() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("func1",rr_param))
    {
    }
    }
    }
    public void func2(double d1, double d2) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<double>("d1",d1));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<double>("d2",d2));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("func2",rr_param))
    {
    }
    }
    }
    public double func3(double d1, double d2) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<double>("d1",d1));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<double>("d2",d2));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("func3",rr_param))
    {
    return (MessageElementUtil.UnpackScalar<double>(rr_me));
    }
    }
    }
    public int meaning_of_life() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("meaning_of_life",rr_param))
    {
    return (MessageElementUtil.UnpackScalar<int>(rr_me));
    }
    }
    }
    public void func_errtest() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("func_errtest",rr_param))
    {
    }
    }
    }
    public void func_errtest1() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("func_errtest1",rr_param))
    {
    }
    }
    }
    public void func_errtest2() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("func_errtest2",rr_param))
    {
    }
    }
    }
    public void func_errtest3() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("func_errtest3",rr_param))
    {
    }
    }
    }
    public void o6_op(int op) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<int>("op",op));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("o6_op",rr_param))
    {
    }
    }
    }
    public void pipe_check_error() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("pipe_check_error",rr_param))
    {
    }
    }
    }
    public void test_callbacks() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("test_callbacks",rr_param))
    {
    }
    }
    }
    public event Action ev1;
    public event Action<double, teststruct2> ev2;
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    case "ev1":
    {
    if (ev1 != null) { 
    ev1();
    }
    return;
    }
    case "ev2":
    {
    if (ev2 != null) { 
    double d1=(MessageElementUtil.UnpackScalar<double>(vectorptr_messageelement_util.FindElement(rr_m,"d1")));
    teststruct2 s2=MessageElementUtil.UnpackStructure<teststruct2>(vectorptr_messageelement_util.FindElement(rr_m,"s2"));
    ev2(d1, s2);
    }
    return;
    }
    default:
    break;
    }
    }
    public sub1 get_o1() {
    return (sub1)FindObjRefTyped("o1","com.robotraconteur.testing.TestService1.sub1");
    }
    public sub1 get_o2(int ind) {
    return (sub1)FindObjRefTyped("o2",ind.ToString(),"com.robotraconteur.testing.TestService1.sub1");
    }
    public sub1 get_o3(int ind) {
    return (sub1)FindObjRefTyped("o3",ind.ToString(),"com.robotraconteur.testing.TestService1.sub1");
    }
    public sub1 get_o4(string ind) {
    return (sub1)FindObjRefTyped("o4",ind.ToString(),"com.robotraconteur.testing.TestService1.sub1");
    }
    public com.robotraconteur.testing.TestService2.subobj get_o5() {
    return (com.robotraconteur.testing.TestService2.subobj)FindObjRefTyped("o5","com.robotraconteur.testing.TestService2.subobj");
    }
    public object get_o6() {
    return (object)FindObjRef("o6");
    }
    public Pipe<double[]> p1 {
    get { return rr_p1;  }
    set { throw new InvalidOperationException();}
    }
    public Pipe<teststruct2> p2 {
    get { return rr_p2;  }
    set { throw new InvalidOperationException();}
    }
    public Pipe<double> broadcastpipe {
    get { return rr_broadcastpipe;  }
    set { throw new InvalidOperationException();}
    }
    public Callback<Action> cb1 {
    get { return rr_cb1;  }
    set { throw new InvalidOperationException();}
    }
    public Callback<Action<double, double>> cb2 {
    get { return rr_cb2;  }
    set { throw new InvalidOperationException();}
    }
    public Callback<Func<double,double,double>> cb3 {
    get { return rr_cb3;  }
    set { throw new InvalidOperationException();}
    }
    public Callback<Func<int>> cb_meaning_of_life {
    get { return rr_cb_meaning_of_life;  }
    set { throw new InvalidOperationException();}
    }
    public Callback<Action> cb_errtest {
    get { return rr_cb_errtest;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double[]> w1 {
    get { return rr_w1;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<teststruct2> w2 {
    get { return rr_w2;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<MultiDimArray> w3 {
    get { return rr_w3;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<double> broadcastwire {
    get { return rr_broadcastwire;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    case "cb1":
    {
    this.cb1.Function();
    return new MessageElement("return",(int)0);
    }
    case "cb2":
    {
    double d1=(MessageElementUtil.UnpackScalar<double>(vectorptr_messageelement_util.FindElement(rr_m,"d1")));
    double d2=(MessageElementUtil.UnpackScalar<double>(vectorptr_messageelement_util.FindElement(rr_m,"d2")));
    this.cb2.Function(d1, d2);
    return new MessageElement("return",(int)0);
    }
    case "cb3":
    {
    double d1=(MessageElementUtil.UnpackScalar<double>(vectorptr_messageelement_util.FindElement(rr_m,"d1")));
    double d2=(MessageElementUtil.UnpackScalar<double>(vectorptr_messageelement_util.FindElement(rr_m,"d2")));
    double ret=cb3.Function(d1, d2);
    return MessageElementUtil.PackScalar<double>("return",ret);
    }
    case "cb_meaning_of_life":
    {
    int ret=cb_meaning_of_life.Function();
    return MessageElementUtil.PackScalar<int>("return",ret);
    }
    case "cb_errtest":
    {
    this.cb_errtest.Function();
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public ArrayMemory<double> m1 { 
    get { return rr_m1; }
    }
    public MultiDimArrayMemory<double> m2 {
    get { return rr_m2; }
    }
    public MultiDimArrayMemory<byte> m3 {
    get { return rr_m3; }
    }
    public virtual async Task<double> async_get_d1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("d1",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<double>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_d1(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<double>("value",value))
    {
    await rr_async_PropertySet("d1",mm,rr_timeout);
    }
    }
    public virtual async Task<double[]> async_get_d2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("d2",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackArray<double>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_d2(double[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackArray<double>("value",value))
    {
    await rr_async_PropertySet("d2",mm,rr_timeout);
    }
    }
    public virtual async Task<double[]> async_get_d3(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("d3",rr_timeout)) {
    var rr_ret=DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackArray<double>(rr_value), 16, false);
    return rr_ret;
    } }
    public virtual async Task async_set_d3(double[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackArray<double>("value",DataTypeUtil.VerifyArrayLength(value, 16, false)))
    {
    await rr_async_PropertySet("d3",mm,rr_timeout);
    }
    }
    public virtual async Task<double[]> async_get_d4(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("d4",rr_timeout)) {
    var rr_ret=DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackArray<double>(rr_value), 16, true);
    return rr_ret;
    } }
    public virtual async Task async_set_d4(double[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackArray<double>("value",DataTypeUtil.VerifyArrayLength(value, 16, true)))
    {
    await rr_async_PropertySet("d4",mm,rr_timeout);
    }
    }
    public virtual async Task<MultiDimArray> async_get_d5(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("d5",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackMultiDimArray(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_d5(MultiDimArray value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackMultiDimArray("value",(MultiDimArray)value))
    {
    await rr_async_PropertySet("d5",mm,rr_timeout);
    }
    }
    public virtual async Task<MultiDimArray> async_get_d6(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("d6",rr_timeout)) {
    var rr_ret=DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMultiDimArray(rr_value),9,new uint[] {3,3});
    return rr_ret;
    } }
    public virtual async Task async_set_d6(MultiDimArray value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackMultiDimArray("value",(MultiDimArray)DataTypeUtil.VerifyArrayLength(value,9,new uint[] {3,3})))
    {
    await rr_async_PropertySet("d6",mm,rr_timeout);
    }
    }
    public virtual async Task<float> async_get_s1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("s1",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<float>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_s1(float value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<float>("value",value))
    {
    await rr_async_PropertySet("s1",mm,rr_timeout);
    }
    }
    public virtual async Task<float[]> async_get_s2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("s2",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackArray<float>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_s2(float[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackArray<float>("value",value))
    {
    await rr_async_PropertySet("s2",mm,rr_timeout);
    }
    }
    public virtual async Task<sbyte> async_get_i8_1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("i8_1",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<sbyte>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_i8_1(sbyte value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<sbyte>("value",value))
    {
    await rr_async_PropertySet("i8_1",mm,rr_timeout);
    }
    }
    public virtual async Task<sbyte[]> async_get_i8_2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("i8_2",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackArray<sbyte>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_i8_2(sbyte[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackArray<sbyte>("value",value))
    {
    await rr_async_PropertySet("i8_2",mm,rr_timeout);
    }
    }
    public virtual async Task<byte> async_get_u8_1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("u8_1",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<byte>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_u8_1(byte value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<byte>("value",value))
    {
    await rr_async_PropertySet("u8_1",mm,rr_timeout);
    }
    }
    public virtual async Task<byte[]> async_get_u8_2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("u8_2",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackArray<byte>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_u8_2(byte[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackArray<byte>("value",value))
    {
    await rr_async_PropertySet("u8_2",mm,rr_timeout);
    }
    }
    public virtual async Task<MultiDimArray> async_get_u8_3(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("u8_3",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackMultiDimArray(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_u8_3(MultiDimArray value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackMultiDimArray("value",(MultiDimArray)value))
    {
    await rr_async_PropertySet("u8_3",mm,rr_timeout);
    }
    }
    public virtual async Task<short> async_get_i16_1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("i16_1",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<short>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_i16_1(short value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<short>("value",value))
    {
    await rr_async_PropertySet("i16_1",mm,rr_timeout);
    }
    }
    public virtual async Task<short[]> async_get_i16_2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("i16_2",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackArray<short>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_i16_2(short[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackArray<short>("value",value))
    {
    await rr_async_PropertySet("i16_2",mm,rr_timeout);
    }
    }
    public virtual async Task<ushort> async_get_u16_1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("u16_1",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<ushort>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_u16_1(ushort value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<ushort>("value",value))
    {
    await rr_async_PropertySet("u16_1",mm,rr_timeout);
    }
    }
    public virtual async Task<ushort[]> async_get_u16_2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("u16_2",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackArray<ushort>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_u16_2(ushort[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackArray<ushort>("value",value))
    {
    await rr_async_PropertySet("u16_2",mm,rr_timeout);
    }
    }
    public virtual async Task<int> async_get_i32_1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("i32_1",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<int>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_i32_1(int value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<int>("value",value))
    {
    await rr_async_PropertySet("i32_1",mm,rr_timeout);
    }
    }
    public virtual async Task<int[]> async_get_i32_2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("i32_2",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackArray<int>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_i32_2(int[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackArray<int>("value",value))
    {
    await rr_async_PropertySet("i32_2",mm,rr_timeout);
    }
    }
    public virtual async Task<int[]> async_get_i32_huge(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("i32_huge",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackArray<int>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_i32_huge(int[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackArray<int>("value",value))
    {
    await rr_async_PropertySet("i32_huge",mm,rr_timeout);
    }
    }
    public virtual async Task<uint> async_get_u32_1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("u32_1",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<uint>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_u32_1(uint value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<uint>("value",value))
    {
    await rr_async_PropertySet("u32_1",mm,rr_timeout);
    }
    }
    public virtual async Task<uint[]> async_get_u32_2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("u32_2",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackArray<uint>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_u32_2(uint[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackArray<uint>("value",value))
    {
    await rr_async_PropertySet("u32_2",mm,rr_timeout);
    }
    }
    public virtual async Task<long> async_get_i64_1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("i64_1",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<long>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_i64_1(long value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<long>("value",value))
    {
    await rr_async_PropertySet("i64_1",mm,rr_timeout);
    }
    }
    public virtual async Task<long[]> async_get_i64_2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("i64_2",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackArray<long>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_i64_2(long[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackArray<long>("value",value))
    {
    await rr_async_PropertySet("i64_2",mm,rr_timeout);
    }
    }
    public virtual async Task<ulong> async_get_u64_1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("u64_1",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<ulong>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_u64_1(ulong value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<ulong>("value",value))
    {
    await rr_async_PropertySet("u64_1",mm,rr_timeout);
    }
    }
    public virtual async Task<ulong[]> async_get_u64_2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("u64_2",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackArray<ulong>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_u64_2(ulong[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackArray<ulong>("value",value))
    {
    await rr_async_PropertySet("u64_2",mm,rr_timeout);
    }
    }
    public virtual async Task<string> async_get_str1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("str1",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_str1(string value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackString("value",value))
    {
    await rr_async_PropertySet("str1",mm,rr_timeout);
    }
    }
    public virtual async Task<teststruct1> async_get_struct1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("struct1",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<teststruct1>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_struct1(teststruct1 value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackStructure("value",value))
    {
    await rr_async_PropertySet("struct1",mm,rr_timeout);
    }
    }
    public virtual async Task<teststruct2> async_get_struct2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("struct2",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<teststruct2>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_struct2(teststruct2 value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackStructure("value",value))
    {
    await rr_async_PropertySet("struct2",mm,rr_timeout);
    }
    }
    public virtual async Task<Dictionary<int,double>> async_get_is_d1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("is_d1",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackMap<int,double>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_is_d1(Dictionary<int,double> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackMapType<int,double>("value",value))
    {
    await rr_async_PropertySet("is_d1",mm,rr_timeout);
    }
    }
    public virtual async Task<Dictionary<string,double>> async_get_is_d2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("is_d2",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackMap<string,double>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_is_d2(Dictionary<string,double> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackMapType<string,double>("value",value))
    {
    await rr_async_PropertySet("is_d2",mm,rr_timeout);
    }
    }
    public virtual async Task<Dictionary<int,double[]>> async_get_is_d3(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("is_d3",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackMap<int,double[]>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_is_d3(Dictionary<int,double[]> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackMapType<int,double[]>("value",value))
    {
    await rr_async_PropertySet("is_d3",mm,rr_timeout);
    }
    }
    public virtual async Task<Dictionary<string,double[]>> async_get_is_d4(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("is_d4",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackMap<string,double[]>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_is_d4(Dictionary<string,double[]> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackMapType<string,double[]>("value",value))
    {
    await rr_async_PropertySet("is_d4",mm,rr_timeout);
    }
    }
    public virtual async Task<Dictionary<int,MultiDimArray>> async_get_is_d5(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("is_d5",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackMap<int,MultiDimArray>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_is_d5(Dictionary<int,MultiDimArray> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackMapType<int,MultiDimArray>("value",value))
    {
    await rr_async_PropertySet("is_d5",mm,rr_timeout);
    }
    }
    public virtual async Task<Dictionary<string,MultiDimArray>> async_get_is_d6(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("is_d6",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackMap<string,MultiDimArray>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_is_d6(Dictionary<string,MultiDimArray> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackMapType<string,MultiDimArray>("value",value))
    {
    await rr_async_PropertySet("is_d6",mm,rr_timeout);
    }
    }
    public virtual async Task<Dictionary<int,string>> async_get_is_str1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("is_str1",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackMap<int,string>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_is_str1(Dictionary<int,string> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackMapType<int,string>("value",value))
    {
    await rr_async_PropertySet("is_str1",mm,rr_timeout);
    }
    }
    public virtual async Task<Dictionary<string,string>> async_get_is_str2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("is_str2",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackMap<string,string>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_is_str2(Dictionary<string,string> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackMapType<string,string>("value",value))
    {
    await rr_async_PropertySet("is_str2",mm,rr_timeout);
    }
    }
    public virtual async Task<Dictionary<int,teststruct2>> async_get_is_struct1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("is_struct1",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackMap<int,teststruct2>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_is_struct1(Dictionary<int,teststruct2> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackMapType<int,teststruct2>("value",value))
    {
    await rr_async_PropertySet("is_struct1",mm,rr_timeout);
    }
    }
    public virtual async Task<Dictionary<string,teststruct2>> async_get_is_struct2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("is_struct2",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackMap<string,teststruct2>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_is_struct2(Dictionary<string,teststruct2> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackMapType<string,teststruct2>("value",value))
    {
    await rr_async_PropertySet("is_struct2",mm,rr_timeout);
    }
    }
    public virtual async Task<com.robotraconteur.testing.TestService2.ostruct2> async_get_struct3(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("struct3",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<com.robotraconteur.testing.TestService2.ostruct2>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_struct3(com.robotraconteur.testing.TestService2.ostruct2 value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackStructure("value",value))
    {
    await rr_async_PropertySet("struct3",mm,rr_timeout);
    }
    }
    public virtual async Task<List<double>> async_get_list_d1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("list_d1",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackList<double>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_list_d1(List<double> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackListType<double>("value",value))
    {
    await rr_async_PropertySet("list_d1",mm,rr_timeout);
    }
    }
    public virtual async Task<List<double[]>> async_get_list_d3(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("list_d3",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackList<double[]>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_list_d3(List<double[]> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackListType<double[]>("value",value))
    {
    await rr_async_PropertySet("list_d3",mm,rr_timeout);
    }
    }
    public virtual async Task<List<MultiDimArray>> async_get_list_d5(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("list_d5",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackList<MultiDimArray>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_list_d5(List<MultiDimArray> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackListType<MultiDimArray>("value",value))
    {
    await rr_async_PropertySet("list_d5",mm,rr_timeout);
    }
    }
    public virtual async Task<List<string>> async_get_list_str1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("list_str1",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackList<string>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_list_str1(List<string> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackListType<string>("value",value))
    {
    await rr_async_PropertySet("list_str1",mm,rr_timeout);
    }
    }
    public virtual async Task<List<teststruct2>> async_get_list_struct1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("list_struct1",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackList<teststruct2>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_list_struct1(List<teststruct2> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackListType<teststruct2>("value",value))
    {
    await rr_async_PropertySet("list_struct1",mm,rr_timeout);
    }
    }
    public virtual async Task<object> async_get_var1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("var1",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackVarType(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_var1(object value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackVarType("value",value))
    {
    await rr_async_PropertySet("var1",mm,rr_timeout);
    }
    }
    public virtual async Task<Dictionary<int,object>> async_get_var2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("var2",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackMap<int,object>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_var2(Dictionary<int,object> value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackMapType<int,object>("value",value))
    {
    await rr_async_PropertySet("var2",mm,rr_timeout);
    }
    }
    public virtual async Task<object> async_get_var_num(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("var_num",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackVarType(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_var_num(object value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackVarType("value",value))
    {
    await rr_async_PropertySet("var_num",mm,rr_timeout);
    }
    }
    public virtual async Task<object> async_get_var_str(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("var_str",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackVarType(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_var_str(object value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackVarType("value",value))
    {
    await rr_async_PropertySet("var_str",mm,rr_timeout);
    }
    }
    public virtual async Task<object> async_get_var_struct(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("var_struct",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackVarType(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_var_struct(object value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackVarType("value",value))
    {
    await rr_async_PropertySet("var_struct",mm,rr_timeout);
    }
    }
    public virtual async Task<object> async_get_var_vector(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("var_vector",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackVarType(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_var_vector(object value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackVarType("value",value))
    {
    await rr_async_PropertySet("var_vector",mm,rr_timeout);
    }
    }
    public virtual async Task<object> async_get_var_dictionary(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("var_dictionary",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackVarType(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_var_dictionary(object value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackVarType("value",value))
    {
    await rr_async_PropertySet("var_dictionary",mm,rr_timeout);
    }
    }
    public virtual async Task<object> async_get_var_list(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("var_list",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackVarType(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_var_list(object value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackVarType("value",value))
    {
    await rr_async_PropertySet("var_list",mm,rr_timeout);
    }
    }
    public virtual async Task<object> async_get_var_multidimarray(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("var_multidimarray",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackVarType(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_var_multidimarray(object value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackVarType("value",value))
    {
    await rr_async_PropertySet("var_multidimarray",mm,rr_timeout);
    }
    }
    public virtual async Task<double> async_get_errtest(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("errtest",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<double>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_errtest(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<double>("value",value))
    {
    await rr_async_PropertySet("errtest",mm,rr_timeout);
    }
    }
    public virtual async Task<teststruct1> async_get_nulltest(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("nulltest",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackStructure<teststruct1>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_nulltest(teststruct1 value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackStructure("value",value))
    {
    await rr_async_PropertySet("nulltest",mm,rr_timeout);
    }
    }
    public virtual async Task async_func1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("func1",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_func2(double d1, double d2,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<double>("d1",d1));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<double>("d2",d2));
    using(var rr_return = await rr_async_FunctionCall("func2",rr_param,rr_timeout)) {
    } } }
    public virtual async Task<double> async_func3(double d1, double d2,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<double>("d1",d1));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<double>("d2",d2));
    using(var rr_return = await rr_async_FunctionCall("func3",rr_param,rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<double>(rr_return));
    return rr_ret;
    } } }
    public virtual async Task<int> async_meaning_of_life(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("meaning_of_life",rr_param,rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<int>(rr_return));
    return rr_ret;
    } } }
    public virtual async Task async_func_errtest(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("func_errtest",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_func_errtest1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("func_errtest1",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_func_errtest2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("func_errtest2",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_func_errtest3(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("func_errtest3",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_o6_op(int op,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<int>("op",op));
    using(var rr_return = await rr_async_FunctionCall("o6_op",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_pipe_check_error(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("pipe_check_error",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_test_callbacks(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("test_callbacks",rr_param,rr_timeout)) {
    } } }
    public Task<sub1> async_get_o1(int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    return AsyncFindObjRefTyped<sub1>("o1","com.robotraconteur.testing.TestService1.sub1",timeout);
    }
    public Task<sub1>  async_get_o2(int ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    return AsyncFindObjRefTyped<sub1>("o2",ind.ToString(),"com.robotraconteur.testing.TestService1.sub1",timeout);
    }
    public Task<sub1>  async_get_o3(int ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    return AsyncFindObjRefTyped<sub1>("o3",ind.ToString(),"com.robotraconteur.testing.TestService1.sub1",timeout);
    }
    public Task<sub1>  async_get_o4(string ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    return AsyncFindObjRefTyped<sub1>("o4",ind.ToString(),"com.robotraconteur.testing.TestService1.sub1",timeout);
    }
    public Task<com.robotraconteur.testing.TestService2.subobj> async_get_o5(int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    return AsyncFindObjRefTyped<com.robotraconteur.testing.TestService2.subobj>("o5","com.robotraconteur.testing.TestService2.subobj",timeout);
    }
    public Task<object> async_get_o6(int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE) {
    return AsyncFindObjRef("o6",timeout);
    }
}
public interface async_sub1
{
    Task<double[]> async_get_d1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_d1(double[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<MultiDimArray> async_get_d2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_d2(MultiDimArray value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_s_ind(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_s_ind(string value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<int> async_get_i_ind(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_i_ind(int value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<sub2> async_get_o2_1(int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<sub2> async_get_o2_2(int ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<sub2> async_get_o2_3(string ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class sub1_stub : ServiceStub , sub1, async_sub1{
    public sub1_stub(WrappedServiceStub innerstub) : base(innerstub) {
    }
    public double[] d1 {
    get {
    return MessageElementUtil.UnpackArray<double>(rr_innerstub.PropertyGet("d1"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackArray<double>("value",value))
    {
    rr_innerstub.PropertySet("d1", m);
    }
    }
    }
    public MultiDimArray d2 {
    get {
    return MessageElementUtil.UnpackMultiDimArray(rr_innerstub.PropertyGet("d2"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackMultiDimArray("value",(MultiDimArray)value))
    {
    rr_innerstub.PropertySet("d2", m);
    }
    }
    }
    public string s_ind {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("s_ind"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackString("value",value))
    {
    rr_innerstub.PropertySet("s_ind", m);
    }
    }
    }
    public int i_ind {
    get {
    return (MessageElementUtil.UnpackScalar<int>(rr_innerstub.PropertyGet("i_ind")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<int>("value",value))
    {
    rr_innerstub.PropertySet("i_ind", m);
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public sub2 get_o2_1() {
    return (sub2)FindObjRefTyped("o2_1","com.robotraconteur.testing.TestService1.sub2");
    }
    public sub2 get_o2_2(int ind) {
    return (sub2)FindObjRefTyped("o2_2",ind.ToString(),"com.robotraconteur.testing.TestService1.sub2");
    }
    public sub2 get_o2_3(string ind) {
    return (sub2)FindObjRefTyped("o2_3",ind.ToString(),"com.robotraconteur.testing.TestService1.sub2");
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<double[]> async_get_d1(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("d1",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackArray<double>(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_d1(double[] value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackArray<double>("value",value))
    {
    await rr_async_PropertySet("d1",mm,rr_timeout);
    }
    }
    public virtual async Task<MultiDimArray> async_get_d2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("d2",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackMultiDimArray(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_d2(MultiDimArray value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackMultiDimArray("value",(MultiDimArray)value))
    {
    await rr_async_PropertySet("d2",mm,rr_timeout);
    }
    }
    public virtual async Task<string> async_get_s_ind(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("s_ind",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_s_ind(string value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackString("value",value))
    {
    await rr_async_PropertySet("s_ind",mm,rr_timeout);
    }
    }
    public virtual async Task<int> async_get_i_ind(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("i_ind",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<int>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_i_ind(int value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<int>("value",value))
    {
    await rr_async_PropertySet("i_ind",mm,rr_timeout);
    }
    }
    public Task<sub2> async_get_o2_1(int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    return AsyncFindObjRefTyped<sub2>("o2_1","com.robotraconteur.testing.TestService1.sub2",timeout);
    }
    public Task<sub2>  async_get_o2_2(int ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    return AsyncFindObjRefTyped<sub2>("o2_2",ind.ToString(),"com.robotraconteur.testing.TestService1.sub2",timeout);
    }
    public Task<sub2>  async_get_o2_3(string ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    return AsyncFindObjRefTyped<sub2>("o2_3",ind.ToString(),"com.robotraconteur.testing.TestService1.sub2",timeout);
    }
}
public interface async_sub2
{
    Task<string> async_get_s_ind(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_s_ind(string value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<int> async_get_i_ind(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_i_ind(int value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_data(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_data(string value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<sub3> async_get_o3_1(string ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class sub2_stub : ServiceStub , sub2, async_sub2{
    public sub2_stub(WrappedServiceStub innerstub) : base(innerstub) {
    }
    public string s_ind {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("s_ind"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackString("value",value))
    {
    rr_innerstub.PropertySet("s_ind", m);
    }
    }
    }
    public int i_ind {
    get {
    return (MessageElementUtil.UnpackScalar<int>(rr_innerstub.PropertyGet("i_ind")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<int>("value",value))
    {
    rr_innerstub.PropertySet("i_ind", m);
    }
    }
    }
    public string data {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("data"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackString("value",value))
    {
    rr_innerstub.PropertySet("data", m);
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public sub3 get_o3_1(string ind) {
    return (sub3)FindObjRefTyped("o3_1",ind.ToString(),"com.robotraconteur.testing.TestService1.sub3");
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<string> async_get_s_ind(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("s_ind",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_s_ind(string value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackString("value",value))
    {
    await rr_async_PropertySet("s_ind",mm,rr_timeout);
    }
    }
    public virtual async Task<int> async_get_i_ind(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("i_ind",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<int>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_i_ind(int value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<int>("value",value))
    {
    await rr_async_PropertySet("i_ind",mm,rr_timeout);
    }
    }
    public virtual async Task<string> async_get_data(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("data",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_data(string value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackString("value",value))
    {
    await rr_async_PropertySet("data",mm,rr_timeout);
    }
    }
    public Task<sub3>  async_get_o3_1(string ind, int timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    return AsyncFindObjRefTyped<sub3>("o3_1",ind.ToString(),"com.robotraconteur.testing.TestService1.sub3",timeout);
    }
}
public interface async_sub3
{
    Task<string> async_get_ind(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_ind(string value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<string> async_get_data2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_data2(string value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<double> async_get_data3(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_data3(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<double> async_add(double d,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class sub3_stub : ServiceStub , sub3, async_sub3{
    public sub3_stub(WrappedServiceStub innerstub) : base(innerstub) {
    }
    public string ind {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("ind"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackString("value",value))
    {
    rr_innerstub.PropertySet("ind", m);
    }
    }
    }
    public string data2 {
    get {
    return MessageElementUtil.UnpackString(rr_innerstub.PropertyGet("data2"));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackString("value",value))
    {
    rr_innerstub.PropertySet("data2", m);
    }
    }
    }
    public double data3 {
    get {
    return (MessageElementUtil.UnpackScalar<double>(rr_innerstub.PropertyGet("data3")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<double>("value",value))
    {
    rr_innerstub.PropertySet("data3", m);
    }
    }
    }
    public double add(double d) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<double>("d",d));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("add",rr_param))
    {
    return (MessageElementUtil.UnpackScalar<double>(rr_me));
    }
    }
    }
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<string> async_get_ind(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("ind",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_ind(string value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackString("value",value))
    {
    await rr_async_PropertySet("ind",mm,rr_timeout);
    }
    }
    public virtual async Task<string> async_get_data2(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("data2",rr_timeout)) {
    var rr_ret=MessageElementUtil.UnpackString(rr_value);
    return rr_ret;
    } }
    public virtual async Task async_set_data2(string value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackString("value",value))
    {
    await rr_async_PropertySet("data2",mm,rr_timeout);
    }
    }
    public virtual async Task<double> async_get_data3(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("data3",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<double>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_data3(double value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<double>("value",value))
    {
    await rr_async_PropertySet("data3",mm,rr_timeout);
    }
    }
    public virtual async Task<double> async_add(double d,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<double>("d",d));
    using(var rr_return = await rr_async_FunctionCall("add",rr_param,rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<double>(rr_return));
    return rr_ret;
    } } }
}
public class testroot_skel : ServiceSkel {
    protected testroot obj;
    protected async_testroot async_obj;
    public testroot_skel(object o) : base(o)    {
    obj=(testroot)o;
    async_obj = o as async_testroot;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "d1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_d1().ContinueWith(t => async_adapter.EndTask<double>(t,async_ret => MessageElementUtil.PackScalar<double>("return",async_ret)));
    return null;
    }
    double ret=obj.d1;
    return MessageElementUtil.PackScalar<double>("return",ret);
    }
    case "d2":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_d2().ContinueWith(t => async_adapter.EndTask<double[]>(t,async_ret => MessageElementUtil.PackArray<double>("return",async_ret)));
    return null;
    }
    double[] ret=obj.d2;
    return MessageElementUtil.PackArray<double>("return",ret);
    }
    case "d3":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_d3().ContinueWith(t => async_adapter.EndTask<double[]>(t,async_ret => MessageElementUtil.PackArray<double>("return",DataTypeUtil.VerifyArrayLength(async_ret, 16, false))));
    return null;
    }
    double[] ret=obj.d3;
    return MessageElementUtil.PackArray<double>("return",DataTypeUtil.VerifyArrayLength(ret, 16, false));
    }
    case "d4":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_d4().ContinueWith(t => async_adapter.EndTask<double[]>(t,async_ret => MessageElementUtil.PackArray<double>("return",DataTypeUtil.VerifyArrayLength(async_ret, 16, true))));
    return null;
    }
    double[] ret=obj.d4;
    return MessageElementUtil.PackArray<double>("return",DataTypeUtil.VerifyArrayLength(ret, 16, true));
    }
    case "d5":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_d5().ContinueWith(t => async_adapter.EndTask<MultiDimArray>(t,async_ret => MessageElementUtil.PackMultiDimArray("return",(MultiDimArray)async_ret)));
    return null;
    }
    MultiDimArray ret=obj.d5;
    return MessageElementUtil.PackMultiDimArray("return",(MultiDimArray)ret);
    }
    case "d6":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_d6().ContinueWith(t => async_adapter.EndTask<MultiDimArray>(t,async_ret => MessageElementUtil.PackMultiDimArray("return",(MultiDimArray)DataTypeUtil.VerifyArrayLength(async_ret,9,new uint[] {3,3}))));
    return null;
    }
    MultiDimArray ret=obj.d6;
    return MessageElementUtil.PackMultiDimArray("return",(MultiDimArray)DataTypeUtil.VerifyArrayLength(ret,9,new uint[] {3,3}));
    }
    case "s1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_s1().ContinueWith(t => async_adapter.EndTask<float>(t,async_ret => MessageElementUtil.PackScalar<float>("return",async_ret)));
    return null;
    }
    float ret=obj.s1;
    return MessageElementUtil.PackScalar<float>("return",ret);
    }
    case "s2":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_s2().ContinueWith(t => async_adapter.EndTask<float[]>(t,async_ret => MessageElementUtil.PackArray<float>("return",async_ret)));
    return null;
    }
    float[] ret=obj.s2;
    return MessageElementUtil.PackArray<float>("return",ret);
    }
    case "i8_1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_i8_1().ContinueWith(t => async_adapter.EndTask<sbyte>(t,async_ret => MessageElementUtil.PackScalar<sbyte>("return",async_ret)));
    return null;
    }
    sbyte ret=obj.i8_1;
    return MessageElementUtil.PackScalar<sbyte>("return",ret);
    }
    case "i8_2":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_i8_2().ContinueWith(t => async_adapter.EndTask<sbyte[]>(t,async_ret => MessageElementUtil.PackArray<sbyte>("return",async_ret)));
    return null;
    }
    sbyte[] ret=obj.i8_2;
    return MessageElementUtil.PackArray<sbyte>("return",ret);
    }
    case "u8_1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_u8_1().ContinueWith(t => async_adapter.EndTask<byte>(t,async_ret => MessageElementUtil.PackScalar<byte>("return",async_ret)));
    return null;
    }
    byte ret=obj.u8_1;
    return MessageElementUtil.PackScalar<byte>("return",ret);
    }
    case "u8_2":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_u8_2().ContinueWith(t => async_adapter.EndTask<byte[]>(t,async_ret => MessageElementUtil.PackArray<byte>("return",async_ret)));
    return null;
    }
    byte[] ret=obj.u8_2;
    return MessageElementUtil.PackArray<byte>("return",ret);
    }
    case "u8_3":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_u8_3().ContinueWith(t => async_adapter.EndTask<MultiDimArray>(t,async_ret => MessageElementUtil.PackMultiDimArray("return",(MultiDimArray)async_ret)));
    return null;
    }
    MultiDimArray ret=obj.u8_3;
    return MessageElementUtil.PackMultiDimArray("return",(MultiDimArray)ret);
    }
    case "i16_1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_i16_1().ContinueWith(t => async_adapter.EndTask<short>(t,async_ret => MessageElementUtil.PackScalar<short>("return",async_ret)));
    return null;
    }
    short ret=obj.i16_1;
    return MessageElementUtil.PackScalar<short>("return",ret);
    }
    case "i16_2":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_i16_2().ContinueWith(t => async_adapter.EndTask<short[]>(t,async_ret => MessageElementUtil.PackArray<short>("return",async_ret)));
    return null;
    }
    short[] ret=obj.i16_2;
    return MessageElementUtil.PackArray<short>("return",ret);
    }
    case "u16_1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_u16_1().ContinueWith(t => async_adapter.EndTask<ushort>(t,async_ret => MessageElementUtil.PackScalar<ushort>("return",async_ret)));
    return null;
    }
    ushort ret=obj.u16_1;
    return MessageElementUtil.PackScalar<ushort>("return",ret);
    }
    case "u16_2":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_u16_2().ContinueWith(t => async_adapter.EndTask<ushort[]>(t,async_ret => MessageElementUtil.PackArray<ushort>("return",async_ret)));
    return null;
    }
    ushort[] ret=obj.u16_2;
    return MessageElementUtil.PackArray<ushort>("return",ret);
    }
    case "i32_1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_i32_1().ContinueWith(t => async_adapter.EndTask<int>(t,async_ret => MessageElementUtil.PackScalar<int>("return",async_ret)));
    return null;
    }
    int ret=obj.i32_1;
    return MessageElementUtil.PackScalar<int>("return",ret);
    }
    case "i32_2":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_i32_2().ContinueWith(t => async_adapter.EndTask<int[]>(t,async_ret => MessageElementUtil.PackArray<int>("return",async_ret)));
    return null;
    }
    int[] ret=obj.i32_2;
    return MessageElementUtil.PackArray<int>("return",ret);
    }
    case "i32_huge":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_i32_huge().ContinueWith(t => async_adapter.EndTask<int[]>(t,async_ret => MessageElementUtil.PackArray<int>("return",async_ret)));
    return null;
    }
    int[] ret=obj.i32_huge;
    return MessageElementUtil.PackArray<int>("return",ret);
    }
    case "u32_1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_u32_1().ContinueWith(t => async_adapter.EndTask<uint>(t,async_ret => MessageElementUtil.PackScalar<uint>("return",async_ret)));
    return null;
    }
    uint ret=obj.u32_1;
    return MessageElementUtil.PackScalar<uint>("return",ret);
    }
    case "u32_2":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_u32_2().ContinueWith(t => async_adapter.EndTask<uint[]>(t,async_ret => MessageElementUtil.PackArray<uint>("return",async_ret)));
    return null;
    }
    uint[] ret=obj.u32_2;
    return MessageElementUtil.PackArray<uint>("return",ret);
    }
    case "i64_1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_i64_1().ContinueWith(t => async_adapter.EndTask<long>(t,async_ret => MessageElementUtil.PackScalar<long>("return",async_ret)));
    return null;
    }
    long ret=obj.i64_1;
    return MessageElementUtil.PackScalar<long>("return",ret);
    }
    case "i64_2":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_i64_2().ContinueWith(t => async_adapter.EndTask<long[]>(t,async_ret => MessageElementUtil.PackArray<long>("return",async_ret)));
    return null;
    }
    long[] ret=obj.i64_2;
    return MessageElementUtil.PackArray<long>("return",ret);
    }
    case "u64_1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_u64_1().ContinueWith(t => async_adapter.EndTask<ulong>(t,async_ret => MessageElementUtil.PackScalar<ulong>("return",async_ret)));
    return null;
    }
    ulong ret=obj.u64_1;
    return MessageElementUtil.PackScalar<ulong>("return",ret);
    }
    case "u64_2":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_u64_2().ContinueWith(t => async_adapter.EndTask<ulong[]>(t,async_ret => MessageElementUtil.PackArray<ulong>("return",async_ret)));
    return null;
    }
    ulong[] ret=obj.u64_2;
    return MessageElementUtil.PackArray<ulong>("return",ret);
    }
    case "str1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_str1().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.str1;
    return MessageElementUtil.PackString("return",ret);
    }
    case "struct1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_struct1().ContinueWith(t => async_adapter.EndTask<teststruct1>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    teststruct1 ret=obj.struct1;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "struct2":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_struct2().ContinueWith(t => async_adapter.EndTask<teststruct2>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    teststruct2 ret=obj.struct2;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "is_d1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_is_d1().ContinueWith(t => async_adapter.EndTask<Dictionary<int,double>>(t,async_ret => MessageElementUtil.PackMapType<int,double>("return",async_ret)));
    return null;
    }
    Dictionary<int,double> ret=obj.is_d1;
    return MessageElementUtil.PackMapType<int,double>("return",ret);
    }
    case "is_d2":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_is_d2().ContinueWith(t => async_adapter.EndTask<Dictionary<string,double>>(t,async_ret => MessageElementUtil.PackMapType<string,double>("return",async_ret)));
    return null;
    }
    Dictionary<string,double> ret=obj.is_d2;
    return MessageElementUtil.PackMapType<string,double>("return",ret);
    }
    case "is_d3":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_is_d3().ContinueWith(t => async_adapter.EndTask<Dictionary<int,double[]>>(t,async_ret => MessageElementUtil.PackMapType<int,double[]>("return",async_ret)));
    return null;
    }
    Dictionary<int,double[]> ret=obj.is_d3;
    return MessageElementUtil.PackMapType<int,double[]>("return",ret);
    }
    case "is_d4":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_is_d4().ContinueWith(t => async_adapter.EndTask<Dictionary<string,double[]>>(t,async_ret => MessageElementUtil.PackMapType<string,double[]>("return",async_ret)));
    return null;
    }
    Dictionary<string,double[]> ret=obj.is_d4;
    return MessageElementUtil.PackMapType<string,double[]>("return",ret);
    }
    case "is_d5":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_is_d5().ContinueWith(t => async_adapter.EndTask<Dictionary<int,MultiDimArray>>(t,async_ret => MessageElementUtil.PackMapType<int,MultiDimArray>("return",async_ret)));
    return null;
    }
    Dictionary<int,MultiDimArray> ret=obj.is_d5;
    return MessageElementUtil.PackMapType<int,MultiDimArray>("return",ret);
    }
    case "is_d6":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_is_d6().ContinueWith(t => async_adapter.EndTask<Dictionary<string,MultiDimArray>>(t,async_ret => MessageElementUtil.PackMapType<string,MultiDimArray>("return",async_ret)));
    return null;
    }
    Dictionary<string,MultiDimArray> ret=obj.is_d6;
    return MessageElementUtil.PackMapType<string,MultiDimArray>("return",ret);
    }
    case "is_str1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_is_str1().ContinueWith(t => async_adapter.EndTask<Dictionary<int,string>>(t,async_ret => MessageElementUtil.PackMapType<int,string>("return",async_ret)));
    return null;
    }
    Dictionary<int,string> ret=obj.is_str1;
    return MessageElementUtil.PackMapType<int,string>("return",ret);
    }
    case "is_str2":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_is_str2().ContinueWith(t => async_adapter.EndTask<Dictionary<string,string>>(t,async_ret => MessageElementUtil.PackMapType<string,string>("return",async_ret)));
    return null;
    }
    Dictionary<string,string> ret=obj.is_str2;
    return MessageElementUtil.PackMapType<string,string>("return",ret);
    }
    case "is_struct1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_is_struct1().ContinueWith(t => async_adapter.EndTask<Dictionary<int,teststruct2>>(t,async_ret => MessageElementUtil.PackMapType<int,teststruct2>("return",async_ret)));
    return null;
    }
    Dictionary<int,teststruct2> ret=obj.is_struct1;
    return MessageElementUtil.PackMapType<int,teststruct2>("return",ret);
    }
    case "is_struct2":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_is_struct2().ContinueWith(t => async_adapter.EndTask<Dictionary<string,teststruct2>>(t,async_ret => MessageElementUtil.PackMapType<string,teststruct2>("return",async_ret)));
    return null;
    }
    Dictionary<string,teststruct2> ret=obj.is_struct2;
    return MessageElementUtil.PackMapType<string,teststruct2>("return",ret);
    }
    case "struct3":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_struct3().ContinueWith(t => async_adapter.EndTask<com.robotraconteur.testing.TestService2.ostruct2>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    com.robotraconteur.testing.TestService2.ostruct2 ret=obj.struct3;
    return MessageElementUtil.PackStructure("return",ret);
    }
    case "list_d1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_list_d1().ContinueWith(t => async_adapter.EndTask<List<double>>(t,async_ret => MessageElementUtil.PackListType<double>("return",async_ret)));
    return null;
    }
    List<double> ret=obj.list_d1;
    return MessageElementUtil.PackListType<double>("return",ret);
    }
    case "list_d3":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_list_d3().ContinueWith(t => async_adapter.EndTask<List<double[]>>(t,async_ret => MessageElementUtil.PackListType<double[]>("return",async_ret)));
    return null;
    }
    List<double[]> ret=obj.list_d3;
    return MessageElementUtil.PackListType<double[]>("return",ret);
    }
    case "list_d5":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_list_d5().ContinueWith(t => async_adapter.EndTask<List<MultiDimArray>>(t,async_ret => MessageElementUtil.PackListType<MultiDimArray>("return",async_ret)));
    return null;
    }
    List<MultiDimArray> ret=obj.list_d5;
    return MessageElementUtil.PackListType<MultiDimArray>("return",ret);
    }
    case "list_str1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_list_str1().ContinueWith(t => async_adapter.EndTask<List<string>>(t,async_ret => MessageElementUtil.PackListType<string>("return",async_ret)));
    return null;
    }
    List<string> ret=obj.list_str1;
    return MessageElementUtil.PackListType<string>("return",ret);
    }
    case "list_struct1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_list_struct1().ContinueWith(t => async_adapter.EndTask<List<teststruct2>>(t,async_ret => MessageElementUtil.PackListType<teststruct2>("return",async_ret)));
    return null;
    }
    List<teststruct2> ret=obj.list_struct1;
    return MessageElementUtil.PackListType<teststruct2>("return",ret);
    }
    case "var1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_var1().ContinueWith(t => async_adapter.EndTask<object>(t,async_ret => MessageElementUtil.PackVarType("return",async_ret)));
    return null;
    }
    object ret=obj.var1;
    return MessageElementUtil.PackVarType("return",ret);
    }
    case "var2":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_var2().ContinueWith(t => async_adapter.EndTask<Dictionary<int,object>>(t,async_ret => MessageElementUtil.PackMapType<int,object>("return",async_ret)));
    return null;
    }
    Dictionary<int,object> ret=obj.var2;
    return MessageElementUtil.PackMapType<int,object>("return",ret);
    }
    case "var_num":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_var_num().ContinueWith(t => async_adapter.EndTask<object>(t,async_ret => MessageElementUtil.PackVarType("return",async_ret)));
    return null;
    }
    object ret=obj.var_num;
    return MessageElementUtil.PackVarType("return",ret);
    }
    case "var_str":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_var_str().ContinueWith(t => async_adapter.EndTask<object>(t,async_ret => MessageElementUtil.PackVarType("return",async_ret)));
    return null;
    }
    object ret=obj.var_str;
    return MessageElementUtil.PackVarType("return",ret);
    }
    case "var_struct":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_var_struct().ContinueWith(t => async_adapter.EndTask<object>(t,async_ret => MessageElementUtil.PackVarType("return",async_ret)));
    return null;
    }
    object ret=obj.var_struct;
    return MessageElementUtil.PackVarType("return",ret);
    }
    case "var_vector":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_var_vector().ContinueWith(t => async_adapter.EndTask<object>(t,async_ret => MessageElementUtil.PackVarType("return",async_ret)));
    return null;
    }
    object ret=obj.var_vector;
    return MessageElementUtil.PackVarType("return",ret);
    }
    case "var_dictionary":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_var_dictionary().ContinueWith(t => async_adapter.EndTask<object>(t,async_ret => MessageElementUtil.PackVarType("return",async_ret)));
    return null;
    }
    object ret=obj.var_dictionary;
    return MessageElementUtil.PackVarType("return",ret);
    }
    case "var_list":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_var_list().ContinueWith(t => async_adapter.EndTask<object>(t,async_ret => MessageElementUtil.PackVarType("return",async_ret)));
    return null;
    }
    object ret=obj.var_list;
    return MessageElementUtil.PackVarType("return",ret);
    }
    case "var_multidimarray":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_var_multidimarray().ContinueWith(t => async_adapter.EndTask<object>(t,async_ret => MessageElementUtil.PackVarType("return",async_ret)));
    return null;
    }
    object ret=obj.var_multidimarray;
    return MessageElementUtil.PackVarType("return",ret);
    }
    case "errtest":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_errtest().ContinueWith(t => async_adapter.EndTask<double>(t,async_ret => MessageElementUtil.PackScalar<double>("return",async_ret)));
    return null;
    }
    double ret=obj.errtest;
    return MessageElementUtil.PackScalar<double>("return",ret);
    }
    case "nulltest":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_nulltest().ContinueWith(t => async_adapter.EndTask<teststruct1>(t,async_ret => MessageElementUtil.PackStructure("return",async_ret)));
    return null;
    }
    teststruct1 ret=obj.nulltest;
    return MessageElementUtil.PackStructure("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "d1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_d1((MessageElementUtil.UnpackScalar<double>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.d1=(MessageElementUtil.UnpackScalar<double>(m));
    return;
    }
    case "d2":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_d2(MessageElementUtil.UnpackArray<double>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.d2=MessageElementUtil.UnpackArray<double>(m);
    return;
    }
    case "d3":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_d3(DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackArray<double>(m), 16, false)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.d3=DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackArray<double>(m), 16, false);
    return;
    }
    case "d4":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_d4(DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackArray<double>(m), 16, true)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.d4=DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackArray<double>(m), 16, true);
    return;
    }
    case "d5":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_d5(MessageElementUtil.UnpackMultiDimArray(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.d5=MessageElementUtil.UnpackMultiDimArray(m);
    return;
    }
    case "d6":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_d6(DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMultiDimArray(m),9,new uint[] {3,3})).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.d6=DataTypeUtil.VerifyArrayLength(MessageElementUtil.UnpackMultiDimArray(m),9,new uint[] {3,3});
    return;
    }
    case "s1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_s1((MessageElementUtil.UnpackScalar<float>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.s1=(MessageElementUtil.UnpackScalar<float>(m));
    return;
    }
    case "s2":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_s2(MessageElementUtil.UnpackArray<float>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.s2=MessageElementUtil.UnpackArray<float>(m);
    return;
    }
    case "i8_1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_i8_1((MessageElementUtil.UnpackScalar<sbyte>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.i8_1=(MessageElementUtil.UnpackScalar<sbyte>(m));
    return;
    }
    case "i8_2":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_i8_2(MessageElementUtil.UnpackArray<sbyte>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.i8_2=MessageElementUtil.UnpackArray<sbyte>(m);
    return;
    }
    case "u8_1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_u8_1((MessageElementUtil.UnpackScalar<byte>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.u8_1=(MessageElementUtil.UnpackScalar<byte>(m));
    return;
    }
    case "u8_2":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_u8_2(MessageElementUtil.UnpackArray<byte>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.u8_2=MessageElementUtil.UnpackArray<byte>(m);
    return;
    }
    case "u8_3":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_u8_3(MessageElementUtil.UnpackMultiDimArray(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.u8_3=MessageElementUtil.UnpackMultiDimArray(m);
    return;
    }
    case "i16_1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_i16_1((MessageElementUtil.UnpackScalar<short>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.i16_1=(MessageElementUtil.UnpackScalar<short>(m));
    return;
    }
    case "i16_2":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_i16_2(MessageElementUtil.UnpackArray<short>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.i16_2=MessageElementUtil.UnpackArray<short>(m);
    return;
    }
    case "u16_1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_u16_1((MessageElementUtil.UnpackScalar<ushort>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.u16_1=(MessageElementUtil.UnpackScalar<ushort>(m));
    return;
    }
    case "u16_2":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_u16_2(MessageElementUtil.UnpackArray<ushort>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.u16_2=MessageElementUtil.UnpackArray<ushort>(m);
    return;
    }
    case "i32_1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_i32_1((MessageElementUtil.UnpackScalar<int>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.i32_1=(MessageElementUtil.UnpackScalar<int>(m));
    return;
    }
    case "i32_2":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_i32_2(MessageElementUtil.UnpackArray<int>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.i32_2=MessageElementUtil.UnpackArray<int>(m);
    return;
    }
    case "i32_huge":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_i32_huge(MessageElementUtil.UnpackArray<int>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.i32_huge=MessageElementUtil.UnpackArray<int>(m);
    return;
    }
    case "u32_1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_u32_1((MessageElementUtil.UnpackScalar<uint>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.u32_1=(MessageElementUtil.UnpackScalar<uint>(m));
    return;
    }
    case "u32_2":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_u32_2(MessageElementUtil.UnpackArray<uint>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.u32_2=MessageElementUtil.UnpackArray<uint>(m);
    return;
    }
    case "i64_1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_i64_1((MessageElementUtil.UnpackScalar<long>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.i64_1=(MessageElementUtil.UnpackScalar<long>(m));
    return;
    }
    case "i64_2":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_i64_2(MessageElementUtil.UnpackArray<long>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.i64_2=MessageElementUtil.UnpackArray<long>(m);
    return;
    }
    case "u64_1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_u64_1((MessageElementUtil.UnpackScalar<ulong>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.u64_1=(MessageElementUtil.UnpackScalar<ulong>(m));
    return;
    }
    case "u64_2":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_u64_2(MessageElementUtil.UnpackArray<ulong>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.u64_2=MessageElementUtil.UnpackArray<ulong>(m);
    return;
    }
    case "str1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_str1(MessageElementUtil.UnpackString(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.str1=MessageElementUtil.UnpackString(m);
    return;
    }
    case "struct1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_struct1(MessageElementUtil.UnpackStructure<teststruct1>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.struct1=MessageElementUtil.UnpackStructure<teststruct1>(m);
    return;
    }
    case "struct2":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_struct2(MessageElementUtil.UnpackStructure<teststruct2>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.struct2=MessageElementUtil.UnpackStructure<teststruct2>(m);
    return;
    }
    case "is_d1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_is_d1(MessageElementUtil.UnpackMap<int,double>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.is_d1=MessageElementUtil.UnpackMap<int,double>(m);
    return;
    }
    case "is_d2":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_is_d2(MessageElementUtil.UnpackMap<string,double>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.is_d2=MessageElementUtil.UnpackMap<string,double>(m);
    return;
    }
    case "is_d3":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_is_d3(MessageElementUtil.UnpackMap<int,double[]>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.is_d3=MessageElementUtil.UnpackMap<int,double[]>(m);
    return;
    }
    case "is_d4":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_is_d4(MessageElementUtil.UnpackMap<string,double[]>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.is_d4=MessageElementUtil.UnpackMap<string,double[]>(m);
    return;
    }
    case "is_d5":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_is_d5(MessageElementUtil.UnpackMap<int,MultiDimArray>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.is_d5=MessageElementUtil.UnpackMap<int,MultiDimArray>(m);
    return;
    }
    case "is_d6":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_is_d6(MessageElementUtil.UnpackMap<string,MultiDimArray>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.is_d6=MessageElementUtil.UnpackMap<string,MultiDimArray>(m);
    return;
    }
    case "is_str1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_is_str1(MessageElementUtil.UnpackMap<int,string>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.is_str1=MessageElementUtil.UnpackMap<int,string>(m);
    return;
    }
    case "is_str2":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_is_str2(MessageElementUtil.UnpackMap<string,string>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.is_str2=MessageElementUtil.UnpackMap<string,string>(m);
    return;
    }
    case "is_struct1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_is_struct1(MessageElementUtil.UnpackMap<int,teststruct2>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.is_struct1=MessageElementUtil.UnpackMap<int,teststruct2>(m);
    return;
    }
    case "is_struct2":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_is_struct2(MessageElementUtil.UnpackMap<string,teststruct2>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.is_struct2=MessageElementUtil.UnpackMap<string,teststruct2>(m);
    return;
    }
    case "struct3":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_struct3(MessageElementUtil.UnpackStructure<com.robotraconteur.testing.TestService2.ostruct2>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.struct3=MessageElementUtil.UnpackStructure<com.robotraconteur.testing.TestService2.ostruct2>(m);
    return;
    }
    case "list_d1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_list_d1(MessageElementUtil.UnpackList<double>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.list_d1=MessageElementUtil.UnpackList<double>(m);
    return;
    }
    case "list_d3":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_list_d3(MessageElementUtil.UnpackList<double[]>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.list_d3=MessageElementUtil.UnpackList<double[]>(m);
    return;
    }
    case "list_d5":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_list_d5(MessageElementUtil.UnpackList<MultiDimArray>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.list_d5=MessageElementUtil.UnpackList<MultiDimArray>(m);
    return;
    }
    case "list_str1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_list_str1(MessageElementUtil.UnpackList<string>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.list_str1=MessageElementUtil.UnpackList<string>(m);
    return;
    }
    case "list_struct1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_list_struct1(MessageElementUtil.UnpackList<teststruct2>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.list_struct1=MessageElementUtil.UnpackList<teststruct2>(m);
    return;
    }
    case "var1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_var1(MessageElementUtil.UnpackVarType(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.var1=MessageElementUtil.UnpackVarType(m);
    return;
    }
    case "var2":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_var2(MessageElementUtil.UnpackMap<int,object>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.var2=MessageElementUtil.UnpackMap<int,object>(m);
    return;
    }
    case "var_num":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_var_num(MessageElementUtil.UnpackVarType(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.var_num=MessageElementUtil.UnpackVarType(m);
    return;
    }
    case "var_str":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_var_str(MessageElementUtil.UnpackVarType(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.var_str=MessageElementUtil.UnpackVarType(m);
    return;
    }
    case "var_struct":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_var_struct(MessageElementUtil.UnpackVarType(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.var_struct=MessageElementUtil.UnpackVarType(m);
    return;
    }
    case "var_vector":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_var_vector(MessageElementUtil.UnpackVarType(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.var_vector=MessageElementUtil.UnpackVarType(m);
    return;
    }
    case "var_dictionary":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_var_dictionary(MessageElementUtil.UnpackVarType(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.var_dictionary=MessageElementUtil.UnpackVarType(m);
    return;
    }
    case "var_list":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_var_list(MessageElementUtil.UnpackVarType(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.var_list=MessageElementUtil.UnpackVarType(m);
    return;
    }
    case "var_multidimarray":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_var_multidimarray(MessageElementUtil.UnpackVarType(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.var_multidimarray=MessageElementUtil.UnpackVarType(m);
    return;
    }
    case "errtest":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_errtest((MessageElementUtil.UnpackScalar<double>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.errtest=(MessageElementUtil.UnpackScalar<double>(m));
    return;
    }
    case "nulltest":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_nulltest(MessageElementUtil.UnpackStructure<teststruct1>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.nulltest=MessageElementUtil.UnpackStructure<teststruct1>(m);
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "func1":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_func1().ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.func1();
    return new MessageElement("return",(int)0);
    }
    case "func2":
    {
    double d1=(MessageElementUtil.UnpackScalar<double>(vectorptr_messageelement_util.FindElement(rr_m,"d1")));
    double d2=(MessageElementUtil.UnpackScalar<double>(vectorptr_messageelement_util.FindElement(rr_m,"d2")));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_func2(d1, d2).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.func2(d1, d2);
    return new MessageElement("return",(int)0);
    }
    case "func3":
    {
    double d1=(MessageElementUtil.UnpackScalar<double>(vectorptr_messageelement_util.FindElement(rr_m,"d1")));
    double d2=(MessageElementUtil.UnpackScalar<double>(vectorptr_messageelement_util.FindElement(rr_m,"d2")));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_func3(d1, d2).ContinueWith(t => rr_async_adapter.EndTask<double>(t,async_ret => MessageElementUtil.PackScalar<double>("return",async_ret)));
    return null;
    }
    double rr_ret=this.obj.func3(d1, d2);
    return MessageElementUtil.PackScalar<double>("return",rr_ret);
    }
    case "meaning_of_life":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_meaning_of_life().ContinueWith(t => rr_async_adapter.EndTask<int>(t,async_ret => MessageElementUtil.PackScalar<int>("return",async_ret)));
    return null;
    }
    int rr_ret=this.obj.meaning_of_life();
    return MessageElementUtil.PackScalar<int>("return",rr_ret);
    }
    case "func_errtest":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_func_errtest().ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.func_errtest();
    return new MessageElement("return",(int)0);
    }
    case "func_errtest1":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_func_errtest1().ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.func_errtest1();
    return new MessageElement("return",(int)0);
    }
    case "func_errtest2":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_func_errtest2().ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.func_errtest2();
    return new MessageElement("return",(int)0);
    }
    case "func_errtest3":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_func_errtest3().ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.func_errtest3();
    return new MessageElement("return",(int)0);
    }
    case "o6_op":
    {
    int op=(MessageElementUtil.UnpackScalar<int>(vectorptr_messageelement_util.FindElement(rr_m,"op")));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_o6_op(op).ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.o6_op(op);
    return new MessageElement("return",(int)0);
    }
    case "pipe_check_error":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_pipe_check_error().ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.pipe_check_error();
    return new MessageElement("return",(int)0);
    }
    case "test_callbacks":
    {
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_test_callbacks().ContinueWith(t => rr_async_adapter.EndTask(t,new MessageElement("return",(int)0)));
    return null;
    }
    this.obj.test_callbacks();
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    case "o1": {
    return obj.get_o1();
    }
    case "o2": {
    return obj.get_o2(Int32.Parse(ind));
    }
    case "o3": {
    return obj.get_o3(Int32.Parse(ind));
    }
    case "o4": {
    return obj.get_o4(ind);
    }
    case "o5": {
    return obj.get_o5();
    }
    case "o6": {
    return obj.get_o6();
    }
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(testroot)rrobj1;
    obj.ev1+=rr_ev1;
    obj.ev2+=rr_ev2;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(testroot)rrobj1;
    obj.ev1-=rr_ev1;
    obj.ev2-=rr_ev2;
    }
    public void rr_ev1() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement()) {
    this.innerskel.WrappedDispatchEvent("ev1",rr_param);
    }
    }
    public void rr_ev2(double d1, teststruct2 s2) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement()) {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<double>("d1",d1));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackStructure("s2",s2));
    this.innerskel.WrappedDispatchEvent("ev2",rr_param);
    }
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    case "cb1": {
    return new Action( delegate() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=this.innerskel.WrappedCallbackCall("cb1",rr_endpoint,rr_param))
    {
    }
    }
    });
    }
    case "cb2": {
    return new Action<double, double>( delegate(double d1, double d2) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<double>("d1",d1));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<double>("d2",d2));
    using(MessageElement rr_me=this.innerskel.WrappedCallbackCall("cb2",rr_endpoint,rr_param))
    {
    }
    }
    });
    }
    case "cb3": {
    return new Func<double,double,double>( delegate(double d1, double d2) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<double>("d1",d1));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<double>("d2",d2));
    using(MessageElement rr_me=this.innerskel.WrappedCallbackCall("cb3",rr_endpoint,rr_param))
    {
    return (MessageElementUtil.UnpackScalar<double>(rr_me));
    }
    }
    });
    }
    case "cb_meaning_of_life": {
    return new Func<int>( delegate() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=this.innerskel.WrappedCallbackCall("cb_meaning_of_life",rr_endpoint,rr_param))
    {
    return (MessageElementUtil.UnpackScalar<int>(rr_me));
    }
    }
    });
    }
    case "cb_errtest": {
    return new Action( delegate() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=this.innerskel.WrappedCallbackCall("cb_errtest",rr_endpoint,rr_param))
    {
    }
    }
    });
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(testroot)rrobj1;
    obj.p1=new Pipe<double[]>(innerskel.GetPipe("p1"));
    obj.p2=new Pipe<teststruct2>(innerskel.GetPipe("p2"));
    obj.broadcastpipe=new Pipe<double>(innerskel.GetPipe("broadcastpipe"));
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(testroot)rrobj1;
    obj.cb1=new CallbackServer<Action>("cb1",this);
    obj.cb2=new CallbackServer<Action<double, double>>("cb2",this);
    obj.cb3=new CallbackServer<Func<double,double,double>>("cb3",this);
    obj.cb_meaning_of_life=new CallbackServer<Func<int>>("cb_meaning_of_life",this);
    obj.cb_errtest=new CallbackServer<Action>("cb_errtest",this);
    }
    public override void InitWireServers(object rrobj1) {
    obj=(testroot)rrobj1;
    obj.w1=new Wire<double[]>(innerskel.GetWire("w1"));
    obj.w2=new Wire<teststruct2>(innerskel.GetWire("w2"));
    obj.w3=new Wire<MultiDimArray>(innerskel.GetWire("w3"));
    obj.broadcastwire=new Wire<double>(innerskel.GetWire("broadcastwire"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    case "m1": {
    WrappedArrayMemoryDirectorNET<double> dir=new  WrappedArrayMemoryDirectorNET<double>(obj.m1);
    return dir;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    case "m2": {
    WrappedMultiDimArrayMemoryDirectorNET<double> dir=new  WrappedMultiDimArrayMemoryDirectorNET<double>(obj.m2);
    return dir;
    }
    case "m3": {
    WrappedMultiDimArrayMemoryDirectorNET<byte> dir=new  WrappedMultiDimArrayMemoryDirectorNET<byte>(obj.m3);
    return dir;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.testing.TestService1.testroot"; } }
}
public class sub1_skel : ServiceSkel {
    protected sub1 obj;
    protected async_sub1 async_obj;
    public sub1_skel(object o) : base(o)    {
    obj=(sub1)o;
    async_obj = o as async_sub1;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "d1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_d1().ContinueWith(t => async_adapter.EndTask<double[]>(t,async_ret => MessageElementUtil.PackArray<double>("return",async_ret)));
    return null;
    }
    double[] ret=obj.d1;
    return MessageElementUtil.PackArray<double>("return",ret);
    }
    case "d2":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_d2().ContinueWith(t => async_adapter.EndTask<MultiDimArray>(t,async_ret => MessageElementUtil.PackMultiDimArray("return",(MultiDimArray)async_ret)));
    return null;
    }
    MultiDimArray ret=obj.d2;
    return MessageElementUtil.PackMultiDimArray("return",(MultiDimArray)ret);
    }
    case "s_ind":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_s_ind().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.s_ind;
    return MessageElementUtil.PackString("return",ret);
    }
    case "i_ind":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_i_ind().ContinueWith(t => async_adapter.EndTask<int>(t,async_ret => MessageElementUtil.PackScalar<int>("return",async_ret)));
    return null;
    }
    int ret=obj.i_ind;
    return MessageElementUtil.PackScalar<int>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "d1":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_d1(MessageElementUtil.UnpackArray<double>(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.d1=MessageElementUtil.UnpackArray<double>(m);
    return;
    }
    case "d2":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_d2(MessageElementUtil.UnpackMultiDimArray(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.d2=MessageElementUtil.UnpackMultiDimArray(m);
    return;
    }
    case "s_ind":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_s_ind(MessageElementUtil.UnpackString(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.s_ind=MessageElementUtil.UnpackString(m);
    return;
    }
    case "i_ind":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_i_ind((MessageElementUtil.UnpackScalar<int>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.i_ind=(MessageElementUtil.UnpackScalar<int>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    case "o2_1": {
    return obj.get_o2_1();
    }
    case "o2_2": {
    return obj.get_o2_2(Int32.Parse(ind));
    }
    case "o2_3": {
    return obj.get_o2_3(ind);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(sub1)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(sub1)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(sub1)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(sub1)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(sub1)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.testing.TestService1.sub1"; } }
}
public class sub2_skel : ServiceSkel {
    protected sub2 obj;
    protected async_sub2 async_obj;
    public sub2_skel(object o) : base(o)    {
    obj=(sub2)o;
    async_obj = o as async_sub2;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "s_ind":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_s_ind().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.s_ind;
    return MessageElementUtil.PackString("return",ret);
    }
    case "i_ind":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_i_ind().ContinueWith(t => async_adapter.EndTask<int>(t,async_ret => MessageElementUtil.PackScalar<int>("return",async_ret)));
    return null;
    }
    int ret=obj.i_ind;
    return MessageElementUtil.PackScalar<int>("return",ret);
    }
    case "data":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_data().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.data;
    return MessageElementUtil.PackString("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "s_ind":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_s_ind(MessageElementUtil.UnpackString(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.s_ind=MessageElementUtil.UnpackString(m);
    return;
    }
    case "i_ind":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_i_ind((MessageElementUtil.UnpackScalar<int>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.i_ind=(MessageElementUtil.UnpackScalar<int>(m));
    return;
    }
    case "data":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_data(MessageElementUtil.UnpackString(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.data=MessageElementUtil.UnpackString(m);
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    case "o3_1": {
    return obj.get_o3_1(ind);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(sub2)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(sub2)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(sub2)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(sub2)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(sub2)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.testing.TestService1.sub2"; } }
}
public class sub3_skel : ServiceSkel {
    protected sub3 obj;
    protected async_sub3 async_obj;
    public sub3_skel(object o) : base(o)    {
    obj=(sub3)o;
    async_obj = o as async_sub3;
    }
    public override void ReleaseCastObject() { 
    obj=null;
    async_obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "ind":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_ind().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.ind;
    return MessageElementUtil.PackString("return",ret);
    }
    case "data2":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_data2().ContinueWith(t => async_adapter.EndTask<string>(t,async_ret => MessageElementUtil.PackString("return",async_ret)));
    return null;
    }
    string ret=obj.data2;
    return MessageElementUtil.PackString("return",ret);
    }
    case "data3":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_get_data3().ContinueWith(t => async_adapter.EndTask<double>(t,async_ret => MessageElementUtil.PackScalar<double>("return",async_ret)));
    return null;
    }
    double ret=obj.data3;
    return MessageElementUtil.PackScalar<double>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m, WrappedServiceSkelAsyncAdapter async_adapter) {
    switch (membername) {
    case "ind":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_ind(MessageElementUtil.UnpackString(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.ind=MessageElementUtil.UnpackString(m);
    return;
    }
    case "data2":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_data2(MessageElementUtil.UnpackString(m)).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.data2=MessageElementUtil.UnpackString(m);
    return;
    }
    case "data3":
    {
    if (async_obj!=null)    {
    async_adapter.MakeAsync();
    async_obj.async_set_data3((MessageElementUtil.UnpackScalar<double>(m))).ContinueWith(t => async_adapter.EndTask(t));
    return;
    }
    obj.data3=(MessageElementUtil.UnpackScalar<double>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m, WrappedServiceSkelAsyncAdapter rr_async_adapter) {
    switch (rr_membername) {
    case "add":
    {
    double d=(MessageElementUtil.UnpackScalar<double>(vectorptr_messageelement_util.FindElement(rr_m,"d")));
    if (async_obj!=null)    {
    rr_async_adapter.MakeAsync();
    async_obj.async_add(d).ContinueWith(t => rr_async_adapter.EndTask<double>(t,async_ret => MessageElementUtil.PackScalar<double>("return",async_ret)));
    return null;
    }
    double rr_ret=this.obj.add(d);
    return MessageElementUtil.PackScalar<double>("return",rr_ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(sub3)rrobj1;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(sub3)rrobj1;
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(sub3)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(sub3)rrobj1;
    }
    public override void InitWireServers(object rrobj1) {
    obj=(sub3)rrobj1;
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "com.robotraconteur.testing.TestService1.sub3"; } }
}
public class testroot_default_impl : testroot{
    protected Callback<Action> rrvar_cb1;
    protected Callback<Action<double, double>> rrvar_cb2;
    protected Callback<Func<double,double,double>> rrvar_cb3;
    protected Callback<Func<int>> rrvar_cb_meaning_of_life;
    protected Callback<Action> rrvar_cb_errtest;
    public virtual double d1 {get; set;} = default(double);
    public virtual double[] d2 {get; set;} = new double[0];
    public virtual double[] d3 {get; set;} = new double[16];
    public virtual double[] d4 {get; set;} = new double[0];
    public virtual MultiDimArray d5 {get; set;} = new MultiDimArray(new uint[] {1,0}, new double[0]);
    public virtual MultiDimArray d6 {get; set;} = new MultiDimArray(new uint[] {3,3}, new double[9]);
    public virtual float s1 {get; set;} = default(float);
    public virtual float[] s2 {get; set;} = new float[0];
    public virtual sbyte i8_1 {get; set;} = default(sbyte);
    public virtual sbyte[] i8_2 {get; set;} = new sbyte[0];
    public virtual byte u8_1 {get; set;} = default(byte);
    public virtual byte[] u8_2 {get; set;} = new byte[0];
    public virtual MultiDimArray u8_3 {get; set;} = new MultiDimArray(new uint[] {1,0}, new byte[0]);
    public virtual short i16_1 {get; set;} = default(short);
    public virtual short[] i16_2 {get; set;} = new short[0];
    public virtual ushort u16_1 {get; set;} = default(ushort);
    public virtual ushort[] u16_2 {get; set;} = new ushort[0];
    public virtual int i32_1 {get; set;} = default(int);
    public virtual int[] i32_2 {get; set;} = new int[0];
    public virtual int[] i32_huge {get; set;} = new int[0];
    public virtual uint u32_1 {get; set;} = default(uint);
    public virtual uint[] u32_2 {get; set;} = new uint[0];
    public virtual long i64_1 {get; set;} = default(long);
    public virtual long[] i64_2 {get; set;} = new long[0];
    public virtual ulong u64_1 {get; set;} = default(ulong);
    public virtual ulong[] u64_2 {get; set;} = new ulong[0];
    public virtual string str1 {get; set;} = "";
    public virtual teststruct1 struct1 {get; set;} = default(teststruct1);
    public virtual teststruct2 struct2 {get; set;} = default(teststruct2);
    public virtual Dictionary<int,double> is_d1 {get; set;} = default(Dictionary<int,double>);
    public virtual Dictionary<string,double> is_d2 {get; set;} = default(Dictionary<string,double>);
    public virtual Dictionary<int,double[]> is_d3 {get; set;} = default(Dictionary<int,double[]>);
    public virtual Dictionary<string,double[]> is_d4 {get; set;} = default(Dictionary<string,double[]>);
    public virtual Dictionary<int,MultiDimArray> is_d5 {get; set;} = default(Dictionary<int,MultiDimArray>);
    public virtual Dictionary<string,MultiDimArray> is_d6 {get; set;} = default(Dictionary<string,MultiDimArray>);
    public virtual Dictionary<int,string> is_str1 {get; set;} = default(Dictionary<int,string>);
    public virtual Dictionary<string,string> is_str2 {get; set;} = default(Dictionary<string,string>);
    public virtual Dictionary<int,teststruct2> is_struct1 {get; set;} = default(Dictionary<int,teststruct2>);
    public virtual Dictionary<string,teststruct2> is_struct2 {get; set;} = default(Dictionary<string,teststruct2>);
    public virtual com.robotraconteur.testing.TestService2.ostruct2 struct3 {get; set;} = default(com.robotraconteur.testing.TestService2.ostruct2);
    public virtual List<double> list_d1 {get; set;} = default(List<double>);
    public virtual List<double[]> list_d3 {get; set;} = default(List<double[]>);
    public virtual List<MultiDimArray> list_d5 {get; set;} = default(List<MultiDimArray>);
    public virtual List<string> list_str1 {get; set;} = default(List<string>);
    public virtual List<teststruct2> list_struct1 {get; set;} = default(List<teststruct2>);
    public virtual object var1 {get; set;} = default(object);
    public virtual Dictionary<int,object> var2 {get; set;} = default(Dictionary<int,object>);
    public virtual object var_num {get; set;} = default(object);
    public virtual object var_str {get; set;} = default(object);
    public virtual object var_struct {get; set;} = default(object);
    public virtual object var_vector {get; set;} = default(object);
    public virtual object var_dictionary {get; set;} = default(object);
    public virtual object var_list {get; set;} = default(object);
    public virtual object var_multidimarray {get; set;} = default(object);
    public virtual double errtest {get; set;} = default(double);
    public virtual teststruct1 nulltest {get; set;} = default(teststruct1);
    public virtual void func1() {
    throw new NotImplementedException();    }
    public virtual void func2(double d1, double d2) {
    throw new NotImplementedException();    }
    public virtual double func3(double d1, double d2) {
    throw new NotImplementedException();    }
    public virtual int meaning_of_life() {
    throw new NotImplementedException();    }
    public virtual void func_errtest() {
    throw new NotImplementedException();    }
    public virtual void func_errtest1() {
    throw new NotImplementedException();    }
    public virtual void func_errtest2() {
    throw new NotImplementedException();    }
    public virtual void func_errtest3() {
    throw new NotImplementedException();    }
    public virtual void o6_op(int op) {
    throw new NotImplementedException();    }
    public virtual void pipe_check_error() {
    throw new NotImplementedException();    }
    public virtual void test_callbacks() {
    throw new NotImplementedException();    }
    public virtual event Action ev1;
    protected virtual void rrfire_ev1() {
    ev1?.Invoke();
    }
    public virtual event Action<double, teststruct2> ev2;
    protected virtual void rrfire_ev2(double d1, teststruct2 s2) {
    ev2?.Invoke(d1, s2);
    }
    public virtual sub1 get_o1() {
    throw new NotImplementedException();
    }
    public virtual sub1 get_o2(int ind) {
    throw new NotImplementedException();
    }
    public virtual sub1 get_o3(int ind) {
    throw new NotImplementedException();
    }
    public virtual sub1 get_o4(string ind) {
    throw new NotImplementedException();
    }
    public virtual com.robotraconteur.testing.TestService2.subobj get_o5() {
    throw new NotImplementedException();
    }
    public virtual object get_o6() {
    throw new NotImplementedException();
    }
    public virtual Pipe<double[]> p1 {
    get { throw new NotImplementedException(); }
    set { throw new InvalidOperationException();}
    }
    public virtual Pipe<teststruct2> p2 {
    get { throw new NotImplementedException(); }
    set { throw new InvalidOperationException();}
    }
    public virtual Pipe<double> broadcastpipe {
    get { throw new NotImplementedException(); }
    set { throw new InvalidOperationException();}
    }
    public virtual Callback<Action> cb1 {
    get { return rrvar_cb1;  }
    set {
    if (rrvar_cb1!=null) throw new InvalidOperationException("Callback already set");
    rrvar_cb1= value;
    }
    }
    public virtual Callback<Action<double, double>> cb2 {
    get { return rrvar_cb2;  }
    set {
    if (rrvar_cb2!=null) throw new InvalidOperationException("Callback already set");
    rrvar_cb2= value;
    }
    }
    public virtual Callback<Func<double,double,double>> cb3 {
    get { return rrvar_cb3;  }
    set {
    if (rrvar_cb3!=null) throw new InvalidOperationException("Callback already set");
    rrvar_cb3= value;
    }
    }
    public virtual Callback<Func<int>> cb_meaning_of_life {
    get { return rrvar_cb_meaning_of_life;  }
    set {
    if (rrvar_cb_meaning_of_life!=null) throw new InvalidOperationException("Callback already set");
    rrvar_cb_meaning_of_life= value;
    }
    }
    public virtual Callback<Action> cb_errtest {
    get { return rrvar_cb_errtest;  }
    set {
    if (rrvar_cb_errtest!=null) throw new InvalidOperationException("Callback already set");
    rrvar_cb_errtest= value;
    }
    }
    public virtual Wire<double[]> w1 {
    get { throw new NotImplementedException(); }
    set { throw new NotImplementedException();}
    }
    public virtual Wire<teststruct2> w2 {
    get { throw new NotImplementedException(); }
    set { throw new NotImplementedException();}
    }
    public virtual Wire<MultiDimArray> w3 {
    get { throw new NotImplementedException(); }
    set { throw new NotImplementedException();}
    }
    public virtual Wire<double> broadcastwire {
    get { throw new NotImplementedException(); }
    set { throw new NotImplementedException();}
    }
    public virtual ArrayMemory<double> m1 { 
    get { throw new NotImplementedException(); }
    }
    public virtual MultiDimArrayMemory<double> m2 {
    get { throw new NotImplementedException(); }
    }
    public virtual MultiDimArrayMemory<byte> m3 {
    get { throw new NotImplementedException(); }
    }
}
public class sub1_default_impl : sub1{
    public virtual double[] d1 {get; set;} = new double[0];
    public virtual MultiDimArray d2 {get; set;} = new MultiDimArray(new uint[] {1,0}, new double[0]);
    public virtual string s_ind {get; set;} = "";
    public virtual int i_ind {get; set;} = default(int);
    public virtual sub2 get_o2_1() {
    throw new NotImplementedException();
    }
    public virtual sub2 get_o2_2(int ind) {
    throw new NotImplementedException();
    }
    public virtual sub2 get_o2_3(string ind) {
    throw new NotImplementedException();
    }
}
public class sub2_default_impl : sub2{
    public virtual string s_ind {get; set;} = "";
    public virtual int i_ind {get; set;} = default(int);
    public virtual string data {get; set;} = "";
    public virtual sub3 get_o3_1(string ind) {
    throw new NotImplementedException();
    }
}
public class sub3_default_impl : sub3{
    public virtual string ind {get; set;} = "";
    public virtual string data2 {get; set;} = "";
    public virtual double data3 {get; set;} = default(double);
    public virtual double add(double d) {
    throw new NotImplementedException();    }
}
public static class RRExtensions{
}
}
